%!PS-Adobe-2.0
%%Creator: dvips(k) 5.92b Copyright 2002 Radical Eye Software
%%Title: ver.dvi
%%Pages: 11
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: CMBX12 CMMIB10 CMR10 CMR9 CMSY9 CMBX9 CMR7 CMMI10
%%+ CMSY10 CMMI6 CMR6 CMMI9 CMR5 CMTI10 CMSY7 CMBX10 CMMI7 CMBX7 CMTI7
%%+ CMTI9 CMTT9
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -t letter -o ver.ps ver.dvi
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2006.08.18:1546
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro
%!
% PostScript prologue for pstricks.tex.
% Version 97 patch 3, 98/06/01
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
/pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
0 } ifelse setdash stroke } def
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
% DG/SR modification end
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
% def
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
pop pop } def
% DG/SR modification end
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { /mtrx CM def T rotate /h ED /w ED dup 0 eq { pop } { CLW mul
neg /d ED /a w h Atan def /h d a sin Div h add def /w d a cos Div w add
def } ifelse mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2
div /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro
%!PS-Adobe-2.0
%%Title: Dot Font for PSTricks
%%Creator: Timothy Van Zandt <tvz@Princeton.EDU>
%%Creation Date: May 7, 1993
%% Version 97 patch 1, 99/12/16
%% Modified by Etienne Riga <etienne.riga@skynet.be> - Dec. 16, 1999
%% to add /Diamond, /SolidDiamond and /BoldDiamond
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
% DG/SR modification end
  /Metrics 13 dict def
  Metrics begin
    /Bullet        1000   def
    /Circle        1000   def
    /BoldCircle    1000   def
    /SolidTriangle 1344   def
    /Triangle      1344   def
    /BoldTriangle  1344   def
    /SolidSquare    886   def
    /Square         886   def
    /BoldSquare     886   def
    /SolidPentagon 1093.2 def
    /Pentagon      1093.2 def
    /BoldPentagon  1093.2 def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /SolidDiamond  1008   def
    /Diamond       1008   def
    /BoldDiamond   1008   def
% DG/SR modification end
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle        { -550 -550 550 550 } def
    /BoldCircle    /Circle load def
    /Bullet        /Circle load def
    /Triangle      { -571.5 -330 571.5 660 } def
    /BoldTriangle  /Triangle load def
    /SolidTriangle /Triangle load def
    /Square        { -450 -450 450 450 } def
    /BoldSquare    /Square load def
    /SolidSquare   /Square load def
    /Pentagon      { -546.6 -465 546.6 574.7 } def
    /BoldPentagon  /Pentagon load def
    /SolidPentagon /Pentagon load def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /Diamond       { -428.5 -742.5 428.5 742.5 } def
    /BoldDiamond   /Diamond load def
    /SolidDiamond  /Diamond load def
% DG/SR modification end
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath    { 0 0 500 0 360 arc closepath } def
    /Bullet        { 500 500 Adjust CirclePath fill } def
    /Circle        { 500 500 Adjust CirclePath .9 .9 scale CirclePath
                     eofill } def
    /BoldCircle    { 500 500 Adjust CirclePath .8 .8 scale CirclePath
                     eofill } def
    /BoldCircle    { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath  { 0  660 moveto -571.5 -330 lineto 571.5 -330 lineto
                     closepath } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle      { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle  { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath    { -450 450 moveto 450 450 lineto 450 -450 lineto
                     -450 -450 lineto closepath } def
    /SolidSquare   { SquarePath fill } def
    /Square        { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare    { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath  {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon      { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon  { PentagonPath .78 .78 scale PentagonPath eofill } def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /DiamondPath   { 0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto
                     428.5 0 lineto closepath } def
    /SolidDiamond  { DiamondPath fill } def
    /Diamond       { DiamondPath .85 .85 scale DiamondPath eofill } def
    /BoldDiamond   { DiamondPath .7 .7 scale DiamondPath eofill } def
% DG/SR modification end
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop
%END pst-dots.pro

%%EndProcSet
%%BeginProcSet: pst-node.pro
%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For distribution, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: f7b6d320.enc
% Thomas Esser, Dec 2002. public domain
%
% Encoding for:
%     cmb10 cmbx10 cmbx12 cmbx5 cmbx6 cmbx7 cmbx8 cmbx9 cmbxsl10
%     cmdunh10 cmr10 cmr12 cmr17cmr6 cmr7 cmr8 cmr9 cmsl10 cmsl12 cmsl8
%     cmsl9 cmss10cmss12 cmss17 cmss8 cmss9 cmssbx10 cmssdc10 cmssi10
%     cmssi12 cmssi17 cmssi8cmssi9 cmssq8 cmssqi8 cmvtt10
%
/TeXf7b6d320Encoding [
/Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi /Omega
/ff /fi /fl /ffi /ffl /dotlessi /dotlessj /grave /acute /caron /breve
/macron /ring /cedilla /germandbls /ae /oe /oslash /AE /OE /Oslash
/suppress /exclam /quotedblright /numbersign /dollar /percent /ampersand
/quoteright /parenleft /parenright /asterisk /plus /comma /hyphen
/period /slash /zero /one /two /three /four /five /six /seven /eight
/nine /colon /semicolon /exclamdown /equal /questiondown /question /at
/A /B /C /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X
/Y /Z /bracketleft /quotedblleft /bracketright /circumflex /dotaccent
/quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s /t /u
/v /w /x /y /z /endash /emdash /hungarumlaut /tilde /dieresis /suppress
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /space
/Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi /.notdef
/.notdef /Omega /ff /fi /fl /ffi /ffl /dotlessi /dotlessj /grave /acute
/caron /breve /macron /ring /cedilla /germandbls /ae /oe /oslash /AE
/OE /Oslash /suppress /dieresis /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
] def

%%EndProcSet
%%BeginProcSet: aae443f0.enc
% Thomas Esser, Dec 2002. public domain
%
% Encoding for:
%     cmmi10 cmmi12 cmmi5 cmmi6 cmmi7 cmmi8 cmmi9 cmmib10
%
/TeXaae443f0Encoding [
/Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi /Omega
/alpha /beta /gamma /delta /epsilon1 /zeta /eta /theta /iota /kappa
/lambda /mu /nu /xi /pi /rho /sigma /tau /upsilon /phi /chi /psi
/omega /epsilon /theta1 /pi1 /rho1 /sigma1 /phi1 /arrowlefttophalf
/arrowleftbothalf /arrowrighttophalf /arrowrightbothalf /arrowhookleft
/arrowhookright /triangleright /triangleleft /zerooldstyle /oneoldstyle
/twooldstyle /threeoldstyle /fouroldstyle /fiveoldstyle /sixoldstyle
/sevenoldstyle /eightoldstyle /nineoldstyle /period /comma /less /slash
/greater /star /partialdiff /A /B /C /D /E /F /G /H /I /J /K /L /M /N
/O /P /Q /R /S /T /U /V /W /X /Y /Z /flat /natural /sharp /slurbelow
/slurabove /lscript /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p
/q /r /s /t /u /v /w /x /y /z /dotlessi /dotlessj /weierstrass /vector
/tie /psi /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/space /Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi
/.notdef /.notdef /Omega /alpha /beta /gamma /delta /epsilon1 /zeta /eta
/theta /iota /kappa /lambda /mu /nu /xi /pi /rho /sigma /tau /upsilon
/phi /chi /psi /tie /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef
] def

%%EndProcSet
%%BeginProcSet: bbad153f.enc
% Thomas Esser, Dec 2002. public domain
%
% Encoding for:
%     cmsy10 cmsy5 cmsy6 cmsy7 cmsy8 cmsy9
%
/TeXbbad153fEncoding [
/minus /periodcentered /multiply /asteriskmath /divide /diamondmath
/plusminus /minusplus /circleplus /circleminus /circlemultiply
/circledivide /circledot /circlecopyrt /openbullet /bullet
/equivasymptotic /equivalence /reflexsubset /reflexsuperset /lessequal
/greaterequal /precedesequal /followsequal /similar /approxequal
/propersubset /propersuperset /lessmuch /greatermuch /precedes /follows
/arrowleft /arrowright /arrowup /arrowdown /arrowboth /arrownortheast
/arrowsoutheast /similarequal /arrowdblleft /arrowdblright /arrowdblup
/arrowdbldown /arrowdblboth /arrownorthwest /arrowsouthwest /proportional
/prime /infinity /element /owner /triangle /triangleinv /negationslash
/mapsto /universal /existential /logicalnot /emptyset /Rfractur /Ifractur
/latticetop /perpendicular /aleph /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /union /intersection
/unionmulti /logicaland /logicalor /turnstileleft /turnstileright
/floorleft /floorright /ceilingleft /ceilingright /braceleft /braceright
/angbracketleft /angbracketright /bar /bardbl /arrowbothv /arrowdblbothv
/backslash /wreathproduct /radical /coproduct /nabla /integral
/unionsq /intersectionsq /subsetsqequal /supersetsqequal /section
/dagger /daggerdbl /paragraph /club /diamond /heart /spade /arrowleft
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/minus /periodcentered /multiply /asteriskmath /divide /diamondmath
/plusminus /minusplus /circleplus /circleminus /.notdef /.notdef
/circlemultiply /circledivide /circledot /circlecopyrt /openbullet
/bullet /equivasymptotic /equivalence /reflexsubset /reflexsuperset
/lessequal /greaterequal /precedesequal /followsequal /similar
/approxequal /propersubset /propersuperset /lessmuch /greatermuch
/precedes /follows /arrowleft /spade /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
] def

%%EndProcSet
%%BeginProcSet: 0ef0afca.enc
% Thomas Esser, Dec 2002. public domain
%
% Encoding for:
%     cmr5
%
/TeX0ef0afcaEncoding [
/Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi /Omega
/arrowup /arrowdown /quotesingle /exclamdown /questiondown /dotlessi
/dotlessj /grave /acute /caron /breve /macron /ring /cedilla /germandbls
/ae /oe /oslash /AE /OE /Oslash /suppress /exclam /quotedblright
/numbersign /dollar /percent /ampersand /quoteright /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /quotedblleft
/bracketright /circumflex /dotaccent /quoteleft /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /endash /emdash
/hungarumlaut /tilde /dieresis /suppress /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /Gamma /Delta /Theta /Lambda
/Xi /Pi /Sigma /Upsilon /Phi /Psi /.notdef /.notdef /Omega /arrowup
/arrowdown /quotesingle /exclamdown /questiondown /dotlessi /dotlessj
/grave /acute /caron /breve /macron /ring /cedilla /germandbls /ae /oe
/oslash /AE /OE /Oslash /suppress /dieresis /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
] def

%%EndProcSet
%%BeginProcSet: 74afc74c.enc
% Thomas Esser, Dec 2002. public domain
%
% Encoding for:
%     cmbxti10 cmff10 cmfi10 cmfib8 cmti10 cmti12 cmti7 cmti8cmti9 cmu10
%
/TeX74afc74cEncoding [
/Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi /Omega
/ff /fi /fl /ffi /ffl /dotlessi /dotlessj /grave /acute /caron /breve
/macron /ring /cedilla /germandbls /ae /oe /oslash /AE /OE /Oslash
/suppress /exclam /quotedblright /numbersign /sterling /percent
/ampersand /quoteright /parenleft /parenright /asterisk /plus /comma
/hyphen /period /slash /zero /one /two /three /four /five /six /seven
/eight /nine /colon /semicolon /exclamdown /equal /questiondown /question
/at /A /B /C /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W
/X /Y /Z /bracketleft /quotedblleft /bracketright /circumflex /dotaccent
/quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s /t /u
/v /w /x /y /z /endash /emdash /hungarumlaut /tilde /dieresis /suppress
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /space
/Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi /.notdef
/.notdef /Omega /ff /fi /fl /ffi /ffl /dotlessi /dotlessj /grave /acute
/caron /breve /macron /ring /cedilla /germandbls /ae /oe /oslash /AE
/OE /Oslash /suppress /dieresis /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
] def

%%EndProcSet
%%BeginProcSet: 09fbbfac.enc
% Thomas Esser, Dec 2002. public domain
%
% Encoding for:
%     cmsltt10 cmtt10 cmtt12 cmtt8 cmtt9
/TeX09fbbfacEncoding [
/Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi
/Omega /arrowup /arrowdown /quotesingle /exclamdown /questiondown
/dotlessi /dotlessj /grave /acute /caron /breve /macron /ring /cedilla
/germandbls /ae /oe /oslash /AE /OE /Oslash /visiblespace /exclam
/quotedbl /numbersign /dollar /percent /ampersand /quoteright /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon /less
/equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K /L /M /N
/O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash /bracketright
/asciicircum /underscore /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l
/m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar /braceright
/asciitilde /dieresis /visiblespace /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /space /Gamma /Delta /Theta /Lambda /Xi /Pi
/Sigma /Upsilon /Phi /Psi /.notdef /.notdef /Omega /arrowup /arrowdown
/quotesingle /exclamdown /questiondown /dotlessi /dotlessj /grave /acute
/caron /breve /macron /ring /cedilla /germandbls /ae /oe /oslash /AE
/OE /Oslash /visiblespace /dieresis /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginFont: CMTT9
%!PS-AdobeFont-1.1: CMTT9 1.0
%%CreationDate: 1991 Aug 20 16:46:24
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMTT9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch true def
end readonly def
/FontName /CMTT9 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-6 -233 542 698}readonly def
/UniqueID 5000831 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5F00F963068B8232429ED8B7CF6A3D879A2D1E
2931CE5F5D18C658602059F07BE66E6EFC9239D7AB2FB8A4CBD41675B8ECF279
650C29E53B14AC0E392A664848C1844B1CECBB2D5CFB72D0916B675C9A9A1E35
F12696A6F628473C604A95376468E06E295AD6F76CEB939D94113532050B9D5A
D2F41A9EFB9424D986612313B89EFE9C8A71313340B248F6853B1EDBF02B7F9E
F447220FE131D7D54CFB8AA1281DBAEA73E665BACB1F164552CC0CEDB63BD4B1
4A9AE8AC6FA02242DBE8DA46B64B6BFC11762F0784F216FC8B9120D688D1705A
438B14F5E5DEAF2A98408B3B64620DE3732A4DAE6D08D5D97E34C75DAE19EABD
BA0796165C1151BCBFB1DF8D29A63A8300DBDB9E3323CB82D0337598B83F4F2B
A97CF5196D4D1CEC1EDB8966E548C0D9C194C932319610FB43EA1B86322FE641
AB48770FF13BD475A7267E142388563D1A400419C585B22A9886074687BEDF74
D905BE8EE440BA2ABF28EAB673399B7F129B9729DD5564C681954621903B84BB
CAF89AC5ADB2932472DF29ADA2BDBDB4D05F65F28F5F4C529613D61858E0074A
082A852710A62A147C966F2B85B51B0BE85F11D2057C66FDD61F6C5755367980
9F4DE680601D4DA41B46F8D2148450000413C27AA39B586B74B977B25F0FD3C0
4BA1EBFAFDBEC531EA1210365091671CE3C86A6D4BC591C37DCC02570042575A
9D24252D6E01A8603753934D7EA5CAC1BE4E5AD2BA047DE8F3983B23A8A1511F
B08D373B69E5076CE4300137B8805EBCC0AAB89BBB312A77835795E3C069322D
42C893A30AD739E2BDD299679B158F7493764F2321E3965141B5ED1C6F4765ED
F46D391A646B30C90002B1C461AEE79E5F094CACCA656CEA3DB921CC5205F328
A2C69F817061D6C60B121EEE844CA5008F23DF0AB900EDD4D2E9614E81A58610
FA4375E019A016873AEDBDFB38CA4C65255F082257AD91E4B7A974B5BEA379A4
7A3F969199D499F41F6C8EBA256FE179ABE826167907E1AD51A8D25CC2FFCA10
C2889C976A1BAEE16422A21A754B07FFD0C0B25CAB0FDBAE0CF73CA2749765E4
DFAE838323A26314D2F17BC7A6476BC6443C73C658D4414326338D60EEF75F0E
1047A3F2731E2E71F731D67F93D521761ABA9D19196E6E30192BCA6892F228B9
6E1B62715D9A3560B2463BDB7C36A6AFAFC2EB8751A0D57FFE8580C5866DCEEE
A1787B4E5D0981CB80A9E1BC0C5B1150EC5B9B6B071277D393D5B7CB6545CEB5
F2BA536B8D4DE88E5A4B1580332F35A3200DA832C2916D4DE5FA5216F33D76B9
BF185FDBBDD4CC854B84B33C8772B6D26848A1CC3DD824EB513BF07F26AAB1F2
2BA484C3B1F7576341F5897C690593A854E91893332B80F5EC973E02E82DCA98
0726B7DF3B21696E112417CD3526A710AAC117EC29AA42D10CFC10016FE2A4C7
131A73875D8B98387DB8480805251EF8EFB9DE00DBA7E40310DF9CBCFCA1ADF8
CA192DE1D0B0BAE82633822570DE7C94D5F462D27B11226D9C53107C3A820ED4
9465747B26239F7473D07DA18FC8FFF4F2BC41B3DCB02049BCB2CC252C0175AC
6FAA2F8E34AF47A3C60C0965BA91C5C320AAC38573FE02B533D07FA6D7315CCC
B528E0C34922DC8704D795EAC2EE887FBF791A686212E9D191C528D7B69DC660
0DE9DA387B9F57350D9208AE84B076166C7B7153C1727E9BC5E8E5BA54058F58
BCC138344628C33863DDB6ACBF9EE2B2A84BAE2C78AFBFC2CF9BFF094AB93A43
43B7F4DBB9E78114C92EDFD4E1098408503A61F5599D31C7F24B54DFA6DA78FB
F7BA18D9C57C2529CE569C216246D8C1BE4009E375D2B0706690E01469B2CA57
C715047306DBC453C9FB969905AC60FCF84BB541397C06D66F84283D3FA4299C
3FDB13B6592F2898DF0E4A7D04C88B3189A4F7B1FA1F85DE31318654FA206B3C
FFC59D7169E589902C13FE738656EBA918932B101D807965FB9F56398ECDE20A
BF66E133E15E5FE6A2913BDCC6631B1034D08EA7E9EF7650635D4CAB07E11945
92552E7AD5A346EE6EDE8A25994BCB30825CA4063079D750B4C51070095D5EF5
3502CC830601C0CB7A3FC28DFED09A6E3DAB2233A2B800340976133CBF7DFCAA
41913AC1C31D88A8D4429B954A732C42971DBB3CA52688D37D3F63753CCC3AE3
810C37FFD4241060C760DAA1F9184F32A1192EAEC19E81D3446607DBFF5AC57E
1E476B477372A06A7146B8530F2293A53C45F2A3C5C578CB43D40229E5ADBB81
B462E7022139E928839D166D5B59B5B10C2C8C37F32835744F0EF8E011A68CAA
5AE04EB932F58A8367D37A772AFDD276EB2722F4A7B1FA010403AEAB0EFD7BC0
22B8FC8CBC09CCC40470CCDADCB15DE5C4A0D503A88E4830DF1EFBE6913CE8A0
B7474E4B0B466DBA3AF8E7CA58763160FFDF4EF2902425D3760721CE0621B90C
4DA52E0A70B8871D3EA3B83CF1A5CA4AA48CC28308010B3D33C9FE01AE6E77C8
B6D412E35A75CDFE9AF801381C4B0B8E3C01D0EC982C64C20ACAB7B6E9408DCE
D7FC8F966529594A571380C485BDE03B62B49F930F642084E212BF3C1ABEEF80
FC6CE5461BA49A32B892187CE48EBE2AC77BE58E9087B04197D62D1889941965
6486EC0B4EE231E55AB479FA95EAC99907C03CC2AAE4C78CCBA1EF99A9EDC899
774EE4D0B945FA94B313E583A8A3401F5AC52C3A430286A915361209FBBA78D3
4F3FEBF3ABE311CCE2D0AAE456F5F14A431A6428ABB367B2E345CBA29481D2E5
ECF5659F3BD9EE64644D796AD2A268F6D8396486A9047D22F643157BBDBD4470
111F88E589CA9D5C0BCE33C6AEB27C6C71E4FF8AA580B94BB3A271149C1DB89C
A300229FC84319716C2F277A9C2FE12EDA5ED92CF3E63B42ABE29ACB1FEE94F4
C2F83E118F76CC6290287B4282C4628F11F216BEB1493215493B7AFE7EB349CC
BEB9DCFB14B7E4CEB7D07D4E09CD5E009C71F6EF5630ECC3D5DCCF81C47AA200
F4F0698D66F2B9652CAE11121F7CCBD3B7AF291E909A5D896C7204BEBB19AE22
A91D9EA012DBD11DA78F74AF5C7654EDD43636EC2A40EDD70754DB9A3CAE063F
688DEFB71FE3902D96E2397EF1A55C8DD264063D7AA465440A30E9FCE51C0BF7
1EBC1C046FC2E5B58792B77BE2B9C14A47D1931FDA289BACCEDEDEB9FAC246DC
27DA9B9AE417DE271B297D4D8BC680134442099D9BDE7AC9F213C1A5068C921E
84E1C0E3D14B779646CD6D7DCCB6589EDFEE0B2049D6E1E7B1E91270C0139E6F
A2E67FFF738D80885FCBBF1388FBD445CFC3A5949B60CE0577C128600CB00E27
100EC484FB561B156B4D684BED7202B93BD0AD6FB29236822B4FC5A3E2499E0F
E30C37C46F2C8ECCC00AA97B69C383C646530860247307E3F4B2CBA2ACB4AC61
C425D81BC5806A0109FE9304B866DF48E5995DF4512A501520746D5732EC30C3
D9DF38C2A2602FB936BFD7812554ACC2F193659E470A7FE6EE76C770F09BAFA9
FCA6F7713364C4E568A84C85741035524A219E27169E0C0E665F5DBC1AFA2E53
E940B3797ED83BB5ABD61CAA16E30D50E78605B90E7771E87B9CC746DE63DA21
A4A230F69329B4D2E4C3D58329E89080325CC68B9DDEF2E5BDDE236A837BFC33
B53D71E0A94B3E8D099E8618125DF133E993A3CBC8DD61CA9A17F6644F6AB469
28EF6443AE4471AEFE9B88BDBF5C18E70A253371DFF815E8FD16BA3E31A46600
96EACC004F178815534ACAC4581E692AE35558C15192A83FD0B66DDF4F7A1D83
B1D4B8FAD337F344175A35BFA610C430AFC0B64071C7C2FFE6F0422AF0F1EEB6
A4B5B86782DA60F9FB426352A3B40E4BE614EB72971FFEC5ABEADA042F5B5005
E8BABE837A5FF5958CC96EBC1C46F022DDBA87E1FCB943DDE44A14D8751F48F7
A60E8E01C6E6D91439FC27569E285E85D9D7A09A317DA9F422FAFDB56FB9AB0C
0A234FCCAB013C87FF7B1095C70D6D1073EF9208CE36A7FFB14C1138472EC3A6
ECB90E91613D00ECE3CB1CF5CC503930CF1D459A758D3E2375D7AF7AF33ADC5F
8235630A4BAD6B01EC20A376B656130F946722BD0CC5EF1B514B46B29976535C
F2366964C8F1A2CB2EA7FA41E9BF5FC12FE34E8F448F9DC4311FCADCB4CA3593
1A45668BD067C6417310E5E3637A8C9486E06F1BAC45338E1E991CA9772C5EE6
15B45D048C2B11D5A8C9E43B2FA1D88A5711AA7FBB6AA052F2DFE2FE8E4DD553
51F1F758D071A875AB49CEC40C5103DFF82F10EEA008AF65905C1F0DD17B264B
A3E1A31EACBFB44ED61F3260D8C3220FA171D14CFA605C1224266F146FDFBE9D
BA4E6E6C14B10BD6B47FEAB7F4971DEEBB42407AB8484D9EBFCA70A4520E94E5
B8A32EFF5B617B1F36C1E472F72A7BA07DB0D0C92AA485BF9FEB40899CB3486D
D38A8A30E7768D1FB6F7EBE2C33DFBAF6AF405FD39206BC60C4B975116B936A6
A00F7222510AACC4A868BF73F0DCB410E8A6CBF5EB58F16B8C1B2E2A0B478F50
6EA70B15B3A3968BBF499008C2E0CDB0655D47517870AF2DD39CAFDD4FE2E4F0
C01818F675FEDD4D84F7924A56172F19C026E80AC0EFCCADDB0C3B421ACC3CD3
2310F6EA6F8F32666D46716A908A634EB9F3F6F8D73211F1929C177A3319B435
ED5129FD4E38EE20222065D6F2D72720B00E2480642836AD5863BE33F81C94CE
29CED2596789C66CE081BC0CC49B9F5BF290F67F9880B2D3A4A1C1AF9B42D405
47555F1D678198951BB9D3C6536CC9FA065352E8EC05835AB382F86C3955BB19
1D3820D68B70DD9D205738003C53DDB4130E2ADD0ED7CC151D4C2720D6FBECEC
9EF6E28B93DFCBB337F9CB732B9D1B4548236470BD69BBF6E2912A8054F1C4E6
D97206CEA6C8A5CFEA3EFF36EBC8B4C656C7838F7A7DC4DD97528CF044E01E8D
DB3920663E9F5945171C6A91A95E42B1661E8AA5F062D70E57B14314CBF149BC
DE51496BFCB97841CA8D8B0CBE2B054D911E4FDDFCD2716154D7756B60231460
E6897CADE8AA7DA962B3FD7A6C2B4733FF001AC3BD6C54DE6F49B4BD8862BAAE
28D9349EE90880620DF7670F3017004921D8452467472FE4B7D982EAF8FFDCA1
65B6D2AFE39082705FD6430F8E35C71829FA999FBB3180BB4B4183B5446FD869
D98E24844F3770BAA6C3D03488C2D59007DAF02CF012575DFC5538EA711B1640
329635A7096C1241F97F2730B1F10863EB9CB29B00D26354AFE7284F46B7AF28
E13805A75E8ECC1563FD7AC138F53D43DE7290402814554F7A255EE73E54CBCD
F877E51AE08484DCCE5D8A313AB98EC3BE8777852C4D891A45F2911249E77B60
DE783AA57D07A92984F71DA42CE29643937016AEB33E0B039C057C8025C74BD0
422129E29B4E805ABF933004096DFE8F9B4B9D38D11A8A99BA373C20BF932E6B
810B11C40094C6EB9CB6AE6A0E72352C35CB2B05B5285D986CA2381AE2C3CC33
EB1E4849FB9D4E636DBEB540A4503678A92DA3A4B774C84ED25FE784EC95661A
56F7FE72499FFE1D00CA9ED7F969DDD5860A4F95811461FF5B0B879B44B3643F
1FBE3587D98CA77A1677EF9E0C623875B0BA5FA03CBE03A08BD9224CE2576D26
95EFAF9CD9C1563395A0A69FFF00CD323A75AA49B4F40EE1BC8FE009EAD0A7DD
3C92EDD06BA6F18D1DED3BF36A1C0F5E7C49BB637FA52414C4EF8F1F86BB3B73
C97842D23F069A9BD5CE5852DA55080727AA47C7F6E32ADEFD0E9F83B127858D
259A910B09EDACAF1198437C1C1A33063E74AF4EF921A27EC297642A9ACF573D
034A728EBAD9D82AF13DCC68756C1351C75CE6C208B210AE219FE8CD1FC20240
6EE2F7940A7CB381F500CDE7D618A216134062B0B8093BD5DC03BC943EFB72EF
7067456544C6FA3CB8AE852B727EE0DE2CD1F5B0920B2DC46B3D44204B6C3D3F
6D844106D35CA591A00E99D9ED2F8552E341B959CACFCC279EBCC73320B3C3D7
D116035B1E6BC039069441D00362467397C75AA4E92EBFC52E809642E634E96F
BD0F45B56114ABCF7DCC738480FBEC80A5991552A32D873F9747B7FA98E48A0B
BE26C4C08B52F8D44BE9DF4F7E5393446B435B4D2E647DF706F1C8A151D6B359
DFCF7C83AC9ED4AC1CE9FF8B33BC97669AA0798E5B1DD4F76C5E00007980BF88
668C0226BE23D57FA97B9C4B5800B8D9F4B390B97DE69FBB43931750A8639931
EEA3A8EE66D413F8FB35BA43D3496E09E24FE8A613DDA4ADB83E7F48DF5AEB7A
5B21568A9D603BEA57BCAED859940C560A3E181D607E4C96AE68D149FDF78D9E
58C123197EA7E8615A4BEAE5CCADAEEAFFA00D71B7B309CBA8C217F053C25214
CE210D6EC95B14E360D199BCAEED0DFC475038182162C6C294F3945E8A6F8265
070A8C1948FE6DE3A3CFBE9297F3327803D8D30C39720F47DEE2C998F9F7E15E
0BC4A112EC57AB3E85D39DFBA9C281BD2738C128FE6C84D8A85867D7779AAD57
F8F17D5EEF6BB947AB39FC8C74291678C12E8D96677825C4D66B28A95FE579F5
C53C708F04F0A78C5A50312330353ABF7EB1322141DCC35BC0D980ECE4D9E1E7
6313B538F5FC7C483653F6ABBC2309AE5079956CEC75B713E6387AD107712CCD
D79EC4A84C87D14EC31F53D74046A0D0F8A8C763EE663FD795BC4308C2C930E9
4634F000BB140F51D403A11A70D03D0D75EB92A0EFC2855D956C1785B15DEA21
485C93DA995D8D9C82750F340C58B67B62198F732D1CF616DAFB72149A508A6B
602FB89F3FF452979E1D263B6F787D7573AFC9864339D75E43D3743BF0FC0E56
8EDE1170E2B38A43D0D90BD1848224532AEFCB01B318691BD148A586BE47C52E
A972B785CBDC8919AFC0FFFEBCF3A0DBB5C6EC8E109C156D15568A26AE436D1F
63F0AD757437D974F2943CEE6793D75E8C20D2103ACBEA383BE113EFEA604DFE
C085145301F6C98B50122BB137062E259CED50FEC54C156DEAA70DC7947B7C0D
053861E86BA60FADCC2CBE2409A649C80083CB35579A16CFC1511720E65ACEDC
82C074C3FCA1B50DEE50C40071299B197422CD2976A130A86C9B8E9D7C4BE43A
56569C7F828E54A12B4DE5F5AD5A73ABA6358C12643AEF5ABA0D803B28546EDA
678FFE364C2FCC95207063A258C8EF5C31E89127DCAD9A13BD2B8B32ED22C1A2
D25303FEEADC8418DC87A52D9DCE1DE5F12E2BE28054F8D5AABA4E0C111951A7
451DBA7DA9D0686D25F584952A46A4676C8F1BD3A500C075493AFA96D2C0E0E2
37BC21C05AFFFD664E6CD00E02C044B4C3E17CA5D71A3B416E23A2481293E7BA
B6485C2E2BBFA0C7F6177A29A449158E7B5DCD4B3E8E2D45815169B9C06344F7
28193448F7565F5FDF936D6F865B844ABC9595C51F531A946D8D36CA3B86CF74
F5A2332DFF659C745F37B8C7EDB6B81FA8A49C85AF41AFA583BE34F4AD1204AD
8DCBF96069C3413B568483982D51DD747A9AA04209823DE30D7F1D655F6A2954
F6A256140A23F328244716AD7C3B0FBF5397544FA48B2FFE7BA9AC515385BAAD
8E13C69526247EA8775325847B1ACBF309B663DAE163C8E4D7F6A0C9625DBE99
49744E676B874300705D48597C91D09A69B89F9CA7F2892809F4738221F17D14
3CEADD15DE89E8D31AA4F1446070602ED4F87213C336BF4099D185BF9D359B99
F68202920E9C29216B3952884A3A88E250E8FD0A7885D20A5E3F9D10615B56B0
AD20790276EF7FD74C28B92DAD29DE55E04D41C461BF37E7E0814092FD5AEE64
5CCAA5E0C312C1C9B069CCF38A1A37ABEAC68526C7CDBEDCC6D54A9968155FFC
921194CD6AE9F55B6AF025DE04A8A8A4227C78E5BFC5DEFC0B8A077A493B3DE3
59A857721F4725D38C00A02331C7A5770ED6564C6E9A22393BCB6B2D63EB72BB
9A7687C6A3379F96B7F17F5CCFF2E55B7BB5E74A615B58EC8C0651A7376E10A5
B7FC5DC3CC3AC42897882D686A6370C0925FFAE8A78A7E70A2E32F9CD384329E
D4CF12140BB12BB1E7886A0BF8D1C1ADEA33B11C180EA9CC3A348EED39609F56
F8EDE87ADE4E77D92882FEE1C2933D9C62CD56E7E9EE7216967D7251C1BE9DB0
0494CD71BDB4BF03C136791626D9BFCCE09AE52ADF8A330CE494221B15EF97CA
A0876D7DBC4CBEFDFE0AA520747A4AC28EAE76F0EAAD2C408E25615E90ADAB76
ED896459A6D832E0F479DF98B2DC3C50A9B3C2CC1C9334C4CC3DA2B1D6F60CCC
76DDE7F480D0D8E77764DE0348388DE08C89BC216992E0C83B259A45C7B26718
E8B93031E9ABBE259ADBD3369555BBFEA26150A207348D35DCC3D1A12B3D06BB
B4FED69534D006EC05E32929F3D0A6735F13FACC5915665B1DBCF18EEE8EC8FB
46DEA8790E655F7309EDE402E5E0CBA8D0684EF881768B3BF301D3E918624371
AE2D623D029BBBE6FCB31A70F7FB3C9DB0F1AB60AD41E3B4C7AC43EFB79C18B3
708265606A625DD147C022EF23BB51E6D428CD52575ECCC9CF155EB2A49880E0
CD41C45B5ECF4B359D939EB331DF7B1BBCB088F6B9D7801AEAEE5E84373AD8FF
3A235582FF9EF877C77B7FF4F57FC76F719232D0045F2DEC3537C6A6FE068AE9
5647DA9C79E08707E897BCF05AC8B52764704DD9AA1269D77290909507FB3B15
818537874E4109AC78FF83BAB30BC121EB6DC1676530DE3890709BC8D4DFFB03
7D274034A7226FC0865DB4EF08ADC380238B0C37AE1880ABCDDC10DD13739E05
FC626A3BB92A804F4C1FD91DB169365D20F3EA3F2EE8F01DE23B44EB033DFBCC
42819AC8B1BC49FEA4C678FD2E194A5F2812505780856802CE0ABAE51A34E746
AD2D671B438B28486E2407824FE8A85D55A7B2771DE1210BA7225761C8FC9123
F2E60B3C212944CB095022DB62FB6E7872EFD4E54B966A74CAB0DA7AEF22A84D
1B78074CA8103F4C3FF279B1FC28B837A5748144296743CAB2827E8195A129BC
E9561D4A026A2324D21A7A7199E2D27097DE53FB409E714C4E8E7930272E269E
6833F4C9EC7EDCFB922071CC842550A7A115B473EBBF005A4AA0BE3ECE469450
50B244C07417E1FB42FA3A595E0E3E13589E9BD2646AE1CF389C9817E108A119
361B72FA8EBCE02843BC2D3093D3205570ACEAA16C8655C123C64FF20918053B
3A78720DF6D2BABC5BCFA345D2C5C5FD2E72332C17F9D5F1A7B581F755769D8A
857EC5388D0A2A6FDCE3F66BF5F2600EBC4749C97D357C04A499D1F0A7FC3997
0BC0EBB22D01CF4C34719C5FCD971FA2AB5EE6CC7683900D99D59B68DFA291F0
CDAFC48EE7D11BA70336D08D91B9609099EABDF2BE03E709C53AE77CA0CD3193
9E0752683A212E296B118F759AE3E296495EACF0441419EF8257AB8DC148620B
CC6855C24E1E582DC056ABED7ADDBB2C27BA66C53B9BE5B656EBE7AC3351A4A8
BB92DB1C54F61411B2B045FFA8579ED316FB8142B25A4DEBA751D04E37295A1B
5C6BC155DF170DC33573E676D999D07BE55A27DCA9193CDECA1F22B8FDE05E8D
FC7CD868D2AEBEA83BE1EDD9704A0E0CE3AAF39F4422CA6CB0E44797FB02488B
C76438B3AE760288D08310E6BCAAA10146999B0C91A5BEE7F59FEA253D1500B5
2E2A0F98A4DAF7A52E55B5C25A77092683195F377CCA1E6C7814786F0DE99DE0
D4FC85B88F4B2112624236DFD51A1C06473951D9BD0B0A871D8CAF860532F8E2
9CC22FBE3BFF5E01EDBD6CA0ACA65E7E4CA847A914344A70F97B92B81D8545A7
4966FC78089E229C72BB763A60EB980A7BCFBB45C11EDA717C3C883D85588F34
72D798262A0C8F3DBA7D2B11F7DCC7F4A39300D3B28FAE961F92C8ED60E2698A
D3579B41923695B9C5242D1D3B4A6D8B0BF41E6E59C3BBDEAC5434756FD3F284
B867A6F912636450CF31EC26BE0786C1F117577A3375839508D2D06E97144799
44D8B2930A0E59BB3BDCCB81C3FBE28D5E4586030CD26529EC6D4E3A5DD6E2E0
99D111AD764A04941B09F5861E794F129CA32203A3DD0CCB51BB55FEAA522EA9
4BC008BAB89C220D168B16B38A7AA2E951E6DAEBB04D5C2A4E467C92052FD4E3
0BE024FA2603DBF8BC9858AD3CBB42D1C7F22CBB81353DC783C4D01EA1B50BED
2E341EF4B5DA663BCECBF510377A3CE3BBC1874B3E3BBD616406EEC4350DAA5E
8F73D5C2BBDD856ECFA2AD2B048139F52920C3A04319F1832E2A424DC5F53C7C
EF340BE431D7EC5D00282E816C231362212CA2BFDB10A2CA18C33C4396450B0C
DB140D5BF6580C5C34BAB042EBF52096E7C3C7FE1F9561CB86A95DB784BAE807
8BF84458C92C90A31DD59DEBE43E17386D7A53F6B19C3C3F0CF83A55CC7A723F
54D330E71141E0387CCDAF110994029841D8B7E82B01DF44E8664D9E63FF39C5
7E20870F7ED7F20ABD048F7160EC8086E4302DB3DDF4E8CAD62F88B624A10D47
E3E0CC9B3BC756E876D1A93557004FCCD66588F6A14DDD0E55808F0F114C585F
FC8B74BE7812C05BA4604863287E9122B1FBA427FFA1C9A6C1B49263BDAEEC49
FB77D0CB7AB384935DCE75A03F5CCF1CAC3A03D4F57DE2812C2A5FFA3DC694BB
130015719835701BF22F0010D94E0AFB9BE0FD379AE8990B6746C0D3BFA5A0E1
9883ACBC52C4B4C553E6910B4E7F6AEF31C10977AA99A46FE5D372F196A1A0D4
4DEBB2334A5547FEA58C916AE202D25131149975215C645D41E1835CF28063A8
D0460988DA15DE79D55CE2B6727EA61004F35A44CDD8D88206EABB23FDE1D977
A0D8135E49C551F72D638157E066EB0B58FCA79136A52A49C7769EC8AB09758E
35813DE97511C3AD988D9CA57291336D208154AF5DD2B2135A6CC3449A03468E
4724BA3A3E9E150706AF4008E6FD4CE1C86455478408644F06A92D885287CF08
264410C8337F3C91C8C4B575C403A5565A5E788437CC54838E3819F2AAB1CBD8
0A0C0126CD6928A5BD6D89036B4867B4B5B5AE1FA6016074346D2DF1087256C4
390E908816D377A22EDB4FEBCD67B7A05061EB9B374276BA21CBC5C9ED8123FC
F139328A3AD1D1F5C093509C7767798524B50C4CE77910B18B53237F306D22CE
7268ADBEF995EC6F464A72D7CF75D33C96159FEA0436AB0718FD9E58F9303ABB
43BD17CFEF1221D43D0AED4AC55E609141C0671DC12D5414AFD0BCF902D6DA64
4ECCBCAA68EE84CD1CE5A335716CC5FE7E60A3283933EB6CD0D317832BF7F0C8
230DF8A4E248C430A7F84330162AAA72EF3C916363DBD21F7496094346EA0F1A
18F0F0F589EB0E808BAA5DE26760431884D3D2025CB2BA0982D8332EBA37D61B
308A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMTI9
%!PS-AdobeFont-1.1: CMTI9 1.0
%%CreationDate: 1991 Aug 18 21:08:07
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMTI9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMTI9 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-35 -250 1148 750}readonly def
/UniqueID 5000827 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D5993DFC0930297866E1CD0A319B6B1FD958
9E3948FFB3DF7BFF10C9BDA4EFE5F68A8CB1526990D1357AE6D2F7C2D2EF8496
4E47B39E6712EB8908A3265E5FAB40567E866C244814449F1E993AAB422C3F1D
DFA8C7118584F2E5197FD4BFA3A8AE9E953C6CD4672C0FF51E41C3A919749C1A
F06650DF4C5E17492164BDBCDF22609A74BFA7F69960A64B9F949FFC2A807458
8579366C4F41BDE1FDFBCC4845FA19BBB6963D65EE8532549274BAEBDFF24FA6
03235D1BE37C06B1938AF369DA75BF38DDBC87A1FF445EAA16E1895ABE9506B9
211955753E447865D33CEF007391D2666A046277A30A49804FFCED3FEA5EB2C3
E52EE14A9F75241EA10C91974CDA6236EB840FD44D6DDE4D9B3266C3B99BD38B
D835BCA8CB819C073480FB972CC028D218F6A1D344CE1B63F4FBF2C826F412E1
6E0B05A26125865A14FD7B7030B478BB8BC6BC395335C3BA940E1C348267F4F9
0AF97BBEE253511940F1048E175D3569F7D05A28851B6F50765FEB6C9654FEDC
1BF52F535DB5BB90C1BD5D2EBF75E0AEBE82B20507F3C28A03746781018D4EB2
298E4F2C27ACF73FA73EBE43F014BB575AAD516C0407B29E1653375135ECB74D
C91372F06FA8EF37C31AF3FA48AE65318EAA6C34830A5377ABB2DFA5DA53A574
433484BA1466709A4B186761655C8E482833B697673E847C691079E7F1DCB8D6
1AD91101D757B83E2090337D525AEECB028FB3C9F6A6E6AD2F322CFDC5A833E6
1CE4EDBF41FD34FD61630581D222F854A76C2EA9FD72796A7C9CC1F6C2FCCD16
E95CA05826A4ECFADA6A5FB83C41A7131E52BA6585DD6DD78515D8F7327DFC6F
9404F89460E755BE4695763E45A65E0B846CE203900431743CA9EC74CA3925E9
B598160472DAEAF80CC843A3F71357679FCCBD86385C2E72BEB17F8723E148A5
3623EFF29AD9E810F3F20F71F88C0C54DE0E0EBA6F5C343165E6C4132FF743C8
A7C97F4D2804F7FA72FE48D8A97134D2E81E2C34E9F8C0B547D5FBF44FD0FB52
D2222E7667799308A4EED1AAC37B96EE67E5434CAFDD940A406766CD4E7A4D96
0423625B139751A4B0D5FCD7115E05C96CA6B0E2238E7BA24A518E7746AFCC52
FAE2D67799A4F02B219F3B4462954475A9CFFF1B40BE2EDE081609765F68844C
C04AB2CB5AE82B793B55FD88CEA042EE89A55139946D244417CF14453B4A5EE6
3BB1C8A50EF826CF979A2783F6B409CAA6102DE19B90DAE3E1ACF25325B10995
AB758E0466A2DD6702A486011064AEFBEFEBAED197F303BAD307369A9752752F
925B58ED3087488A61768C4618D6CE5CF526B5756A66D7F1E69F617F4C697864
F8379BBB1C8993E355933CFC5677D04ECF962E030F79E67A49D599B787CFF8EA
81CFE93DF0467F71D60CA6E496336FB339A8C2F332A73BCE31F9E77F6AF126F1
F3231AAA2BB46E38041F46833683AAE403C53B5DF918FFC071CA15337E3EC98E
665910734E822E20A49F37319BBB0AB77D66006B7093A66E32505F35D581FBBC
DDA27798FB34394BEBC6F1FDCFA1DE9CA8D2893D6D1237571FEDCC232C2C298A
E28CD9B5FF293D07FE6C1E8F8C4C2AF630AD5FDF58B78D3876B7E23F3DABDF52
FDF395AA6C94DABE37C05C42C7A6542545D51EC7B6914C2A1801C84971DBB823
6ECD44784C75FA6E3DC0F9351658FCC9F76BA4CA8566DCA9049CBEF1E7987A6B
63EEEA3305605E0A44D6EBF1B021EE299F3AE1CBE6698F3F19B847CD8F904875
DC8544EC23E321E66EB8507580F54F2FA0AE97A9A59CCB321A40C3C773F86142
F66EAB4BEFE8723A95DA92A26FCB958C565229F86638EE5CEAD5B08E5BD3660E
3D71FD23445FEC568A1FE16FE7BD9CCC14F9CC791683F94FF7F0BAE8615B8755
B8D2B0756CC03E35845F0C5628F37D94ACCA7AFB52D9A27037C60D6E5E606DAA
60AC2953344AA8A80CD2812385B81F0E3EB5FD676AF021BE73E1160FA36B0068
733E1CFF08588E7C621D867E3833EB01C6A9255FF171AF37BF83560C62CE5B92
28B71A3F81CDD236F950D4184BC7038C31F582556E72C9865ADD4E82A7E0C699
C27C7972D845917D1BBDB3EA7C15849DADAD8DE2ED3F85FF8A9499BB4AFCFA4A
D2AFE01DFF13DDADC9C6C57F1ABB06399568A812AC5960C0631A6608010AE360
D53FE53729EB2B919F9636F6EDC5A528A141D66993CA9C13DCFA6B200A73B134
A865A2D85F39F692C963A093F4FE39C6508152325AD000C825E4D0C647D0FBBD
9EA83F587B2C3F18FDAB5EDB48E20D095B1D4E6E7E50FBBC80B6BC6DA1ED810B
2ECCF0781D66C24424F3DBCD0F22722EE74C6048F38009EBBFAE88E8C24CDD07
908ADD9EEB60C681E4BDA2F49C59F3348235C5A8E4D6B9754AD4A04AA5253CC8
DF8B624089EDB8D1EE7705E4256EA4ECAEB37BF158DE777900CE18137594CA6E
CAC26B237449E49777860BF60B24EF0FBF8EFFB7CC271164FC16A4000B21D193
333302DBFECBE3D091714DAF1DA8FB87885EB70EF028EFA9B6BF56426397F77A
EBE6E175335D7A7351B29E3F9F43E1BFE628B43C5F59FC0DB19CA81F2C641E06
174627A27E49565379B0659DC6C61F9CC020A82C4EC56D6379233C4EA586069C
0A04D332C3178756032CE80289F290E2CC66B4F44170486E6CDD70E36A226D8E
552243C4587125A6EC088508E35FED77CB6409EA61EBF0A5C89CDFABC2C32B8C
318A95A1B622EEEFDB5E3506D18513C5B349A63F7C14202310D2066F69EAB688
A21003E9A3CD35DB5FA52F9DA0D3441597508338EAF2F29D38EDA55322D5DAF1
C5C7BB6477CFB9722BE4E2960E3B08E7A0B5FF57D5E84C73E21E2E9D302DE2D8
C2F568373FE58349BEA69B84C9F20B8A98B65EC2B87250A2C7FCA51439DBE49B
B46AAC8BC64D28A0B2D308372AE2431B5C7C90FC7561EF3C961C8A00CA0608D9
F6A922EDF12F74F93888413748E8C1219406CE6514A231F7F02D897E24D28367
2B6253C3717E15EE57941F52DCB22F866E05E743690516C3ABBDE60C8C622B99
9E0C7AA8EC06A7F086143152EF3FE4B3A381401219312E58B5CC7EF3EB9F521E
1C91C1C972274852AB866818FE254236D0026385DE3685E9F5A4FDA122E02728
75F4773EED0EFBE9B5EC73A28291820465789AA71247EF1BF931D63D90483AB4
E620425CD7385B028B011782D90885C394EB04313F165BF3D2B4F5AF10E91FC0
A772326ED36230CC863F7EADF4B192B8FD5A4E98BD7A46F94082FB44567A915E
BAF406E1CEF95C124982CD4B2752ED84E886A02BB6871B2B13F9F526E89A322C
A0D9813A4DEAAE08131DA2588E4B4FD5E96EDA743C973C41B482A2722BDC99B2
22F97459FDEDEB63D8A8D6B6641DD1EC0804892930C44B7A76146B410BA1FB7B
8C0F592D504B512ACD9D21A8445C3F899F0453914143ED660EF6A5B9768D69BF
D45617AF8D9E4797C57A9BC5B6E44AAAEF913F00B03E4D902B8AAC91D65D3F64
1C5FBE8518E7E5B3CDE2974E6D747AF2156E59D099454FDE20C5AB23424E34B4
CE61A39ABD10481EC06E7D6D8BD08FE4A42E8509F1602CF2AF814A2CF0E593A0
1913A034CAD7B0BCD02344247F6528E7510CB8FEF878A4F9883A7B1DF442D99F
4ED6864A808D7057182D0A76F8C0C9976B3B4E6D6CC870BCF6F1C5096B193D25
2562149F38A0A6ADC714721F0553DBC73B80B240793B87EF46B5356DA559E470
F5B28F3A4FCD54DF2CF759EDDEFCEB5D14D6674EA5A10268491DDEA7D941F983
88CC158256077B1C2311898CBA203817FB5F2979A09A54986A23361C4C4B804F
61C5FF1E500403F6A0F3441E712721A69F3516C88C24D23E8D4E764DFB6BB0AD
0ACCEFE47D9E2F4B7BE3BD05476A502BCD626B48C097EEC90706858509D32BEA
0B2D4511629AEEEF4D8C6EC5344233160CA781A1C903D5C8E3A9B7F9ED515F10
8E38DE2ADFD57B13B5451135A1745AF9A76962E19E7239F7AB0E31D4C3285D25
A0FDF3F9C3816C30CEE1BAF1B838597972C8A3AB7E9E29D150AACBE596373BCD
0624900B85A2325262ADE3A5CD09EDADD8566B63668D5B55A441B86EBAAF8B31
CD8E26D4750A7BBEBF066308942D32BCEC7504B43823A748F1643D279E89F289
57A9D347C4B2638E8391AAE42638EF7CAC8E17C6A73EF3FA4B74DDA977833355
AAA50874D1FACC69AE837653DA349D681588A6B072150E28FD6CA049521B4816
3EF86B148FEE27A6FF08D9E400285E50C51C31168DE902A14F8D1F97520742CF
6CEA66C1AD9A6A27956BC47AF823078430BA4EBFC5DBD86D842191EBD0624B53
A6AA23951D1076BE15AA89F68F4957A854F641EB48E3E5FE556239DD3F60934C
F0CCDC0D1EE78CFFF59B638B7033F07BBF71410477325E1C2494A6B0B9D952FD
C622773F454677685888639996B8AFE2BFE36D72E7BA9724A77CEAE4A6BD995A
0EFCE1A6D3DEF4D70FEBEB3F4F53A93703951B130D84A822A4728859BA268899
C443D5C25699D18BB5A18C15A3B9BDF07BD657B8120894F0D909317EC510E298
0A867A15769DBC7B1EF15B39AB0FF122AF3EDC4BFD3D766AB5F993DA240796E2
8CCF230669B425766DFCC4006636B45451D42FCE71CED503B85BE80407B0D764
047FA37CA25495DE5E40B8D67D3ED3BB9E8018E6A22DA62303526D0FF6DAADE3
CAEF2ABD66924C698EDC6CE2035EBE486748C4B1FAF9A55AA3C2A31B3AF771C3
E4154E1D085E48D7E9567837FEFD0AD42215F7A63A50AD4623EC1C1334B54303
B8DE1CE01D7F2674F7EF2EAA24158ABA7431D77E255BF4AD5E218E64DDCE583E
BCF7D338934BF3B3CD3CAC99B74C1483C9703C8558FF4665E7034E432F2FC6B6
2BE54EE77F2F99518978F7A5942A6A9A4F7D6145BA59601DA282A0235184CBA2
9DB603068D15E23677C899216E0562E56A21F5B791AE40C5359A56A2893204BB
A3271CB6EB60631741A5921CF1E103060DE0531D15BE8AC71B4F53368ADA0B72
7FF58A4F819DF805DBC519CFCC9D1E66B46807DE54C5E7964F9A5A9A0CC22534
821AB193D68DECFB5AC7DE0F7189EC875551F5B400F94308A10814FAE4278041
EA7EF73F4F09A0F0F7C2C74061484E752CFA7A17296E9A09DD141333B2994398
A5EEA950456D331520CD1A7EDCCCFA136ACF0D8A56CD9525F3D830C1117BDED6
C58AF1C355B7403A3F6684885F40FC2FDE7BC617814B1D5D133161E30174DACC
D3DF7164F248A5ABACECBDF6369B854A946E7E0963EAB9217761E2B7E7790227
F9816BC5505F35FCEFCA8B40A80B442F6C662F6AADE798B2095C7510B3E5599A
D0E43D96686AD1F9F6B33EBFFBFFBC444D5EA97F5893943C8C3C47BED7C28D02
1E341E87A38A0530250F48CEA860E07A52283612BD6AA64D5348406B3B25FC25
D4821DCE96479A8851B356219E79307331822D96757DD4C27499EEC4A48E9FCD
7D62106875916E93E33711986A83CB5D927E5E1BABC54DD6E25493FCB9FE1987
00253CBA1DDBD2DDED73B32F0C1CD5C54ED3A8EC3E964570F1FFCC936D143450
2685B56F16207902D554345D7F7371F2FB8C268F9CD33679C79C9646B671C6FD
CE91B2C507EC0C5D3441C45A496466ACF9AAA138C8C4D4BA6B3F2A66796F3427
AFD4F498C2B4829DC7BAEA2B3C593DAE52EB9384FF21D24ED675F884E8592E9D
5BF1DD4D54BD5151B2FB795C9B98C526E0FBE5B87D3C5CC6AEA26CCED88F1B46
7D751CE2A059A8692F5F4EF61FDB48F1BCEC53B874957E3D6AC5BAAADE08AD16
7A22630DE897EF26C160C631FE49084C99CF05B53696C2AFF4D97C9AAB053991
63321798790A300B3ED90BE52CE7ABBE5B46A183E61EC68A33635DB48794E3C8
6CD067582E212C2439EED612EB4816754026BEE282CF2DD33FC01D4D715A4FD5
04E0117C20CC2FF1817492043D07E0ACF0AB8AB0872BACC2788724E709562C89
7999F5687F3EE93379D7407C818B593880020EF853E957AEA3FF3C6077AFE2C9
3702526BC3D57F11B2C62BCA188C2266670B931211268DCD5E3102E8B927FF80
96FC05E23C5CA7DBC25B6AAA4ED312676ED588028361F4AC16B4599AC92D7D64
1EAC8CEE8872EC12938816CCA982356AA8EFCC594F053CCE64C8C71EC7594E78
E728626F901B22309287389A323BA074A70D3F8689A028A2C1F6FF4CD726680F
6C3ED7164D77C4FBAA0D1DC25B0DCC427658CF809F5BEDA8732C498F47731914
290D6CF334614B234833C1F3432072A14760E4AEE53791D142DD5C36EF88776C
A83D8DA1C1776FCDA1A34B6CC5043CBDFF0A69D71D460E590B18C08475679A91
7D03A75BF45B624F00BFD89446E30E7A2E7AD1C43CDC3E94F4B6EAC0937E86AE
4643A4EAFD68A5E2D21977C22A4A3ABE6A7B8C43BF7A2B6FEBDA8AB5B1AA76FC
395B588AF212C746829F6DEFBF147B2FDCBC1918B0D2C1AA0B36B14FA4BFBD2C
CA2E8DEA43278F1031F85D75AA72BF4068196DB04A17FF1A17E3D2355C02F7B1
BF7F268F32BB8852BEA6C6E67F9DE3D07756FDF2A6DCD4D11421FABDFCEAA4EA
4968D3029D195567B71A2D5761E8A8F86A46A8ACE599314BB1B9651910DE6316
D4860B4C60428F99D9B488204A9AC055AADA3D134984617C6B32BBFA9DAF4EAF
10B7394CBC8F638867FC5148B0141269743015C7E6FF3350BDB1AD47487B98D2
7F459313899CC6944870AC807248FCEF71D39ACD2EE794FEAFDC8E7C9FACE83F
CF429AAC0C7777154392870A8B47F0E2642D942762C09BDFBFE64B066E4DFA7E
18DC1FF53DAB563D9B6CE2AC9702ADD96D657C8198A9025777E4B4466554AE54
521A2C151C9E1791F99997AB76E65E4183EF77FE59A328DF3C2ABF393AB5AEF6
727F7C092DEB25FE03661AFA356CBDF000AC34BDF94B7EC21441282D1A2AD170
C71302B1CB4CCEFA6DFDAFFB1994BBC03C521EBFE9318C9CBF1DDE5980A8C5D1
E1DAF57029ACBDE76357D91CFBDDD936F3365B4FEE916F52CFB6A007F2950761
6EB621F3F03FDECB63002BC99622CCC2FCF180E3AF10BA0EFCFE222387309C2A
9EBF96B76C579C9E55261AA7C62477647FBCFCE95A47306F8000AB4E079CD1DE
E0B397F8F779F53E8526E5D289A58144F36FB33803818C14B17825E47832B9A2
AB94C6EFF6DF53CAE1C7F2D8193B7ABF86620FBA676EA6F6BBC4BE4972CDF874
00147F7BEF87C126A415392A0EC657C1E5047858F33DB0B9F0F621855FB28759
7BAA28AEF1EDA92A972733DF4CDF9D4039E3465162FBF7A9FCC736D84FC42B8E
FF9933D54D298DE4C532F3AFA98E8288AA7DFC5C14F388EB21E29CB44F177B07
24D8CF31F01C0B5FC5C05D759CFD2376D7BCE7143803852F28386D9751E510B2
893E95D3BA890FB00B8B2F3452546473A41E88EC8AD6E203295E5ECD755D7F3A
F5EB35C396A7E844E0882F0DFD2D6A248C6CBBF6152746808ABB8ECFC69CD702
6ADE1A8827AF02D8164790F88280127DE270EE800985BA02890C97E57AA54C96
8D37B0B77AD25DB9C57047AB8A0C46F71D08DB9EF3C6BAFCB0CCF134BF174489
820CC9EEFBA91080EB8B6971D433AB22056A83DA756D9EE3CAA2CA7DCECE2729
FD3E48B22C39F1D401FB9ED9A5733A2A66EE12971FA8FF80F00F5BFDEB97B184
8ED439DC0446A58F489A551A2985D316FEFA2AECCF5CDD62B86F29D0562FAFDA
8BAE7F913D01048DE2AC3AC90C7E9F200343C6EE868D060F4C13043109F9E940
B0529D3B6C6FDC5B76319F3F549C86574EAB75DA79240A470A5D5F9A4DC8529F
03E140B140EB74F469FD3B8DCD3142A95C6F7C35BEE40C312EDA12009EF4E128
BBECE6B5647A9A9D282C74422CE59611359551D522251E2862C9C9247B8031CE
F5EAD0BCA7DEBF858FE01481177F19737AF1E85E98A98FC3F4D0CD4C8E81E551
72531CB95E00D557DB18A8EDDAE441340D0EC803AD31DE0DC88052EEBB148B4D
16A85B3EB7E7EB554C1BC98AAF1A655842301AC2FDA559C482E24368F8C2F724
6A55284155C1B9A3AA83F897F9538367447F69C110209CB156FD8FA5248DCBF6
F35352AFCBCFD607884DF29EDA132BA3D74A7AC59CB5DFECCD9109E1CF75E156
6EA7F89A351987B6B9F6841B2A659F27A730C86C62C7053C926C9C211A4420E3
C34D8824A5FEA9BF2607862767282AEBFE144384311A29D2593684523AE54652
C034B16E930005E2C26AF7A30FF9063029536DCB03D65960BF659CAA71C6A2A0
11CA94E3115B2FD2C4E179D09F1B363AA426F5F3DAE901667D86F143EF545C82
DCB0362E2DA34A28716A15BF457B2D179BADE61BD76451392922DB7D2ABA9888
A2DF8B9BCC2564151737833A2612DF1BCAEE4E6C0ED1BB58E5CDBE27DE6A1DD4
8EE0A095152BF1BD4E36C90853DBF10EB03C271183D4226E32C7684D3AFDDBE6
255BE1A3100582DF6DB4DFF15D1DCB19BF3722AB524DFB3FF48E13EDB5C94976
8CFCD665F4E781D595751ECA00281E4A1525EBB1520C0411C8F3EE22F25FDD9D
C9A2C5E5CBF4A66EDBA3F3FAD7360550B6DE176B0B6778A12D923F5EA18E8BE9
4194F26329A62244A049D3A5F099F74E5F0896C34F02A15F65CC387A63DACD23
031CB46AB6E7BE9067EB1E22E7C2DBEBA5C42860F717C0FB9C7238DBC7CE9286
D68D1F033DF62764D233A7A57BA800AAB15D36A6989740D56627FA121D9CF88F
A17C92B3526B691D88CB0420C6E3D0967DD78F03F939AF779A3D9455F3B0F374
3FAD55FB97DF104E251471D4E1C30C6B322D55BDCD6E44392F2A7714AE4EF037
FCC5C640AF2FFC00A683A101596865383438AF778831FD30212D0CC124D4F1F8
F000ACBFB06FE6C0E2073699D30A8D67087334DC8A53BDD597BF7D7858E95896
5CB0B1942109ED44897917E5911DF24122D870E7742818A8B8D2A301D5BFAD68
2F8A4419FE9F43445D84C394F3618C64A609F4FEF099A60E4AB38A31C90742AC
EDB7C504B3662EB47A1AB2CEB478DAD89CE95669B995C52AE281076AC8B8137B
E5F766179410BA51B6B7E8FD53A411B18695AADD5ED3B96828A30A3B9147CF37
322CB743148880416BBC9E6ED9BB310B83AA426F4E9159B653BD6C73F0C703A4
1C527224A982A6E2777E46B335D683E257AE7B8B52ED2DFF5150EA33653D8953
5AD2BF9C8EDC37D8BAE09B0B7E6C31A9640ED88D0A812E703EBA05695E30C6A2
6BCFA39D773D4DED88DD4A2C34A3A4D9EE1A412E7AC65488C0FC3D950999FAE3
9233E2527478DF0EC7494D422167F58FA071743A65847D4ED007C9B2C2449DBB
1E5F3AC9C6AF3807F071A807D6D97B39657A08E7040DE82D369CDDD060067CDF
0ACCA0D1D235470FC391868B35DA9B1D22FBC3541F447DF611B4A92B46E7E19E
FBCC3DD694B76BEAF3ED1B81E266B3B6265D08C3BA367318A986B193DD149A27
8C2D7F47B869686E050641E53C03868AC56A1B46926EC08A9DBF66DC6B593BA6
17A7B42470264FD8D0F17A9FE2EA710F648C54101639FCA0F6B49FA8DC988816
0EB242E019EA19D92A25C0CF8AC899B415BF95C9123F1CBDBDF3071D55C8B041
B0C7BE7837F6DFD0936898972A6CEEA8E36AD230BEE059FC62EEF63F08CADAF4
55C216B6C7DE75025A41F5850CA4EDD3373AA243868CF2252B186A4AC678B23B
B08CC99520C87A9692EB2994649709D7DE4550FA42C7A7EBCD0F79C6FC556D9E
1F0BD7305A5554EB49605526AF60EC9526F5CB407FC0F24FD4F7A045FD92F086
64903A00CA4EC1D18BF3605D692D3584D5C75333B3FA3CB7A5BE2620E76EC21C
D19840AABE6CCEA1D6AB113AC4A40C8377F68A581D7B93F7CBB9D3C022B77D8D
BAAA3921B188A3760EC2278AF4A35F8D9945FEC87DBF28E0C09DE034C382E265
223D00478ACB78C88AF5D54E8D2E66DC93993B235FE92656181065CC51E4D0CB
0A0A33B8A4FF8F18AEFC6B161F2EC2E6BBADE26D2C21AA9BCB20BB063A38DC6E
2A8085C6B98D0C72AB804B1ED28A133AE786FE9E82E8E751DF0E01B080F626EC
3A845299192A7171F63AEDF8548386703BC06769BF9CFD079677F5A3B9C0E621
13FE3416FCCFFBDD13A69A162D0438DCDDCC462F448C2CC71FC456FA3661526B
6D2C7E3FA215AD57C8060DAD256DD25FB329C82C9C33D582FCC7C9F3454D1969
6149C0CE3A7B4583980F7EEB9962F9D8E023236EA0ED0F02658AE0F993AAC1B3
725840977780549BEA5EFC1E21C28F5C87AE37600EC92E24630F7DD7997BB49B
AC139C5345964211E624FAB2F42F7A2581BDF50EA73D483D5AA9CE4846C1D4EA
7935C756C2FD54C691649685835D8F96248913D5969B8FE4C3A477CFB7D90025
057A23D55F983F80D7891506C558D643251187DCAB3007B766E1E911CFBFBD64
B85C607179C12C2C768537BF48136BD1BE5F659A016C31052C3EBE9773AB4CE3
385B63C9B505E0A23BCDB1ADA4E3E059DD003DA4B8139D768111E31FC8A94C96
94EF20FFBB471A8F8517495864CA5C04DF540A9629C8B4CB445D6F792769C8FD
AB0CB910BCA44CE1C60A2D59B45241081A230FAC3168ECFA01FF4467C75D40C8
412EC5C8B143EF4B19C2AF33D3C027929B7C52DC3D85A02F137A69A287D74DF0
8DBFE5054B7DFADD7F8B7D20D2216DA327D871EB0395933701D7EA5C525FEB21
15E523839F1653EE2B2FDDE05F36495EB4D13D87FF34C4ED7456C2EA267D5E32
687B5F85B84F16F890E619BD4EF60FE5FA5C7A5E1C8F0A1DDCBE4C13E69D18DD
7CF96D4D604EE2722D6FED36A8876ABD34881F7893DC0E667113EF55628E9D09
C5870981F4C1C72CA1F1AB49D634CB78AEFCED75F75B6CCCBEBACE49B532510B
5BE9E7B718605AE72AA7C36DF5A08EFA1D952ADD4945B00AB91EEE84FA3EF053
417DD95B5AB902C46CC6A66BDF8CFBB21C348433519945FBAA113C0F774DB4F3
16EFA55DC06CE11E860B2857A8F7876B46DFCCA8E4AC4477D2527322103567C9
31BAF2E1FEC3C165FEDADDEF8E6045445B7DC3491903AEB56D48DBD85BA0EC92
0EF8E5129668D28C3FACB4907A1BD4E40ADC0C6C966D237F64B55EB63FE8EEDC
6B3D1CE601131D91A11F643E0EDD6A381FC32BE618CC9E3D332FCFA967046476
ADA04C619AF2FC930CA1FAF949449D39F670BDC9DB49CCF3708CF922D3A5E8CC
F61920C3E7E224F4D424400C4454BA4FF77CFF8C3A1FC942A7212CF67725AC14
7C4F588408B581E0F42B58F5ACFC80625EB62F59EE9F5BB597C6EAF36F6E23E7
7F28166293906389874A86F75B69102C3B3F913A56DB46B14410D6A09F19B375
2839DAE867600E032134C73A114162AC30149A63BA5310E39370EA68AD7F4E17
0A9E824AF45A3B4F555BC53C6B1A85F52F3BE469D8B1831BF946E908F962C03F
262E3433BB4E6926555B428DBF9A86DD559711481F6F1CF803B668CB11D09E28
87F16F97BB6A94CF8C1BC1C4B7063AE65C167A6A8D83A8378774A5408F01D072
F65A45F1ABF007D5C636FAFC4753CAE412F358C8AF443BB1BDC594CE677951DD
5A79B0DFFB3E508A845900624F3ECCEF2C0DB9C88C820CFAB5B8E47312B7AEE7
20320EA113187C7894569B35C175ABE24F8BAF87E7109E2E0EE2821CA32C4BDF
D9415137AE645E70267B1104DBB9B7A039CF2111AA9CFA4446A5004E3E1C647F
00EB6909799BA9911569034097DC54728FB9C24E661B3AB43799A84147C6F964
AB8C56338E6E0CF7CF1E2038F42D41DC2B558651AA96D983BB6B7AD57BD23090
8D30C3DB90870A4A9BDB049D84F40AE9FD99476A2150A0ECA1D5DD0B63C790B6
0FF0075D5670079DF90C2CB0C0FBE39454C8FDD4501A1FBC5EAEAC2A12A96EDF
1CCF7100492C9B6F9F0ED920D9B04FBCA3B1DC9B4F0622E29DD5B82ADB15C9F4
DE18DF2F226CE5755ED373C28A6A1401DD79016BF822286A247423C75F50EB66
D21311D808D0C11C26452D7951F0D1B3E51E2C7AC3961761209C7137596D45A3
BF1F8BCF4EB1C80E21C98154EBA80472A15E0136BC2901BB0C199F66BAB8B869
4A7F1AD5EFB3048FA691ED2563C9403148CCF7E2B7DEAE97EBA9C751E0549F8E
13E5AE95FAAF6F2A7C6E5B688F215037BD27DE02B6C8DB6C4BE5594FABB5291B
840F533E4849055513C5BB2A5FE127C1E6A9AB9317B62493A736A007BBA645DB
4DF3F89B8C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMTI7
%!PS-AdobeFont-1.1: CMTI7 1.0
%%CreationDate: 1991 Aug 18 21:07:18
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMTI7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMTI7 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-27 -250 1268 750}readonly def
/UniqueID 5000825 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D77639DF1232A4D6233A9CAF69B151DFD33F
C0962CCA6FACCEA6B71BEEF7C056FBD376F2F0D0BD6BE0A0A8259139B28B99C6
25119B8C60FF7BA002476930DFDC2F6B1B5A80F1C0E544A22E3F0FB2FEAB64B6
A509B61E1AB96121FBF7F2BC27CDE5B4961048FC2169C8DB745FCC7AF0EED507
284038B15CE53E69AA22CA76C2A208F6AD8614CD500D479A5E0FD25E7BB14C7F
C47C503E4CC38975CB0A8F7E109665FB69EBAE6EB68B2D6FA3C967D5BDE7830E
9CE6F13DFAEBC852DF1D7D0CDD33DD4D5CD6D94DD8AE0D48AB638013CF75A25C
04FDEA8775EC52A13AF40FA41F7354624D917EE620318C702237AF8C0E1FFA02
127F862D4DFD0A56774235A881AFBB8F7F4BCB33811C581CFF38462F669B7F97
1F97AC09373B8F9B7E653013AF8170613E8D7E17235A893BE296A0CD2096B71F
16778388993EDF1B003EBCE23DD02949CBFAAAB5D9F6A08178BFB8ED1043FC1B
0B90D9AFC27B19783740E8DDE0E5E01D116A8CB083C721FBB8EBF71018A9570E
78590CD831116BC0FDA4229F79A581874FC3A1F108A4FCA80CE27FA54A2A7505
5BDB3D52E2595512837732322FB5BBE459C0205EB38439E34A39544F0A1567C6
F29FBB7CF931708C8F92786CCBCBB443D54462B3B4B7BD38E90D325EBC31BA05
FAAB393C7EBDB9EC48E4ACC15A247D2348A62293A726FCA4250B4A407F64270F
923EB516CB8A3B5D19876C8755EB291357E4E4CC5903D1A536A635E267F7A971
B1C33AA7F58E1ADA931C450EA8367B18E20E683CCEEC1BC079E837DDAFFF0D16
23C4AED0DC04DD9458A630FD498794823FFA55705315F0687E7592A5DFC8B8D6
FE2F3C607AF59B61C2CF0BBCA640A018631A007E54D471138F11BF9869542BB9
F68564AAE086E746E5F126F2A17D03A420901F549792D39CFA9E21BCA613D323
26A1631CA9BBD23454FD1D45C5BE49D2F34693CA3A7D96A380B3924C6FE30F47
292148818619400EC9A98247D429E6E0112D5B5059EFA418234F68D9335FF6DD
29069AF0AA30EB4DD4A4018FBA2E84BE9DB9D4D9A76DA20F611AB8502DDF5CA9
2D5C38452BBE0CE990827015734ACCF194C0525C6CC769F54F63C10F70420A01
88C557E9A14E22F00361ED2FF5ABB60FBEED80C9F2F3A9919B1730618A5823D5
0E92F1267D9BCE13467999E05C5DB00C916FA526DDD9A668248944FAAA40C77B
324D42001FC805722960DCA652535A5A50E7F0B92FCA61E20890494C944FEC2B
83A2CBEA10318EB310355CB4DBB15A42451F8BAB0E9F399FE3414FF8669D389D
6132BEDF68B9D71F101ED4C171052F8617D7A01877F72CF477490EE7D3E40D4E
6ABB4C8BA4775EFD9ED65E4FDF8A831CB3FD53565BA77A9B34218BEC90A3DE0F
E94FD672D92CD25876FC4A95F201CCBA851218E4DD53C574E64DD3D72D0FFD72
25B51804E68FAEB1EEF0F65B8B236F76660BA808960FD1EDADFF3C99EE4EA2A8
1493F11059D56C0D20F16BEAA19C6F227CCC0B416323387FB6C07F94F1B28E58
AF60B346DBFBE9068A4E42F1A2C2528FC1D23C6CE5AD94D9D832AA6CFFA706A4
FEBA340BE5E54FDD9548DB94A6865FF9E4A06739AC39598132A25C99C0B525B8
D0BBECB8EC71154927F433FD01131FE79C86AE5400C21EAA781C61648B5E27FA
B8239DEA45A6C8A8F8AC334E90AD678E2C71E7CC8B5C6A199405F1FDA8F04154
029C379609D63A5EB4143DAFF6FAC03E7F6CEEA0110CD31C76ACC4D4F30669AA
19645164EF81FC1323BCC23D517251ADAEBC8E1737056F8D9739C76BCFAF2655
826C7B715C6CF5951B9DF0001357FF8F98901E84FC313916B7D949A9FE8140B8
0DBCF57F8B66981ABBF0CEFF2E6DD4B63C9F72D15A7B18C7CC8E088806815C91
64CA9FF3F95E93A60B6CE10226873FA53D545D010ECE6FAE2D669D5F855DE6F9
9215A604564A834A3EC1B206DF97D637E49DCE26AF07A3AC48109D4F7A53A9CF
E32470D532615361CBC2F1611D50D08C251B44EE1C264D2BCEC77B2F1132F0C9
1958ED14F8D202F10D0436A27DA33905C0153A27F43312B5E960BB778146B2F1
F28C78A0E32D27D1FF2E8C1FC30176979741995DB02F6E1EE28308A9D81C7E91
E5DDA232B997FE1E195B774048BF54C26074FFD602DFAECCBB88F193F09CABEE
2D900EC7E91F7AB34C4E733174C0955F0ADEC91D90BC6F43279C5121A20D9FC6
7B1CE3DA677480D708AA2C3816D7C1FEEAF25C79DFF550AF5276B77CA7C83B91
3504A723A62EBDCA42C6FCCB21128C50616201BE127C31E2C1DAA7F1FE622124
07096A0E14BA0AA2388ACA939F335D79053583F78453AC9B5EECF8175B701777
A08A3168C2F77DF160705452F2E095CDC4038CB06F026D5AECFBDCB6B911487E
D20E40F8EAA86B8F73C36BF3E1C6DA2E60429DE261BC91061BB7939BC344CC64
2A040C75DD191714BC52278A8E889952C6A3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMBX7
%!PS-AdobeFont-1.1: CMBX7 1.0
%%CreationDate: 1991 Aug 20 16:35:49
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMBX7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMBX7 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-55 -250 1289 751}readonly def
/UniqueID 5000765 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5F0364CD5660F74BEE96790DE35AFA90CCF712
B1805DA88AE375A04F3C90C160DE16F890E93B13B46BB2F4971D900BB550E53F
EC6248832A83CF441B4851445885479839AFAA2903A27676E5FDBCD653467C5B
6757DA1B722133018873A10B4FD9D710BBD9BE518D989B67DD4533F8702D640E
B84C3CC2607748FBD7C4BC6DA98537C7A83BCDCD871BC342E318F22902994EA5
8F5F698960BF55B6DD1ADBAA57D96E80D7C28E06447C5E0131B450234C39D332
D6EBE6E76DD503B658866DF4DB6774597338B1DB90AC6C0ABAEBA29CE9656E89
167D88958F3BF262133689AD41A5B9A90DF2838A221C5067B73066612A0FAD18
6A3670B2A69D1731367C8335600294ABC365F383F983A8AB1E37C1C1804893F7
DBF122DA9C3843D1715ACBEF92F28AECE850981251D1D25F13B0DE4320D26157
D14147622A29E7E7F6A037AF34A0197D57AB2A9F7129001F7F636F3B07E0F12F
D409D880B878EC8C911E3B1F24AE299AC56227FB9D6ECDDDC5F8DFCD18D8D0B1
4BF4C36A2E36F69E7291A1A0F738ED27D586BAAE8C04E00D5B3C88316AD3374C
5164218F5588EEDBF966055C55E9781D75B1D7B9C1A2FD2682E7CB88FA9C6889
8C5510BD1964BB505CABF99F91C7110745DFBC4B8A2A15295320EAF27A97ED84
C6E59474C2832859A5E2536E33893D90929D6D2585C73A6F3D316B96DCF60413
912E288DC3945E3A2C53EE1580FA68D40CC336D9AF2EDB87DAC04ACBF223D379
5482F7EF56A8DE5175D4D988BD67040B7B4634B145F6C995009C1D9671217E37
758B75D54A26EF8D6F56822318B256B2C43B27E2892E250E98F438334182171D
99CF39FD8F18FECC0C511B82F9E4B4F4105FB790D635D44CC9EADB5CBCFE8B22
6CA9BD4C9781F390B9191DF0CF98806DF3EFFB75F2BA6D262B7BF4BC39789061
987639503BBFFE3161F57BB012C2B627BC285A84C885928235E0AABC4C564171
4078F2AC6EE14A6F2F73CD23FA6BABC2672C5D038EF8C0A779C606490F001EF2
2529B696BB540F16E209114232700C8D2252434FD3569E2EAE2442F4AE962D76
D42B88B4BF017186B4E996A89A6D747F4CC7739D0CC6E5992C9CD7EFC9308E9C
1BFC677C64253C0AFCE78EEED0B7282C8AB77D9C739F4F37BA732E14F78AD475
4BD6A10B84B10F5AE2D20C7F914B56DB4DA23C0027503D8246CE1F47259C84CE
767C7B3F8FAAE9CB4469372D7237FC799EF9AD3B09D204910AD03205B913BB3F
0F7CEC45FCEA65133E7D8F780F48C40B1D920708D252DCD884F75B05E9790870
8DCAF790A6FD22FC84DE7A55B245202861DADA95CDB177E421D5F1D92A7AFF1B
0FBD7322F9C469C9B0E63895808F6D3BDED53161747E6FF596E330701B5A45A3
2A64F2FE689191AC44C087FE66268BB02CCE51D9FAA84D8AF23C0CD40B62347B
2EB2877AC33E121DC8FFDE5E9816B5D696BF78716EAE2A4BE9C703AE110FE0A3
79FF829A55E64AB46EC80C38E953F60D97603197B3EE36DE4BCA8A28516F666C
4375DEC37E90A12C9186D63A0AA834EE915DB22F890E40507686FEE3A7176F64
B1B0DD8F8ED5A865D05C0A66D5D39719EBFB0909FC832B3AE85ABBC9734C19CD
9FBF85FC057E4FCB1BCEEBDD7DA3983FC99646F6EE88D10955F1EA640E3F0F2A
D8BEE7555A1F1BDC06BA6496E6D9C103D467E335C862F48B404870FFB9ABC5DA
2E9917A22C52B40EBC9C5A80E6A71D3A35ABDFEA022742D17671CB69A40D2999
822364A247FFF97933BD08E63F27766E66BFDEE9BF7F8756EBA4ED3062DE4E14
0C4FADAC7CB7DBA6A70A6F82CBFD39A0F3AA04CC952938F03D86847B4E777403
D96FFE218EE4C042B26D2E84ED94D92CFBE2C478FFEDD16D07DFFE7CF7F9CD67
1F7186BF35E3383F923D90AA70549F4248EFB1D0FF4C316EE013E8E32F336E3C
737EF4CBCD3601D87AF95F61E37F2BA85DB4C1107805E44658CBA3CA6B918A7A
9C624D46C074203908BC7B86FD8F4E859EBE0DD72804503D0EEF2CA40D475D8A
52080908CD0A4242FB2DF8961F21C89A1585F7BBF6CA30B68FC1FF6C81E5FD42
5AB2BE867762D0646F6250A1EFA98B8826C172DAC1574257544C3546E136163C
7C7EF228618A1EDAA78B486A95253DE73D450E5EE61B86CE9438A8D7017AE60D
8275AF74827F7363F7D0C94082EDAEDF4E365EDFDD4F36418FD8BD6EA0361508
8DDBC51D4DD1E449F098DED6D1D558565366B9DBC2CA71B2514D4A273685C81A
3D5DC2C927E1AD8CA6742F040B6BCF83FA383694A30A99F4F68528935F3D7249
92283BAE35A5E88248809D1B274DC8EA90BAAA6D0850855548AE5EBC5411EB73
19626BB6F6E1E625E188320227E4D31FC0ADD5184921E27D14F5D3CDDBA9C3FF
77DE5840C6B3D02964C6E7D74CC21ADB039C9B4BFCC2D87CACDC637F4B77C6A2
F483BDDE3A4BD892C8C394B497BEDC77AD2ADDFF28B206F05A9F1C4DDC8C41B0
FEE177526120356138A39E48705986823E4544E4B909FBC0304BA4C97167D552
7EE8CC55EEC23D73568F9563701B0B3F7C507AA62B213FC0511CBD5003C4
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMMI7
%!PS-AdobeFont-1.1: CMMI7 1.100
%%CreationDate: 1996 Jul 23 07:53:53
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.100) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMMI7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMMI7 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{0 -250 1171 750}readonly def
/UniqueID 5087382 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D77639DF1232A4D6233A9CAF69B151DFD33F
C0962EAC6E3EBFB8AD256A3C654EAAF9A50C51BC6FA90B61B60401C235AFAB7B
B078D20B4B8A6D7F0300CF694E6956FF9C29C84FCC5C9E8890AA56B1BC60E868
DA8488AC4435E6B5CE34EA88E904D5C978514D7E476BF8971D419363125D4811
4D886EDDDCDDA8A6B0FDA5CF0603EA9FA5D4393BEBB26E1AB11C2D74FFA6FEE3
FAFBC6F05B801C1C3276B11080F5023902B56593F3F6B1F37997038F36B9E3AB
76C2E97E1F492D27A8E99F3E947A47166D0D0D063E4E6A9B535DC9F1BED129C5
123775D5D68787A58C93009FD5DA55B19511B95168C83429BD2D878207C39770
012318EA7AA39900C97B9D3859E3D0B04750B8390BF1F1BC29DC22BCAD50ECC6
A3C633D0937A59E859E5185AF9F56704708D5F1C50F78F43DFAC43C4E7DC9413
44CEFE43279AFD3C167C942889A352F2FF806C2FF8B3EB4908D50778AA58CFFC
4D1B14597A06A994ED8414BBE8B26E74D49F6CF54176B7297CDA112A69518050
01337CBA5478EB984CDD22020DAED9CA8311C33FBCC84177F5CE870E709FC608
D28B3A7208EFF72988C136142CE79B4E9C7B3FE588E9824ABC6F04D141E589B3
914A73A42801305439862414F893D5B6C327A7EE2730DEDE6A1597B09C258F05
261BC634F64C9F8477CD51634BA648FC70F659C90DC042C0D6B68CD1DF36D615
24F362B85A58D65A8E6DFD583EF9A79A428F2390A0B5398EEB78F4B5A89D9AD2
A517E0361749554ABD6547072398FFDD863E40501C316F28FDDF8B550FF8D663
9843D0BEA42289F85BD844891DB42EC7C51229D33EE7E83B1290404C799B8E8C
889787CDC5CD97BF88176035302FAC972B52AA169D31A9F9009EB9F8F8D5CC1A
3C6329EC7DAC6776DC47DCB8C0BB9590FDBBDD7B9CAD9F198E79BDB3D3E6C8CC
8496852BA96FEB3CF24900BEF475919E26FBCD462E549AEEF17748BBD2374C30
49D5216B2A0E1B4125541A652E64FB45C010611A657B1A0818DEA92DF25E9BB3
792598CD016F2DDC06B0A34FD156E46AEEC9C97907E47C387B9F9DF62DF893FB
BC86A0ACB5EE0400A0C8CC1B8DDC516911A9CF1D2636C4D7FB6CF6E568EA34D4
806730AF754A36D226A48566EF81E61D0C678D50CADD04B12301121F7E5DF427
81274338974E820A9B6C3409A6BD6521260AA5998056926AAB80F26E705F939E
9CC609773A466EB8A861270AB69CBA7C1D8B734F371303B3FF4CD50DA58A6556
7FF9EFD20125ADF82D46F50339D3A7B298189CD933FC66F934882E96E7B818C6
1BFD338EA74289E47080C2A5B47B0E3F5543C04A80C619F7A789D4BFC64E5A5F
CDA9ED30D40C11D056E3D3D31761B873DEBEA7AA5CD41267220037DEF6E24218
25BDB366DC8EAF9DE5830C0340595F45BBFFB5FEC370AB67272ED999E7F075E4
D727BE56E8D4EC7A73D1288E94A34E8A3A785CDEC5E858FF0F1F9450A36D9685
018289A2EBF531372E542C135D1E4D474B22C0AAC3833314D2FD211240F92E1C
A439F998210C4FCF281695142FE725BD7B2FBDF3C8F2DC23302E4149CBB89F81
49735BF5EA2B8E14F3CED78FC87557A79C75BA0CAD00D7A400FE7DAF675ED399
05B029AEA2CA0FA115B97C16C46BF89871C74B75D1AFE5B5AAB0E50B0C28DE09
13CC3B90FDD54E8F0B85F7FCA1B605662A793CEAC741AA060BB45510594E4821
B72215E1D24ABBB71DFE1B4E02126BBF538F938A87F486D4773EB74B75793C7F
940DBA6142F926693C009BE3EFE8C915A017CC6F86861A2C669F237536842C08
24FACAEA0BDD64D37BA356C5C5F779F354B42BAB9040A87EC85DB50AC869C74F
8B915D042A4080A410840BB60B5CCA5628EBCE348DF9A3ACA4F351D638A576A2
5FCC9FC6C1D109E7CAF8CC00019F3CC5628DE03008B98EB0615E04A27C9D689B
04B4CB82DD94720CD9D439A266EF575CEAD3C325E401C04D2BC628DCBC458D07
98A477CD672FF005C1312D8A90A717DD3D8F86F2151C719584BD45FE789E95C0
19388C51599A0F3CCD78DC94C4498B9859957CD7F1E43EC5630E3B5BAC827E39
6438302FBC0CF298918A88FDAB228EC3995A1715505D27957D99D93D974A3A6C
B2710EF385C9443650C5FD58EE77DB81B465DF91383F97C6A4FFDF2976B5B3D5
DB5138D11F1525DB0D4D55D9F3013F46BF514B84EA729BC054B6F9B444F2A2AF
C81A1250A87B2626468E7D0A6D471D86F0F78337077A5B4F0F59637E9F366860
24AD678F2E2D9B74174C2A14830D88B095D0E3E6AE4AB3A9D4553447AC2279BA
1F68990F2F2389F2E94C7849CEA14D597570BCB5050B39D188C3584DED9DBD64
11CF89B5C201D7088EC7D6FD450FDFF0EA1AF33DFBCB84009C4702BD028D3194
4BD9860142B1AF5A3296F1F66DE616FDE076DEB4AF74101A06670B74D2D87AD8
D67F65B1F9304C8093311806B296FDD374D1B9684DD04397569D8A5704BD7281
5D9564456234326E8EC96596E2FDE21A56B1A66C6738E7798CD076DB403F6FA3
6E4710840F1028F0BFF38E564A519E2E5B59395F333B5C0F2AE5E64EADBFC115

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMBX10
%!PS-AdobeFont-1.1: CMBX10 1.00B
%%CreationDate: 1992 Feb 19 19:54:06
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMBX10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMBX10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-301 -250 1164 946}readonly def
/UniqueID 5000768 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5F00F963068B8B731A88D7740B0DDAED1B3F82
7DB9DFB4372D3935C286E39EE7AC9FB6A9B5CE4D2FAE1BC0E55AE02BFC464378
77B9F65C23E3BAB41EFAE344DDC9AB1B3CCBC0618290D83DC756F9D5BEFECB18
2DB0E39997F264D408BD076F65A50E7E94C9C88D849AB2E92005CFA316ACCD91
FF524AAD7262B10351C50EBAD08FB4CD55D2E369F6E836C82C591606E1E5C73F
DE3FA3CAD272C67C6CBF43B66FE4B8677DAFEEA19288428D07FEB1F4001BAA68
7AAD6DDBE432714E799CFA49D8A1A128F32E8B280524BC8041F1E64ECE4053C4
9F0AEC699A75B827002E9F95826DB3F643338F858011008E338A899020962176
CF66A62E3AEF046D91C88C87DEB03CE6CCDF4FB651990F0E86D17409F121773D
6877DF0085DFB269A3C07AA6660419BD0F0EF3C53DA2318BA1860AB34E28BAC6
E82DDB1C43E5203AC9DF9277098F2E42C0F7BD03C6D90B629DE97730245B8E8E
8903B9225098079C55A37E4E59AE2A9E36B6349FA2C09BB1F5F4433E4EEFC75E
3F9830EB085E7E6FBE2666AC5A398C2DF228062ACF9FCA5656390A15837C4A99
EC3740D873CFEF2E248B44CA134693A782594DD0692B4DBF1F16C4CDECA692C4
0E44FDBEF704101118BC53575BF22731E7F7717934AD715AC33B5D3679B784C9
4046E6CD3C0AD80ED1F65626B14E33CFDA6EB2825DC444FA6209608D3976637A
DB9C73EB3A28623DF758C25574D740385B2C3D10086AEB904A33DD76DA2CC4BF
7E37F9117E9D81D3EFDA12D5BDF0067450C5A8A53959C055C5D6087F1FE6FB5D
8306F16FAD71AB986320F1229440C63ACB5FA24E41CFEB12C2BEA2C25E59A3F9
6CA5B7A04B57F2471D36F5B41E6363DCEFF2DFFE9131F044125884739392333E
15418156EEE8DE92EF4C176742032FE8889839755D8D821CD7F8FAAF8A22C283
19F79216C6D454A864898EE9F830DB5F3372B8F47C464DF19C69ACB3BC0566E2
F25E7FF148B2CDA2B90CB5884440F464CD57295728A4415963CC1BC0635BBEF4
E812CA5E0E788035873D05616F7B0F6A30D36BB285E7955CFD860345F16D952A
BF2F7D2702DB352D0874442B2074859EB49313BC27E100B26E3DCF1C296B7A38
607BF88B0087D066E2F1F2719962039D4BF1E32ECB791F05818DE1ACAEC841FA
F1EDF50092203889091C2DFE4D5CC6CE87C328709A37A7E45D8538EE9402C605
4062528BEF71D60ABD9581F43FF86AFAAB0557EE93F87FC7A5DA5D62B266C684
34F0795172C8C7D6DD63223EFC56D5FA82C1822A6309928620CC29F4A3B54C71
2E006E1D6BD993668999C3A85287F79E2D99A27ED6066CA17F5497ABAB38C14A
3AF9C185CD6EDA68951673D6384E6CD12944F86D178BE0DE9CE7F7DD4772C2C4
4C18B52E707CCB800762D33D60B819EED0051D631CC75E597DBAD011C449044C
9E7A33D1EE6F74FFBDD658513660C7E94D13D9E8F3AD022DDE36A1D32DC13EF7
21BD656F5752CFDE45040653475E2922EDB5D016D2A6A80E13F589B50BD40BBB
1864F55CEE9126950C51431581BF9A11ED9F23352C09924E60080A4C0BEAF241
A855DCEC88C5A96980636BABBEE0D1F5B665323CB5AC1BB800B2B30D034D2D50
28AE5DA5139E8DBFBEBFF644019D08C6614921AB45EE4BDB168DBA8E27EB9DA4
3541D7D09EC9520211C7F1CEAF8AF6CEF034B7EEB0D96A5EE961480A40139F59
2EEE63598476F9DACF0197F275D87EC34C6A02181283E03FE33ABDF43F75AF6F
044A5C2AAA6CCC9B627058A9534511A28A08E64C9967D0AFB870B5B05933C345
1E29FBE93DA32993CCB41A92B97F50E97BD02496F62FB0778169721B3F1714B1
B620D0B0BC98D291292FB3BBDD137B911276CE357DDFE65CE55692CF417B21E4
16C6BF7DE6314E6E69BC0834FFEC45DE9FDD4610BC5389A5D20EE427566772F4
5A6A49486D4406BFCD914B35889CCB4CA8CA19C7A606486B31C4F2057E9B7352
368FEE8D04803CD97A41D2F69B4CB22412ED01BDAC0BE83554A4BEA59C89847F
8EE4A2A279348346C7BC326C4FB78A42C8BD1D4B28265BE63A58098EF9A12578
D3FD4A7CA2AB6E3D32B51B49B3573101FBC9959A0017FEE6FB854BFC0D40A2A2
5407FBF40EF378CC6DE75F96C57D36470EA15DEAE7E760774220EB582E8B08BB
CC56739A7387A389AE9688228ACD911414719150BCEC50C13A322CD9C89AE866
0B42F70AB0B1F9A8C02B126498DF6EDA731B3997579A836BBD6048153EBF10C4
BC3074A171A3FF2E7F38EC77D8EFAB0E516E8273DD7E44BAEEB83E8EAF552BF7
CA3EED5D86379AC1441B6B51FAC0B11FF92DABBE770D5290423BA61EE1392506
ABBB2788EF725DC13EF8A5A1372DB9D27BD2A586294C6070230BACCBBE83F050
63A01ABB8D3FDCFD3FE82D1C7B376AB905250EEAB5FDDE2B0E313DB8CBFC6DAF
817BF57482C5C868111EC8ED1352AC9A442894D02DA9514399A9728889CD3D47
977BF3FB477FE4B98C7769AD6CA987B4EC6D1696E1E31880D264A0AFADC3B993
81E7869EB77E9BCACA4FE97F1C3A84C1F8BB724EB6407DD316689B1D9C4ADBD7
C130F90B12AD3C7DD2E11B98DB8D84FAB0D303C5797F3B03E0538B6755E83940
0651951088D10D459CF8E5C2E47BAED1BAA3E9BDBF8C92E075BE2C6EBEC78E62
42D64EADDC6534EC508B55A05857BE25B9457CF51AFE19364A74D93EC3E172B2
11AA45F112B8C4D195F8ABCFE71A87C9EFB026002722238BA2529A179F8B563E
F0A3F4B995560EA4F2C727C6C499D2194BD3C6CA1F6F1C03AD305C404C8FCD2A
F29A28BF1DD38C5CE431A4C5C14748BC2288B90B6D8E55A93A9404DC8102ED1A
312DE9C4394E437093FA961E64225E42A7CEF5206290AA40A9B189EEF1569604
F4DAC1C48C4E7A7B1A16123500DC719E3667BE9F2FB573C1E1E271F26F851A72
1A5B90CD287634A6178C48AE690013F2B875D3E200A077365C8E4EA42F6417EB
C8A8C0D214534A547C8F5D30FDC4DC92561CF17B72ED02BD1E9143555AE31070
57C1CBB5DDD2BF8233ABE9477FA86F4AF0C4073F861FB7F0A47782DB4EB423E1
0F64179A2BB56E2041EBC3171E141676549C0D758E8F47120ED013C337E9FA51
61628CD07ACE4A2FA7BF15B974A59FFB76DF7129E657A489AF5759890E662C91
C0BD83E39E12B04A96BED546DA61C3FE48CDC7A31F9D6A8188BBA4B6601A06B6
7784702AB8EE231C79461DC204DF0D0D8D51B6F93011C86445BE0AECC571D28E
9522F5C20C056C10263D71B21876BC02348E42F0E03484E6A1D834FF62477E18
5E2C377637C87E829A6064D65C9D232200A5EC21334881FA3D3EEE7FB153695B
A7AB948937D943E3C60887F022CB283682552E5F2ED405D659CD37D95D6D4174
C16404EFEB98088884BDAD6D54BAF9D01B81146BA600B044C9E099078330EEF9
070C57A9BA4CBED0D0D903091D012A04C2C0F65EAC46CCCC0BDC87AEAA394B44
9282C2978E006581A173F4F52A9225262CA57713341B2930FD804FFA05C80599
90E56FE767D170F51CEF4320B270EA35A77E46310DFE7989839F1121317EB1B9
522A9EA95A480B2C2744D50C43B3B055F606BF7FD97249F6C5911F7E9F5FE4F1
A58B8704A62BEF2717147AC24D46AB1D91CAA59EEDDF505310F846FD7F4EEBAA
740783597168C1BDC7FAB00793D8B09EBCC8F08324A11342D8DC2B5CE638AC86
7D558B1D3ED4BABAEF6FF8B699FFF7350A34DC4B656B11D3FEDBAA91774418A4
A86BBC51E8FF023AB2D4BEC6838708F8D9409FC6648C6D7ADF93F5C61A7914E1
4E33121AF80FECAF50E31553B343FA99DC9547C5D8030A9780E6CE79277A61A9
3353AB78AC480DFEBAAEDD404ABB1F266BDCB1CA9AF4E88D025D5C2D4F691765
B5DE4128F3D89FD4B0788E54AABB08C827378CAFBF648DCFFF274EC0C027E60C
C40DFB201B0E72BA41E3D1C86D4776FAB0845037CA492FA5CAB183E03FDDC2BD
A11D7D8C755E6A7C9F33D4234D4C3324E065903386E03D7F9893820126CD9953
9F5D672BFD8E3E83528F0250A2FDE4A4B1FFB817E01C69FD0969559B49D5EF3A
EB59989CFD568F1FFFEB439A567489B05307C034FFC6B3179642D5E84DF9F739
23915B7FF63DE1FBF027404F0827039506502B8FF428853D981710E8BDAE792D
E873B64391631091D18F0DB5BD03D3F1AC58E57364F21C3CA42D67D038AB147F
6D3DFB9B7595E731D10858BDCEC54537CB9AA19DECF2E9996302853693FFF275
32B6029F8675054E44B7A6184F77AC4F591BE978266CAB3FFAB88629CCF8568C
7B3434B9E429F7891FCCF4374C86A7844A5C6C9D6BD4FA7FF5ABFA81D34B9159
780BD3683E3E73A7ACE3ACBF19F33F90A92D5013765BC4DEDBD1E9DE41167D29
F9193246D14911CD461B78AAFBED08F4C47C81BEAB41F606E7673B2103D457DC
A9B79513FA92CC32058422C852D02A20AF9761F5DC6DA67F10A709E37772DA6F
8197998DD5A7D139AF519ED69ED60BF6E8A0E5B27103809D55D7542CC74DD6EC
41CDBBE358A3BBEEEE7EB5CD3679576854443838D794759D178980E2C19F2C01
5A610A9CC052ADEE4EB7C7BF07EE47E92D2F898428B5570F764AC0C6FDE3B644
035AFF937866E0E08EEE5D55B76CDFB52CC2727BD211187EABE3C3538CB0A803
43C38F345B9F488694E824B7CFB0A5CCC88D664D7B370CE4541F4F0E5EAEC3F7
560F1D567329DAC1A4B9EE064D8EB0E3CB000E5F55106F470E8A25F815C124F4
6D31D88FAE9BFD1618131C21D9AFDDD28F04B61F5E659A61F14063F322144BA0
24E003171CBE6CF6F664B003EA544402C92462FCC12BC8D283A314DC6B1C9A83
A05E756A525C73E627DED7866C55A05E2A76CAEDEB5FD192AC3A7E770A1799D7
C0C97465935EAC2D4C73BB57864F8EAC8055737CFA490B63B8AB46E6A655254F
55E7EBFA5B7EB1F49BC1322F678E3A06FE5F415A273A3FE9D5C7812CD5AD0411
7E09F726C047122178BB69384D2B1B081EA2087AFC7C36F78451308B08F73498
6A31A2A3B920757FBC88D99DCFCAD5751BF4920281423C5C43F4C8946139D6AE
AE137DFD0E465F74E7DF0EA333899A2C3FE2BE34DC375DC071B19036FA8AE506
9F438DEFB4BAC2AABCA326853B1F6C4ADFAF5FFE4222385240B0B9542974D4FE
FD4E689F8D9DAAAA31FF6D82F6F9C6462EB990C35CD91DDD6EFC594F7197BE12
C791103B6C040AAD7AC91DF8967104B4F023C9209CA0DF34BFE1343DF68537E5
C111F7E06FF221874D53EE6A55E6C48688B5F0C42867821581CE6F7B2FA4FCBD
188BFEFD7C0A5FB7B933A63E250F176780596AD48B68DD5116B15528FD68B796
6AD2C741C9C266F66298E317C6544A34A6EA396E497D8C68C039D8B7EAAC0F28
5334E5C409B271F015F7CCB020E7DCB4C8401FFFE82CE3BE46DC4D59A48D2D3A
B51AD1AC4F92BABBDC33B11B40EABF4D754536C0A1C7F34447C166632BBE0DAA
0090E79821771E10CC05E5486994516CB9F04BBBAB289D4F8AB02523DDEE09FB
1B1778B4FF7F8F28BFE18F3DD40D6466502489DBF806B1DE097226D0519CCA04
16DF7FDC5E70874426B2E7858839AEEB969D310454BAE580742319C4DB91AD5C
028C1FB5FCB8DDA5D5C63EAFFC0BAD30B349B9E451CCFC404EA0397CCEB6911C
5B5B6B174A86AD7480CE4E9B7493EC49D8C13852A202547F3D04BD3C70F2A8F7
204955533105CD9389052DAE77288B650ED12827F75297DD4647E28985D6748E
4CDB7588672E46DCFAB517F6924B5BDAACE068373A03E9942481A1135B2EEA72
1A60B308A5BB3E478818023CEBD4D2C94DEBD3CF44A1D5F551F7BBB21B1A2051
FB6EBF2FC7B49213A94CA22D0F148831B2C888F87FB2F8950F1A889E37ECB977
445570B74261368D44D38694A46527D53343F4AB091F4F34F52C95933388AABC
724BC5838AD7FA714EF50E142F1C26C301FA7545516121B321996A8E35207995
89C9C34E1750A70B19B08909168133EDFE88B7FD9881D69A757047C66FE588BC
666B3D67CE1F827CF41821B826E624B981464A5B326C38E3D668209BA66D78B2
298084E1C7326DF7F3411E4F135C67E96717DA07098DB784FE499EDBB7A7416D
37187B163D0F70A6A1875B163354AE5364D5939371EF60D7A9F0EAF0153E8CC8
BC5A2E1F51C1C84DEEBE55AB12CD7165D8651398571137B1B0EFE4FA94A341
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMSY7
%!PS-AdobeFont-1.1: CMSY7 1.0
%%CreationDate: 1991 Aug 15 07:21:52
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMSY7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.035 def
/isFixedPitch false def
end readonly def
/FontName /CMSY7 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-15 -951 1252 782}readonly def
/UniqueID 5000817 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052F09F9C8ADE9D907C058B87E9B6964
7D53359E51216774A4EAA1E2B58EC3176BD1184A633B951372B4198D4E8C5EF4
A213ACB58AA0A658908035BF2ED8531779838A960DFE2B27EA49C37156989C85
E21B3ABF72E39A89232CD9F4237FC80C9E64E8425AA3BEF7DED60B122A52922A
221A37D9A807DD01161779DDE7D251491EBF65A98C9FE2B1CF8D725A70281949
8F4AFFE638BBA6B12386C7F32BA350D62EA218D5B24EE612C2C20F43CD3BFD0D
F02B185B692D7B27BEC7290EEFDCF92F95DDEB507068DE0B0B0351E3ECB8E443
E611BE0A41A1F8C89C3BC16B352C3443AB6F665EAC5E0CC4229DECFC58E15765
424C919C273E7FA240BE7B2E951AB789D127625BBCB7033E005050EB2E12B1C8
E5F3AD1F44A71957AD2CC53D917BFD09235601155886EE36D0C3DD6E7AA2EF9C
C402C77FF1549E609A711FC3C211E64E8F263D60A57E9F2B47E3480B978AAF63
868AEA25DA3D5413467B76D2F02F8097D28419D2EEAC108405E4AC2173E4304F
5A8445E1A950F4B85D5F77421692397FE5AE0B43BEDEE63F41B3045565958B9C
C9FBE833D9A6A39539CD56BCAD91814A0C3757C8DDCFB3B5CDC5DCCA08CA3248
6C72B89462FBECCE31A286FA8D860820A95DB37D96B54D7957C698ED0182B0C6
F6FB3D860D356494C25B96EC381D0A00CAA68A3EE14B53D57D3DAF8BD632DB78
9B5F62A6460280C3CC8785F6995211F0E6AE015AC5A43A635A80E74C33C0743B
63D6FCD7A15D42E409697BA03998BA7271D585A32015D5BA1CE1DE2CAD9F7244
61CA5D97385E35E2071CC0B4912F523D021CEF2A2A404CD38392D91656488E3A
FF2F608A17295DDF8F9A6C1FCCD07F16BE2818C01657365BC89E64B6A7C7C9E4
AE8C7CCF25A319213989EBAC2001FC36D7779C8215818277DAA3690B06B5FE23
161068CE815D0BBA423247F506F1B188DA1F69CB2E1E941B086FF8EAD07A4260
51FA658623535A6AD96F0E709D313F7547973748E897569FF36C4B99A2E844DE
B46648D2B3AA63FA60DA28C14A13EA079BA45EBADD00A20B0820A73F8305E89A
DE6CA8626D177D65B3BE010C6C2876CD43E285053281FD29CBAC117AA76B5E36
48DC6570711DBE6ADD567356CB3D3D5E3A3EB2398F97F66197BF7D719E7C2E1E
83083A42C392277472C7CA8D277AC2095CE6827A0E8842D997C07DC694B4AE34
61EAA9E40E3F5FDA3C83FB232EB89D4BBDCFDB111033707760F37569CBDFE768
D1D74353A59DAD3CD41E696C843C8F4080E759A8C9943FED5717BA1330D2CB24
8E1AC58CEF830BD0DF9FF09DCE853DC6C11BB69534F53D8E43C1C85964BA72E4
7F2883CADE99BF135F9029FB9E12CAF0BC44DED045BB90BBFC06157DFDE1BC31
DFAAFEFA5761C81D870AAB596BD0C56976726EB7FA51D4B07CEBD4AB6EF513EC
EF0537D808B4FC85D446C88E929C0022A300F9502DF07532245F951456234DED

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMTI10
%!PS-AdobeFont-1.1: CMTI10 1.00B
%%CreationDate: 1992 Feb 19 19:56:16
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMTI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMTI10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-163 -250 1146 969}readonly def
/UniqueID 5000828 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D5993DFC0930297866E1CD0A319B6B1FD958
9E3948FFB0B4E70F212EC976D65099D84E0D37A7A771C3101D6AD26A0513378F
21EC3643079EECE0C9AB54B4772E5DCA82D0D4ACC7F42FB493AA04A3BF4A1BD6
06ECE186315DBE9CFDCB1A0303E8D3E83027CD3AFA8F0BD466A8E8CA0E7164CF
55B332FAD43482748DD4A1CB3F40CB1F5E67192B8216A0D8FE30F9F05BF016F5
B5CC130A4B0796EE065495422FBA55BEE9BFD99D04464D987AC4D237C208FA86
0B112E55CE7B3782A34BC22E3DE31755D9AFF19E490C8E43B85E17ECE87FA8B9
1485831624D24F37C39BF9972D74E6EC4784727AC00B9C4A3AD3DA1C22BD6961
7E0ADAF55422F22ACA5E4DCD4DF9FCD187A566B7FB661D0530454D0DD6C6C50A
7A3875C6CBF8EC7769F32A1F3F7FC1C072BADEC97794D4E90E0035282A170402
356E5A9CD9ABD80AC4342A5283E458A7269252F4541CBB6452B39ED54D336D0B
19928E9CD1AB26AD83EB209E2EC75011A2643813053B5DBB0246097C4821B5F2
C92554E9140BE35B2DBFCD98809A8EC9FC910FDE9E0D86457C70ACB056EBF90F
244DC0A5BBD455E15D6E3180311D52CF50B0BF7D0A7F64F3A1821E0AEDBC2E7B
AEB549FE1D51088C153799C6E089B5D5D65E1C4E2D2B430CDF1FFA23CCB25D95
5C4DD885310A706B320AB25C8D742C6F29953254FA54DAAEE60ED477877D19BC
D28E9AB576B0EA088171FD000B60D73B3C57F754BC07EBC9BF751B7D2B32459D
993861B7C4B0D98C422A11BECEF76F4EFC0ECAEE89723E6CED53E3678D733363
2DF068AEF0FE7DFB57393BDAA439A6A4C396F86032A98009EAE1247B7DE83B3B
E46DF2898598FF5E6CA6953127432A967E4FD41CDD60D6E413059A58FA556EF3
309178B57C16A763CFC9BEEC276944BDEA255789EF4E1ECDE1EA43EEDB955513
F42EDDCF39AE522A1DC2D80B2772B05DA60F3DC15A815A6BAFEDC399C7956E75
3851CB3588E22936FBFB63A58300298B11C45D82385C083D07AF133BB1BC941A
FDD9F34D5E0B8087EF2A58C54D8AB7580EE3ED58AEB83B72CB9028F472ADBF11
05A77651F118824F6CD00209EFB60C1D32D46A78E8C8DCB8B0E742828E3B7D17
DF5200D68189C91FB8489CDEE8BC223C4281DDCA5F7DA80BD5C2D66A14695EA1
5F05E03500579ADD440ED2C57F535807560C6FE3873143D792734FEAB93AE8DD
633BA6FC5683083402BF086D23594AAC84A4868AFAA32AFBDF86142B350F8F62
E2531321E4CCF34293024EF8AB617BAB11A3A5EDA03CAC5AC431C893607DF8E5
C3DC8646027A7554625A16FD184A70DB5FE6DCEA366B64430A147144CC9839F5
72829FFA42BC3A8406D680E44A0305C9C9E265E91AE82EDF30F73730DCD4ABE9
7998AD1287E6C65AE2AB8B79DAD252F035C1D5CA75481C317DD3AF2953C3DE5B
1C0FBD1A02EF1B3F3DCD8B42D2B1ACCFDC218E73E62A0159F3AAA95FB26654B3
6AB424CBE1BFD2B72A66F8A938C01B5FD3359DF11F2A19695C2E888B370F8D28
079165D0B9FB7660B3D023E9FD534941417EB7642F871FB30B146CAC3C35D947
3BB2FA82792101F4FAD0BA8FAFE595B3980DB93566D565586CD2B504FD2A67BD
D2A3B9343CBE886D0F9593357149138EDFCF7B0A2B5BEE03D1EE49E4E13B2299
405F7279408A8F535BFA47649862F4EBD325E88C0DD045440AD1DCD59C61DD91
4899AFA354344EA1CE2C2F6C120F947FD4904EE0A83911C84C565FA584437D55
4F3AB306DCA8F90B781E08DC431BC29A543241D4D73E756A8E018EA72C832FC0
819AF55488AA162A8603572DD9F398F97486C3DF6523FB4D5E3D79E1819F0D75
F23E856F92F62914C98872243BC2A65569D858D5D3C48A3661DA8770C48AF88C
9D1EEEE3C773F9C08B189ADD4EBA0394C07BD3A0FC126BBFA9EC28F4592F5762
0925A4ACF2CEBD07744BFC42BAB8828ED05FB8071632151DF8F5EAD61A9145E0
14B3B739178543E6E1EC0EDA5461B21DC697BBEC9EED63025705B1F75ABA00BB
75934A74000552DD0C2AA897FFCEDBB595A48F00405570DE237977591E04E22E
2ED7DCA9E9BF02C1FC72391283E612B9D2FCD03F2FAD912FC70193FE1D9A6DF0
AE1C7F8B8D5C681AF8B896001EFFA9A81179F3CFAB3C757506A0A108CE9AF845
04E480C88D976E964743838591B0AC0070261469B4E4ABF03AFA1C2A3C994B41
D4DD24C9F617028E79B2BAFD7C26CFB01F22CBDBB3BB75E5073453525B8F00F8
BDA50D96C812EEC9D7E30B6AD89C6AC6274E48F69164A787A1BCEE1056D02110
A77910126E52629AC52120052696D70B706B0668B28D24C5FBC4D5D3F1667A7B
CBC43F51549A24CF08BEB2CA2CEB53EE86A438D4207FAEDEC8F53C6242D3EBDB
19CDC71D9564D865FF7F7B601D7EE4F3490E51EC74D45A08F877F4F184AB3473
4505005F70D277777AD29B3655B3BAEF824A49964A765CF6D0F76F32F1A51A1D
CE55E1DAE4E73408DBBDD3C1E645E1A6C3093F4766D41B83D35EF14ACD64F7CD
35170794D2385C6A4E566DEA26FE4F515796E62DB3DF0ED7B262A36271B7A270
6B64EEDB5623C5F63FC2C8600CE412D1D5CAAC6AD7330A1D24053137CCFD73F8
55373CD6F9126D8F0D4CF13AEF1CB6C9D571BD15D4C094461EC4713A4575CFE6
0E769E94310B00248E2520A0AEABFCB2C38389DAC0A92549A216F57458661AB7
7A00FE318A0086B72B193439BC41453D3D4A70E017AACD1716ECB9AD08C1CF03
523A8BF6415DCB5DED283048D12C3071254581352971747F493EC0294C8B7988
56FE91755D56724DD08D5155271E6EBB61D86DB432672191A91C47BEA7863DA9
EDAB2F62F4249AD3D9AF77BD00F63F97B308FC15C0EF25024FF7DB080AFF451D
107662756C3E27AE3C726C2F97D9FC96D4E325D6F94D6BD978EAB287606ECB29
DC4DDA68E852017D15399D3F143F5E710A6145ACFC2045659E719A0080C3C2F2
64A8F4E8E1C1CB5A11B95AB03855A0AD90643DA6C329FE0FCBBED6E37E49E9A6
F746FBF92A819977A25D4747A15DB177C6221F0852A90FB4E46CA3AF3D2F9F28
3DE11D7BC171F26FAFF37D6D6BD47774A33FC1A5767A0E232F9F20A5E949CF81
22E06CFEF361F6FB3B1F8F3FA1888B7F30A0341DEE4F03ABAC3F5884F8EA227F
8B2DCE5106A157B0BD0D0C0288A965E785E0CCF221565571C8A36AB83B11EE46
7B7126755DABED6156EE6B6133B4B9DCC761416214306A48A68CF486C290243B
57E77E3993ABF1D0F9B3A58284E63C096900A60AC6C7D5A7FB2E7C378459BF83
2D1A9A9D09459ECCBEE1351C1F61225FA66679E65BF1E917687505817C4E112E
23059B65055E750E8F19B475CAEA95626BEC39A98459C0364E439B53841A20A9
9E286D32EF7A0D22342BA72973AC28D5FD68925EC9F9549E8833CDE0B6E48081
F798872C9AFD78A3547E30D697ABCF31C62DCA38127ABDA6DFA75C39753ABF8B
F46E110078E4DEA9DBFF717EAFBA8DE65D1675A8DFFFE01E42CF87CB2E48C179
96E807E97CE33044F2CF71890799F6EA9EDD64B4C3A0B104597FC38580445EC4
3A657FBDE6BF0C2E09231D0385F7F332F51992491B3C8EB06BDE41281B9DFEB8
FBE2401C1B264C50FB0E0DDF0138FEC23F86D839D9FED0C11B273CC5FD1EE654
050C0467156803D2C32B5C282575BA0E5AA20DE909EE4317E1D3D475BF909796
229E3A1A9C3E708C8587B64C6CC261A3F044715CAB488B875B96FFF7964264A9
2A18A35F62F8E638CE15EF2416805100029E633A1790AA55AF14AA3DC514D382
34E9676CEED4620B48F73D0612DA9DE81F1680FFC05673776E1D475E8519062B
0782E428B1420F4DFC1F7624C0E243D85DFA37BC993428DB99A36B7DF4D1701D
5E4061A5BC2659ECE9462DCB147D5B7DAC5D04B9D1E2B03E4E8ECE380DEEC4B8
3BE8922B6335572892902F88B4A72FC98C67464FB2FA1308FD8D398DF186C65D
D420F73FB1E658B51F6217FAFD07B78BA2402D6EFC6A6D22AF48AF55588BD11E
4AFF25D1CAD7C2E46BD5F74B7407F493D316A616F5838E687270A1E8929105BF
C7C7A4BF0598E1F17B6CF6553EC457BD11DB00A8290BE48F92EDF64A913F8AA2
6107E50B5B38B183A3AAF80AFC8F863D2F346B448F92F6EEB6621A3DB5CE7F12
0C89436B5B49ACAD2B31B5F68F4D9FB91551443BECBB605383BF9F8D1729C4ED
E0343B2C51C6F81C8C71297AD8DF4CE01DFADC40FD2B7E41341392F4E9C65EC9
734B686450A007F67109CEDF872BEBDC2761AFADCBC31CB5B433A8261C911E08
BDDFB660AE20FF321BC955AD1AA719D645E844E3C1ABA46D118A20463D034867
49469EB6FC3AAC2AB72181B7F98544E2F3636DC97D82AAE82D72E69A03FA4C8A
4DCBC563ACB14779AE5D3586C69F148E99CB747E4F4ECE00D8FEF3A86472985C
C2B00D7B1B903E8FFFA2D7ECB5185D95F44B37886D292C41AB03E29988B705F4
0B789BB52C77A1ECA47D34ACC49FBF139E577A2B409D841BC0ACCF41AFB85657
6E76F8F1D967E61E308AB731CC7F03D383C6CCCCA41CB712BC56251671C514C2
4AA46BACD55D7EEAA55D813669A0F241717D3A92201AE38E7773E7646FDE4989
0FE69F6EC1056365F91B0529998C7C23127872497F34F3CDC31C1E3EBA2EB833
16DE38721D9BAC5A1ED96FF53CBDD807065CDA579CA6D3F78CEA172088C12A93
640994C04E187BFA1A73DB741269BA751737003EE3FA416117AD86A36C199857
367B19E3A7F013D2E24856B2590B69AEB94FFF9D17D904A595FEA8516B298025
D321299362772F49D175365DBD099F5AC54C4BF7921AB991891163674B8DABF4
2E06DDCFE1F4BD27AB189D62D8AD1AC6FEFEAA31045163BBF1C97C8B15C99396
B1EE7982FEC51B5A0607C44B24FE2DBFBF7A2FF628E4F56CD4FC3425D42ED234
A772063F160C82B47B9597A25E09738D8D77883F869A73FA77213811AA1FC7A5
1365DAEE07317858FDE21251720ACCB3CABAAA28902999C37B9E3B3FF4228035
5B66EEB8EA94AB6689E7372CACC469AF5325471E2000329F040561A9C6A7BF9E
26EE2BDD1763840F673891B817FC28C64FDE6D2DEFB49BB7B8ED0975DA648BB4
2D1C940EAAFD83BB9E36BC54E10862F439785B1A433125BE6E13AC32FC7978B8
86A7E53334A7A02D37B8D50D0E2925C27A733DA7B219F14C55DB9A61DAAE53DE
3007DA7085DAEF44FA0990AEEBEF5FFE123802F0F7A21AC44308408F7F866114
7B8B7602510D96D3CB4FA5D21CE0D4E7155B43C96A3A7481B7BBD634897DE82C
79F943915C12634F4F8A92536CAC3D6FBFCD5CFB46FC792AD69CC8213241FDE0
8A6C4FFA62D0E94EBC4054332BBE8710DDBDE38D6961623598E4A0AB0460F5DD
B4A3B39AFC69558A4234FC24E3948146E216481CC5771CFF07E601232D0D5C71
5BCD6759451C75AA14AC8B307D69D914206D60719C7644E08765370534D97D27
FD0866BB859B43BA3BB0094EC5295E4759FB5FC2DC2F07C6CEF3FAF5903B93DC
F444453D5AD0999C6F130E10BF9CAA79E604FBBB687817E9460B2EFED7EAC2E1
80BC62891AD0BF5A2D9BF43C9C1F9DB5517146752E72EA3B9F0E242A7B258739
58BD950CDFFA80B9D361D5366E0664BA33ED3A601756D606A3E8A88AE25EE61E
BE4ECC22D9EFB93C7600D15A2BCB696706B17826B9D139ED0C542A7FA4EB28F0
A5A2CCC7E67007961767F4EADED21E4A64DF3F7ED15E3E45FF2E4BCDFDE5C969
ECC1F28F3884724584D13743ACCD7CA1E04768A496F6FBFF0F0FB53EAA3518B4
25DAE747A95C2CDD6D45F7693A240365C05F3F1BCA00E11C41F6768798FF2940
E20A2D549309BE89DF7092BBCC2805198C5DF94EAD73EB0BF34F8901512A36D1
6F64FA5EB4E4D18DDEFFF92A45A02BCA7CC82AA1C781B6499CE668177852501A
A4A31D06A0692911ABC074CC2C81137D48952799AB470AD46749AA4C43E020FF
130EAC98654C1BF9FB17C51A02DAA1F74F599187A64AF54B0914868C179BF314
E7F9AC9E65A920EC68A492EF2C666D76BCD51900A4CF870BF7E97606B16FFFBE
2B7167A1AEFCC5E20782372CDA65CBFC77AADBE63CB8001F43785727F0102A13
50BFF0892195CACAF170DC1AF0F68D14B3C91279F1B5007FAD120AC07C4475A3
4F5E5021640476307CC278A115D97811550DB1F43202E3B49D66E02A75756D23
86F263FF1F3DC123F3532501F07A9EB5041EBD15EB417D4A1EDB82FAFA867162
5352DB74525A756819496D654CA322C464A7B94D2A02C284D32B8B59BF6C2874
7927FF505B3860566D14F347DEB2BDA48F6292454DFC32DC81343AB2A95D5A29
1C27E610096F0B500D4FC55B30B80A2A9B5B07567663D71DDAC1A2501D41941A
9BE3F6A7B68BB0B0BE2735AFCF49608884EEEB9B6EFF7CDA889A820EEECC7556
53629817BE649C6E9D7E74AB17FCF3A509697A0FEDFDF94A46752A98B50F1A41
DD7E54CB9721D31CA02F6D83E23EE87DF6918279848FB02549BD15D2AFECD7DE
3864FAA25904D2644D681780FFCF2237E69C94BA9A7F38720E86428AC8BF576E
CE8D6B70A32C989419FD5355D99C51AF137744F091BD9EECD254D8E83AD43552
4C05BD03D7FB56498B07914564C809496B0530E23610C3AE276889A48D2A27ED
B6F035F2041C6F408B45AC13F3E38B7FCAF0EAE6A092BCDD85CE4089023F3A70
66F65A0F3D555487E2A0E146C8E2019DE84E5F0E2CE229689957BA816B7F40D2
47521F3993A6EAB082B256A99582CBC64BCB40966A3BBCDB55265B141273BD3A
03C7099B65B35171E84C00E2512FE440D7DF4D9263001D337E8D8C372E07AA0C
5E335F708A06BC442D5FD56EBEC11FF7200CFC8267BF0E693E7936D068022F8A
2C8F989B0D94804E4A20579834C11B4B4C6A89F6D1728ED4DD55AFA8730E7776
6A5460A763422BBD5FF2D3CDCDD4AB21ED71A5F9FBBECBC3AEB944F1EE00F148
73D3CEFFCFD71401AAA161120208836B8202BA986515EFF4EB2C918103F175B4
9AD77B81965A2FD4873DC2A5FA0117F7F0C9CE2F0D291FA3DED5B5B1F9BE0AAE
F157A4E795D9628FEF5401669614BBE0C17BBB23010FD2958F36E24B9D61F3B2
66ED727C25273F39BEE3AE4C15C8036A1EC6AF8EA0DE3E4D3845D681602DCD78
1FC016FB5CC6FCECF435CA3BBB668053AC491F5F78702DCA8F1575E288F7CC1D
BE55663CBAE2ACE73DF4369BC072F024AB13FDDB160F8DA7B1EBE4013105B369
080E2409A5407C3AB1D6E97760EF7631A68374C54DC5EE021912744738B26CAE
59D847835AF47894F955CA42F8DDE746759CE1ACBE45F4F8A6E5DCDCEBC458C3
3EE607A6BB4D6A974EAB80B37831E6C9C81F38D0D77706FBD90AFA20CDE999DE
3EC22A85C5053CE9F3193A7426827F42C1E6C55955A4B51D4115ED9A68E94BFC
4BFE9874A137F0B460AFC2B54052587EAED9BF50D9F6E1D91455F3BD2453D268
5952EAFF5AC3CEA53C4A2CA78D5857E178C4ED62FC8A30790690345EC6483D25
8F31AA451453A321277B754D7366FA85ED5899FAF5F28C700596B4B097BE09A3
1B6AB3BEF145AD85378BCC62BFAC0A52DC0C0B09C47A30E95021F6A00DB47FBD
B2D78444D5CC10E7AE76BE1E6B338DFA444376DEE88CD5CE1924B4D098017DFA
31BB5A30B0D316299E2E1F3FC10A06DE6F8BDAEA85325D747A6F19C7B05A316E
6EE5064439A63A539A987E20100DA1C1B3A4A779CAA0AD53843981FD8CE815CF
ADCBE2144608208B10223CA19BB350214A31ED044F1A679CC475814A3454F95C
491DE3C225D70897601DD26FCAF0C3D5D5EC9CB1A41365823FDDD0C614EFE6E0
83D98298ECC330FDAE0E9F0FBC0925808E7E3470F1F1571D3BBD1A954B3DFECC
BDD88B55D0F474F292BFA14FE5860660880F41910C551177E84384B09B977A10
8F1FEE17502A2125D0FAF92ED857DEDB51E9B5B4B11A5E1CAB465B901FE8E7FC
2BF63A54ADB73DB1512B975CD4A86C5BBA76333E7E30E48047FDB11AA7D23CEE
2368ECCAC5F82C74B2F57433F11EE6A40F6552E40C6AF1FBC322D5936B7B9CFE
C229917BFADD79B0916B30EA76415B063C639576A7CBBE550B603A7CDDF69ED6
9E0F008F7D4FDBCACCDA98058638552F8086947AB52AD95D903307EFF07B626C
89BC3F4E4486B840407FCDA9438930E868FE27BF804E06AE0CFC309419C513FB
3D7AAA30C62E8EA8AB3DC97B57FF20E4A232C5FE538A98727FF8B724F03F0654
309606BA1C21847E7A501152199041A6E923DC6598A028D0301403BE571A8B2E
9DC34DBDFE7CBFB769AF74A91D9BEC11BC6198702DB31E3290D9D609A762A486
35338433F311223ED2BBEB70ADB41BE6318C60E78217351D7C2887981726F3AA
364C78E2AEF7610CDFB7548239AB5FBD7C186B04EDB037266D83424F940A31DC
98DFD6DAB8572428812A92E75756AA660A1FEBD40D60EDBF41E3B13FF4EB29E8
16BC88B1A02B5CDFF0AB23372AB3C8D5D241387831FE7911B9A20492D41BAAA8
7BB86FCF91134B59183D161522488630B411DF884BE37BBFB985B951A51D4C3B
1B498BD7902AA9DAF684C516BDC4183A710151775B585FF42FAF52079EE4948F
2B8839D8C0D560DBE9EC62BC4BA2630DEFC75754294816C0FB07EEC028F92565
6F7DB1746CC707A1440821E731AAB46F37A43EC6D9E24C5B36F4C25E3DBE3B21
DA0163D621B2F503BF7E531CF06E10F1C12428B9DE8B7A979AA9047D805DE97A
DF314F8FEB26042AAAE7EE8F48B2854FF78EAD0BAA27C3FF9F08CE74F06C77E9
C6AF79387EEAB467CA90E0813B9D2F7CA36E708BEA92ABAD07B6648EB9EAC2C0
7E28A18B6FBE1E00ABD7058A596989563ADA4401D0B5920F0A1A00777DE1AAE5
FD271483BE85D427F9D1DECA2635AADF87B503672F2ABCAF04630F807DA5C04E
C3E153F990E8B6814ADF1455F9B4F5B849A8B00E74E2F95D384D7997A3448F3B
239C3DEB9A55894F307B7CE830ED83CA0F3C2B14DB4D90105F7AE6D533CEADDF
2FB2CE94F51AC94800E381E6DF0AE36531F3DF3EAA5C801492C2F6808BD2EDDD
D70C32F8F7848D0A823841F5301645B0B730C20284444449DB18566A281F79C2
FF24AD8B1951B7BBF0CB39DF78341F0FBA42D8BB6F012FDBEB233D6013F0C4BF
01F8DEC1353F01366D5C8C954734159F8F4087EC2818BF3227AF98FCC6E1C43E
33901A167F1DCF795817FEB3DAAC7165A53092B41CBA107C33A3C2CF5B16B3E9
3DF9C139A2A6D2419BFDD812762432EF813D45E86F8973ABDFCADDD126C5F01A
1CEB493B18ABA1B60A885556AE2ABA88A88960E9823F262BC1837B733BB63D4D
213A7ACADA896EDD6E6A3BC71C03383242B73C69DF47685898ED40CB4CDE3309
8147EBA850DB4E3995918B33DB2DEA5BBB2DBDE6691740C41795F656514D5DCB
97C2A67EBEC09B855396EAA7865F311AA51496296AC84D77C22A1A852D2E4A39
8618A9D6940CED3BD00E69876FFB61DD6AC797B5BD517CF64998E63B77396BAE
0A44E5C59B06C1E1C5C7C196FE107720921B43D1FC28046EAB723961B3CEACDC
5382F46CC885E4F1E4DF95E5364F4845C0F333FAF7727E01E9748EB88FE33C25
1D7D487BA28B58BE7DCC4192D54B060AD010EEA137A97F1EFE03A39DA5A7C361
4AE6649C53C5A309EB47F0A8A453E7E87B58694660C3F50B51D84E4398E3AC1E
CFAC5D0DAFD3526C15A12A30E44715DBA5D6D05B3A95C4B5BA7B100A541534A4
3655E748018873E80B4B75AF0335DA53CB196185110B69B0E7E5819AC7FAF7CB
4214678B17B03C0FAAAAD3C9F52A2516BDB4B76E3EEE35EE8A8EF32643719452
3F0598CDBC9AFFF4EF09B294F86B4CF2E2E3AF28801BC9AEB30019636DEE6586
E94C73EEF663A7654293C85EA8EA134E8E220C89316745AEE774F1301A75B80F
24ED4B6DE02817436A03B13D6D4CD7B11D685C0CBA49A47E137A59FFFE369E54
946C8160BF4ABDB37AD6293933D142C5FB49B7B86AD8D35696BD14A51DC00262
AB66E680663C064410B3852239587C629E6C84B641CFD21A1F0F3D5217790A3A
E52D6EA8A335459FFCFA5824EEA1A0AA9DBDFFA711A8B809547EAF60C8F15B19
333357F8C3CFC72EC47D042C77716E23F1EF60487B6B4BDD5FF8DBD017B02451
312B18CAC458391A7B391B31C72BB5AD02E66395E9D984350C3B8354A4AE9149
BFDA1B3816C4B62C4EAFCA7D4218E424290CABC532664F91FFB74850DB860ACC
8EC0ADA3C47C2041EFD56E98058F06C4FFB3C3A4E673BC054C4FAF5E98EC3074
FFE530F310C49E5A26FEF1AE34C602BCF88B20A42A9126346EE379CD49106118
AC91F7F3EAC574C09F56B662305754ED3B44ECB8DD7E6A5A3E662C343C5A7A86
348199D3C2253B685EFD2484B9F8EA2C32879D530C73BA335E7E17C153DD08B0
69FAF25EBF207472123E0AB942172C7E4C26426765A4A10F198494BAF7E4DFD5
0BF52C4A9080793BD0E8731502A9D22B1F9058447A83D9AEB2A3E5898C1951BA
217200FA0CD4F1BC238F04CC62DF98B0B00F8E656EB7F8198E60EB57934F7B4E
45F33472D26B9D87F70D81ED3E68F04E70797084FB6A66108CAB0090A7C14949
FDA39CA4144339EF1CA40D6AE04895D5DB2CCF0848560E86FDF284C89FFB2B2A
7FD6C83C24968DA0C7CD73DA7E1954C0AB697B79769712C82E0C19A858C62908
312DCFB1B35625D6336B5CD21D8D43ED2F3480FD0DDAC5CC6112576AEEC585FA
57DD8E7FF67995AA2E65F0BC706AD1BE7734C04E222A920588DE8C5476DFE1FB
92D4BBE40D932EFEDF213D699B41EEEA0A4B99CFB1BE1AFEB5A3119E0E96D577
E6A04048C74831A71274384FA65DDB612E644F35C9DE10CBA96BE8BEEEC97982
64C23596A0C6B3BDEC7C6DDB78BCE99C25DF41B0B584FEABC092DDABB078E7B2
9811D31F3469B0039F6B3EBCCC545EAC35CB8D8BCA41EC386ECB8C03411893F8
1B6CC4274695CF552123A05389DFE7A024CAF9DF6091386C508E85B542FB8155
3CD5E178EC55A39BE3B7561CBE19782434E17FDE79272B6BBE6BE78B52E9EF5D
CEAF0294157941CA938490452CE16530016329BE7EAD07053CD973DEB5853B11
8BB53A17F6059A1A8F0A6CC7D5B8358D9657C610C9B5DA65CA2CD510FC8FE11A
82000B327D59EBFDAE82CEFE8F35F005E3BB96E196B1CBCBDF2CA5D32C42CBEC
9315E7C6A982A40144D40428896E8C0498B756FAB69AE27C729FA6F04812E98A
0568A47FB603AA7D18CEA753DA05A98588668F7419FC4A8B43E98D335E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMR5
%!PS-AdobeFont-1.1: CMR5 1.00B
%%CreationDate: 1992 Feb 19 19:55:02
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR5) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR5 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-341 -250 1304 965}readonly def
/UniqueID 5000788 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF7158F1163BC1F3352E22A1452E73FECA8A4
87100FB1FFC4C8AF409B2067537220E605DA0852CA49839E1386AF9D7A1A455F
D1F017CE45884D76EF2CB9BC5821FD25365DDEA1F9B0FF4CFF25B8E64D0747A3
7CAD14E0DBA3E3CA95F10F24B7D5D75451845F1FB7221D7794A860756CFBB3E7
704A52A22448C34812C3DBEDD41892577AABA7D555E9298C1A0F7DA638078167
F56E29672683C51CF1C003764A8E7AD9D8ADE77B4983F56FE2D12723AAD8BF36
682CFBB71B1D12210144D39DD841A971F71DB82AC6CD815987CDCF29ABC3CC96
5EEBD5D661F452C6E0C74F9ED8D0C5B3755551A172E0FE31EA02344176E32666
14B6853A1C303A5E818C2E455A6CF8FC9A66DC6E279101D61C523BD9DB8EB82F
EAF4D7FDF6372383C0794C4568D079648689A199D4B65BA646CF95B7647E4BEC
83856C27A8EF177B3A686EDA6354FE9573E123C12EC4BA56A7E8BFB8F9B75147
9DD79A743968F36F7D0D479FA610F0816E6267E5CE327686A5485AB72201525C
FB3B7CA10E1BF26E44C24E1696CB089CB0055BD692C89B237CF269F77A31DC81
0F4B75C8400ABCFDCEC6443CD0E81871CD71AA3064ABDE882C4C52322C27FA8B
41C689F827FB0F8AAF8022CF3C1F41C0B45601190C1328831857CBF9B1E7D1AA
246117E56D6B7938488055F4E63E2A1C8D57C17D213729C68349FEC2C3466F41
171E00413D39DF1F67BC15912F30775AFDF7FB3312587E20A68CF77AD3906040
842D63C45E19278622DD228C18ABDD024DD9613CDC0B109095DB0ADC3A3C0CB5
AB597D490189EA81239E39202CBC7A829EB9B313A8F962F7879D374ADF529BD0
5533EF977142F647AD2F5975BA7E340419116099B19ACCCC37C551215F95BB1E
F7F5CE777B793F81BBD695D7863B4ECB117E1029543DE2FD4B93EC81B29D5430
58B3F997000B5578ECC8903F1EDE51E82903FC9D3624203212D150D76747C659
104AB7E44EB4158451E7FE237CFA3429DF7E616126239EDB2F470B0CF398F872
26CC516B8356B8A4B2929702D39EAB7B8EA9C9036AF48F3DCB1BD5486210451D
867EB14C892E43BD6B0FADF88E822AF5FAFF43895EAD67E99B088F07638A49A4
79F8236FE6E544ADE6DD4F090004819425E3FEC2B885AD239B7629F87FC3934C
94C7AD29F042570AAD75EC861495F728D46C3DD4AF6BED578EA5F46660121B11
03BD4AD3597107206312864ADC4462FD0C6099161FF08ED02EB73A40BA8854BB
9B665089CAB6E907804957A1EAD076EBE0F0F4F711EC66E27F9034774C0D4A20
5640CDE2CE5EA8AC50349FC3EFD3634657476E2535193CAA52A8D9F8E8490163
163B90FD2B940754603A87119ACBA4F839324E784423917A5C75295B7D356F28
39A83FA714E9636A7D264CE63DCA8FACF6CF0D9277A6E77E96ED4D4C5E2507F6
76674F94DC080984EC50ADEC52B7B6F8004802769F55520ADAE539802E2DF8DA
4C82FD832924043B8D73258620D27770691224C89CB8543BABB96E36672E838E
30771CFDD2F0A1C77AC5067AB7D43600A502C2DA6EFC851F8426A43FAE971AA5
5A7236166DCCFF41D36A56570C92B50C7ADADAD29327A46127A57A3CBDD357B3
C91BF9EF9AF09D1702D23D01D34ECAFC69B6FE2A400CAF5BAD4208F596B78804
6AFA97F1F5659D57713FD9AF61FC20E5AE9389300E434305BFE31D951008C281
61A1DB710842E920B67E0A8665D4C1D7DCC2D077E247F3C740DF12BD0FD7D0A1
B05D6A1DF7654DB02295E6732816F70F1796DFD392C10AB9008C62E6CE186B65
F3D2455E10059657B44AE238B68C79F8CFE4A3F2933ADC6355328200BFFAE38F
6BACBD799838B3B03E3F16C37D887F9DC9ECBABC39D045C938935D413D8497F8
820CBB5328EB3B4B8C1FB7FD4C551AF51DD7DFCF252479C3A3BCD01C4C241147
E3A70FA5F53E517F08B9B31041381BFC3D511DFDEA81662578BC543BCA5F7295
80F00A65A59BA50BE4A96DF0BD8CB2FFA95FB873935C891444CC9F367DFCBDDA
DCCF911287AE5EE5FBAA0E588A5DAC6229C39622ACD3DB7CA17E82BB7E0A784B
635961DF4603FA22F37126140CF8202CFE2D9759DA17BD060DD809EF4E1C5F3C
04C80A6542B0A7883DF6BEFA2A5F737F505C3DB3B7BB1262F8EBDF8AED320886
65DF5E95E018375C16D78428008864E592DD5B9288DE0221EFE78C68B4F0AD41
C3130F86E6DBB40F568F44899A73CE4DA1DA18900DA075ECF89071BFB0F7B210
A101E3C1DEFFCEC5ADE72896D5E95D4C409B207D50E75A4E8CA1C0AA8C7F6252
97AEADF9D5D1A6B2F43517F775C39756F11DBC8EE2F42E0BDB27B5AE3043EE35
F01188E04B52726C59A1F8C0E0D22EA130814F6D4D756D0E7C25C742FBCA4742
685F9AB713FFCFDA23ED7E87CA70612107BB5DBB0F21
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMMI9
%!PS-AdobeFont-1.1: CMMI9 1.100
%%CreationDate: 1996 Jul 23 07:53:55
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.100) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMMI9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMMI9 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-29 -250 1075 750}readonly def
/UniqueID 5087384 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D5993DFC0930297866E1CD0A319B6B1FD958
9E394A533A081C36D6F5CA5FED4F9AC9ADE41E04F9FC52E758C9F45A92BED935
86F9CFDB57732045913A6422AD4206418610C81D882EE493DE9523CC1BFE1505
DD1390B19BC1947A01B93BC668BE9B2A0E69A968554239B88C00AF9FBDF09CCD
67D3B2094C11A04762FE8CC1E91D020A28B3C122D24BEAACF82313F4604F2FEF
6E176D730A879BE45DD0D4996EF0247AEB1CA0AB08FF374D99F06D47B36F9554
FAD9A2D3CE451B7791C3709D8A1DDDEFBD840C1B42AB824D5A0DFF0E0F15B0B7
22AEEB877FF489581DA6FA8DA64944555101EB16F7AB0B717E148B7B98D8DBFD
730C52937E226545CF8DC3E07C5BA30739BAFCD0F2B44275A6D503F582C0FB4F
449963D0AD2FAFDE33BA3D77BCA9D1DF878DDAFCA2E22CC4BACD542B282164C7
97C2BDE318AF9D501CA21F6E662E7AAB75A5F24D2C182E598D175D44E88AB19A
E7CD59584F95B389183EE21B525BF52A3F23C0FE5383A5565A19361D716F508C
AAB78411CA5A4D27552CC1C435760D5A89D535B71C593E755C616661363308DA
A683F54ED0C23FB2C225A008392B0B719F66F11A946A090B7C00B662A3C69599
B4ECB0CC70C85C4BBBF207E0026F6C7A19F2ACFB7A60804FC98A4BFFD7BFFF2B
9529E6D9D4238002BBC255BC62959D6F3381FE06E0621B879D5FE5B541D45A1E
759A6E7DC32B1D1632368D09A97039DF255B6492B1B2B7E2C1434E8306ECA7D3
5A79B6D614B4979F10988BC76ED53A5F45315CD7DA216221F842FD0F3E050DD2
BAC23C984D506D8F7D614BCB6B244F5F41321549BB0BD041FBF3053307168680
3435E9C942FD1C1C0D9A6B89E1493F97E7AA44F25589089E3C61293FD9C05219
72A2EFC13430F1E2236D87F6028503FB67C51B764E3A63CB16F35D185615330E
B210B3B35463E4C6E83D258AC3C496A384EEA9534AE187DC782A9521A491F072
AAA8C8870CD1649632E1411B9174E618B72682E17CE489C4441746E27F76E4A3
7D02F149F636B855C45A226E9DCB9ACEC5986AA6176E37E7901FE1C5C60523ED
10913A3B4BE3E8518F2DA59763C72B43346C5D2F358A9D20C28D3830C0217621
AC01E612589DCF1C7233098AABBF055CDB617C4399B7635D0AC5288B4E77C30F
5EA6DC1960A1767E8DD1D287B45647A3881ED8B53494A313F759E255BD93C6E3
7DC0BCADD45D21CC0838BAD4A9A3D59864EFD680B5A50537EAE58BD850E22892
AA0D739869BAB321F8E85B1EF41F5EF703F2D65CEB44A46576C42D8564435B6C
33CC3D98F671FCC8742E059278ACA932F17EF5A79CA15710E4A3F12D4AB36B86
73AC92CD9805441E674F6B792936C8022570E9B663A3D758EE03D5CA9D4284A9
D79E7CEED75E2C4E274F40F0CADFDBA2973FCC66636D1CBA44BBC388C0F7998B
6104AFE222491EBDA1049705D6FEDC6CCC8B30548262634CC6453CBF2D5D110E
E4876F68FE247A88467A551674CDDA6698F720AD310C3D68EDE8B7CCB19F7CCC
476DBEB6BE65EB60CD56CF07DB6095B96E9FF1B4E07848F52E5D5DF6E7D68F60
19FD58488A1F36B31A7ECCCD42DD8911CB497A544EFAC684CA9B7CC98667DC1E
38F9B4E9685CC4FD494D2F9528A59C0CDB76E8CCC4A1725DD92447293F07B068
0891FD05DB2DD4D9C1002DA5ACB93CE168ABBACA05EAE82288DE0CAA41891B57
ABAD5399A5F82F8A84F80C8E48E19C3AAEE6A1AD45C38207AFF3C083D42ED23F
1829116FD536D1E139A12DFC066C8590CDA400DF1BFA82519584FE2A1377E6D9
1A5E43BA62DA08AD1FE8EA31A220A11F547F8630C01E76B67EF513C87EB780E2
FD990E01623CE60922054F3F892539D479540ABD04FF764D7A61AEBF73AB99CB
72FB2A8AE41536C9473458FDCA1E2BD5F5A24919D4360F652A2D142E8857A74B
BABD0D3D7DF7425338F58DE6ACD1267FFA3F9471AA11B3025F3F5B151EBAE131
E2FBB2D591883A7A871D0B9E8767F846D9969D88B41BE3E722CF232856128E2C
01E93B8DFD7A569A9FFE1E039AD7209D848B883FCA445E05C7A9E8851277CD15
798C1F2411E0A724735001F0FFFFEFD1BC7F82A4627952C9F43C8F81BFDEEE87
CD73417597E34A7D6AEC3113D9BA467C9AA4AD4904AC5693D5750FE2971DC34F
40536B6E1226A5383EF12D57335B8AFABEB2381CB47F4CF2BCE32F4CD0F47229
04AC46CAECF702BE9AD2CB323FAB4DB5015A73EAA2DA3BFEB1B759F2CC9C93E5
A33EC243
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMR6
%!PS-AdobeFont-1.1: CMR6 1.0
%%CreationDate: 1991 Aug 20 16:39:02
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR6) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR6 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-20 -250 1193 750}readonly def
/UniqueID 5000789 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF4E9D2405B169CD5365D6ECED5D768D66D6C
68618B8C482B341F8CA38E9BB9BAFCFAAD9C2F3FD033B62690986ED43D9C9361
3645B82392D5CAE11A7CB49D7E2E82DCD485CBA17D1AFFF95F4224CF7ECEE45C
BFB7C8C77C22A01C345078D28D3ECBF804CDC2FE5025FA0D05CCC5EFC0C4F87E
CBED13DDDF8F34E404F471C6DD2E43331D73E89BBC71E7BF889F6293793FEF5A
C9DD3792F032E37A364C70914843F7AA314413D022AE3238730B420A7E9D0CF5
D0E24F501451F9CDECE10AF7E14FF15C4F12F3FCA47DD9CD3C7AEA8D1551017D
23131C09ED104C052054520268A4FA3C6338BA6CF14C3DE3BAF2EA35296EE3D8
D6496277E11DFF6076FE64C8A8C3419FA774473D63223FFA41CBAE609C3D976B
93DFB4079ADC7C4EF07303F93808DDA9F651F61BCCF79555059A44CBAF84A711
6D98083CEF58230D54AD486C74C4A257FC703ACF918219D0A597A5F680B606E4
EF94ADF8BF91A5096A806DB64EC96636A98397D22A74932EB7346A9C4B5EE953
CB3C80AA634BFC28AA938C704BDA8DC4D13551CCFE2B2784BE8BF54502EBA9AF
D49B79237B9C56310550BC30E9108BB06EAC755D6AA4E688EFE2A0AAB17F20FE
00CD0BFF1B9CB6BDA0FA3A29A3117388B6686657A150CE6421FD5D420F4F7FB5
B0DAA1BA19D638676E9CF159AC7325EF17B9F74E082BEF75E10A31C7011C0FFA
99B797CE549B5C45238DD0FADD6B99D233AC69282DF0D91EA2DBD08CE0083904
A6D968D5AE3BD159D01BDFF42D16111BC0A517C66B43972080D9DD4F3B9AE7FB
11B035CE715C1218B2D779761D8D7E9DEBE277531BD58F313EBD27E33BEF9DC5
50C7821A8BBC3B9FDF899D7EAA0B94493B97AFEAC503EB5ED7A7AB601E46A2CC
FC2A276E7502892F26B8E36F84B72BBB5CAB7A8B977EA71F0933ED4D23381C9B
5A109609AC93B063442561EA01690617BDE9CB567BE082F1741798F7E70A03E0
A42B0AFF0F002B1873299901B06CEB5E826D174D9256368F3CD6CE1BF7E990E5
B2D2C02F150B9FB8351E964C38E19D59F3ADD001316A1D3CD06B8868A799A1B5
2C9F91F46AE11294585C3E8B848F41F08E215569D5038A934D77D94CD4693E24
C364AF9C346E7498844C19F2188F02148E9DE193486DD925344373BC133E3D77
ED74D8DA0F6D7D8F717125C4B1099CBA9AEFCBBE338A659E14E081A664B0442C
ACA0D1F31F64AE067D74A6B39AE50F149DF744B3AFF5F9ED11EA05208D60F0A3
4BDE426F89BFC5B91261814321CA18028A6800D718B4FF4B0BA55EE7131A5166
74C3EC11E6F8183E8EA2D7F1B0D6E550F3165B0B2647AAE1F425B0735BBCA591
01827B097A46CA12246A122D4CC1DDB7C2821CD5826E69879E876E3A2CFDF01F
1743F4A2486FACF38ED4B9F796AA4ED52F03C7CAE44F4583B06EA9D978B25912
CDF39253C6C1375DDEB40D09008E0780D326F7E557EA88067D852BE17521B398
511113D33AC17C26318A074336E11A7B84D390B89C8AD8C56BB00F17328CF77C
7986A5E274BB8A496B1098D904D9AEBED2316B75F03C88572E35A0EBDA34B251
BDF790317DD5AD00B46C362B2932DE0AB5292616EF9DB9F3292F40155ED0E2B5
B8505913102EBEEA97288DFBBD23B400B153E15264EDFA6D42712D1703875F27
C8492D74F1F8821811A109842FF74FFE4CBB994B16F4F736A743808F775C13B3
7623DCB63EEC224C8B930F2B1886F2BFDCD3FCE095C2BD94FE612B8B59456FCE

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMMI6
%!PS-AdobeFont-1.1: CMMI6 1.100
%%CreationDate: 1996 Jul 23 07:53:52
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.100) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMMI6) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMMI6 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{11 -250 1241 750}readonly def
/UniqueID 5087381 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D6A8F05B47AF95EF28A9C561DBDC98C47CF5
5250011D19E9366EB6FD153D3A100CAA6212E3D5D93990737F8D326D347B7EDC
4391C9DF440285B8FC159D0E98D4258FC57892DDF0342CA1080743A076089583
6AD6FB2DC4C13F077F17789476E48402796E685107AF60A63FB0DE0266D55CF1
8D0AD65B9342CB686E564758C96164FFA711B11C1CE8C726F3C7BB1044BBD283
9AA4675747DF61E130A55E297CA5F0182A3F12F9085AF2F503481071724077A9
387E27879A9649AD5F186F33500FAC8F7FA26634BDCE1221EC0ED0E359E5EA5E
6166526FEB90C30D30099FBDC1BC2F9B62EFEEC48345160804AA98F8D0AA54B7
A480E715426651865C8E444EDB798C7E11040AF6E5A7ED1888653C6DBF5E6169
70BCD9C063B63B561EF165BF3AF11F8E519F37C6FDA2827685739DE2C48B5ADE
EE84F067D704D4511DBFA49E166D543CFD9ECD7417055D8A827F51E087CD2927
BAFC7E6CFBD70B0FE969F890A11149D3D44D422C3370495DA9951AEE7253A49F
3A9444C8CD9158D84117299F7F2332FEB0F94E6ED8BC7AA789A3219BC2F227D3
3B5BC75FB53B55D72AF4A6A7BB613FA235B11BB37D059FD87127CEF73D5B3FBF
9F91ABAD78BD9240BD9525EBA78095EA0BDB25D1A19E876F292882EAD5619D46
D20317A345D931F4FF4EAE6216C27044CBA525E3B917CEA25A04C120466C4B93
FC720E6BA832A06CCA0A3916CEF0968D49085AEBD243C41A448289A6F05CE3F5
79148DC112A3CC7E8FF810B8C1A09E05F496C0F1EBA334E42E05C376C98F5F69
C06C71BFC0A2F3AC9951CFBB143C66FB84F9C4ED27DF70869352D61BD5E11508
0797B87C709E3C151EB44E478CA576D257DF226C00BEF70FDBB744157FD4D405
A7A50FA7E955C0D54AFEAB14DEF6D492532219F8080A0C4E830A2080E88E999C
F15B2A0FF5F70FE46B9F3EF4A6859C5CC946EB36A1FFCFEEA9452FC5621A44E4
6B6B43FCCAC39DEF6F5D20D15B0B147398592EBC438470AF9E273A790F886483
AFBF0C47746F821BACA7375F9864D315BE78ECC9F254E02D988330B39033AD71
EE078B1DC68FF1BAC1F2CA81DE7F8F8BCF4C5C18DB50062ABEC8189C40154C66
ACD5854EC5C68E5957901975903E9E1D70AFFE1CB76E01ED63889DF510AB684B
F15A27F689C1A2AF9A08CA65F83FB096850B26691760B69CF829105BD884BD12
B32F2F728C6BD228CBE71313D994564C94C2096E1564DAF375DECD412B63008F
0905A288F6A1BE4C4DA96DE2FD17141C99FD91DB2D13D0B103AF656F1F58CD97
6D4D65E673766FAF9BE5EC26D37897118537D337286896283E97237498E344B3
97173541EAA1E975375089ED71CB04A8B00D651570AE3738259AF8F9B91DC4FB
896B5C067214E20D7944FC0C55BA46AE95AC39BDD9AC4BB21D4A6B3E57254FBC
3AB8F973D1BCB7F599088730765A45062FECC17AE48AA803C1234F01D3BB76F2
B3CC86D513428A1680F3C4EC21AA6CC819DE1799261E308C5E0C7BAC3E519046
554B187DEEAA1382A2345D0DA4FFBE9B53B08E58FFA1FAF123259A61C999086D
BF1F015C92158B333C1F80223189F6E43880B1C36B96F7363E0DD1870EFD0F60
6D8DEC55DCBEB6AF576FF03DC18731691F54FB9BABAABA730D21585DA8ABAC88
8D4277752995A8FB28E3A86054951793656F49E2C8D8C15B0B8B40A7A3AD4821

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMSY10
%!PS-AdobeFont-1.1: CMSY10 1.0
%%CreationDate: 1991 Aug 15 07:20:57
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.035 def
/isFixedPitch false def
end readonly def
/FontName /CMSY10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-29 -960 1116 775}readonly def
/UniqueID 5000820 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052F09F9C8ADE9D907C058B87E9B6964
7D53359E51216774A4EAA1E2B58EC3176BD1184A633B951372B4198D4E8C5EF4
A213ACB58AA0A658908035BF2ED8531779838A960DFE2B27EA49C37156989C85
E21B3ABF72E39A89232CD9F4237FC80C9E64E8425AA3BEF7DED60B122A52922A
221A37D9A807DD01161779DDE7D31FF2B87F97C73D63EECDDA4C49501773468A
27D1663E0B62F461F6E40A5D6676D1D12B51E641C1D4E8E2771864FC104F8CBF
5B78EC1D88228725F1C453A678F58A7E1B7BD7CA700717D288EB8DA1F57C4F09
0ABF1D42C5DDD0C384C7E22F8F8047BE1D4C1CC8E33368FB1AC82B4E96146730
DE3302B2E6B819CB6AE455B1AF3187FFE8071AA57EF8A6616B9CB7941D44EC7A
71A7BB3DF755178D7D2E4BB69859EFA4BBC30BD6BB1531133FD4D9438FF99F09
4ECC068A324D75B5F696B8688EEB2F17E5ED34CCD6D047A4E3806D000C199D7C
515DB70A8D4F6146FE068DC1E5DE8BC5703D288CAFFEFC421ABEC649FD87E34B
8152B8403C7DB49860ED86B02711EE6E5B72D7D9B408B1FB89D5C1C78ACAA4A0
4E176AB7D7281992BE94DC902056793D2F8F189600650843FCB5CB77BDE88C4B
449C6606FAA7FCFF77088C49D0AE10338E547A536458B5054FA949B2E59DCAF1
71FEEC5055076449EB657570740EDAC787FB768067308121EB21B34009B28B2F
0E8B445E0B51AE34982D55A67C8CB762C6DC2D07C88F5DA53E7416C74F047E15
1E3B6980F5CA71F1AC0D4A05BDD0A63CB5259629DFC61871A5E17F2491DE6597
868CA3816A8A8F77C7A4633A8A1CCEB5AED57E7912F3691100308922DA1D4C42
B20F3CE03D4F4383B5E12E7341EFD0051C93DDA34E02525B340DA456F319AC04
A333401AE5762CD49E8197AB1EED9B4860B9D55BCC113AE105CFFFB8CB8E8433
DA2C59A4CEAD9364575310463F4C7A34D350A68BB7607B98137827768C94731D
580688376C455F0619C0DD1382E7E8EB06F695142B788F4B207F38A82E2F61DD
0B95A2A8B5E5CA68CA6FBEEA22FEA7C7A8C5DC6EC03A24A8E5788AA9E0C59845
F5E18B8ABDAE22E4FE3B6AB3185AAE8EE343B5C298FD14AC2ECBD2848C27FC88
C7280AEC16E78872BCCC7746F6928E0433130FDF4D87AE1D36E54C7DAF0B080E
6E0A4A4858E7504B4593499729EACCCB85A1243C1447B40CCA143063FE07185F
FFD3EB6F36669B7867FB23C33FAD6621A9231E9A2BF59737090AED1753BAC28E
13BA82B88F8A55BD87949F80BE03967BC28AF30DEBC4F8E86D52F42F0A99B321
F3D8062AA47AACD250F5AC564ACF91908E5EC4A4781680FF513F8F33BC12573C
B2A18525F1DE25CA26215C2818C0A865E38D64B7AD597129FE4EE723A2162ECD
D488EB175865BD7DF52B58A60A054DEFBC2BC974C80067A7D7D4424F2AA51296
B3EA64C7E37829D833C8D68D0C7262CC7B64AB3CC30A628809CCA073C12C7D2D
242E3D633B04B05C51287707247B229DAB64E186B2A4A5AF4BB754A6A9E52F36
C745E21612E28716CF1EAB3D841A1FFCA4221284A572429B3E54A835536A0D7A
72BB6F2725005E7C18A35211E51AFAF80F268F4ABD965B0874BDB19A8457E35C
68569D43E97677A73407D5753ECC68F430E7B1CC5FEC5B59A3E2DC306313ACBA
2B8E458AD286E4E03D389A13839CC860EC891304CFA996F149B144FD88C0866E
D5D4B3E3906F08D4EC307CACC3EBCC43447BD062EEDF84AB343B68A8FEE51E1D
14C3509550E9C9EBB02305F025A068004EA0AFE6AFF72E4BC84E750A37A3ABC3
02C78B52CBF8869AE7F9C87CC87703399460B17DE4F17D43CF3A19E3CA8414A0
0AD421B1FC1C8760BD9D8188ED8815A4FF62077DEF24164067A34D08033C2AED
81CE1765204EC9FE7464BC96B720D673CD2073161E68B1F4673F648781D28366
9873C1991915D8D4D59C3FBD692C34D6C440539A4CFFE42178650D3F8BA9F4CE
98B48B8568C8FA7B094ED8DBA1E5F00BA2AE5CA35D1D015BAD73E25E7E813304
43A2E3CF545D837385C93554F8AD6DBAA487E34B9444715B3BF3ABEB9501E530
EE55684F9A2B071F4956AA664B76BEF94A6138F1921C260679DB8162CD9DEDB0
5000609E868F8AE9DA47A62237DCE052F2C612
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.1: CMMI10 1.100
%%CreationDate: 1996 Jul 23 07:53:57
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.100) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMMI10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-32 -250 1048 750}readonly def
/UniqueID 5087385 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D5993DFC0930297866E1CD0A319B6B1FD958
9E394A533A081C36D456A09920001A3D2199583EB9B84B4DEE08E3D12939E321
990CD249827D9648574955F61BAAA11263A91B6C3D47A5190165B0C25ABF6D3E
6EC187E4B05182126BB0D0323D943170B795255260F9FD25F2248D04F45DFBFB
DEF7FF8B19BFEF637B210018AE02572B389B3F76282BEB29CC301905D388C721
59616893E774413F48DE0B408BC66DCE3FE17CB9F84D205839D58014D6A88823
D9320AE93AF96D97A02C4D5A2BB2B8C7925C4578003959C46E3CE1A2F0EAC4BF
8B9B325E46435BDE60BC54D72BC8ACB5C0A34413AC87045DC7B84646A324B808
6FD8E34217213E131C3B1510415CE45420688ED9C1D27890EC68BD7C1235FAF9
1DAB3A369DD2FC3BE5CF9655C7B7EDA7361D7E05E5831B6B8E2EEC542A7B38EE
03BE4BAC6079D038ACB3C7C916279764547C2D51976BABA94BA9866D79F13909
95AA39B0F03103A07CBDF441B8C5669F729020AF284B7FF52A29C6255FCAACF1
74109050FBA2602E72593FBCBFC26E726EE4AEF97B7632BC4F5F353B5C67FED2
3EA752A4A57B8F7FEFF1D7341D895F0A3A0BE1D8E3391970457A967EFF84F6D8
47750B1145B8CC5BD96EE7AA99DDC9E06939E383BDA41175233D58AD263EBF19
AFC0E2F840512D321166547B306C592B8A01E1FA2564B9A26DAC14256414E4C8
42616728D918C74D13C349F4186EC7B9708B86467425A6FDB3A396562F7EE4D8
40B43621744CF8A23A6E532649B66C2A0002DD04F8F39618E4F572819DD34837
B5A08E643FDCA1505AF6A1FA3DDFD1FA758013CAED8ACDDBBB334D664DFF5B53
9560176676B93DE01D2E5AA1A9151955DE79CEB9B13437B8E59B2FD31196881C
95AD567BA129F9A0BD30209D3C31E3C67764C386FE756AAE22D769B7B95AE4A1
627EEED77BD67C3D0163F2B047D5D565D18E6935CCFA438A9D3B1469CEA5B611
4D1B7176BF838CF90920D6A2640BBDD6EAECDC46D6910FFD6F4C6D9605241A96
2DB98280B19332C57B6CF863AABD0BEAA774310AFB4DDFE5E445D0207ED70C22
4FC1CE5FDE1062DF5223CC6826937DEE505CC1EF7C5F70CCB4896B2C7FFBB441
54EDA74B301F2A30FBA74B8EF94C216931AEAB58D43826A41A879A41BD1D6526
041168FDAD712B4C4203C7E6B8E0DA4E7E3F74996CE190B97EE52C307B7FF599
F6C602B0B074C28E1B9B472DDB05FB4E756390205D9DB81672129931DAE595F2
274BD52F08848597D5310F55D3F9100080E193A5E31F1B9421392BA3EFDC6A0D
41A5B07E1252AC1A2493F62A2CFADCE0B5A71B0F11534688A9E35A0861A24D16
A7324B1D4E2BCED5B60C8A1F11780988E583901298778FE74CD98BB8C569CBB9
3A605343B0D5969CC0B939CF7A66992A4EFF4B8B766B7D4D2825732A8AAEDE48
7C1E3FD6AC770793C04B3B32CDE830AADBAB1307E4F2FCFC97335B70255F1493
D194254707E6F1117B5F3A986EF800507FCF2FB2E4F39B4E3DE6221FFFF45A16
0FCC28603CC21F10AD19C8CD711EF23EF2FB50753A16FE64A78B1866EF107474
69720647431EE91379010D2406F9F884EA8582543E98E0D4A4739193E7F57E6C
DDBEC0858ACA32E25859B3B52D608CA1ADF773A91EB8E566F161AAD8BF240199
B2521A065351AE921C15B2B523DC58F62982B0386BE63CA8982F80A515E2039D
45FB89BF79C576F7BAEFD895A855F388A9D3994D67B2B5D02355C5B96E2CAC20
E13EEA2B8BDE499F23A4A0986C54FAB04A81705743E7CB3F2ABB82ECC6F3EF82
065B784A1E776C70F58E6BBF3314537831ACBE14045AEB38BE5DF282CAD71566
5AB3992A72E60015636578681577247DA0538C1B4AAD89123015928ED5825FCA
2635A2CEAEB7E6679AA5F02E54BC25D10EEB06BEC2756430F7422B4B52AE5969
ACF250ACB221C5402D490CD8A73D2683C862DD846D20A56E5EA12FC6E362BEFA
32EBCE13713946D253E58F60302DD42690FDD7F70E3C96F41437B81151F0E825
6E3255F24158E1BBEA848B299A2C25CA5F4E2A27C72C786D828E2819F9269D33
5D4773321291B52746551AAC61E29A6DDC149E586F604FEDCE6DD265474AFF4E
67F31F5F7B74ABE54CA73B14BF8BBE602820CED7210226FB938DBC3FD8A61A71
606A47A91D8316E8396567AE34C45111EFB2B961678C8583AFA5110E0775F40D
561D03292FE21ABEC090373305F386A1381D19570073691673B1681F42E06573
2923BD9FB4CEF8979D7F2EE6C5A4D3F5470D3A8C7F3ADCC19A12A655BC3F2C43
B97D26182B6C980731AD60BEEB1ED2D286C62BCFDF4E729B564341385AD662F8
4A4C0B0947F90E5880EEADD948751A797FAB1A8BDF6B0B88C5A82A2D4C401E38
C82C2A10696EB07ECB98E9E9B64315CA98619019D929C2759CD58B7C94ED38EA
29447DA91480A87352DE3D47313C5E69A4BC89BB32EB456D66D6959DE0A9ED36
E23C96A2A256A2E5A0C273D540692DFB81F0F0BCB8E680852CEFA4792326507F
C039BD8AE1D765ED7C75AB62532FC9D3DBDC8F936745EC726FFC2D4467F9CAB5
8962FED128F2CB6C2E1B339AF0F5832D44225382BA5609A3066A7911518E9A15
EE057DBE32EC809D70780A6E13D88A900DD7AB28E7509E86696735EBAB0E217F
79E8D8EE4CA8BDE2FFB7CB82ECA4EEB2001F142B66D2D74FFD5C4EBC1F3EA4C8
0F7E1E7792507C7319BED0085CB92D80B7EC48E3EFFFC98FF701CB91CDD1A3CA
A22A08CC2E8232191A7C6E97FFD53331AE9AA746CAEE8581245A263545179A09
1970A067B5B4C6FD4A77E395D38A7A95F6028F0756BBB2A2DAF977701535EAF0
B19E221746C6FB6E0C94AB81DEAB9513CAE8F5C1D62F37EED0F8512113A6AA4B
610A3407368A879B71406EAC4369C54D2D9392AF1F7DD7CB44E8359A99EBD190
75AE05D316C0FF4032D8E045DD334AC818D58DACF1F77AC186DE19A823B20275
D737E3B25820AB574E54CCD2F93196A9844EBD9496D93249F82E90DABE65FC51
9C409F63DEFF7A003FE911F4499BC534524041158BECA4DB010FDBB194FD64D5
205D1D327ED42289139C4EB9D21AD4D55E785B8E2C2D0A8652E6BFB26844862B
1F890CB175A22BDAB0F36F1CB5B4AF554C11485C5146179CD8A783D069467F4C
CCE0128937BF4EFE1C6B5E2F6A2352B37BD54CD1E59232F6EF2471E558C9652A
84F3E8D218021124E49F063D15C989785AA25C3A26D7EE21EAABF24A4D311564
70EF2A82B5187A9B23F320AFA6D233F31793F3A7A834C700C43277B0FC41B865
547323432FF138FBFC62B2E65DD152F93F939C8D28AF51CCC03B82F5E5B759E9
85EB726D3286C7D9D2A68D2C86F28FB293B2361EBC5D2FC6D13D0C3ECEAA301A
2F02690D6EB851BFDBE7CC1346ED84E2BCF4760634D0584CF2557F29EE80AD37
871F83BE66756DEB4FFEB935728B854F313A194C646CECA442441A0627823FC5
E4EFAF21733B92714A947AD1310B09692C3AB7ED71DD0B4F0E204D99B7584153
27D5ACB0A1E212A9EEDC0A4834734F60C9BDAE80AC3913320B681DCB8181256B
7154ECA40784E456D5C8C64CAEFA0A5B72DB1D041FD40FC910AB657DEB878E14
8329B56700C255834FC4EDF76C23DD934FCAFFF9C7924BB09FB4FBF878BC8AEC
D42B03CA8C514C2D84FFEA66CBFEDCF2D3FFD8ECD62F9023A56305E5B476C135
3FF7DDB5DA757F9F1271A05B88DD01E7517C6C56DA585AB09F0B4AD5665D0B9A
90C87B088533C53779CD8838B4A0438533C04F53FBEB43CDC533F3AE52C2C3B9
D1CA3969FC28FA3A64264ECCD79C390E149AE2DD0E20940CDBFF4441611E5A53
C432AD72E9EC773CF578F9C18944123AA3355BF9EDEB52623AE186D116BADAD2
275BBEB7097566C3D9F84BB6BE49C3FA7A1C51F707F96A4566B25C1AF7726748
E2AA3CDD5420F9946EE7042DEAC0457BED3FAE907B039A93573A669E321EFF83
E20A5E7DFA5E64454D233693F4335048BA0B25E33224038F87B2CA83DD43A46C
D3856A8AAC0444507CAEAC127C45E772DE5B00C46210874A04DAC5FC0CEC10A3
8576E84B76EF65D411E8B77D099A5B98B7A14511F9540763D8115696006042B6
AEA5F35E1C1430E50E3EBAB7806611210D34D5678A32468C1177C4E32C6E6064
DEE8157BF6BF62C06C6069F29A8DF97751EFF48721F92D3C66BB4704CAB92FED
3512C7D8CF9D6E260BE98F7596E64890F8613071494EB937C17DFC315C901124
FE18664B3A042201E4CA44EFA7E8B2A2CADEC41CDCB4B24CE79477A5A4DD0C1E
E9FA6B8A904F8B250A39F956D3987A1BBD3C78E82487E9D9E642DF147D2CBB17
D31E0BFEC9FA92C00133CD4176935A5FEE1A50D51AF87B97D874E16F575AF701
25B56EAAFB44DF4FFE6C4CDE98A9C0AF7067163AB298355EF263A3CAEE618350
2FFB5B4903A3DDEE80385602A7CEFE4F97F474FE2C28CD5F696EDD8865AF910D
9C774F1052AE7B42D8645C260EF5C9893DD52884903DC553E6C8BEAF5268590E
C267EE83E7A7B988BC758007CF66D6D36C7DB194457F9FC9ADAA55475F4F5DE0
FD481C38469A1BA97964AD122CEE8FF41E1D09E4911AAAD76D445BB7B64BC7D1
B85E09E82B82EFF80A9D9D3061654B5D5FF37BFBBF501785E7336E8A0B3C2D24
DFF6DC0CB7233D743F179EA6C5BC6A3D5FFEB39390528562E677F434079D73FE
803F085461526A8EEAF039A531AA687B6C8425DE8B44A3C23E8C33AFB01F3E84
E2861BEBBBEAC759D7C950E9946BD20D795D9969544D373199576964C02E316A
32D765A50ECADAC5838941EB914192AE31F1FEC21C55EF9828551A9F210F5AFA
68EAE2FFF549D4EA32CB083E9952298711E17EC276B2DC1BFFFB40216390E1D7
4FB8215F95AFE19AB3C2E0D758E2396DDBBB5394C192CDA02D69CAB11BB419EB
9731D0529DC88A41BEEBD4C4DA8F0838598FF5744D9DE7FD8C889E0C8C09EF33
C633269C004EBFBAB91BDFDEE36980834E2078CBF0EABF020DB6FEF8E3E36E47
1F27BA2071260D92180A5FBE9BDD3AF2B6C0C1EC5C92A5AA45765809B340C2CE
3352DC93757E1EA91E0FFDA3D2165E19AE858CAB1EE74E2F1A4FBB7866E877CF
258A9B94B44C36D2AF12BBBD251ED7EBAA4D3672D8A0A1E1F67F9C479AC0DA5F
B47249C42A6B5CE85CFE16555203D09E221F6DC3EA53399C5CA95E708CF45F16
8FD757102B432E3CF919B0E7967524F17B0BA1F5B1357B8C44107D9A450B4784
0AE60C0C2B57E93F87A2C9C4FDF0821442A3055962EDA33C32EFF8E82386C4A0
107F71A567D533C8C6F6F738F3C841F01E94E9E31C4F2E9BB49A46B28B8AFCE9
FC574C6024FE6315785D263739E9DB177797CF462A6F3D34F67BEE175DC1ECA1
E619F507787E7BD19F7153A57886518C45B7EEA85401977A7F5F178975B7F07B
39CE15B63A78BE1CF3E4F66AF771108D35E2C663804ED52844B6AF3343D3B66D
CE591EBB3624493EB99DB0CAFCDBCE265E9A48BAC1F17FAF581D01A4C4AA050D
6A0FBCA3FECC852D6249DD94019C7F5A2AFC6C35024E4A4C3BFB0F14142D3848
49A0B4B0D61662FAEB2B575773AC5777DDE79EB5B9E05556A00C1DE8858251B0
F1EBBD7D48D1164E33BBAEC3AF26B105A2142DB4D1B6D92956B646C7386F386D
8DC47F10ACBE80C38396536253CC8B1ED5D4B61AECD0A003E30AC8F576AE8AFC
B92022915D9BFECCB9AECAC415F2923008994840343C269F94E4DDD507F5F5AA
56E3A0A6E3347CD6767249CAD3F8C39071225DC961EC7C04CF78E30D6A4B2835
EA8342A7E6EAB3005E774E4221DFE57C5EBA4E9C2439B093171592747D34FB84
1B22730ED2FC6C2C06525B785E904D2BA19DE5F9732DA3E54BE8FD456C17490F
C6A5BB003301B922F501823179F309CC81A3A4883B3A2FB14EB8E6FDFB36087F
F67C98436DA141657EC3BFD5B67E7FC8534A41764D3747C1C66FE7EDA6E411A2
ED68727228E331745DD9272A965D06889FE3C95344A7C04E80D5194CF4B7F9CD
273D5FAE96DEC205086459F6302C314F6484D8D4632F182CB0C3027336737C86
4145C097C442254FA05120B4809D9202E1818C6A932A017E4DB15383E7E6E3F8
F28E7266660811CE892E53A6DDC81C641AF628E6EC9508535D31CAD2D6236D8B
9D861DEDB99399AB3CC97B2E4637D511FBBE4DEBF59E92CD51042F60E823B463
046D33B257C377C025B1CE4316DC086B5D23D95BB32E435D5A9117835961F965
3F6471F26A2AC7BFDD035FFA99BDFE8642A61472D7D10CE7437A8F4DE6B60683
2E51B357E6C6462D308FC7A350EF844A5C71EB853DC7D23612110B5556671E92
8588A170D7A8D56E4D9398EE3C28F53F5D5ADF8C0E21D1695A5925E297B129B4
9E2A1C3A4119BCEF16FD36EEA1D27EEDB732167231D2318404519BF52FC18758
35CA6F917E2A39B3BB29EFC844C981A1A2020E7459104E27C83363C53E7E8354
351BA1E562D4E0B75F5617D19589D97702F23D0D0EB686215ECBC05DC193475C
3A14F0AC39C3386975A09F9A528A58221760AFD77659CCB7AF63D84624BAF7F2
E484EF89B3D9B993A0EB636E2230978B0A3D3FFA4ED6D1F55F53A7D748DE13D9
344A8CFB333802DB51BF10E8D4D431914EF5B458692565B006FDB228E59E859A
C1B96E5C3005D33A6F8267789BF29A46E1775E94FD9711751206EC500AD68EBB
437F9424844609B895D7480E6B2CC846D75124E186504A87D28EEA6102888F7B
E6DF93D997F917E17B03C67C9C8113E2263FED855F4CE790185E673FC6D01A5E
B5A2D114CE2F4451F34DA09DA391E9472838CFDF72D638ACD7B4F2300CBBD508
25773B3BF70B2DFE4CC7A04F22A14900
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMR7
%!PS-AdobeFont-1.1: CMR7 1.0
%%CreationDate: 1991 Aug 20 16:39:21
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR7 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-27 -250 1122 750}readonly def
/UniqueID 5000790 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF5B8CABB9FFC6CC3F1E9AE32F234EB60FE7D
E34995B1ACFF52428EA20C8ED4FD73E3935CEBD40E0EAD70C0887A451E1B1AC8
47AEDE4191CCDB8B61345FD070FD30C4F375D8418DDD454729A251B3F61DAE7C
8882384282FDD6102AE8EEFEDE6447576AFA181F27A48216A9CAD730561469E4
78B286F22328F2AE84EF183DE4119C402771A249AAC1FA5435690A28D1B47486
1060C8000D3FE1BF45133CF847A24B4F8464A63CEA01EC84AA22FD005E74847E
01426B6890951A7DD1F50A5F3285E1F958F11FC7F00EE26FEE7C63998EA1328B
C9841C57C80946D2C2FC81346249A664ECFB08A2CE075036CEA7359FCA1E90C0
F686C3BB27EEFA45D548F7BD074CE60E626A4F83C69FE93A5324133A78362F30
8E8DCC80DD0C49E137CDC9AC08BAE39282E26A7A4D8C159B95F227BDA2A281AF
A9DAEBF31F504380B20812A211CF9FEB112EC29A3FB3BD3E81809FC6293487A7
455EB3B879D2B4BD46942BB1243896264722CB59146C3F65BD59B96A74B12BB2
9A1354AF174932210C6E19FE584B1B14C00E746089CBB17E68845D7B3EA05105
EEE461E3697FCF835CBE6D46C75523478E766832751CF6D96EC338BDAD57D53B
52F5340FAC9FE0456AD13101824234B262AC0CABA43B62EBDA39795BAE6CFE97
563A50AAE1F195888739F2676086A9811E5C9A4A7E0BF34E6F4C9A04BEEA891E
4D22B39729EE4F0ECBF3CF3C429B3BB657DF66811D3A108A73513A22D252AEBA
66664B33422FED0E63D93F9F8E24320719C09F50626EABAAE93F5649E1981AEC
E8F19F6105EA978C51CBF54E94F3DBC93516313F00B281D1B8C8E4C1DB33363E
B81B61D7224245842A6B98939F0ACF3ED081BFE7A813215D36CD6ABC3EBD6B99
A5FAC5AA7A0DB126B0A1FB14B58525546D4D8BB6E95F803D6E48BADA30D93A13
C77049FCC781894089E7520DD8C08DC0231DC04F973B87F3633E4F57A46EF307
DC4162B9D8DAB9AE88AD62FD72DF3BB743D9D8FE892A0E742A4E78BCCED107D7
657D87393C4264E5C9CF56464F89F61CAFC4A1652535ECE09DC9AD139C1FAEEF
8232BCDBAC80BC4CF12C80D4A1AB039A03B8D62BE8158B2B5D85919323DF4BA6
B8FDF44EDCAAD5ACAA563FE0924E203CFA9BB43D5232F8771019C3769C352B29
51AFB25D8E45EBF8875E831EDD7AB9E4AE4F29AEBABF74D9D77F93A2C90E7C95
8A185B795996FD67A378C9AB4D66508AAD1094D8CD749A44F6A3E5127930976F
6D86B17D733FDFD9E6CAD52F56A332BBC032C2FDD103BC3D84F7C12AD1C91291
D4E2561FAB310025C45007A63886297042581E021BDEFFDB61480C6537A6E797
90A7ABC24D5F976B1131E818CF884110A43B7077E616EA0AD991180DE505C95D
F25B70486EF637BB38EC491A1F7164908CAC32FEB50ED04A3840D79608193721
1F4E2C78CCDE074950CDC1D012CF19EDEE39658E046477F42DB0736E8394171F
8B47ABCBB11A1DF6EABFE039654592F1CD3F31F93A4BA49BDD147F1AB268BAB3
7B8067D666BFD31BE3B7A5FE6F020760033753ED24EB0A57075276F0814C92EA
6C1E94E88EC7C0B23EBC09BAA53AAD224D422CE76C675E5C40F4844E86D361E3
DD8E4ED78C9FDEC38BD17A638F65BC17C831C3581AFBFBC3D4EB1FCDA87920F8
8F6E8FFC8AB06BC076A4E599315A15AE896BE518F9D6BCE01C84B3FB31DC51A9
D34ED90EEFBAE765EDCBA358F8FF5EDD471844C03CAD199FB2B621E1F4C518B2
5031BC4CEE6CADF1C3BCED4A4F8DB0A24A9BFCEBB55F5050673D857AFBBBEDA0
348D0C1C63CAB3D4D40F809C652D79DF085927940DC852E1680CDC323E07D506
D058FD864DB2997EB70464F2F61D34D7FCDBB9B8EEF2167C9A3E94E626FA4D82
279B4F1F4C273269845F70965981C10951FEC775E1C03F0AC93295E2B29919F2
D79B08975CB6037576A0E9408E60C3C56619CE060309FC31EF86772D3467D5BE
048848EB8A992A295723B47A1E19DFB43650987829D777E42CFF369C6D4B3D5B
815E8077E8899556F45CA47B36B61F20902297E6D7411EFF2A70B06B94AB9B70
10ACBF412BA1A094983133CFCDDFBA73561144FBFD9D2EFFA588BBF0C70F5BDC
71EB60EEF8BB64F100AA57ADB366DA8E001B7F5478244651454018BCEBB30915
0A8326BADA94B4DEB433F92A3D2376655AE791C5F2E3D77BA1008E384BA91BE4
A52C972FCA3AAC2A83DCEA90D8584F367CB04EB9869FFE0DE0403E11AC08B83A
339E3DA9943B80F78D78DE837D00F82D081DD7CEFC0336730B267999D98F1F46
1D536D4865856D1258736C4CDB0CF4C4ED9AF33915F16E5A3182F0AB52FB027C
4908E9FD26AB761DE8056D4160543E0488274F99DDA3B7BE665BD78AF55B9679
27BF7D40227A118724550D8548F71E1C4F95953AE39010E86A64BB785632E914
40AF6D23D55BC77D70D0C8486DAF023FA30720306CEE66EA8B0A6F27EE7A3A62
77F1712836BD94B867D982C8DC0196DBCF13272A96984637A22F2A5B979157BB
5438517FFE885DDE799250A044CDA48DEB101D7CCA9880D53DC55EB3D2C1ECF4
C36FEC5DE6E68AA9FF56B6FB4FA3990E7839AC9398A2D4F677BDE76695A2A7F5
BC248F82AC9CBD46F701E184AABA8CAAD4FD933B9DAB10F898E28A7E1B434313
A4096EAB23C2624DDA98326367BADF3AC93F6C1EDCD5681082FD66AC963E593D
37789F99792D63AFBAFFB34DD3082DD0B3FAB5A69DAB464705E5604B2E5EBC83
83A72013F3AD1E05A90A3BD3C53D298FE01F87FB8C39E6C441963EE5491C2D80
4DF7069B40210DF3FA979CB5493E996922C38A7222DB56A76E630E2776377BC5
8AA9771BC5A41FBD8693407FEC34A9DA60C2FF77463EF1B06619FECF6957873E
D36E6109E7DC88499ECB0B90CA3778A942627F0C66ACEE9B3E4F3D9F9521D99D
94B98E3BCA6F339096DF561B91C5BDE22C81FC5804EDF6FEEFCF0977621ED71E
D8C4553EFB67B735BEF254562C1E7E2B006CFFA00BDFC2EF6CC125FD7B599D9F
B5BA401B7C6C8DE04DC9521632FF278E96A600FF33CB8ED32B35DCFEFF55CCE9
160EC0D79F5FA986CE35937E4DAF23A4ED317FE172124CD7AB809F36E6FD0AE4
5630F438C90C0923AEAFB9E602CC95D6CC6A7BD69005261C01D896FC130C39F3
7D974348286223B7B64C2255731F383E4821890461367C6DB65007AE0DECFA78
7057226F57CF8E43680A4B4B7F2EA5411186749C6DC3B5B00DDC484F4487F3FA
B38453F35D425A24AC408A95B3A95298A675221B0B9F514EDD147A34D7185FE0
4E7E0EE00751DBCF2D7FA7140B9D0C42E28829A98F11B012F0D92544133DCFDD
1014146D40E3A0C1B000740B8935AE6158498BE56C497765CB2E20E007B47A9A
0642F6B0A251512B5E21FA109A7A1CDB07E668773ED1FE4E4641CE959E783DDC
A0EB3F5A62AC9641573F2854388D8F6AAFB021F953780D2F278A013211A0220E
F07C88591BF703976559EE447EF14FA0EE9481E9C465F2A9AAC0565895C60917
726D82033D7D8D28A6904718954B4C392EAD67FECB292280CC0B8BB9E42B6768
FC98B682BD3981EF44CBBE738F29CCE15D4301397583B91F23ECE77BF4CBFC72
540D6B28AD1AC5B439FACF5DC72D0E45DD30425A11BC54B0D5EFA458E6574B44
0FF455B370ED0EC39361F2FDDBB0D4B3489B583F899FE817530DD4ED61F0D55F
5762DB4C3CB12B44497C0E49E9A07AB21B1DDA9FF2ECBA8DE1472FF4810B9812
64E3B15495748F49E07315091ACC5354B49F6E4830A53CE5B5C7CA7777B47184
2D34FBF5F83EEDD9094D04F0B7A5429707192040F8E80C9B24875E4F0D473ACB
FBD1E25F546BF4CE8EB519491C6C25CBF6E48B5F397A4F4254DAED7329A82D73
166A9F91ED2ADE108D1C71084A2BD6508801C5FFAD1FCD43D0114FD31E2EA359
9FABDF57D8A1FB0470A4E514597B325CD5ABA6108158B18E711636B6C643F3DE
EC0AD06BC0251B3606CED206DFCB078964C74875EC4ED544DDA14B97C4D5D344
A41098178A1015C3C9E0708418BAA69581C5788797C35ED9E65E8F499E442B01
750AB56CB1CF61150A01E1E93A32D5F4E8EE06BD17CDED3939E1ADC341601610
736B4E3A564903722FAD77AC18EB4D07580E3F8B2CA2336D2C3DE7BC28240B9C
43827563952AE2F87A9E38C712EC01B5D9A175A1ACEAB29185E19B2A15699F98
4BA97038906198F4B30CE7163E26F93CDEA41B959FD7A975B1F3DA21E04AF014
0AFE7BC31ECD5E5232B03CE97C838CBD9D715128A6A30B3441A2E84C0A076B2A
913BDC138B4A4776CCE8050FB4DC35BA23492216291EB6E4FBFEBEF8D4819B55
58F3ADBBDA9762196565A84F326F6D0A6A12664852B09F1EEE182E13256892A9
A9757749A396ACBD0350AAFCCDA3080301808BC3163164DB72A716B39C1E1E28
E6ACCE2D9D2D6011013FB5E7E3316C9A33B2112932EE2114D2300CB0B4AB1B6B
64503E19D834DF735C97D5DCEAC8E60F75FDE16CE1D7B0EBE2ECD31CE4F7E882
175D7C798BB949401FF8DCC9F81D4CC35ABEA39A9F1C692FBB2799643E05526A
BE5FDEAF438D8D48AA49EE411E3BC19E9E5771BB95627699C7E459DC8FEDB165
F656E4218CC384E935EF5A7CF32361C4316AE399423667D3F533B816A74B644F
527EF5F6E2CE56304518486EB93E9FEBD5F99836586ED12471162E54904263FE
60DC860D175D0848BBFEB2AA7A092A7A95FBB04B77E6498CA933A8493E5F2D9E
3188A3B5784533F27AD841A5B127935087826E86542FD68C8F4F1C309F10D268
85CBA2DCEAED4F1865EA56E91C4CE8A1498D95BF23C0EAE2285054224AA281AC
6998DBE9F1D606B835A751A0A7B7526CC8519FC1F9E08483946D1CEBE0EA4049
9A6008F7ED0F1FDBCBD87E24544569EFAA34700339C46B53D471F77CA8718AE7
FA91A43D9A2816ADF2EFDFC277373E35EED281C011AE5899F7B3F9C63FFDAAC3
5C49F459803E9C35D8DBE349FB50E0BE69908A6FF5BDA79E4704813D5890DAD5
E279829611BEA6714B006615492A3E17B1D9471A3A29A08CFD33FA2879ACD9D4
AC53B40366C72FC78F89BF5D07B2BC76BBF51A97DD4EF394178CC5DE1D5A876F
53DC1F40615D911C4F3F811FD883A4F20357B16551D98EA2E84BCD87B874506D
77FA4A561B91FF19A19CDBDDF4A2B1405A9B06BFED73CFA30F9B0A2E5A7FDB55
C0C7DA8C63D6F7719B83444C65A46C3EC28D85DE359931B49B41A29B436E22C3
8FEAC4ED12B73A477B5472056AFFDB78CF07378F60143B02DE15DAAE86BE91C8
3F5890D361503CE8CAAF0B0C690C83551DB6F164C9D852F81EA37290C1FCEB00
3B2962D875791D91AFB1D228D8EA68E22546950B85D926121512F7C6ABAB1426
BCDBB1A60D6C666D98E4678355D6901F8FDDB91058A93EE8C065008A8CE78FDA
44604FFBE39117D6944B1B05A7612CDD709DEB0B61D48EA57D8E0F9AE84FA813
B0EF81AB14D69AE9F97ECE51B7EEFBDF1910BC8513FAF5E628F8B7B8D5701997
47EB91BAE3E67A9A13B870F5EA6BC717590CB907B86985397FB8DAC37C6F11A3
46DF006A7DCC144BD9E68768F13E6287D4945DC82A0A844CAE7894BAE4D75018
AF6FDEE8FE2CCC157F68854FA0D60210755460B68A38B8D683720FC69258E83E
91B78AE75253CC84C9D6F1944854F55E5FA23E21042A059336F6B9578C3AD051
726CCD7B42CFDEA8DD2DB070618BB2970CC37ED9A42A595686281666D790D9A6
4DC0AF633705925F9E2FE82B3FE17022084A3D6DBAE8293AD8D479AAC23A6BAE
F341DA9089F28244C300717EE4DC6E771B55F589FCEF1D2B424A4381A98F19C2
5E4A6A2E44B053574E0767F9CDCBEA6D9F7DA8CB7992012C9DA31B10CED28C58
8A7B3F618F9BBF79EE638B1B49B3D142974506063993A73CCAC0E211FCE6CE46
F08267B5D6CE7EA81703F5AE1EF7FD61ED455EC99C620ADFFB89595138036FED
3DD81B49929E997DCE847357840AB99D2D4B0DED523AE7B7203D8452852140FE
2FD1A8007FA9EFD73B8C755F91C026CDEA49168305C7B840A862E732D401E15C
7EBD71B6CDA37B49A4D9509D0483A817EAA2715D975B564D8EDDBA5F47B6626E
27CEF1878E44E54EB46BFDA8C236BF0744FC959E37E3C4EFF925EDA1226B0931
D2037E95A06D5A9C3ECC5FBB8517FDF05515A4C15516F4B5CC8449BEB5020E5E
F4CE099D7F70D17649E60EBC51A2DB08F8B15F5D5472448AC98B65B035C6CD26
25695B6E2B2AB5C2D887B2E1A3442A698DB9BFD38F90850CE6B66690709A50DA
1BBDC301C028DE92FC3916FC2C5FA5167756F098FFCAD866184FFC39B53FE352
7D904856842424FE2E61556D9189A07D2E2C1E14DE0F420EB8B55DBCD43D6413
B02A5AFADC97F81D9AA613410BA7861654308398F9A5CC086BE509EAACE7AA83
45C46FD2CDB82772AAD3EB1A39278CCEEAB53BAE498E7873F11219262B45EA4C
95131D6D697B5DD413A711F693475858471F71ECBBF38DDF811B0C16831AD26C
C7A6267A77324DBD011E1D7BAD0FEFAE89B809F0867AFDFBAADDAD0AC7365487
EF39AE1259F3E45C9849304851FFD1E88BDC9578C26BB76CB773F4A99E6F78D0
FAA44877331BA7D357DEBA842C71D8822EC875C7A559B9BAB9F4C3A5DA383A71
B4C27C5357BEFDFC3669A2F0C952F60BF48892A95D90650F403BA0DD0410DF96
3DBCB0C8F0B70BB4E5B1873602C99408D496D91595CC19C587E5A7B2FE5CA3D9
10C3038FA3412519C5B013D7FDE2CCDA0AF97BC5B537688521619A653B692DC2
81EAFBDAB4FB77BEC79BE26286DB25D5A0A7D03F5D10A1A965DF808732E343F3
BD96C6569CEA6248D4A2DB77E096D264093766CC9C52A55B5AA8B9FB9905B257
23B91AABE3513EC76170B859ACDFD6CAC74BDDD6EA6936E70985511D915B90E8
0E6EEEC38213AB8577BE6EC6E86595E7AE7E0BD3272667A3BC38FA943C3B731B
69862255049FC2B730ABE949F35670194D7C03E90AE7CFFA17144260CC082D3A
A0DD7E8C8E4718210CC756A9B67453549B0174AE109ADA8A80551F05E33CF944
BD41F142A452EF52B4FF562307F70A48D8F89F5AEC13EF55FD2E8ADB47C5B135
82EE2EC5594739FA37AA87ABC25DC75103ACBA2A7FED96D902A34D85AD187832
341B66EC604C540DFA7E61F4CEB4AE9613CB323CDEFF212DC00FB2166AD231AB
4EA2BF61ADEF9BC45D4FEF02E71C03C177AA9D75605C69F6A13640B4761D82AB
7C848561F6AEDC87F4B17E9B363F4B0EFADB5B80F4CEB10532D0B3C2132A9571
93072248FDA322B14C0625A15DD3930133C4DC3417C97C8B50BAAFADFCDAAB8F
E288FC22909173DF505175D0231B0BBA8256E6EEA85A847B9D85C06154E1F5A5
6A3B2E1168747342C818CB3B654AE1033A7A1CA55906ADE6F87BB2A7BC442BAC
7553EFB49B55120A93156F64FFCDE9A3F459B8C04933E69909792FC39FA861C7
EEE3DC823B29A2B74C3DC3CCED2ADA5AFF21C94C8961C487530EA0B4E282B5DA
83B3E034AFD81347610D837043D94219E0087F5D2043FA0AE39ECA6A4AF6AC98
557F008B15E291687947AF4466E1A356EF8782366FC9128A7720B64ED93427AA
4126F819FEF3FFBD8306733E3DE4D3282B64D304401D296425995DF8DD54A726
07C05CA93A3FCF25A243225D2BA0C44164713938B86AFA5949E6EACE7407D5A4
3748648ECBA0D05B6C3AB7D38F5E59232843C3FDD2F735C7D8966DEE79AFD952
48899259C5C04D56EA6124CBA0FEDD431218E683F2EE116DF9CD31E0AB9002BE
A7D41368FD43C26E9B2B00CCB7A82948F0E3855FEA5F7A51DF5EB628BCC6F923
F94D0B83B3D93211BC1EA155DC2D2C3E66277DE2FCFFAD6FDB283F3925625AF8
60F16428CA0B6F199BF7D1FFFFAA5F302042DEE57A92E8AB9BC149727CAAD08D
F2498B5BD9CE5A56F0AF3019FB341D8BD034025B57B90E9F85825885D3CB7E1E
BA6F7831B911DE674CC9341DC5F9609FA0B512D6818EC2A987E2814633A1E516
5BC6008B06A46FB597D19F810E9C907A1E85F32DD22BFECFCD32147AA343C371
EBA645F8702F473A03DA42EC1ABBD5DA1856E95E7AA9BB2FF2C01F0B5AB30EEC
7A3CC6FE7EA3BB4FEBA879F63DEDBF82EC05170605BD044DE14EF84B2EE9BCAD
DA590FF3EF63753F4141972B50C2EE3A45652BFA055B7E2752D721FF4084AFEC
42F3085F7F98EA8F26846BB3A85727B1CC3572B14AA1876DD6BB301C5554E43A
5F91FA3306795C9264936F20DDFC0C43F29EDB7AF8D83366AC1AEAAA08DA6490
46E0AE08D2A46CFE3FBD1B3B696974D309EAB60AC604275C56FAD0B5809B4895
410D9AAE3A555EEE2A7B14ED7CCC47432EA505621DDEBF0306658D6E4BA82C72
EE0F3219A33D71F1FE3F00CC5C5C4EAD1C1666D135E0D86C07DA45D550D8D0C6
B8FDD81025EBDDE283E6920B833843E12DFC36495658FC67BCE858536442CE8B
D15AB75FA05E8F1F97DCD403EC5CFDD655625839EE9AB877900628289DBA8148
40EB412D95F3A466413DF1FE917F2DC52C436CEB6B95C6E9387EF32462B42B08
18A805E30EABFCE4D9B94A549B4122ACFC860DF757BEAA5B981E895B2AFFD21B
F661E11CF8B2704712145544A65888E1356F4E15971542917D425090F9616BC1
B4FDD8EC9662FA08D84B84874949DA3E2EF4CB2773F01DECE8C2463CFDF4F850
92B6263E5B761DB566B9900A33071995F1AE196A744275A239D6C5D62159CC13
111A65612D1F51E92D9E7ADD69716C5D4C29F9BA5B9A9324E2F2FA57A0B8471F
FC488052C58320AA5FCB023BB9900BFB121BA344F156FD96E04040D19FE11C83
59AA4CAE020151AC8D221AFE99EA3A91AAFE153D4B634288DB215ABC42373883
6DD56BE7047F78F5C728420EBBA72F771DBE1FBD53ECCEDADDD447A74E5F7B31
F62BAEBBC9C89BDCC6AF198B8FCDB7EAD9AE143EF74667F08F66A3A72A22B9F0
101639B04F3613A69D8BCCB6B965421A25AC609148A5AC0F1D1FAEE8E5BEECFF
9979005FF274C6D20A099146723EB12F00D0D71B748F0D1BBC11C915600ED9B5
246785FE59BE605B9D5A18AD5200B250B8974C23EEF33F1F499EE6B45548E96F
CB824AC7E526DD928CB0F4EF05B7C5FB775291F518B9C74926CC2DE2B0E4CF79
8874281EC76D99B2ECF4BAC5C5BD07B5B0CB7C564A2734A1CAF4AECBF1078698
45C3A2CDC8243E1329EB0AAC8200C63B870EBB5D154AB1436D2628729D421C9B
C763E9EBFAB6C303007C37EDC9F510090F61B9D4BDBE635BE6D5D5F04F41E8A6
5382C82AD885BBB1F5DED1182844C8C9B560C163AF7C5E16389D22201F7FB917
3AC8DC40795FA97901DFF8D2DA59D3F47E4AE8B1FCA4794C00109AA14B39926C
F98A71D28C2F19FFCF4CF3D5A33C3BC9C8331095D8C95D533C68D3869002AF0C
FF93234B943BE06E0C6CA05BD107DAA9B3FAA4F0818F3E51F337067EC33FED9F
AF256E303A628A176EADC8E0319E292076E560A1D9CF28D6495FE6614B3DE019
1D6A8DC770E00366E18E6E6CEAE081C79AEBA0CDA3207BB70925FA027112BA36
C0120AB4B53A90E5B79452AF7391ECBAE3341610EE9C57A6237FAFC0DECBD706
6B59A185FB863844AE6BEB48D035B23D1122C21000D8D2ED14770D2B302A5E4E
376693094B2CB1EED7A8BD0F412E3455E00272CAA89D016B3034F27CD8CFC0D7
0FB03A5262F0190FAE04EF323F1A7E2068D67606479825F1C672ECFEE428E9E4
2E7749D8579485D8DC2B24D401A9EA1B55F591927BBA884F18161E6F266743DC
4191BB129D4118D117D18A5AC164D1B02B28646704D76978DCC7F7A6502E8B6C
8A71DBF3EF1AC3D254CBE23DC98B470920DDFFDE781B340687DD875C622CBE2A
BDD791B1345C4688E09B1140DB9A425BAD7CD6E697D65A885025A3F1F705BCEF
22FB4558292E600F05916415A2DF242B6E1E18F0ECC31C51E1F281F241541C3D
ED3F4F90C4D73F3DB0E77FDBF88C02C4FBA39D94AF1CC82134369062D7A64DD8
1478498EE0BC47F470D65030944C450DDCBA89210B0CA82C56A2EB8E93213DFC
458411C3BE6A01D35A3E9379CD8AFA8ECB7D8173649A00B408613E2898D97592
DFAB06318E07286B4F230F4A0B10E69C2F99B0322BD1223EFF2FA6E151D6A1D7
02F75568BA4F8E24DD38D79A12149C2C5CD3669D1297E06CD6A1EB7399F0312E
ABF3773638A0DEABDF900BE7435F0C3CC05F2678A6229A930C8803746ACAE867
877FDDC396B736B8BC4E540DA796437D9464B2F44AD60FEC4D2435BBA94D8FF9
FE2CA75ABAD07A47589451C2D4E6701FD148B3F45C3A6733714D9F731ABEF4B6
E83EEC05D7FFFC09F08005644F4AC7BAE85B4A254AB0224D8706C6580E0AD374
7B13117DEC9F46C9BF8745C52E4D4329D6BB56BEE4792BAFCCFE758681B335E1
BD4EC096C10F9A46290DB9B9E677028666B33E85EFD0A53EA0A511C598B3CCB7
78699ACAD0E5E7E4B0DC60DE991540DD168B3CA853C25DF48EDAA86D5CCDA20A
2F8E17B7D8C6608927B1DA3C15AA37E8E28EC77A4E780D9613FFD21EFE6ACEB7
0456F66BF1E1F55913A8F9F2F8FFBD2FA2BD2B2A13BADBF2C154D18D710DF64D
FD389BF1E1A692AE2D86DC0CA15028A7EE0B98107E1FD22E57DDA3DC0A18C7F2
2C3BDC451AEA4DFB1C15A33B6EC86E2AB3E3FF587EE3181D8E132020B8419C35
98A8297AFD343FDEA5B0FBC5C193CE805196482BAAA6C79667C8D437504AC93D
292C9CC18336C6322D9011F696800B173F98F1A28AE30DCD1530BB939A3E1DD6
F9FF9AB2BE7EBB307C9A066B3F0F720F66CACE12FF0950F9ECE5CBCF88142761
BE037A0B29BCEAF239D442AEB417277E04EF749B55D12B817CDB6AC5E729F654
811C71F2D1A8BE5BB56355277C9F4575DAB7AA66A77447167B393B8A6A0BE1FD
213253FD4F11B31BE46725B2CEDA545B7A616B495C3E51C349D62D3B23D30311
A788455875195743770BFE609F721BBCADB23CFD2A533AC6C7DE2498DA469CF2
CA7905E646E18E9E85921DC0B53CFB53BF7047A3869CFACB56D7C580C7DC082C
250727F75FA2CAD8A6AC8DFA6780E709037F2E56550ECDF6B297569BEFC3F66C
6AEC4907E6C870FCB8B847EF0CA6A69B6A9EA1998D05F6F4A1DDB24B1961811B
2D49D47A1CB798CADE358F12CFE33642648D3F94CB8E1C7B4677914B9D18858C
F18B1414EF0A1ADDEA0FC9714B07AE69094CBEC2EBBDBD61FB431A952AC5F877
5A1C3E4F1D428B1B81F900A6ED213485B2269829BEF142D6C2CCD9FA79D2549B
730324F3A35A39019A469882F7514E5508A74F22C5F9AA7AC0608237C0E220EC
CA810F09BDD0542C7DD1AF959C9EB90735174669D47B52B55DA72C2E14E39938
42E39E76109F2438213E5ADB9E88A1FB7340170F2CF5A45C1F15130A6637C943
CE6149446CADDE98EB9CA5541F7331D87868919ADBA7886AF51103C9750D1EF0
1F736B9C70145B8345C27902B2F2769241AA39FB43C75E93EC8EB4F57CFD1C57
F85EF78A1664D686CD259D2BC8BE429E821D34E1BDB52C7B83653F107337479E
123CBB863E795D653EA552BC793359FAE9DDA91E2CBE81A0C0359D1F888AF193
64AA049FB7CE2747E02F48ED28DA3AF4A14B0559CB0C1252ECF9E7D13481EEB5
E55EA1B2D9A8D4AED12D1039E356038E94ECC1B5E3C83BE4EA0AFC8A9E9336A5
84E9670C39C0CF23CCE06D4E6855CD4AFD2728EC9CA9C7D4598890C335FA6EA5
2CE3862546FE867CA4E17235E5D4FB0648B43A55487CBEDF5841D1DE71EA7487
CD5F5B1BCD3362E9AC8B664C6BF2CE665A282757AF4386E5F2F454E0D694FDBC
3F37F00F670B7519DEF76147C7ECC78F8B4F2BFE5A2EDC3A2317E64645AB26FC
84C2ECA36EA9F68682746C7DCDCDD2CA51F313565002E7DBB1076787FD26CD52
A44DC18CF13B2A4B3F83564A121942B05B219EA49C8D4DEB4A48D7C9336B77CE
A30F9839EEB9FAA0BE0EFF8DB1E37CD2024D6D38C29CB632922AF00CD1645625
0090D2D11833D6ED0EBEC67F2C9F88F2D81B25853A87BBFAE0A1987CA918B232
24B247DB262DEF5E758EFE214FFEA5E4EF80857A90ED0722FD0636EA5D2E61F4
A0665C4BACCC5203140CD49CFADEB8EBED55B5078D7743028DD0A5441DF67C14
4B0C82C436F11A5C8309CA2A8FC41446C2CC60F62A9D8E5659297BE259D2C361
C3CB9CAA47826E67EEA7EE9A0ED7A57A80F26B1934272892ACD42CD65A9D27D5
DBF77BDB198266D705D822F28AE1C81A94C989B0A281A151643D95DC1CA01016
DDE5BAEB241D87177A3C9218A1F233CF5D5D09611F0F02A666DD92B5861E3977
F6AC99C6E6D3AF3A258726AC9DF2BD50715DACC2FF6FB77D47C02971AA8E25AC
518DA06C243837428EC2E4FACE39DA5F914FB1C2D23DF86ACA6B03BDF415E861
8143D21BE230AE59FEB9C27E59F415730B8490F12984A9C99BA16C20A8A0C3C0
84842BF9C03E1CBDAB72AA4D1B6AEB60FD54F66CE96F89AD3AECFAA688AAD68D
F46D6008A02BEBE298F2E18B11723FCB9691EE600C4CB17211E25C9ADB5D40F1
4AC0ECBC6639E8FE4E18F23617A37158766D67C4287004B1DE4DA0D1F5E4BC38
0D0F9E186BE90133B2CAB646938167984D505A5E1982DF05872AE4C17996FEC2
B8DFFEFFBB0D5853293A9EEADF81049F2DE2118C0C8667CFCE26B7482462CE8B
EBAC1C075285796B9DE323ECAF79EEE7ABF874C0C76CE91F4D44FB1DF7D66849
CD92E57364E5CD540EBD60FDC7D65986067FE0FF24372112FC387F6D68CECEFD
9CD6BC1CA7FFBD9A405BA8D25F7532449AB9DF5956DBABD93AA853FAA4B6DA03
D1939852C6B51CA118B7FFEF7B4E77CCF02B914C41D787ABF64D0EFBB1DDA24F
3DE8066BF1E87F6217E88B3FAE82B23FD7256E878DBCC73495D6F2D386E36342
7FBCA4C76151B8D2DA5143329821C8FB2E53C183496A39D32A024277DC3A56C4
BBA70878FF939E45F38D2DE68D0ED864C6D222B993761F5F9D55FED8934E1AD4
3B4D866355984CEA26B04023B54961634FE45742EAA83093C7D70410669CA24C
3994F7E22C1517292570438D4DEEB9F4F51BC4B54858A238136070C54B2128E9
601CF05D80650C318D2FF938A75C761DFDDC916CCC08637262EAC129EC9D7D46
6DBB13FECACD094BBDE48B613C74F895D162B609D7412EF521420266C2C1E2E4
63CB10E6F9B18F067E9920
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMBX12
%!PS-AdobeFont-1.1: CMBX12 1.0
%%CreationDate: 1991 Aug 20 16:34:54
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMBX12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMBX12 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-53 -251 1139 750}readonly def
/UniqueID 5000769 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5F0364CD5660F74BEE96790DE35AFA90CCF712
B1805DA88AE375A04D99598EADFC625BDC1F9C315B6CF28C9BD427F32C745C99
AEBE70DAAED49EA45AF94F081934AA47894A370D698ABABDA4215500B190AF26
7FCFB7DDA2BC68605A4EF61ECCA3D61C684B47FFB5887A3BEDE0B4D30E8EBABF
20980C23312618EB0EAF289B2924FF4A334B85D98FD68545FDADB47F991E7390
B10EE86A46A5AF8866C010225024D5E5862D49DEB5D8ECCB95D94283C50A363D
68A49071445610F03CE3600945118A6BC0B3AA4593104E727261C68C4A47F809
D77E4CF27B3681F6B6F3AC498E45361BF9E01FAF5527F5E3CC790D3084674B3E
26296F3E03321B5C555D2458578A89E72D3166A3C5D740B3ABB127CF420C316D
F957873DA04CF0DB25A73574A4DE2E4F2D5D4E8E0B430654CF7F341A1BDB3E26
77C194764EAD58C585F49EF10843FE020F9FDFD9008D660DE50B9BD7A2A87299
BC319E66D781101BB956E30643A19B93C8967E1AE4719F300BFE5866F0D6DA5E
C55E171A24D3B707EFA325D47F473764E99BC8B1108D815CF2ACADFA6C4663E8
30855D673CE98AB78F5F829F7FA226AB57F07B3E7D4E7CE30ED3B7EB0D3035C5
148DA8D9FA34483414FDA8E3DC9E6C479E3EEE9A11A0547FC9085FA4631AD19C
E936E0598E3197207FA7BB6E55CFD5EF72AEC12D9A9675241C7A71316B2E148D
E2A1732B3627109EA446CB320EBBE2E78281CDF0890E2E72B6711335857F1E23
337C75E729701E93D5BEC0630CDC7F4E957233EC09F917E5CA703C7E93841598
0E73843FC6619DE017C8473A6D1B2BE5142DEBA285B98FA1CC5E64D2ADB981E6
472971848451A245DDF6AA3B8225E9AC8E4630B0FF32D679EC27ACAD85C6394E
A6F71023B660EE883D8B676837E9EBA4E42BA8F365433A900F1DC3A9F0E88A26
35F1E2E069166B0C8A8C6376091EAC5D13CC1EAAA2186A7651B43E04EF307982
28FA0679A0B3B6A214F27BAF529BB363FB6083AEA82AC49CB797D8C4CBACAFC8
7B0E945D27CB57B3F3C759CDBB5C7822A64DBD544F1225ADED990F1F435A75C0
7BE40D5882459DDF73B67FF53BF61795F90A7ED9EEC5C3799E78032917D8858B
5B18B0994D7BF1AFCB167E7643002F385C8973525EB3CC776AEF097A02FBDBA0
68D4129329DEBE75CC72B1F4CCE649A796ACD341B93DD9DCDFDBBA139B450FAA
9D538641C7BA5D95B3DC4B836B86BC914CB0C0C91971DD44D89A229EE2B53065
E9F677076938AB5F7FB458E227A666C2EEA460AEE01EC977EC4E6E0D2F4834F7
B354908892F8C7CCE22BBD8D8FC35C6FC7F670EBEF372FEDDE2A2F65B9E16012
01BFC2006BDA2CE137F42B0B40A40BF4784054E592D7EB552B6C22CCD47C819C
653D3FC7F0465D3E06B7B6380124F4D3150F4F43B8ABBECB383D5FDFB0671EF2
66A4E096E4D4CD11318A7BBC87A25878D694AFA28211FB51D048A1586AF50142
30E921C3EDA2E5B8F62F15EC42E288CE071AF8DFC10B795AE57696F2B67E9E2B
3A892F9B86ECBD0D701D9E26617AC8F6288B8DA56B5A6B4C9CEED09921F4D0D1
5F7541FE8852812FF90630AC11AC629FA59B41F3E5D6796D57AA22510679B51A
1F9CF7CC14CD15F983FDC1617B484DBF909B5A856F488007E166076957DDA7CB
ED87EC6490809ADDB483E9A7FC8CDF192086DB11509F44D69ED81D58F9A306E4
F664DD5CF5DA4CC75F8BD4210E82E7A03E80AFD2AF458125F2349E9658BE8F4E
FFCBCBD84E8A4E398AA923DBD685D835E56BFE1EECB4713DA86504BF170AFE80
FC2ADDBFA970340AF7249EB5D99EAC572C68B91A7691D14513B3E1AE7B995DCE
9A971AC5F31BAB242B74F3802F2FE368FF0359785A5A5ADE876E6758C81A99D2
7B22878FE87C19C31FCDCDBC157CFB8D64117B056AA847C5600D00DE246C1C43
64C26FBB7B1357C0871520C60D42FF15A3873F3B45A86B4B88D5EFC093B56764
34EC81E4908D15D57F7E73D7C764F1DA08B0484691A6C101DDD37C2A369AB2D5
4C4AEF0D99F7F43AC57355BBFFEDBBCF26F729C839DDC8179ED756CA03DDD67E
F97D186947E13630B167524B3D7B55D8CD7593BDDC8EB22EC7F6A5A055675E13
83BD172C8C30729DCCB5FA67D04A59752BEC84A55610975536808FC7E1AD8CB8
E4D9A650E7E90A20CEDC632F3B3DC0AAC05809F1BE5EA9E0BF9F541180969887
7931112206CA98F413A954760BF31773FEF5D061771731388E83364281570FE7
FE5868C5D8B470567E844B235C1A6C4510ED0BF1578844C1C7F854FA6069F70D
F5511385258C36C88A5A59F2C9D9D6B9E23E8AEF8A0874A21F3B883E48E597E1
D6A1087787E56FDB1DAC15CAB3CC7A76EA0EE5B1810096F928C66FFD50ABB03D
ACA8E335D85E3F30D4C86DA92B723773A29A94FDEFC3A22DD1CBBF4C34FD963E
47055318C33F82CE43ADE09FF4824122E30ECAD7CD2D8A530ADEF5D7ECA7C4BD
FF2B2CF45C666414E72A040DB2225CE8A6E686698D42C9FC23BAA07067072F5C
A1FE11FC9873903FD6E9644D1D0D8584DD8F2B038BFA101551D66535F6B38A8A
B7CA2E0E464E7FCD42394C8D65DEAF590DD5D0BE80AB1D2D1A015E4021DBF1E0
47356087EAF85AF6F34ADB1467217241BB624B840B3E4DDF6A258682CC935FB1
9C3448DA8FD8799D77756776AB357DFF4A1BC46B99E21C387375CAD4A1969121
B53C81F73EC58028A6C8D07EECEACB88CD0C671CBC2189FBDB0C4B5013B06D37
EC9915C626C521C49B647F5380BE342BC8098805C40140EEE27F1EC2716005CF
470B2A4E0D812A06745A0FD1304FB19986C3D40C34F5D60D4A47A73231648A13
1361DE8E2D29DDD5E315B10B88EE48F399A05DF507726FADAE32AE1B8FCA6A3F
68089127652DE04ACE3213122EC8B4071AC6C57D9A8EEB68A426F83D8FFAFACF
B9185F60378CD4FCB8F07AA5A104295CC5209F9F162E07526E03DD00621D5FC7
6F418E99D631F3523ECDEE437A58D3456580F58BDEF9BE10340E3B6ADCD59656
9AE3EA8AC49066D5BFAB7E3F688BEFA2CEF7AC63975FB1FB5F6399BB29934BB0
EC9AD4A8503763A4C09CA534FA2964074F81CD9C86BE73817E76C8E29B61918E
7D09428612C0B35FFF7E45E6DF84C97780D6F365153B05591C01C610CC94AF6C
EEE8A5BB372C63E7DA7F6BE03FAAE6681C23775B6F5617E0CF1819BD59F94C0E
45C0CDAD5ED1C37247A8F3367E59CBE51FCD4BA5DD7318A26DAFF5807684F903
98E14B8F5E92B7C71EE0A4FA5FB366AAD9D10AA405EFC5FB89B54016E567B66B
3774665CE7E81B58D8F77C2E084D4F3D1460967D3388256DF104E10B5FEFBA10
87234E5F2A5BBBF7554D4ECD6779450202CD3C81574188E4082C8EC94C48D3DD
B66021A065B437454A740440D25EFE23400EB4719C482998A4A83F30349B1EC3
97A4767B52DCD7BAF4A26A31D3C5ACF8EF2DC79D045F00AFDE584B3DD5DF5145
1F9D75AD5D2ADFAF9C6EDCA7C29B248D1989BE42BC3D34310174CA8D7FB102D1
5DA638555994B68BAC2878AE92E05ED3CE706AE158286B3AFE0140573D6922F1
DBFEE5AE88BEA4A64F1049C660F21897D7DA6119134717505E659B6D2B1C021D
91C14D069F5FF3C83C4716E3C7D2DFE0A753177DB17AE1EF107A3FB837245AD1
393D2C461D66CB7EB771361C4F6877272F34231D2D9AA08E59672163ECB4E263
A7000C2895960747C5AA9823BF6F4DCBE343A672B100D0024DEC61665F89EA36
32A6BCD821DA62C63954D7ED963B32644BC142BD74FC4D6B326231A027D2C0E1
15B7DC1D1586D23445354E3C6098BBBF86C00302B25C911A642A4688AAA38479
766C8B009BF01BBEEB1B472EEA90822F9045EACDE340A7C27F8804E82D7C8956
79F15374C224E06E74B89A8F0D57C7CA7A5B16201F15BE1A7A62AAC540B83C60
946340B8103C7D2ADE060F240F87F7D6542F8B87C5FA4331E470390EBDE4C7FD
8BB840AA72CBE9053D682F2F18FDF65193CAE8FD113AE940CE4A366C84A56718
F431E5DF0B94BBFFDAFE2A050A8A7118748E402FD9818C6F2FABFD46F111E730
5BB4B4FA6D257C6C22F6038B4CC0B28C0BB95F150772F980F10DC49A875380D1
14A1BEF9FF64AC2574D1454F50FDCF55A132AFC656318C5701541E3CF1984BB5
72461067F48F028BACF8FAC7A7D2DAD915154EC379800714A85C8C028239B9D0
47EA82B5B895BEF69019A6E2CAF2E19C77A2998B9C88B86F9CB929B5EF5297F0
820B57172A4C26C3D3828C947F4B67772327585A68243DF2F79CC8EC4DAFBC78
D272E21379CF02ACBB4DF35248A76353DDFAEEF02E10A5D3DC0E9A98973B31C2
C57BF993570D1DBB671C8B135E22150119AF12BA4E145EE07EC30038D5A9B68D
9E20A8EC7FDE69F8EF11E8E2A29C9E196BDA67706D2E215AE238A7280DC1C051
F26516757C37E233A7985BF55D5C74CAD10B4C5085D59533B7E67153E959456C
5E98F89E60044E6B9BF2BBBE93A40273E4841AD2F51CC23BFD1375D91F8DCD3A
66649CE5C5ED939044273AB3599F4F0C3565FF66954F2E651421B88CD641F9A7
747063137641519C0982E8523FCE4A1B45E2A68FBFFCFC68028F4A305192B70B
263B90F291113E06EE0735BE5EFE4CB6D6D764E2AC23F5EF3B3A92BA65186D95
A642180D76CF3561845FAECF8413E49B48CC275975BDC22F3E416DB7612AE259
F4DB0E0DD3DC6B10963D2FD7EAA08E5CF2A30A75C48513F706DA3B4936F0AEA2
C62E25D5EE2A3E758478F1063E2A2EF1269E829F5DBB3951A5C27BBDFAEE4C32
336FA741770B553BB1553E4B7EC0C3BA4C7DB5CCE93A07B14650621A0C143BB9
FFCFB19B0CA3CBEC158EF18D049369675B3AB9A25373D0892249448666942FAF
6A3580C65862EF998E8437DCD1E1032206A355893E1F4B9AC5F9D7A8EC1545AF
10C413AAD2079E1D756E42F7DAF259BEC4513C9EB6308A55994A67100D1D9456
711C9A71E99504382F131B0F5C239B4067482B4734AFADF33BABB9068DE0BFC5
C4862E8067AA48AEB46C894BFCBC171F085BF3835A545604840B82826DB2A23B
DC7D24C78B8BD34BA0611BC5111FD7159296764AF12EF4B4B77563E6980A22BF
EAB0386C3AFF9BE8B19F79405A6AC616F70703FC6CC0E9AEBA36B1008BD64784
F772A4A653E991C31A080B92677BB349211651664E58076B7E9840F026BFD98F
136AF92DAA65C284AB25964446247AAA9C2E90FFF3385AAB15D5A29C9FD3D45B
9475BFD2EC8D87F9593055D54A08CDF3278B2CA15713E8A2CB79007A1B67D405
BC2D78034E247DBABBAD015D6131612E4368570E3CAD8177C5C80D828A80636F
7FF5BD3FF0837517D406A3A7A1282906E437AE419BF3D7935B8A3387F469648F
4B12038442EAF04F3CBF287AEA70623657CF64143C3B1BB0A0320F6B9053A4E4
6C6624E158926C9CE65E05DCF566872E51BB505832A71E5C5A864182F365811A
2B379098235C24EDA6A6492C9047F98D68F3612E0FE7CCFEB1442FA38256FF09
212A80E3FB9A9C77C2D0A1050355991ACBF5B73611375087A2A6B5A6639E9870
3EE686E19C898FE407B423E8356CBB412547F50A91D116F38CFF025C9408F7BD
CE63184B0E72AF49EFF0C52A53F183A1D4582CDBEF72CE64ECCDEBF0D90E187D
50F1476D23BCDEE7730BEA2BC64EF812F90653DB689C875C09AB02CC5D04E7DB
9517A87AABC507501765E498AAE9D813FCD4FB905B63AA2ADBF739B0A70F6CD5
D66F2DC94A4A9667A8883554E64D896223FDE78B4931D17769EDE4937D2197DF
475614B90140B310DFEE5CF0DCAFD8A47022CBB99584C74539E8A4224DDD8A36
A2E89750E71B1A4D5C43C9E963EF247445D904F9D08EDCAC36F82D4415BA5440
344CE830FE6F396EFBE4917EC11ED3505E80A4E2BA6F48661F62F7097A200B9F
B6E7E16329E842E478612FEEDDA60EBD72100F71B82485D5509C91F75F1A3063
ED32ED296428A381902405B2CBD8F2C40ACD91A6F69813E42BAB6B0B18C7B20B
DCA40089207E2A91AC759ACD79BD07C17FAAB7DBF324E9D68C0F87FF1EF8EF84
10D82CD4B3C9ABA116F154E257D934AA084DA0085E85F4537623DFA8E2F54630
49906F49BC0BB94CBA3689C472B2D1D587116E3C999FF834E14EF4ACA7BD4D01
949FBAF3B8A772B49F7F97139309330D44E43B7C2BA6B66C3818E259B0A6D7A6
46C57037C1CDD820425AE8B790C6AF798E0230FB86441C961EFDA2AC7C43426C
C5F65549F8F7552BC5130ED7073CD948F568D1B94FAE2CB77B843FDD669D3ED8
F598B3584328995EF5B218AED261C403E10E0FF1EDD7D4781BACF0721BBDE2DF
61921D48A12BDFA2077D53AE0B43C4FFBA1CB7714951BD946CDA3531985198DC
892F717AE9DD3BFAF146C6C5B8D8BD8FB5EF3E70D4821E2E6B4E4C63C41751D6
56FEB8635634D8BA897480AED518821F8B69051E4220D0F534B0A7EF438B3384
AE206EC9D8B9D780D88D79E5BE8EA3C4A2189532776757B297BBE132EA128BC6
1F7DAA2D237DEDA57CC5B7FF798B4D76A7078EEEB4EF22DFFB7E74175DEC6D2C
36DF92B163A9E9CCD4A733EE776C8F55295C640DC19649ABAAE1A643F6B1DE87
D1B320665C448869E64225B0188E406D06907FE80D4F56F93123FFF40BD9C5C6
1EA39DFD350CE2BC8F3AF1AAB10EE8ABB4AF8C962B213051580164724F8FDC80
0403AE66C49F9C10F14DABE5A5E41D5928E39A84D66DF6EB84C800008098D5E2
6230A0883E01C8DD93D99DF7E9ADCAA781821F5F9ADD312373C831B1D07AD3F6
4A6266FD489329D0179C03A631E3E5C61274EA44F051349BA90A6809231B4200
40685C3C2A16B2371123C05D58098D1DE624E38B4AE9BF48D52C4EA52E866E90
7FA362D37C790852C200A5F853511966B3A554C2FCFFA43398C08358231BBCBF
A0F8006C98934585BCFE71C38115A5A94712A8E0A037C9EC679492ADF946B674
9509B83BD64190F86145B6EE997ED2D2F237F38791AB561437568A33ED40E3C6
62C1503F9BD75214419C412BBBC86055058089F22BDB4C001FC264E319A173F1
8A641E392C74DCE7A7592FDFB3F2718C217D4D2DE885348ACB886A25B8395156
063B35B12E924E36D0FBEFA2919396EA3286E36AC618C0BC0127F0C68C506335
0D2A05645882CDB5B96362E8D6F122D753BE7656B2594CA7C209FAF4A28468D6
F4533D807CB7C90A64BE3C73DD40AB1050E78DE6B165C334984FFC39487C2ED1
78CB430299C1C81CC0D6D3CCBDE227644888578F90C203620FCCA028ED84B9F0
E73CEC1B76C7D68A663F53C385F2A6BCEE61A996C96510F40CF6C1B5C5FC387F
EB5CEC061126B525356864D9E7BB35FEA1AAB9E9B73DB03795182E48BF9989A8
69E54A48BDE47D11130D8CB6229E46C8190E53C66780B51A377BBA53298C6E22
0FF8BEDD0FEF0566EE0310499F1650BA144AA32BEC6EAC0448ED1612EC0306D2
444137A81083AAF5D35164DEF6FD5B3379FDFAD04DFFD5E55CE835ACDB5B67D5
004A9B8F826A96872F8AE588795B6BA7E9295DA5D814B4EA3AB176197C6DDF62
094EE4BFC2404E0311691D1376C5F629AD444B771D467926EB834FE301AB0D24
9E8627D57AAA40571B74C658B4F8385650782AC01C35B32961A66EBFE830CCD9
21E1D373785CFD5C88512C98FDB3E141E20DEE152D2E215A43878311DF5BE666
86B6031C8AB1254E56A1C6002C8508C59FA3F4E9030D25FC29D2F029CD9E60A6
43EF5A65C1D8D34B5A182B097413E5DC19D5C8D4A2822FEBE8D6B329452629E6
E0E074F443FD1F802F1FDFBE06374C2AAD93C6CA7BEE7BEA382EE36ECC47D54A
2BC1899D9F540742976B5026847516AD04B35299E4A9DCD6563C94A37E46CF92
0A93AC53F89D1D60F1E179DBBEEAE630805F8AECA1A0A521E6CCC0B2847C06BE
EED971782DEF71493D683CAC8F32844383B69545874718524F302814EEB020A0
87818BA056F3CE1127EE726179F02BA31944C17BBD5EB6237CC77D10D494A88E
D0C5047B4691DA7F9C613CB058644FAFCAA38AC8C98B8BFCCB014CAE44C73020
E96DC6777D646E51242BCCDCA5F2E687472A7F72CA934568A73464FC71C13094
01CA41DE5C459E4B94635AFE9B5CBABDC47F562D885FC41D2C04A7479B687F10
30478C34D8FD4119298D9230C0C8CCF1CDFC3B8091892323075D01B96EACBD1F
AFA374995415D18B0283CC82D700D87A632182B82940708CC543A626EDFD88AE
27A5B918494AFA3BCD8AE70A96830A4546F103259FD509E04F00CE2853EBC189
A31047632098E349880F64066E4956BD54C50EC6229B0FEB1A28B11BB8D7B7C0
8A7115746AD915F6B54012E824452EEB85ADCE2FA93960F77BE886B82D88CA2F
602184575B8579236BE542411AE06D3B4477F3BF0036DE865CCEA12806D4D15C
0053FF59A909966CF613E6DCECBBBAA87E06D86AECF00B7FD62F67197F7F6EA6
2F490DEAF812E5E63FF115E03658EE7BC9A1695DC3A22D2CC56EDD2E02A93CF4
4DCD63C67E6D3BF241ACB0879A8C245A82E0B77AEADEBF8AAAF1FB454EA5648C
498AAFA3CD94A690FE944D69C7C0DACE5E4ACD161798BE097B4BE34BD6BEC5D4
264DE395C1E60FF47738B87B8AC9C0BC6AE6D78E9A2C2492CBCA10A57EE4E465
E97619807FEDAD281856C0735CD4B75C8E0EE2D6521B6E6F52F5803D349EB903
D7D46C023D14BC9C8EA9DA95BC679A7A87FACE16D0DF7A1524DC9FFB607E9E72
533F6F8533603C6E1539EE17053F75636437F76859103CBE1533C67BF07609A5
2BA8CC4E7A1C5B6E3519772193119B6EBF9FBF317AE8D89AADBA72DDA9D89C56
A8BED3827BB0EB5D55059FF26D0F5EE81435402E0CB60649D5A809D2A3EB86AF
B44101C142CBBA3D2E500355005956F48A4629745EF2DB9B203F8BA25391DC40
E53FE26819548545CCA13906A14EF8E6090DBB479632B6C4462BFC
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMBX9
%!PS-AdobeFont-1.1: CMBX9 1.0
%%CreationDate: 1991 Aug 20 16:36:25
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMBX9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMBX9 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-58 -250 1195 750}readonly def
/UniqueID 5000767 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5F0364CD5660F74BEE96790DE35AFA90CCF712
B1805DA88AE375A04D99598EADFC625BDC1F9C315B6CF28C9BD427F32C745C99
AEBE70DAAED49EA45AF94F081934AA47894A370D635D93B1823EC35EB8316AA1
86031FCC99F57CB21E8400E54AA474B57112F0D4754A16BEC19117E9D3638986
0777A71B135CC18E20E193AE6C2BCD89F4A27516DBD2BFE69FF9920D547796F9
89E0825B6BD5F492B36AF136EA91B826501ADB1979A4204B2CB5C0517F2B9494
9B2077F316D2B3DA256C99F7549E6BC4B04FE12072B09B4F5D482A126AE351F3
97DB85F3026A793B51E6B28B54661FEB087F011F0BFF67272DD1E8825C180723
22AE77CD6166D2605D0C0F131537417CB60086F08E7197AA916D590944BD801B
DEE8F29FFC516E11396CCB8395CFEC9262E22521882DC0316B0A129DBFA5FB57
E656890C2471675E0566FE461028FB05532E274E6DF77E7D320D09B2203BBB5A
8B185B66B2F8A18A49589C4EE27596DD56260D0D759D2A12CEF7FC3010BA1B36
85A2FD45129DC01A0C7570423305C25D957DFF9215102FFF35F428C823D549E5
014E7F99ACA6C10B3C92805376D0F3F280D65852CEA54F5CC9DEF9EC1347824B
0733D3341B34937316E77E952AD9366D3B2ED045165565F07CB636385E5A5911
2620E185B105EF6C93890833054E05B6301137338A3F1D6AB2F80095E57AE60D
6E5EE2764624849978C811EC38E014AE4A5823734C5CEB2BC22DDA46BB408D00
4F25CA8ED287D35E26A4CACA77D2D4B986ED2ADD3BC0C3405741CAD56DE28C7C
68E8944967C022CC55907B3DFACC1EFAFD38D3EDDA1AADB6E2C006ECBEFAC8D7
18ED3C46C331623D8FAACC6CF9292B8F1B407806A0D4808F51A5BC97FFFD0ED5
EFC55CE3A7FA5FAE7999BF5BCDE50FB14F9AACF7A3567C7A08B467D1A531A266
50CB045D50B3B2315B9FC10123ADE22F90A9E9081997438FAB17EBC40C118D89
B3A4A5EA94F186A96FC85E5E80142F17050CA1AAFF1DDDC8207A297AF8B61D8E
6AA5753C76EC683415C5715765BAA49572A952B688A434611D4A1A0F0B684462
3E8712763A7C74538A7C7896EF05178CF8A7FE82C5562DC28582D230D2163A89
758B5FFB9A4004D508C49B31FC386D9192D708C6ADB0EB3EAC17A34B71E3BCB8
7974B471AE980E9D30ECA08C8B8ECF69488776341486BC265E2EDEEBEF18843F
621B542052C53D8B97862C6462CC47F5BCD8998049315F66132B67844CDB94F4
8E36C5CFEE2045E919008D24082458FDC3A83527CA797B7B13553404E9344780
38F372CF0D468CF90DA51623D045A5E7F3FD172F48E716925B0EC880399E0D33
0B7B2ADD21E6BD4FEDEA59438EB3D7C09774391BB014E9B7C80ED439CD60CC40
56AB9F18D6720F3B4241EA7F65DEB48BD9C9FEBF2C07FD45C36F51A0D3367E2D
AA6A9F0D43249CEFADC4A12B65606FDA72B7EA6C46AC102FEBFC410C4EBC4DD0
6C5C1F759CAFFA709B749157C92DFE0CBE633031B0AA25CBC017A939ED56024B
E7B5139C09D94F26C3541C0E40AC62FE854748D2DB3139C60432741C107C46EA
672E8A96AD122FC55CD0CBF85AF250B1F137A96836B32ED2AB77C7D7D129F149
4EBEA0CC516C9D0BE16547DB7BFD62E1CECD5FD27E3DC6E3E1BD96405F956D29
985AB2E2EAF0E199B4ADBCB110551D1B3833D636A33AD78A015C830C008995B8
E72F63F7367DB0140AC46B0FD6D6C411084C8F89C25B398CBE50B627CE4601F2
A5A868A3A248C4D1A7CA969B081C250696B6D7CB06BB8478EDB8652764BFDF4D
2003EF8B75136F8F4FB0C2F33323450ABE1C03578611816747DFA2C562E89490
7ED05F26765BDC47FD93B265038F11ADA439EB5C19610767472015E0CC0EFF60
AA72C92AF42D1FC2230E3A9F1C6C1A380D504231587830AC51D5125555CDA89F
33599F8378FDD3E83F342C9E3D17FB1D607CB5887117972271D1918C018477BE
4972038CBFEE4A8F958AC348CA0151E2680C44F751DFC6A6CDDE08B9C71A2A7E
B94214B5BD173B4E4CB057FE7AB9BB80B9A1CD52FC4267AADA27CDF6E711C834
C410CAADB3A59759EDBF5AE57B61CB62488327D0BFF827528DE34D8FCE046C7D
97C19878E11D4C79A4D7486521F01F74AA7C235C6301128A2AA2C4A5E805507D
173C6906777695A1C07E503DBD3DEFCFE349949AFE21B797DEFADD3E1766431F
577B1B248F17C66EB3BFCA5C7EE12E10E36729D3015C82479ACA88F6ADC0BE61
3A19E44968ABCFFA9EA2B2C1884F49B9BDE1EF31CFF23BF2CAE48C9FEEBBA405
4CF03436372166D4A4C2D568BF552392D5D9DE7664D4992AE3C3DFBE2313315F
8133E4941F6937D8CD2AEF42DA764B071F514E113D3B6DE9AD614409621EF3DE
96BB50A320D0CE4321B8990820D23135B220657CA822582D21EB7088FF62AB36
BEDA2ED71ECAC0125AABBC411AFD988FE30047F8115F44CA438ED3CF3821E693
3E00375A16E6B4421715587A38CAF6B511297EFB0D04B266D5BA6B9775D0EC87
C39EF54BCE1CA70860E837465CD616A87FBDEEDB35093B629819C5F3A5FF7ED5
1923AE3A79659B2762A129EF6F2C8A10A7B378EE457E1E707396AB6866023624
5F47073801DE6B84CC86B0106DE1346643FA52D81ACBFFB0543AE84070B4C78E
E6FBE73FB420B3C14A89D059ED30DAE66C5140127462B368F0916BDD30D2BD09
9BDA9D10CAF43D26C8F91A8622373EF876AC548C30E1064F79491F56FFCAA280
C7E862F7192C4D485CE99A7992A2035E001438657E2586C4E187BDF757139091
A92AA431A45F1BF585DB2AC0F1CD14910A93A05470A23DC785C23204EBB21F13
F14B7F6142A30770D3408E29AF101F66ED6D38EE7ED100EC2F7EAEFA7C009E55
3144F7323AE3C476C18888DB5E0FF1AEAE31580A4C764F5A79C9A7F4BF6FDABE
A920B733443F3A359553CF933C9067261F82426EF93E5F71CB53C0488CCAE3A4
4009B455353FA242CBF820597E451802405CC1084A4D318F184238FFCD40F2AC
8018D7E807FFDBB424BF754D65139B17D4FF050FEFB3F45DCB692B3AB735B06C
95F034E7438BCA88C7B56F7BE079C7147382DAD3270CBF525C10C07CDBB2AE79
BECF12E4F45A6CEC2B1C27635F91EEFD61F418F406BF1F1B9087CD78784DB4A9
F7806B6A0FAB4CBBC930C2BBAA6B7E53D672DFFF0C51154C2D2CF1D5A15007BC
C65E75539E3A1A43EED9F556BEB76DE84CC612E41AA567B7423B6478458B87DF
3C8FC9B7D79E6ACF34E6AFA614CF784E49149B5E4F66729E2F26A3516A828319
D1DCBE897B8A5F4016F1B34D601EF4A26C6832A74AFD77579D1BA9EEEC8E6399
88DA3190F451367536C3DFAA1156072356FDF82519384BF27326DC974E75C00C
954588D6490C00D6E9B612217EA6BA25DF1ECC11CB43ABB8E63DA2144C8370EF
8E695D4A9BDE0583C58A4EE19D59158C4D259795806DAEE2DB95A97277A8FC89
B121169503EF62C8D86A3247FB42A5390C1979F9C1DE42D7B716833A01FFADA9
9C2590AE717C6E1E42364844F0DAD389C1A8F5A73B8BC9A59E2EA2AA6FD05EED
9195723828CA02BB2755D5F83DDBD19A74D4014A0FF3710FA3EFA899305DB983
DA0050709FEE7BE5573D8612AA24697960F74873648A0F914FAF6BFDA7172091
EF3E75305A275D64015910139B2E40AAC113E73CF384F95F4CB75E0D46B20B2E
30625DDDB07D5D6B4BEEAD89D5D68E0FFB27605FCB8348876DDD19723E3A8CB2
EAB8441BCC6812D6A34B87AA831527971375B76D0CE7A5FD323AF67A36F86BFF
004074E1BF93988A25313FE2F69168399288D0C8E0A535F952C97FF781BC9593
5C874DDEDAAF6AAE37049102DA0A0F8A8CBD3BE7BB44651296DFEEB6E17F42AC
0805EAB3B9BA47A819528734D9835F70D28BFB33E3C60F61337183D6A3B2650B
E45727CE047A5BD57B85F97230080719EBB9EFCA4E9DDFE055F84C209EBC48E1
DA9CA0EF242855B5961E02AAAD013767ED9B553B9CA79767BB3C9EEC51B2F21F
01E80C70B308926C5667BD1D5A88A320CBE3745272AB83D8D5B2F844EBA6199B
64E819B1DA0EE146A0B585F28B90DB3C87254312DC604CA4FF8B27A75279664E
3C4086D61F3CEF3FDFB67D8AC0241DE51EB5F994925649318F2E0D3557222136
2961C4A0AA0D1431E3BE0278FFD9A618089AA69A86852EEFC074DA133FEDFAF4
14F5C99CB59724891DD59908802FDE6CC5BBC48007AC7148F9288D9A5D7C68C0
EFD5C08D8CECDD0231280C307B37D3AB0C795DEFCE633BAE9092A7241A06CFDD
EC724B9AACE24AB2F1B08E7F9490A76088B005FAC68144348C55A03AE66CD5D2
23EA2733A1721AF0BD33230666BB72340171EF54BD19268BDBC9654FB951E489
F81BF78F54EA4B745BFB6EB5649A7688AFB5F6D4FA07DE0B99F93E66A03CBC5A
3BF48331D19C549003E67523D16D9CCC55383BBAD17BE9A39B4ECF5E0CB06796
85C195D52743BC140D3385A28736FD41C0186B895757270EFA9619B0A0898DE9
40CD577B1A78DB03E428444C33C3BDCCD856EF4F56832E80289F241FD1BFCB08
43A1D3DC8FCF2C60E5DBB34C7ED6553277399FFD92BD769737FA93F5E3E3C05A
35E76DD78278D696328E2D0D6A2E015839118D9D7CF1E3C4CCA97034973B9CA1
DC39387A5C020ADCA196600AC50681923FFF7E4E6BD5DC42C5D232263E75D7BB
D7FAC0E8CA2363AF1B76CD344488CF349387511512BC9CED5C5EAECA741B6A40
A3A16B3A199DDBD338CA9F2629BDD0812435734608C7EC7A78518EAB12ABD09E
32EA1F950C2E514E2E0A556D6575F989F3B45491CCED54FF4AC7E8E509D2
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMSY9
%!PS-AdobeFont-1.1: CMSY9 1.0
%%CreationDate: 1991 Aug 15 07:22:27
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMSY9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.035 def
/isFixedPitch false def
end readonly def
/FontName /CMSY9 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-30 -958 1146 777}readonly def
/UniqueID 5000819 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052F09F9C8ADE9D907C058B87E9B6964
7D53359E51216774A4EAA1E2B58EC3176BD1184A633B951372B4198D4E8C5EF4
A213ACB58AA0A658908035BF2ED8531779838A960DFE2B27EA49C37156989C85
E21B3ABF72E39A89232CD9F4237FC80C9E64E8425AA3BEF7DED60B122A52922A
221A37D9A807DD01161779DDE7D31FF2B87F97C73D63EECDDA4C49501773468A
27D1663E0B62F461F6E40A5D6676D0037D33F24E2FAC2B0009AD3C8350CDF8CC
65BCA87979C36D14CB552E9A985E48BE4E88ECA16DF418749AF04FDD2B0E1380
D281BB2476BB45FF30946B247DFD7F57305FA87E50CA338121C71CDFDF927A9C
77FF14CB4A1D6D80356FB1171ED38C37702350497B44E42CE31DB2F493807DAA
15B887C671199A54C4C1294BC520F5538C15556BC43C9F62342B121C6DCD6C5F
491DA47FF360201EE21C08A781ED0589A6DF91B99FE118B9B29E4F068672E52F
1A06C514D91C4C937D4E642503392B1CD1B984B04B674C2977A634F63B35677E
9196FFCAE2BFE473A61872B5F29DEC22B3966D2E8400B2A4EDEF9FE85F5428B0
0B8BFDDAA07D916FF216A5390ADE467F9ED66B008F4467719EEC8E86C1BF76B6
454440B4FB77674646DF04A81DA756813D7BA815AF236FCBE44F768A8B5F59DA
90BF5E7BCE785182F220B813D92E53B03E77A17695FCEAAC03B779F646DE5316
A7920F9B9DA5ED934ABDF32229E31D38D514458F05AD3F7998E8756627DEABEB
024E2D8F56D5B36F4F82BA8CD49A962E0BF90367E1E5CDE046202AF18475736F
5C2F09A9D45E9DD0C3C7020228EA19AB0124D9D4E9AEC757B2A5D5EE0D337C5A
704EDC840A41E6177844D5680CC054F2CBFD84209DE911446B61CD6DEFD1DDB8
35260D23CBF1EB90676EC770E8DDE5AC6125C62B862D2C3CEF3830149AD144DA
47327F37FAAA37E9C6148DF470269A6FE3B50B2CE49CEB5B5433B805AF50ECD2
C44BE20445D3C7F02C6E63A83163DDE08BA0B9CC54C6D8B5E891ABE6A19F722D
2140C4B6A23229EAACB0F3CC4E9E315CAEE60A989A7F36DC3D95AD41D0C0DEB0
10C647649F1084FC2FBF0201949040EB0A8DD625D102E91147D1DDED19DCEBFE
BE59292F64BA39D781406A3F010655C03715A871E7DF4733D8007327808E5B6D
D322BA460A4C0D230787531B1E980DFE1DF0CCE26195EABC7939501271E3D456
8D4199C24E4DADFE6E2256832C62AAAB86F0B08AB2B4F78F495E75A794F1CD1C
C8FCB8CD099BB4CA16374EB0064B9FD214BDC09B261044F9AA389BE928D99F15
E4C9F932E61FEBC25518A8408E6550B924C8CC67935366A6B2A479B60ACEA4FE
F40152B3394E26693BCC81B6F01FEE02A882929DE27AFFE0C866F351F7BBFC42
83C2C44CBDF64B92EA8E5ACF92C901F0A94D94F4C44A99B54E788402014F5C15
E66346907F9AF3BB621F7BD143E29268B17D0337ACE8C7AB319B47849E586CA7
BE8BABE5BEE056F689D96FFC07DE5991252B153259965FA8EFAC87FAF7E0ABD9
7C810A2698624A8BBC4C057F098B1EF96FB57B046A5D184FCA3A6C2202902B27
8107175D069F4FE2010690335226281150A99B3AA6C91643A7D6444A4C9415B1
D7
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMR9
%!PS-AdobeFont-1.1: CMR9 1.0
%%CreationDate: 1991 Aug 20 16:39:59
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR9 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-39 -250 1036 750}readonly def
/UniqueID 5000792 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF7158F1163BC1F3352E22A1452E73FECA8A4
87100FB1FFC4C8AF409B2067537220E605DA0852CA49839E1386AF9D7A1A455F
D1F017CE45884D76EF2CB9BC5821FD25365DDEA6E45F332B5F68A44AD8A530F0
92A36FADB679CF58BAFDD3E51DFDD314B91A605515D729EE20C42505FD4E0835
3C9D365B14C003BC6DD352F0228A8C161F172D2551CD1C67CD0B1B21DED53203
046FAFF9B1129167921DD82C5964F9DDDFE0D2686875BD075FC81831A941F20E
C5CD90040A092E559F6D1D3B0E9BB71733595AE0EA6093F986377A96060BF12A
A1B525CD9FA741FE051DD54A32BECD55A868DD63119A4370F8322CCBEC889BC2
A723CB4015FC4AA90AE873EA14DE13382CA9CF0D8DFB65F0ABEDFD9A64BB3F4D
731E2E1C9A1789228FF44116230A70C339C9819676022AB31B5C9C589AE9094B
09882051AD4637C1710D93E8DD117B4E7B478493B91EA6306FDB3FA6D738AAB1
49FBB21A00AC2A999C21445DE3177F21D8B6AAB33869C882613EA6B5EC56476B
5634181ECBF03BFEDB57F079EACE3B334F6F384BDF9D70AEBD592C8ECF21378B
54A8B5DBF7CB9282E16AA517E14843909339B5E7C55B038BF3BB493F3B884A1C
C25F9E8FB912CBE23199AD9D2C3E573727701BA301526C66C3617B9514D6F11F
11930B1D97C17816C85B1BFD9B973A191B33CC3B391815AC46268691C741B2D4
48A840F1128D9B2F9CF07D0709FE796B23A836417BF7B5B12D67F74453C82F5F
25F7B30701D6F6D4F4DC623C0C27D6A6FBECC7312A3CD10932FC7C10851C3C52
24B75DEA8A648B7F34F5711DB0E843C914E25663C510185BC37BDB7593C1C259
21D8DDAD33982C336BF272BAB2F48E68217403FE9F54877B243614A87E64784D
2796EE4179FBF96123D1BEE3EF89D682B427BA4F12A1318A57F18BE5DD903815
26168A153BB729CBCA2079053485546A38CFA3D5B2EA3DE7B70DACC1EA8D2BF5
60D9830D167DB7197960CFE043346A039F840E66F75BDC0C75C0BBB20F39444F
AD5F076B76890D58F1E107F022E954F946D053F395E9DF16A6D29143E0C241D1
6C6A4021B3018AEEF704CDD0E029A5DC86EA2D39BA2BF2393802E670A107FEA0
91626CC7BA9DF192F267B3499912984FC78E7460AB3D5327214695751948B19A
ABE18C01DFFD1CEC68F67FE5C20F4AA5D02E381334A8F40688CFBC6D591927CF
723F05E9D9B0CBB9F10D0F321E14D65839AB40185BCA1D8D16DC845BFDC96113
AF3D40C7AF61F3C0C6CDE926C68DA3FDF4A94CB00BBE33EF8438715EE4D5C325
890CF48DECD3730061A2742AF9BC3174CA37AB86294AF802D7ED6A685EFF33B8
7B2BA73337C5AFF89BAA83E6B943E3B43E8D73502CEC17CBBED4CDC2B0A1221A
BD65A5374B39D703D96F281751D8BCA6574402F145C36840DFCA0A5ED8FADB4D
9EF40A46BF83673E2E1FBCAABE90E47B0B1CC75098B2DEF201B3FD13CEC31502
F0CEC0852B7C763054AD874733641F2FB68AAC21BE291BF38AC2E17B7746659D
A61956EC8D03B9BADC534EC514EA44BFFBD3D6C71E50499806CA1E065F391BA6
9A7B1618DAD8ACF2BB119346648C97992CF680FAFFB2C607ACB06DB259AB57E6
2BF9DDADA02EF9BCE720A34E65498CF5B90F69821DF0018BB0B6226508A4BA9A
6B131FB3FA340207614A50C44904A0D97AD7B3450F294F4F73CF060D7B04AB98
3855E6464AE4B8DDB69384EAF5BDCBFF6B1DCC2DB2C08E2E956CB181BF1B831E
D337546E286F87E7BA85107E081A8D5A7A71EB561948B07903A520A5169A392D
954C681E7FF5F601B2479F3E4BC309E0A65C68D61A31B29805092C81DC978602
0D4906C3426F2F6443F664A602F2BCB6E3F20C3CD1DEF7A6E8155937A7FBAC02
021616BEEA2FF7A1966C2E400C85F7F03751C4A0D00032CD603177152388DEAB
7124801B7054AAA8C9AE83DC85318890C69224338301C516028C0F4C571E00AA
125F2B3430ADC83C84EC172418887D9B5E52FCCF0DC8EE15F94B7E937C1F4DB2
B6B291EF6712A68DE75EDC8960F16B0154489A0144CC18FBFFB1B1C439B5A799
6487CEF91B1B8C00FF45FE601D33EDCF5A8DFA11E473DBF51EC6BD4BC1412628
C7EE27350D28AF53101EB6823A926258CB92A0AD34DC264FA359D7C5C860EA59
846F10CACDD5903F7DFA659BAF3ACA0556E24897429D4BA1E8FC7E2B725D4C76
1FE45AFDA986993DBDF3355FA6D66C89459EC0C49BCA11CDCB26192ACA4FFA64
0DD4EB0846F90203AE754AE11DFEA0BCF0EEE02C831FE67AD89331D285D2B697
FB4978B176076BD1E4E0BEA684EBCBA3A7925CAC4C4C23078C72D7520483254C
A5A8BC743ADA0D2BA3F949BBF75CE09E45D5A0ABCA53EBAD90E00F16E6934BA2
0DDC9C8ADD1A424C4A35A995EB47F58B3465D78C1BEC0E349D44D8A261FFB34B
9378D593CE102EF50E80C7E09EEB575D139C0CCCEDA5E5E6D8C1F1D8FB217312
F495615DC697D9FEE93C5A69B45F9246B3A42CC9ABC698A6EFB83A470C64452C
1FE9F71B01DAE4886ACD7109CFA25BB73D1D16D29E285CF259F71E4219848529
DDBB576CEE0B824CE52D54E35C0AC015C8F7659145BC4B5191BBB4E156F95717
8A59A55EE04A297EE670286F324B2B093092738760F1806C6082224299DE6CC4
3EC41C58C82A823B4D2D21719722D692EC64533C78E40FB3D64DEA464D93FD5C
578FC7FE26549DB5A118D7E83270CDAD358DEB86DB3A0F8895C3A2DFB18DA263
B47F3846FD1E3FEC4F4049A65138A79DB94D93D69A2F76A81A96088D19B159FC
B1A3B3344178739D069FE77B605850EE6249AD4909C47E3F55A96DCBA9A8AA7B
BA4F728D4EEED23D176C10693F09C41433953D9964DEA5C58633A3B880A452BD
7AC54B9438C2D5332DD14AC16C3C01313388BBB4EECDDD69A430173FA61824E9
AD39FF3EA74455E73DB60DC9EBB824D582968E2BE6D1676F9B616D93E45AFF43
FA651524E2521110CB32327B91E4038CA184ECD61425FD5B37B521738FBBF796
392D26548BBC31E547B69A2C5934B5FC2CA2EA8A67B8E4F7753EB8FE47376F82
8C13E5FA9CD2B4BAAF1D61E7420D972DEF2B09FBF45031EFF99A37FA323390F4
24815F594C29EDD3D46FF4366F2BEDEC3D002D13472A93319D03E32A46CC4D90
A228BF2B913A0760E72BFE0E6B3922AEB35460BBB774AA0C4DF94ABEE4FA48E1
A0ECEA4D971FD5BC37942DADFA225B7B9BAA033A0E142BF1377B48D4B499B4EA
1964B40A0AAA4E7A0D634A381098FB9D78FE27F61268ED73DD1B73EF97A03158
2E044AD60CBC7D1CB72D16D33652875FACA86CD50BD4591F0678612BA966608D
1577CE70FEE046640BF0369E38BD6177B56266271938A6EFD3713AE385983B16
B8DC3F1ABEF8782A0CA34E3C3DF0A78E6FBD3A7C73CF84FA08632E643047FA0F
0F5A001761292D1B2A3DF893DD56262E6D58D1BBE16F6E7307001B1376574316
31353D156542EDA8F0A456F512588B2822367289285F61FDEB20FC37549329AD
9C55789F359384FE1C30B9CA2DCD683187C36DADC2951F7E221918EDD7054095
24247B69EFC1F12871A1FE577FC1518ABE30A7A9C8F5972E1FF7E26318DAF447
3857B24277F062247FC602B7A46C8C5FE90D5E4C9CDFD52F0C93EF699922D586
AE4E55A1C076B5CA26D1A34B1571899D309CB4AB99C5DC8CA0C8C101D290F835
AD8AD38E4255B814CAF1230293CEBC7CE5335F285AC9D7806C2B17B1932798E1
A1C708EA37240026F63163BB5A328EEC84EF42A3FB05C973920FE2878A600619
9269DCB0B15F979179F736CC9E2191313D99EFAB43C75F46B8098B062E75E31E
ACA325164E8BCF887F7A0D3717DAA236AC976D3E16D77BCBFAA07BB288B5E6D7
8C1652FCAFE211FD4D6DF6757BC14259A9603E772F3D54D3481242DF8472415B
2C546F6E4328CDADACA1E0767B2C39374DCA0895D1E123D1015D09D84E0F791E
C00134A707D2AF0CA102BD9D4B45D5835B28C7B50ABFA2AAAF2B234933519493
0373956D8F16861602A78D1B3D48AEDA496C263E20ADF612AEE4F2813F24BB66
47461B636EBDF9045FF9751799DFAE66B0AAC9C71E1E2BD8CF272A25112E2B99
2DAD18389AC2022D95D4103E1271A37EE167F2403102973E5D222B1B248506FB
9757B27077FC6F6A184CEC9CA16760E24D834892AE5D594500417DC2C514EE52
61A4256192A4B8401093296C743952228622EA823C4A206E0DFBA312D17E46D6
B7C1A158D2B0AC99A4878DABC3AE9B56DCCB8E696DD6EE468B1FAB6AB8D1516C
CDA826A8DB8A1A71D707B399BE075D8C4E6C0729A62FA49BC7BABFF5007AB210
5D4222929D865D07716A16BB6E4C7A6F40659819D64B536725E6AE7E9431BE9B
8621E83D6A265A3778AEF64413DAD8C31BEE9E8BB8891889D5A8E1E98D700D25
65F513F8CB35B278FB79A58F3F01774AFAD9F51194EDD9E2E026E94C986A8D1A
D830E54255D7FD6FF5C2D9EBA43ADAABA0CEEFFE0A6878C19A8E7DED611D9860
13154CB53E68F06C3AE4497EF8961B44D06A08BBDD454DF75CFA4B34271977A0
15B1248FDF215A5F0C824547E14D0ED80D007DB8F1921526474C6AA9C44F5CC0
5753A9ED7E6CD902948C5095DEA459851F143B0AA705B7317F87DFB2054E1969
CEFB907A7883118C3C571C32720C5691314FE7DAB0802106E4E0169334A5CF65
28919671FC1087AF351403E1EB9F97C7F36A6C2D049F582A28D7E1BE69EB5A30
DBE0BF175D32BEBD3E48A22A14FB0BFEC3C116D09F6F0E3404B183AC71239D8F
781640CBFF2A4976C694EA2674F60221BBCC89DFF75589D1BAD952C1A5E3AB4B
975AB99579A08E39F3D3BA47A22A371EA810756073411C9ECB1CF86863A78F20
A8A931A28E9DB4077F659D43E545A99EE2E84D74726B1AB1DC7F575D797A73D1
B4FBCDC9D5D0A0E8F8A5517ED137F13F01DA90182327D799A682C61365F56565
734EC65F5B17900B36B021EE66B881CA6C5D50FFA5F69CB19180FC7A40B65E1E
DF9986578E465A42D9B570AA8DB61C755ABB9193EF823ECB7EA291C4BD6035E5
23D08CC595DEE563D7DCD821EBBA25CFA9CEC6C259DB24E6E2311624B625A91E
CD1FB79C4862B0678076CDB7367CF97B86FD9B990FB85436F7DBDCC210704051
B8C48FE46520290C4DCDFD677F634926856B6302B1A7ABF771A19A9C16143823
1522A0E3E22EBAE09E23CFD0497217E2B410A5F761D0D4520203E00C4F80B730
6438E5B46D6BECBC35B22243B81D0AFEEF4CBECD10F7115206ED6B76498438DC
E77B1D145697925C0C0018989CEB8872F7F35256E3F966526C7A2BAAF2CDC5A4
B896078BD6315FFE774EF3D3F99BB278D129A85683DC2BB60AD049414F00AAAA
FF4C92F46EDEB497E2D68E58EA0778CB66F61CD9EA2E7401D3EF653429716881
152F566EB9C380A124DA37FD46D724FB49E6AFCCD851DD3F533B477B55C120F9
1F96B975D4ACE19E86853172CFDE4B250510FBCD04324F99244B711D9C77674D
67419C71447578D888891E781738D2C9F9D6DCB55C8651B1D8AACB68A8E4CF43
6D7E92C3DC749FEEA934C0EF6FF5B381553F19A4048B4721A42B8DE85CDD030C
49508E33F0E6299F60D6D3AAC90C692A18560B8A4F148EA663C0CD61C776A176
59B0DDEFDAED16657602CA6512003A187699C71B09CEE8A38D4D3755FDA8A239
D8529CE0AA44C9774E42AD9E78755AB855B91101E3E1346EE5AA67DC00F9FC4C
8BE0CDE53CF9D9B94B513D6996DF230819483D8C8EF136CA1C206C8CB8F15FF4
DFD7463AF79BB26ECB96BC586EDF1FED48ED6416C87D0CA924BE67F319C53632
BCB66362A01FE911CC8F5120AAEE9F79F7DA71846838B1077384B66A73A3FF72
75B8F95A29AD1F1F779DCB58F8E4D9D6188B8FB302CCF2F9C392F54110288B87
3CFFC2B2BD68F87A609682D10C3A79163A4516D05D211DA2A4C402408DFB44A7
B7952C7403A671351C5FA24A06E5134433C222317A7B66CE154FD5486252D441
BF4C6F2042793350D71BA1DCA553E0AA9FEC28065A894EE6F7DB840FA39D4A4B
11B850F60BF96B3895213A633F3094B78C118B806525D0A31F46B11D7D9E4A62
B6604C96CD1B91261E0C76EBEF0A7CDA6FE54F514336BDBC2083F6DC02BAD1A8
95D6A499C26150963DC474CCACED71BD1C9E6B9FBB7E0B6C0AB1E5F8C5ADE343
C1793F9326223EFEA988AA1265FA6B6D593BA22BAE41D66E6BD5B48E2EB9FA3A
82CCF28C5E815A6BBB74C91D2BB78D1E3FC41901C09E5AAEC0C12AF85352E19C
70E517F092B37A690474B3594404AA7AEA794297F7F7945A97177B2811B54005
51461BAA8A0590CB726CA5503A63EFB0A140DFC7BDA41CFEED8D4E4CA09F5D31
E5A311B1CA092CAB0C7167392E3E7BD114C7607F52BAEA8DBCB6E5E9868BEAA8
276084D72A481324188C637FDD811E0E55BCDDB7343ECAF4342330C940957FF2
8CD98843B30EA83AEB929D873315BC6CE2DBD07D81706A787842B7DEC7552EF9
AC8C211D378CB47247963FAB06264ECD5D0D92EDC8018FC5C841D081EB1A184A
DD3C28C34046FB477F481DF97202555BCA280C4B547DBE51D679F4FDAC3F1BE7
485725C8F5E6105CABB93DFEA18C0A47122DFE54908BB7D420B119D95911B180
67D97BA672E6AA975CEFA77C6CDC362F5D1AF4F135A3B887B862C6169947D8B1
D88B94AAD8009EE6D6AB99C26558722D68612FFF718B719AF3F0976BFB2FEB6D
AFF77F36EAE24DD582F43AAAD8E8EAF3E744E295BEF94EB298E4D9FDFE77615F
DC0BA9236F53523268F5DD7F58ADB591F190C5EEFC807F8501985FAB833AC1A4
59740986A903AFE91236D5A5B0F415F5D8FF4ECF3D67CD5090D0E939E12AB678
A756F344195E0CD647D921F2CF555467F19B7537C707ACB9DA3EEFF4AC3FF4ED
917BED6164B9736411880B387DF2AF939868223EA28037A787126536939BCE9E
DE60EA97B2DF8D09053AE746E7B43A9014C955E967FF26735F5FF1B14DC3F03F
B8BE0CBFDCBBDA2CFAF25D556F4B6803DEE8FFF95E155EF7D694B0F93B241651
0CDE6132221B20136FEB184800C8A260EFFBC5CFF0F5DF2F3F362C6C18F6F492
F8B6F4BFABEDBFCD96F7D01273EB7C5A83F58879AC9AA095C0A1F54CF1AD1A44
3385DD72FDE2724227E897B5C19EDC308D54F02B4A8035137750335D95233CDA
C97D1B281325218AF42C8663E769E7617BBEE506449CF312E76F3E62A721E218
2D2EE3114B24BD379B86E9EB614B1CF425AC43E50FD2EB3F6D45DA7ED548AC7B
38FC123BF44996504A73621C88CB9603081E5B502766E97978564DE4BA1EC9D6
3EBE514D381936512370F352AE4BF3103068CBFF59DB85B9E67E24EC9C70798B
BA7F6B8E8A221AFB95054C2304B2A378F95307CC9DC6734347F880083F79CD49
5046FEC71CE17E69169E3E58AF4E8A09A1BE8C2B6B272F23CCC831CD9997EA8D
D4FDB4E5149A8AB7D0A6EDBD8711DD0A5C255AA4B2FAD4A3EB9C5025977C70ED
4ADE33E1A76A91A158A445A0AD0ED0401D68AB2FB5CDB362B32A74225AD703FA
D318B98ECDFAF443B95D88EB0252C6C42DFFE24A20C7EE204890E9746225E7E3
D435058A4650E0063BDE9B9000C5832CD3CC679668B8E52B8695D83DF4BE75FB
8B77C139AD6641EA63409082331CC94F8EBE2DDFF4AAF9EB6EB32F70A8A26594
9B60F55DB715DC8F43B85EDB0A09C4D70B113427BD7145C93D04DE5D7F4AB8B9
C15D4D6A53A20B8DCE4FBC7F68A138FA8D4D6D412755F851C230AA7AF136B168
A35296125CD7B33096533CDF1521876D726DF469C979AA0DCB563311BECF8B46
2E7A1750E9C2EDFE0F1DD62A485965638CDD3D580EB17BC74F71DCC23CB8B137
110966B09CC5E3D4DE840957599247C5253C4CE5F8749D42CE4A71C2FA265333
9AB3083E12367EFA46ED9D435DB15D44E9E945AF532BD64FC24A22AF56D3E171
E1AAAC470E55526FC67E6549FA6C1D57316BF10E4A57429DBC14E880DC1A143E
3B001BBA4EEED86465549F30BCBA18AFD34CBFDCBAAA1CD522CF14318FD4E5B9
87E5FB3D8D764F906144EACFD75B088EB1EA47E6BBBF06E89A1AFC0F1F95A800
44CE2E2AB1871BBE34AC46D45113A59598744B78D2B4A9FBF2BA984DF03123BC
3921394708CCBCC3168D5C72BB09CD4B659A57E1D6FEDC832A9B1FF62EA8626C
4476B9C1A37AC364E6413C5ECD68A91E272BD439FF54A247EB2E686229EA0A86
7CC048F25D8389E268FAF36D91D1BE0E97DFFBD3FC6C7A9F57F866FDF9AF2A08
E318B0CBCDAE2930B1BA4B0DC34CBB3978C966AFC0559012F0E245C9112D34E9
53EBA64CD5B45ED45F38D8460C33B448F5320199E305762979A228A4FF2679A7
3D0DD1B60D5F2CC52BB297A1506115E36E09CB9CA9CD436F44DD43B9BD50A970
91518EE4A7FB6BA31D8431297BB06A5FFE6B56AB760F58EEA553369DA6E07C17
8779C3B09B3B51C47647F5390B8702903105ED1988028F6750CAF4F850A40957
34A44F616CEDA6E70C08B4045398972AD245C0DF292BD3B33CBEE1185D97A080
554AB8C901DD2F520915BFECD1832FEF72CEC82E3CFB9D7D32ED0CD61C53100C
AFF56C97F241DD77E21B026C07B0AC2B7A473E7C2D39FE9EDE5D21B1EF4E05DF
30A95232E4BF82057AC7B5953533F3AFB4FF918F969D1EAE7E4A1F372167C921
4BC7F3D18C8ED1B32F49B28076D30D368C9DA3B3554FA34C0FCCEDFAFB49B418
4E40B9248B0DE6B1E574E4E3417F232A9B07B338814692B55A38AD52474E1959
9D0AD57474D145A467E2324F0477A6B5BCB6BC2276AAEC5F44BC68AB826AF301
C6EC965BF26E3008F214B1FC593A39BE33AEA4F15DC8074BAE9861D3B5B17BB7
742515DFA772DF358A30643295C2E46BE6E2B13D25987D09FA64AFEE6469F7E5
8A3B5C40CFC8F12E3BF386412092749266B028FBDE5314E0E1692DC4DCDD059B
E7145B52D5528B32D02FCEED2A1F5BFE7FB5D8CE95B5A419BF51A6CB8F629E9A
B7EFC189F7FCF6082FFCFA4B872F719F606FD01F247015872558EDEBD2D475E0
3672AC5D56BEF3EAAD2163D71D50D553ED4738C4D9E580275D1E2A14D2F8A59A
4AD0B626D9273139B55EA6F45A6543BD365DEA0E0330D6ECDEF35E2DC8CA1BDD
BC3C5AE9378441484FAF88831263C860359B66E082FE2EEEA4BB35279C157142
79D678937D293A534B23F55814653867C5D9791DADCDFBA80FF373A976305FDA
693B1FBD3DCB8B40B8C87461201CD9AF1E862358CD7B7C4CED3168346B5B44EA
E07AD5DF7028EB9A1999208CFB869B35FA71970D3DD940B5B0FCB29A1E1AB24F
0C832A6D0C0573D8E4C8A90F1E2C3276B28D4F0D154843C695D28499FC776936
60EDAA1C6BA30BD2EE72BCDFA26BDDC730D6D2C0C7A12E20D8CBFCAF3180DA84
0252B7146FE6E8BDC8C62D6B08553C51BF1C3C713D207F39E9E543464B04E69A
EF0DB7321C42FC4858CFE7AAEDC685AE4F5D2B6360A3649CFD08143594684B1C
A41BEF5A49B60AEF11E6B414646FEC07A00421FF4BFE6B6F7EF304E6EEDD6BE6
9DF3C323CCD34C0BE931EE8C0D1A4D812BAD202E1E90976C1022FDBF0DBDA915
71F50AA026FC67FB53DA0CEDE5B968E6D532F4F0BFEA90CE7C8AAF1B5C35E890
1487880C88852C4711D2586A2E5F43B9839049798D6B54523E87C04E014904A6
51A4D824C0981BDA21485B09E9A23AF5B79D2FBA57C96E1C1D10219216C0EF97
D44EFA754898950712110ECC463BC4257D578529505B3BEFD3264F5760D00B64
615B6342ABEF410684360525356B5B7CD9E7B68D2AB930F7B97B30E3917FE96B
0A73E9DA427BD6495B5D50ACE8494374DC6CF5D65275F4FBAF4DA859D77F5F56
DCC6B7DC126631761D13CEA90C448CFE446F9C77E073CD77D073961E3F655308
772C017BA4500397F7285EEF8797778430417F1E3EE26528219B0958338A286E
77305616DE53268596D455EFADA2EB05F71B7E5638C7D97A641BDDE3E052F012
C0D00EA2F01142A6BC80B058E4F5373CE759EFB1F3EAC0386A51537BED053EFA
F1DBA1915A13B23E702617ADFF6441A53D0F9A83A86D2667AC888FFDF123A290
C5509778239774E867406AB87ADD169ADCA16509B73C6B4BA5BD9E011AE7FC94
82D1D876E6B9F1A21CD72D47AE48E8CD834BE3C5FBB58510148D9375B9F3355C
388CB4FA227C10691436FEA7F4EC783D56DF55FD6D6C77529D9CFEE4B8AC99EB
BE782B659ABF86C65AE23C6CA429DABF12EB2E13EE261BE826B27745B8083039
BAC96D807F3E7AF5784B723FA938254543E0BD44A106F3265C40700C63948E17
2BAEF0CB466E895A69A1A35F9560C36AC38509D021106C9EFE0418B67D5C0378
388C925A7CACED4FF3EBABEBDE9424F9A556E91D93BA76D81C02147860B32B81
4388E989D7841179AECA68291DF9FE6AC0C72437B3BD88F010F6A81A55A2B29F
5A2EF4E52FBBAA5833BDC041AA86AC69744324D8460C34DD3BA4A2EFEB3AB186
FFD71588118900745F2120FC79EE0F2600590E7ABEBD435244124426561BEAFA
1BDF5743867B8A4E925CAD341946E4F96CC168722CE6EC2723AD7B5EE3BE180D
0A36EB0074AB9FF1B267EE73A1C530BF871FF67A27551AC18F06EB2963FA96D9
CD9B4F54ED8C7018E7247C17AA18F55FE67AFA4F6A4CDF5001D5BB1969A60B2D
4ED3E0F3E715A21830E1C8290CD5A666682ABB0E11E7828C78A6D0614982C0A1
1B4EFC6A4F1C7FD8AAFAD1DDAFB9DC9F63B6346831B5D3A8B9F8545D67D87285
BB53FF782E0AE6E21DD88DC3732DFED924485D458C9F1BC36FAD41983DB9D0E1
25DF476B84D480DE7A004ACA4C5E83A82DF5F045CCDE2B0394449DC2C4B21E5E
A906FC3523E4E01254C7A866259A21133EC6B231B01708A3F4ACFB8F4DDA14CF
522A528E94A2F87281B1731BD35A4C282B9095D5F3CED4E2BA9E532538FFAD68
D606F2F26B6EED27F0628A5A0DF78614A586E5EE4E72B486277871D3EECC1BAE
527B4567E289915521FD1082E41D8FE8FFAAC6B61FDEDBD6DBD6484F2BDC4875
B97C011247CDE8C53BABC884D7FDE40C708E0E1071B9182F846858B900565F28
DF58272ED4DFC9356F1194ECFE844431EBF80E96C2084BDC2EEA021D894D969C
D7563E565FFF83129E54DD7541CC5DEF56A7D2D977A08901152CEF8D8C611CF5
ACECD0F74801763B591BD1BE034A5321520A19A393494557AC00E8840EA3BE2A
D2A86167ED19DD39847BD72A2A371DB3178B7B24191FCC47AD35C5B3C5720A1B
279DF08FAED37A53ED4D11D8A24F9E21716CB75FABEC9D183D432311192AC891
5DFF7756B3BF12E3FA10A8ADCE40AB94B4A0DD32D6E3CC0953536A8BCECF5537
F3351B39F4CB636C6C7FB23C52848B35C4E8E62AFB02D91AA076E759FAB6FC24
137CC4EBA5B17C26E84C31133815ECC1834CD29CCA61FE64AB0207B81A26D31A
A070CFC0DE9D66767A9D7D1D6D68E72C9ED9258F12A4DF3AC872FB5C7E03F71B
006451D7861BAF0A3BD5EEA484A3B320B580EDE39A35C9F1FC56B8C07AA43171
B1288FD508FB2A1C8771F4264424EBA55BCF83BA78B6D8C5FCC4AE26D217FC55
3526CE4AEE282AD62D894D8D2B1128101056DAEFAE9AC6DF4DBB780CDC52C3ED
6A30F9EE5FF804042D85FE1FCDC53D9C3147602D6175872EB508B68CD42C69AE
E34963EB2BBE938835B3526828D68FD1D5FF4EA9E903181C990E6CBD8D35736F
A0854CD6FA1F0F3733D39F185B3F2EAA5A3332C8B9C206D9A9379FDC159DF0DF
1D299A814E32317C6145607EB9A7472E48049F59C05DAA5FDAB1245C3295A30F
119D34FDAD1EA64F85C73882C0A76E042BC67ADFD4E7A626B52C1199676E8B4F
4C0627FC159604B75713A7C394011FAE9DFE77713D75B3829A5B33928C154F6A
0655F1B33DC06177FAE4E610CBF8674B15A939A1E50AD807979276CB01314DF0
B7E3D6D796608ABAFAF207A291E363150BE5855CC5EA0C98432202893ADF1EDC
A11E5079FEC5F524C893362A465299FC6A359CA40A6A05B987BA7D7F58EADDEB
EB134105831C8D1AE0E252E9542B76AD9223155F6A3F6787F399644B7B927E49
51ACB18FD0862B824D7E1A3EA751A8DAE8F394F703F943860A5D5E02DEE38BF0
8798E22D8D55714D0BE7CF12F9E891E8A13C8CE7D70DFE6CB8C32DACF5ED7712
4EC6E385E4EA5CCF8BC2B5095A135B36FBAF414E67B61D984F0052A43D69521A
9104155D90EA02889D8B60B1202AA76AD8424974E3DC700F9AB23788B53B1DA8
BEA583FC48AE8CE6C6DDCCCADDD69DCD2E5EFF69219C31073B9A3D20C74BE963
EE864DECB41386440F71C5731A749BE56C43CEC3A7B3E16962F111E75DC8D60A
6329079FF98EAECD575E692143424F8414335F429DB74B7F502AA4D31F22F3AC
38B91617579044B894C04A8167E28F5FD6426FD6DB4947174B6C1EFB4FDF5CDB
C9B505CCB0F5AE8E75C4742D286C70032DD9170F8261AAB34FBBDAAF882156F8
339B0254D1888E2094E10ADD5C726FE485ED3EEB7D3B5900EC2A4892625FDD85
D507CAB95D0C934D85F1CD57B88495A50B56A757321B20F47B78E577978715CC
77AAE02D6D7576020B43D59FE5803CC80617CD9B6610D3534A1CB61799DA1261
49871F8E3AA61465FF3C920CCD5E024D2927EC6814C6D5208323F231A1E847A8
83C78D334C90DF5F576E2B56A383A42873A57BB7BFD091A4D102F6247C7145B0
04CD6A38BC8E549AB4D1A555C2DB07429C26B4D1B94610F7CA4C326077F38829
6D279903D204CC5AE9149158F8632291C780E87806CD1E6CF5ADC5054AC8070E
481041434297776853C44E1F521FC8B7FE8B20A69ACA0194E304CE39DEB8E045
876EE834807971F2F53174392CA0BC3E55D256BED57F1AAFD4504A3E99A25C3C
0F4E3E0DC34EEB0F2E9426ED32FB8E320CCDE7CA5C29609250E300EA8A68B304
ED70102433D8B1AD36E87348DCE4FF5A4A5494B982636D2E56B2E04D5BD3FE10
A0EFDBA9A7F4225C43AC77420DEAE7263616AF81E62B03033761BDB9A5B6FC5A
91FE718F8DEFD717B6808EF156DE2585541EA136D1C2414A9988FB1AF57A36C7
F741B6BC843DF7C67F81FD4635B19486E810F29F441E75ECF4C01D486A0F948A
AD574252CAC7DE64285422EB3E78E3679561F9C6C26B13B7494C824276CA49F6
D1678E6DF0C8DC8F221D6179E06AA961712B3FDD3BF588EA0BED38A6014D546D
3E6E92735F84703CB5D41DA7493877DFCB8092AFBAF7AD47920E46FC074DD88C
607652CBC2F9FE231F771ACFBE1DD0BB5FAAC80BBD6BDBC371297DE6388467C1
0046B353779928E5A5E64D044AD6FE1C2957CB0CBD1A31A196E81987AA9F3F54
0C458865578C9EB9F47EDB8C7C9269CDFD27A1A29C9685C6CE9D96F12F8F3753
E9BFEB1013818E39FF85775BF0063E82970B1B9FE2261187BFAD5BD1022D228D
8F1EF89D8487A365624D150A1276C4E0D5A084D763650C4B3DFB67F45DA3B1E7
4E0335CCC0FC716FA0D79ED0B1B8F863FA58AA9B85DD2713AE13C5F1CDF4B1EB
DB8615D77BD31089076E7F8A767FB081B5CA714A49C7548AC80B1A1B3D734D23
7845115B694DCEDE28964B5688D208703708E09F5E899C84609B77EF6B74B659
075F0CD95D7F6A041E256EA0E4FA45A9858D6EA7B262AC1405527841F305129C
2F7B67EE27D76C8C70637AACF7F586F65AB117FBCD96E4B828D0F734BF0B0999
0815EB3386A802C35A3BB7BE04DCD91EA07C8E1CA08856ADB86CA8C2B722E224
5221CA719A0338BF13A8746590EE7D4A5CB131D288DDC0CA2A38FB7E8C70C0E8
DAEC149220C456BF8714FA6EA359D2D3F44B69B6BDA6C22912430CE22B4B0936
7A3BAD7B1893AAE74F789B7C79818D1F91311BC2347BE71E500C76D02C6E4532
87F945BC7EEEFAA8428A24419262536A65F7BE018AFC2C20017023139EF7D007
662A1B5E271AE870FDA4A78394E94E500F4A11AF916DE15AFEFC9EE62F399750
7F53B5A4011DDE2CA134A79BFD0A6458F40DDBC4C39296F39DA0EA61F9DEEE3A
11A76712378871B9E7D4AC5F00A3D3A8D02A9B74B1EF4F86FDC389784B6D80B1
57EA264E08B9CC6E16DE23823FF9EE50700D860F99321E3F5D8A5604475EE06D
50CB4310E814DCF52321152C0EC26797B0549C203FFA894853B084D28B112007
FFF93ED6617AF3D319DDBE843F15244B1F62C801830F52A226AB913613A09671
6AB329B14E264224BF958EFBAFB55C82A336769864F4717288C3A7D7C6B2337B
D48B95815B631174CE49BECBB2BE7B29E5AB20C49EC99ACEF9FAD91015A09A6F
1D4B3ADEB09D98DBB08106B825CE872CA82C2D25729F9D4BB7B2D11E3C7F73DE
DA7B5C5E41620ABF0F719A35FF1893C0F379BD013E9F37039CA793D6C385146B
3708CF63931FE7E2912CBDF4BCC5EB6BBFBD9EEB2881D1F06AAC1F31EA66D239
538D199DEF03736597D884F9A06ED26A2D88CB037E732199C61C47690BB7EC7C
E0DD2903ABE03F6947A7E005E4096FEDCECC1D6D8AB30815DC6141FFBB206AC3
EF89C2A5DD065ACF3FE9D4C313D1DC32F48D4C7AC255A100F98E4336EE878733
B5427A4F0CFA32AAFD5A0A4E2B548623B01D2AAD0EE9F4374E3DBD72FE8A481A
5259608E42D2BF1AE09F0BC2D9772458A2FBC48092425018569A9C6F3CEEC1E7
92EABCE76BE385718F80578F0A512E4ED2A2698574005D7053287C85D57D6F05
E38BC0F943B5DB14EFD13E9D27CF699D176B707F7418DDEE482A06BA643E1A76
DBD0426E720FC69C94013E2F18E5D08DCA6D605A30AF889C0330AC927A32670F
D41A68144371A3BD069D8D73EDAB587ED19601B1BA6B41C75EC6AD4FB76E369B
182B11D28343FA16A8AD1E77164C82A90FDA049EFF8F52B790A1B025DB5CAA7D
BBF9DC2092844F6700631D73E447B91C68D529068E2A7E95BA4BE307E3F0321D
CF5E25475E63DCB4E47D13BB9700398D43C31F730CF157ED6833200B2FDDAFDA
683595647C54868A2E49A7A9352EDE435CC8D77562CAA89EF93D43C240F06575
9B3223F831872936AA02FFC2963AB5F79C339C77FBA053F79432E480537555BA
D03859C3EB585AD2B3C7A89C39005F9ECAAF9E71475F443374898F02195A3D65
2F59BD28EFDA009B6254C8DF3BACFB223E250CAD37C956184D111748A82E998C
91F930B8DEEC406D51B913B5B12EA004049B8A9B3CDD2C514E216FA6584E7853
EAA22E941D071037BF84EBD29785FC2D37F39B206F461EB2AF5046BC0E1E9E84
0461ACE30FF5A8D870A6FB6265412A2A4B7D43AC4162820A6FEB120E0E617059
7984F724DAB2BBADE4F360496D4F404D77B23098B893369F5F4E3B375C0E915A
0C894D120FCA29553D70B02DA8E79E81C7207FA3EBB1D5573B1930A8DEC004AA
5BCEF452E35E2F1BE44FBA175CBA779BF5550975907642CA7DCA57512A32A553
4F1E3DA0753C05BD8551BC0B36D5AD49E2872F6E83BA1594A22FA375DF8293E6
AF46928225A4B3A53E070028EC8AE581319B5C263CC88CBEE876F57B453B81DA
D1AC7C8CD0F9FD48A3529971CB9B3ECE51C1B85C2E706EC4DF018CBCD0B7AEB2
C37EC22E3B16D74551920FE6DE94C03146092A4C9961FB2810843C4829C459F6
E67B17B0989FC32DE0D573C607A6AD7E02253919C95EBDA927928ABEA5861151
0282EAAF39F07941E9EA7C4F83A26A22B1199391F356FAA1C379925B37D0A28C
4C5C2791E35135BA90C3B4F767369DB96EBF9B9531F8415AE7C390964F78D241
FC059EBA9127839E07B7CA2A27FC681A1D72AA79914C24336A18455CC6BDC5DF
9E40597AA2E895B1F1B880550364BAD71C3865E89082224D2032F792E7F73839
86C4762041255932A3ECCEF4F4BD36944B6C63744326C6EF322569034478DFDA
0AF528D3AEE1649A309AB2B20E77ED322C999714140E6E37A85597BB37096A7C
42AB01C3CBFDE73623FD9C09347BFAA3F409E6921F2620A2DD84495E69229608
8302B71E6AD37801C5867AB741BE62791646323DA047784247C9890EEFA49E85
FB2D4D204B0737FCA156A868EA2086CC6E27ECD2890F089A420B65442B34D22A
847E8BA9EEF8D2A34E579BA64414E015B22709F4DCDC605987C4519D3CA73BEC
C000B168ACFF083321615CCB3BD29FD505B067572020863D2341A166B6A0C2C1
E01AD68371847D072CEE612404D6217BEEE85ACE2DBA9A09B0EAC503F2C02D0D
5E52ADA50AAC3EDD76D2C4424FE8B6836326E41D5D99E3901F6B073EE92744DA
5ADF5C9EC97B6EDEBDA56DB9509D3B000D964C67C09E8CE09ABCED1ED6E545F0
86F2A04BB723519AFC6BCE2788115D4A4E266E1EB118AD9EA699ECE5F8485E33
3F3133CC1E815D29111087733F4DD375B65B0F94539C233A36CC0FD6995F62F2
A9D18F33803150DB8A05FA40753FC981975A3C4339C88D813411CB715708E1ED
7509331FE1C3468DA7DF7D55E374B2EC5190C36858D3B5DF3C841722DBEA5AB9
A073154C1B6825CFB3B672604811300CB0A14C1A67B2714412278E635AD61E53
D2222DC1E7F4A98601B7E3E8E70C3B8760CF78BB970D4A5E1930E58FDCB9CDF1
F34106B0007A9451D7552D854C3B76D5B24E7D230BCB3C25FE61F7F067ED188A
080B89207AE6A0B8D1ADFB9ACE117FEA6C948E598ABED9CC26DCD795C62A19BE
E5C426BCD8D82D2655B60A5285564648F9103507185501B2EA8027568E1C3862
1275EAE8A97407E8E11BC7929F5AA4C0C64C059138D40575F0A9004BEC4F61EC
9D9F08040D142DDA6A5FAD61D131FED798A7BCC000A8D7A6716BA6E78DD8EEB0
D6E168E21FF761E21E2790B3FAE268AFE2F1C7C7B941B46E6FD2767957904AD0
87D79932E8259B66E40C77278E9EC1FA64F8D439B9D959637C38E79E3EAAF983
03C0EF9367BD563BC1B754FBEE7D34BE296C517A9611B76ADBD0B562E98AA004
3FCC9AA8E0B46F29A5F9108BDA888D8D83597A9721DC6A1597423520C8915B3C
29B69D144789A539AFA9ED9EB5990826C45A28114D0EE1CE432BFEDB5FDC7C6D
5E9A158C54010270A27E59508CF8C1F4D220C37977EDB672D802DA413FA32A42
24ED47FA3281AD1BA61BB4A4A9FF64AF2C5AE2380EEBA9E23A59C1A6CFA8B881
782844C5A0785864D07CA937A975DE548253E970C4EE344E3FB1307B1957E197
AF193882E2947EA0E4C9FF83D84B6FF019CCE2405DBCE1C7557677B7EEBCE404
C6A6CA935989F676BABC5D1D4873440BD1D0807FFD1FCF3151BF9935ECC76932
C7E0C22F5B5A335BD3529AA5CBB62FD6D6E961A72865E5A988D4FBAA47AFB4AC
4D977618C77F59974E5AE5C4B78ED547F8A52360BA32178CAD592D6D82A8A966
55620AB4A53133E7E77DCB7F17AC38B236EC89C495D8A104E163C0CD12A8A3A0
9B3DAEE939DE015B267D7E18A3AE94DE7BCF89D460ECDF193806C52316EF54E9
DFC01B81C29FCAC2DB91964486B7B247A49192ADC24E3FFD95F30C72D4E133D7
1837317EE57B4E0BEB2941E7B2CC0769FBC0DCA6E3252E7EB0A340D79B3DCDD0
66B63A420AE7E84E713279C45D58025B1F47972C053841081C4F8C4559220220
BA5CEAA559029D0BEEDF0AA0AF64FEDFEBC3F9DE83349CBB3C73261893F824DA
25AC0DFF3D7257855C94EA5A4A739079B116CA3E30560328C5EEB9237714ABB6
87C359DAB218D2C3FB467547046EEF2A875912A83BA23BE5304B1043F9811F3A
9461AF9933A13EAA90017CB965C2641E7E7F8D585E694BF0A4F421205578D34A
B8B3AF00A5373C30BA9CAD4C0CB64B03A02E09F309F7569002D064B5B6D9D3D5
93128438CFDF2B0858C574A4F17231B7E0DD0FD3A00D28C86A00757558E2CBF8
61A90E6459
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.1: CMR10 1.00B
%%CreationDate: 1992 Feb 19 19:54:52
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-251 -250 1009 969}readonly def
/UniqueID 5000793 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF7158F1163BC1F3352E22A1452E73FECA8A4
87100FB1FFC4C8AF409B2067537220E605DA0852CA49839E1386AF9D7A1A455F
D1F017CE45884D76EF2CB9BC5821FD25365DDEA6E45F332B5F68A44AD8A530F0
92A36FAC8D27F9087AFEEA2096F839A2BC4B937F24E080EF7C0F9374A18D565C
295A05210DB96A23175AC59A9BD0147A310EF49C551A417E0A22703F94FF7B75
409A5D417DA6730A69E310FA6A4229FC7E4F620B0FC4C63C50E99E179EB51E4C
4BC45217722F1E8E40F1E1428E792EAFE05C5A50D38C52114DFCD24D54027CBF
2512DD116F0463DE4052A7AD53B641A27E81E481947884CE35661B49153FA19E
0A2A860C7B61558671303DE6AE06A80E4E450E17067676E6BBB42A9A24ACBC3E
B0CA7B7A3BFEA84FED39CCFB6D545BB2BCC49E5E16976407AB9D94556CD4F008
24EF579B6800B6DC3AAF840B3FC6822872368E3B4274DD06CA36AF8F6346C11B
43C772CC242F3B212C4BD7018D71A1A74C9A94ED0093A5FB6557F4E0751047AF
D72098ECA301B8AE68110F983796E581F106144951DF5B750432A230FDA3B575
5A38B5E7972AABC12306A01A99FCF8189D71B8DBF49550BAEA9CF1B97CBFC7CC
96498ECC938B1A1710B670657DE923A659DB8757147B140A48067328E7E3F9C3
7D1888B284904301450CE0BC15EEEA00E48CCD6388F3FC3BEFD8D9C400015B65
0F2F536D035626B1FF0A69D732C7A1836D635C30C06BED4327737029E5BA5830
B9E88A4024C3326AD2F34F47B54739B48825AD6699F7D117EA4C4AEC4440BF6D
AA0099DEFD326235965C63647921828BF269ECC87A2B1C8CAD6C78B6E561B007
97BE2BC7CA32B4534075F6491BE959D1F635463E71679E527F4F456F774B2AF8
FEF3D8C63B2F8B99FE0F73BA44B3CF15A613471EA3C7A1CD783D3EB41F4ACEE5
20759B6A4C4466E2D80EF7C7866BAD06E2A1040FAF2DE1FD6AFD5FD97EAAB614
956897A7BA8B194E613047BF469C7B4261CACC1DF1648E8A86E926F8702B5ACA
6CEB4E3E85EF23EF5C9C53097F3BF17243B8D4BF0E6B0C5982FD14E4E916D363
E265322DF0823E9990F966A842ED69BADFAC2CD1754FC84C0FF6750D2373F997
362DDA16A0D73B178FB7B67307204AF174AB871C254B8E7CD77058113B702B2C
13F341A972B67756D65C6A9F553C365E20F0BA59F8537C88E0C13F87CEC69C9E
0775F760C4EE10819388782A2CC2E9C000DCBA76E4EFC7B390E50611F3D4F6A9
CE60FC3B742F046E84B4A302F5DB51092CD59F103DEE2910757696C3F131517C
416687E6DF671911BFEFE08D1C5D0B16F9302960E29760EE101C5BDFBA4176A0
260ED46500F88BD388506DA361B0E9FD796196E66B332C82CFFEB7974F9E4428
B82C64ACBDF865B4356C4E2C8E6ED840AD5579B7E08BFA3BD81AB1FAE47901EA
E298F60FFB651A0ADDD1C312033C9D1FD4D0FEE44FAC4B0288339260EA0072DD
0AA168900C492640EB652F4ACF14A4F84878F5EAE4169AF39131695A11CC691C
FCA75087938B15ED1B742607D839E542C965383D5E6718EA6C25512F1532D0D8
545EE6AF47BF5B6F6AD0D9E44465D651D2236F883F1F42ECE339B694B19D2433
25A28A20C7E32793E2DDA8ED6D90F8041298B7A1BEA74CFC168681C020907C2F
D71D8CAE550B9209EF1B3842DFF0ACAF51333BF1843A269AEE0925234C833C62
5EC1167908490C76EFD2528658D47E09C42502FB703876A5DF8DCF4C72AF75C1
818F6A1EE723327B0A4FA1F87B2F2E65AFAF5A8FB0EBB925A39A94D654B38046
9C70F9AA704E1062D98D09AC897D19DF75E3974A65D045E9498D674715EBE7E8
B3317973CC6E570CBCD6F434871FF6E171ABF32B82A137DDED4F16964E6689F0
1A34AE92275F6B9F9D10BCCDC58894A65ACEEFF12D372865AF54653E6195A204
957D175AD32E8DD962EAD10C6F68956D5C8DCA85FE0511DE39F226CB887D06C2
A213B27F4D70ACD4EFFD55C416056E64974585B4DA3A0CD1E4837A8C2477E392
E790C91649CE5394203846518DFFDB5EC6106C4A1540C3FC8C51415C1BA42F09
2234128C1C23B93B7DE52F16C6944645A9E778F2FA04680CD9608F4FF0B2E171
883F3144A8B5CBCCDF80C29C6604319CDEA11AC98A60F3D08B253E1B35F5683F
03CF7C7A4BB51BA657BE25F472F3B508F1AA96EE3F52215A1113D0B975443283
92B1BB7F200C8AE675B1784F2126C001C23725184677276B176E13002535723F
4DF217723E4AF032D798A480CCA5842EE65F758F0FC4FD7906153D80D7C6C9DE
03B434B88A972392A114CBD8ACAD293273E4ED507E59CB42872E6AA787ACD26A
918630F65ECA0A4D68F4388CE47BFFC1A7FDC21FF76AF548BABF6A4C34FBA251
CA55B73D73B265E99F45D68F5EC8B6930B0FCA76A0C4BA1C80F9A55B44A98EBF
8517391504B3992AB11DFE899A5092E8FAA67087C50953553B27A591F3505053
C04E66B6DDF6090624C411965F07FF04C620F4F0E6BE1062B25BB45A05902CD8
B1CEBE02EFD76A109CC3ABFC7D08993036C7FA255850FF623FD0F261BADCD9B7
B13DEC21B4591A33135407E4A6CC7843F00D4870C7C90D9B867977F99DCC98CD
BDD2C9791B481C92C232590B0671E678EE906658810BFAD7B028AF312744F945
1FB7F5A6BC163B3830ADA6A6E91E877E9FC745EF78051A5BA6FD1AA05A963A53
76FF740ADEA60AE24A414B5A484114578223FA44A621004ED91FEECE8D3AFFE7
07BB7F1CCFBAD056C36D9701ADD7C6BBA65D122E150FE4D10965B4ACC825977B
CC61F8EB360F5470CEDA20D0CB67AA889C6BB8328FD28D6542CC6964EF02E64F
95CA2FCA4CD0BCD1B90E6C324BD7E44981659D15E49B0F8B7E8D10CAEAE15547
B92470BECED04BCAA487AF3D4FC05E4138691549FA334CB82DE44DFA192634B5
A0B6E8684C048204EC3F032578559F5F1AE7524A719790C88C299A7EC292873E
3E9A96CC61585502A92C0B6ACE0CEB3BDBAC88927E8301833534818F02E0B4F7
D5A02F3B77405B325F80F5646E4DB57AB0C9EE6EEAF60BBF4B7CD92663C6207F
990F1F482F3069E815FC608A54DD175BE79AB0914E328E3525D41B3D639390D0
F62525DE5D2B403C53C43A72523FBCFBD67BB4430C5AA1533ED4EA02BFC59DCE
BCA5F77DFD065610E74536E08951A93208AD604328D857E0BAAC93BEFDEBB79F
2F132BF386A96E3FE51E34CB4E259ACB028A00009667CA132F446C944DD81788
3CABEBA490269AD95535FE153C2E9F492CBAD6475D417C030E3AAD063044316A
F0A325AACE10B84B434896AE43F73D80DA55CF77BC5655A43A4CD80F092FB1FF
76DE8358D4C0C01FB0BDFECBBCF377755A9432ED12D1A9E4201C1695D762CE2F
5C9799971ED3043EA86E675C610CCF5C096AFDA57AED446071CC7327AAEA9959
BE013D9626C9CA7E1212CC2B4FC70366E448D0EC93EB7C3807BD8D3E3BE318A7
346D200549AC8D0F2A2DD654868A55C4493D8628E30560E33BC7DDDBB2DA72CD
B4029DE44496F631C4BF31AD0A33CA3D99354D97F82C5635527606CB7C78ACDC
EF7403BB6356B4B6F9CEF37DC45A522D2C9594BE3C0FE9B6999D2C903AAD2D93
AB8D7B8C9328C2A82DF9866949BA7E3608BE1B1C9867C5FAA19E4383FB76840D
B4914D2EBCF85275DBA574681FC5F7F18C765DE8D437BA9B92B6FBC7B64EE288
7C74B15BA84BC0F511379428589CA04DAB872FFDABC2D7F958B4FBFAA4A1CBB9
2133004BDBDAA78992BA70E561472A88C4C3A99EE9BE4182A8D19F0149016881
DB37133F9DDFB08911A0F0A64736294288837A61691A2B5BE60FB84ECD462093
C7FDDC95D17A47174AE265C753F383A87FCD8A1295CFCF62263950B24DAE3C07
4C69F4977F7256B1A63B65AE391F46CF31F9229DC5CE223B64B109D30FC8BC7F
C021EE6BD27B379B70825A83DBC1A9545E5373E9630EDB465BBD157CDE87DF95
3A1C3C28AC23CA0E1754B8E1209C23C9E436F575CADA977D0D16CE0AAB6B136A
A95260CFBC4015A55CA26D858677960E70547EDF8F483F34BBCD6FE6FFEC4D57
1DAAC6815C17217E22940C8B090F3C18096E58EC0445DB1B09115CBAC7AC0175
448113A0C9D6C29AB123E87645E2102C70B1D65524670EBFE14FAB09D0AB2DC1
875835BE1EB6F33C99E35C1E15BF36D088F91C758BF8EE39D274AD1D8E78F2DE
FABDA6E180E5297D137780C2750C316ADD43035456EB833D10E82A2419178C92
3A7FCDE3E13404E1959085B1AF9DF3F002E3E9D4D34A42F75E3D51C04DD539D5
F80FD92A6DC330BE65D6C018FE4FDCACE50A02851DE276E5ACFE5E833EB41F5A
F7DEFC2F7F642A670CA69DB8BC876F940B386F308E080FFC006D4F99526541E1
1E8A9F69152C896A39ACDBAE5E23E9078523FF26C32D2E62C9B6BE943B6ED53F
A5AC2482CD5C0DB2B269C6ED9C93E10EC7F6F0434833F6B16DC3A675992F589B
673040D23D62532C84A1F4D2A93585293E6DCB810513FB1AA0FFD9141542EA1C
2118C26CCBC6175EF0E4D2C866A603D2772F7452EB7266CAEC089E6E77185E09
CAECCFE542783276F9C2A00EB703A9209AB723435F498D2DBCE37A0C2206F5BF
B7B167212C2F0D1248B9617D65C8D22B14A090611F9BD3A87AFCC7C4D733F9EA
C90D63B923CC7ED56291EB80F29F6E9BCA0DB2EF9D3F3CF73AABBFCCC6953681
9660C77E216A7A931FFBE3D25782C5080ADD0D26091BD91B87BBCB5B393BC6D5
310703E19F0A3605E9BBCC5FBF20477A63979A9B1D0DE647EF2559FEADB3702D
5E6CE53F11681DB80B48B4A97D2E50297B8FD750D7826F272F25D4E55C35EF57
1F1B9E644B70C8C91EB8887BB855576A79379C6C30A9594B27D115B1B332E390
07B1D1134157AC313CBF0A7846238C6F9CB432270D734DDD6E0CAB36032CBB38
40FC59933611204D38654706F8F86CFEB3923A76813E2469C2ED54F8B2480A14
B5E7C3E9A5CD509D757DC5DB4273ACA7278592741D5EE1656FF0EDD434EB5837
8D27ED245674E998761C76CABE5267592C1FD09B4DA59624D967395555F2A4F8
F0D84701E594C49A7BB0FAB64EBB86B1FDC34A49B890E01187EFD300914BDA65
F16FDCC9E07F63D2ED66086EB297D87D51A0DDBD41794E610CE44814BFD4EB01
F4CD4DB2F97A822C82D386E5F3FE67BC61ED1A28116777E26824DD24E1683D87
E941D90B5AA11E2F4D7C2E9DDFC48F8364B4139909EB0FE3FEB7F9F53B429B5E
FCB4CDEAFBEE2DF658B3D6295AF78D34D6A107006ECF0642E466B2935BD9CF14
3EEFD322863E82653ADF88727754D481B53419927B02E3AEC782C7A4400DF966
4FD733026513594454A5A00C1C7E6BFC541C5CFD70E53155E1F03A6911FF0D87
0C3D7090128CC145B7128F4547102DAAADE6DFCE648136062729C89559C9E34E
C2B93D6C979D77F45B1443BEB8ECD7670ED1641857776B8A0466ACA03DAAB436
943175FC1F16DEF7738BD98F5DA10E07625194C2417B6E6744D1048341F7A205
1562C9AABCFA5B2FD993B1F1DAF88EB6B9CCD382E9769E1190D4F35AAE598E0F
F8C379D2A8A23B85F5B3E92BA0FF4BB9F7303808B5A4DA47942623E81C9C47AB
5738C8D3B3887AA319E494786B884E0AE2BF087C43BBE5E476334FA9A23CC9EE
1486762BAD224815F5442DFC2B181F20F14B5E58A652320C178A3797838DFF48
0B789571B50DC6B7E1A62238933E430D7AB0AD6113224E059A49256A36C39D1A
70C82429A02E6C4B31AEC598821346B30BE2B6374DDD6F12CB43BCF4D93B5AD2
D4E3FC84B70EB6FB60086E05CFCBC1270E995DC7F7D367E54F7EBAFA8240FAEF
94E653C9CBE273993D32908ABED7B059D352FE462C2ED1716FFD71DC04956BCE
DB706F5AD50451A676D3B1E6087BD578B64663DAB123496A7C8E59661E62F71C
0579ED5757E46173716C804A3E692401EE7E36DAEBA16D3A20C42C5B4E7457BE
B04FD8037AD9B00B5C599EEAF6EDB839E0F20384A6677E87FF0FDC9A58D39953
5D6F9C8AE173ACAA6F751FE336B2CFB771394357E306942A7045C782234D0BFF
C538DB858957E4758F58FB34106775CA5950A88B2820A77CBB2555AC1FEB8A0B
A8E1D3393DDFBCB4935694C0AEF8B9769E7B76467F4AD6765D3557BA389B8D59
030FC8DCCD448225ADCD210B081D80EEE53BB455EB841DC5C1E01CCFD3D7820A
D40F04946FED55C4A9AFB396DB74E1370A95C6B9D9ACA410864B88BDDE95BD7E
3AF6F9CFFA949D57923E1DAF239D2C19F0785B1871C058E6478BE077FFAFAEE1
F879C80FDE45A3043021BD2C4A8A53FA55B5D1D14335252D398389E6FB49523F
C793F7A73E9666329E58A35F93B87A789AB4B77F896722E6C16F6CF719477054
68A768CCB0509318E38EFC28C6E4F278830458CE0A89B11E0A8C07AD0EC28269
5FE1E7654FE5656E86A73B3637D4F45DE8C9DA06DD0CF2EFF7EEE92BA71A6AC3
AD40F03B2F3DE68D8842CB5B95DE3E218E8267B92A347369638320A8CBD73D3E
C1F8B224C76AA1F65CFEFF7A5BFC48C3BD6D9156E5ACE574A525AAC49C3207A3
C29E235C4871587FD98B3934885B9D18B68805FE3930B02F81DC2E60653A52F0
2F7FA23891DE8148CA9EC249FC54ACFD25467C5A9DFCED554A130EB3BB720C5C
628DA1E740CF43778B29123D29CBCC762050177394165EDC0B726145107E2D4B
39DDFCA61FBBDF8788267C31E7BCC865593FE6A8D1B94B214293D8219407A615
00D79C6B962C88F1CFF2C98B93DC2884EED90A017881953E1EA8B6DEF4842E97
558C668BBFA254A4A27EE99FF70A3BD7965DBC9E8FD42E528328613C1CCE429E
227ED94289118742186C626244AF15CF418839E9A318DFDB9A1F2F234691CF32
1239E5DE54481F5E986037394985E72F5CFE389C310A941CF41B9CE17FB9AC0C
03041B945407CC6F9BEDFC30EDFBDBCFB80E7FAE2AAE2AFB70C0B022CAD4880D
F520FC3C2504C8318BDC2D354CBB5D81E7B38A4FE174AF7955703E53CD4F03CE
A0F085AB1C98E393A70BBE48B8E250D1A625863DF0F367CF045C9E1E36DE06B0
56DBAE3A917F45E78FEAB04B900FAA284054A91FF08A7DB3207E1A1DC7FF96CF
0F513DCC7AD010075663A20D1CE5E22C3AF460D037FF8E5DAE74F3740D2CF83B
003E0AF739EE76DF327654F0896B88DC94673FFFC5A38913552C4E652768ED74
366A0E255D274EA6C36BDCFFFF767273C5596CCBC1C963A1C175E0F80FF00639
1BD3EF2E9B9FB97C787CF5723FA07BD29DB6EFE3D3E5E72C10E0DF8C7B2BB2FC
F64591DB5C594662D8D336DCFE4D37B1390C6726D9D444904ABB5F61234F0A98
7586E07BD2144BD4D01A4BF28ABAFB85A42627CE05BDD736CE0D9EF81C284168
95B8F1D13D7E02D428B6BB3AFC8386D7ADB7CF6B408329132FCDC610011B0BD5
DB565A8C02666BCC66B922DC73F3A04A86A87AE7A7EC8C5917A5CF6C6BC8992D
711267BDC134766C2BC09F3711407844009DA3DEDB02153354CBD6A401BEE0C0
DAAB722FC36C157783CBF7EE0622D93D0CFE8A66F257DDBAC51CC006BD9CEB4C
C32F0289AEAB3A300103159B3F12C7EDA81DA35565015CE97AF44BB19A4D3A65
E83CF3729D67DE0328924BFA727F59D96B51796A5FF2F09A92AD2DB7F9ED8388
C45C5263244211F7FDDB3E1B3E99C7AFD87049DC2A0D4CF3A9B6DA5C5262A8A9
D5D0F6AC21DE215376F5F60C949CE3D69410067A9FE68166C7303ECC5E31D8FB
963E44DE07041AAEAB56A5F2BB92BF2960CA73BF059E2381B1D716F2CE845B03
447787FA1DB9720B533CC78ABB3277216BBD74EE5AA49642B3F73BB78488BF8F
06E889750CBEB8CAD765EB7D44D42657051A84C73EBF46AC68B98DB330A33BCB
35EA06BEF8820BC9D6151A85560D00C17B0DDCD2926BDD44244A0B2E65DB9AEE
ECDC5E13846966BDF57ED90953915DCE0C168CB6608FA5CCF6A01B3A9B61AD08
EC7339F18C213B7067F06E707D6BB6823FF90FA17BCC8E347D426143228D4488
775E5F7C13B8935196312AA8CA9EF8C6C3E0F70270716ADB9FE3F80ED544B382
8242869BA438AA2F414F4B926D8C68CDC0AA0F7D7788BD8E61E44DE00F40604F
7C66E4F04D2FC100030046E22E34EE4D0B03F7B51D51CE351C4FE79F6DB6795A
C219A0E444D98FA68BD00223ED82F364C7F2A4A90A7D1D41E14FBA439B98DA10
92D6E0E0ACCD620B9F9ACE22CB88E169BF0D22897024E257447E7E6740DACF5A
51202C393128014D4CFCF82FFDDA6D309EE8E9A18BFFAAC80EE9D3F8E517A248
359D0B80A6E2F927058652E6161F8CB3AB8C2E12ABD59F8B722B8F23991249AF
A8951E7525389790D2015F37A279AC6C82383B5FD6E42A67653A0A324CBBC429
2BD4684CE815302DAE11DD55337715B2FA085BEF7DBCEB54D980AFB9549E98E0
EDE0C47A703F07D9FA8EC08EBC3DAC716A7FA303F51D5AE36754BEA1DAF7B03C
19600AF0CD57CB131D8B0DBC999DA674204A5C8CA430F36102AE22E1C8D297E2
EE06F6C90DE2C541632B50A715E7C1C59E9609B4B91C731AF593B9046D081279
9C6A7A630C992279E9B01C1D28ECCD0A6733B649640DAF6461FB640580568EBB
F5A7341B9DB3F2E4C5DFA470462B0977F5037DC87AA42DCE92EFA6558441AE0C
F9120729F13B141B747D5935785F7A1CCF1BE55F32E4F2F93898E3EA48CBA1AD
CFE6BD450BDB7656D1590B87CDDB06AE05CD57F0FDEDBB87107A85CA2D38A38C
D94FB5630CF9FCFD16801C512F68ECC3004ACD6CEC68F73F6CBFE559860155B9
0EA730917899DC95200F69CD86CE90466EADF2C261586CCB328879F5C5F7AC90
C19B84C9F76340EFAF702B5E1F9A2265F12115A12FAB48FB49A071F61AD4B7AE
2738FF8D1E471840185A197BEBD6CC23A1029F2B1384D8E29D59C6C279B64A5D
9902A69AB11B8D826D9C498A18550F540A21A0906D451810A8DB9E678033F1CF
7111FE5015E9CCE87A09775A5F0696D3E1C210A4E1CE818EB189AE7EBADCABCA
57FE52A304ED47D93D3B03453C0E9B05681E558CEC88AAA08D55BEFF6DF1CD41
7BF873959F074B2D7D9A3B3233D7902BAE23E82CE999E392F56ED868723945A9
BAE5C0DF1548A367176497CC9B5BAB4DC23B36DA8F1FBF07BCEB9B62AD7A5356
4FF31254D9BF742646865D6CD4AA886BB78C547ADDEE8269AD745977285876A1
1C30097A9437FB94980087BB5D87FAE4C5F10C51D2CAD190FE06990163961143
F0AAB8F914B4F8139112F17C59A8090B0BD379190302B5FF5853D0B307FC349C
7C14BC4519DB1098DE7CD7914B5E99A1EC5ABAD4F5D2DF00161AB11EF6263AFA
A7710369369B561FE079294911EFFFDCBDDDA17411BE47E6691EFB4312B5E51E
D2D9AD48167F24B98CCD87FB182D71E43C78BC928EF4802DD25294D7E628C394
282E9B0615F53B5832C1763CBE33FCB97067B33931A5D7CB2B42B6AA9D26EA9E
36C90A38D559E1A2824C319F83101517C1F8B5A2347819549DF38F6CAB1A691B
123404E9C61CEC5C971D7D2FD088EDAEF227F507CCD233AA193D0FEEDE6AF9DE
82285D539D110E90896F7748600507C76DFA4B1A06F388FDEB62CDD55ED0949D
E0A62BFB26475AFED1447F2CEF9FD8257BA86AA6AD0752CC3ACCE0844F74CE80
84365C8E141778C4752867917D362E3F0B763267F9B9D58CA9EC7037BB934811
083CDBB325B7A6E0CFE2B5D760DAA9B8A0D9884A7ADABC46B7B2699F74141D13
E0C284F9171C560C2A73C64492D8BBA36DDB9415F4ECDCA75840DD4C55206CED
ACE4E136532EF6E01B61B49FACB41552E2387F824C3AAFFE5D3B45D016DE961C
BDD90F2EB1813E27C5A3B871B021FA31FFF57D7F1828CC88FD86F8CE3A1DA559
BC402F35A732741CF68649961383630F4A93F334F4FA49EE7045356B714159D2
8F72219C13148ADA9AF58F3EF59F61AF85AE7FEE58402896A9FCB703E2ED03D2
FD504F53AE91F097CE89E20F80BAF869C706B52E5A1FEF62D1F758BD38417AB9
31E629F401BAD6F02DBFE8D8970E7443D56420ABF92A6B83260D362B3390DB1B
E5C587F6D06C0693A2269BF40171DAFB19484103AB74F0FBB89DE8C44CE3EE15
B9BDCF6800818F5BD7CABC491207AF098B2AD759B9682CC45834E8CEF7748B81
6CDDCCCEE0A700454DB6EC61DB4EEC4F2D7D0E02364760F44A059BDA7A674790
461144E1C06029AFA74C88891859385173317F7A57866B3EFAB71F7ABC1355F9
C54DB537CD598CE12B3773506B24B5D2DBC99BC31300319789A6C7462DDA8DF0
B8A2CC7ACEE1A759FD9A645EED511C4550DA1A7AABE8AA4C3304A9B006FADDF6
BA8943C8FD4BFE913F8D7190280CE6F7742112D9FCDC240781E719AD9246B971
73522B4CFDD7BFD2EC6698A7785A3EB2F6F3E93156441BED8984C6E0655E21FF
139E39596853366113D73D3096F80724D9A7AB285606BC5266F2B2C61A633E8A
32E8F8D98BFEA453C4B197198CEB0D6E6F905BB3B34419456D571AC6FB257C17
A5CF1914E83CEB69F5D73FD68B2BD3EFB5FA6EBF6879AC21F5A0B75C92F87D65
D788FA12D3CA999A071DD9A9BAAAAAE28F4250909B9661C71150BFB63CD71CCE
F2C212FCC85E850AC5D4211E3419CF2571D6098732B762B1D8D61869FB36E03D
4F90152C3046D21D891A19F8B04B76396C1C6DC8EB0321BB9D695890F622EEC9
CF8A6465548AE5239373F249AB7AA675A8CD3B5DD867230439680606DDE83057
192BE6270C431263ABF7692C2B9306A9EA1F30EBC37CCAF5AFE1A152887B3788
9EA69A734693A8C7E649FB2833EBBDEF80E92698A592C638E514340113587AC9
0BD244299A9B8C1008D6900E85A1FCBF73355FB3595655CDCA9B92E6ED3E8234
7F17AF2BC22E5605A2B05C8E6348AEC622F512DD582FC2578BA390950D0BA609
599E8F29A4623A19A3E3B35C0B8F7DE959D3B26A2D24789C75FF4FCAAF85DF09
12F810D231142CDA0C577701929A2FA1C3E3BEF02EDB44EA528E5E7220789EB4
2237B501E59855CF9B8B3E58D35A6B9623DC1FE94D316821BBAE64DDC1CFDC6F
5497DC4F56CC803519612C82B04F9D44BC44AE516521D312FDC653B7A4D9AB79
2D52EABA7E1B33F8710A1386A836082C3F2A7C9AA277192C7375B768B0D27F25
F9D336344FBA34B90AD087F0CC061F1349C3EB7762F62237545CF98770C7A7FC
997341EC2887CB71304863FC42821B08E6C00314573E1B5DA25E3E92A3EA4134
180984A46B476DC1EB708A935F0E7AAE9B66699C3B32F912269F164266F61E27
E291417DB455262CD88C89B9B5B238DB6E9B14214CCABA586AE8A5577AADA14F
2655EBC23BB27D4E399B45904CA2AE82FF847EAC001DD378D6B5051751D96D4C
0AD52E66CE740EBD01BDA61BB249D259CB77111023E1DD2DBEC5710F547F1EE3
24DA31398CC795F24E7F6269772B72BE414ECD7C2828D8D8BF0B90B2FD8DCB3C
AA12E38A10722457631A63C8095C40C67BDB967D0A054E95C445CC478CF52EA0
8881EADC4A81146CD5751F007AB42E6BB09EAD140D293A77E1DE7602300099A8
8E317DA0D1530C8F915DBE5087E1E31569402D64D22A4FFE8310C9C88FCA7818
143FA6573E3D8677B15E432477DB30037CF0E6A0988EC0AB2F9A17CE3C2030B3
09A89371D7EC97442D68EFF5AF00D1C67F9E9DED4F2C26A3A2D75D254E541C53
5E0ECF51F5F9085363E3262F720BBBC7B6F0792D26473284044E0CF6A608BC17
66A11B54CB448E8A819C7E39991A91BFFC83CA44EC0C657EB464A02B09C29E74
99FC3EE3CDBF0F4F5089BA8758F2F931D8598B76774001F65A3A3C01ABAF501A
2B20A62473094F4E2906EDB5B68EE6C85EB9B2533B292A218DAF74F9573C08C3
9842DDF48C8F31A70DDDF5F041BC1703A0B2B7952A14E2513DB6398B52AE358F
057EB9A4567F4A29D6559AFA31011D5E6C49F6635D867A0E0BB97CC463E11F08
8EBBD5400F189CCE0BC81DD08420BA7B5A812F1AB1EF815C2A49868A017DBF2D
7BF8E5BA1850D0A64DF162EC46080EADC38547EAE997A8308B8F3C9209591ECA
4DD9FD48805BBE180EA0206A7D760F77E2F199CB1A35EFF5D38E073E8510A81E
4321B4061D683B6F708C65B12837881781204B8021646BF7E9B7E7C33B2AF70A
D2413289BE0936472059FD76C49D2576584C1DA5CBA948BFC5AEF08B7891582C
F3B3C7F184C2B584E6CED23469CA552B35683723D29EAEE0860B156B964B78F3
4E87E0B751A0DDC7E93B53C5102432A3E06086F86499481BEFB214AFD8B4CD45
81B7470B9E2EBD34B2A2F4484FE43E893FA77AAE37D13375B440E64DAA3A4A8D
F38D168F17B58E6A4115CA624BCEAB99812D84FD0C75638644A25B558690513F
3D9E9A47E50E1FBA2162ECF6C170C911D0329D12CA5D24841341214A8613E03C
9DB974F59CBFC12F0D31103CA9CDE4057BD1C3C5795F5E8D2580848241BF3B30
0CBCD9A2C61368444B09F5B745FF767C5B9E197DD6D594EC5BB7C53112BE1F6D
DD6670666C1799E8342F1431276A32E35B20F05D3A80FA8433E4603685F49E69
EF5D3B057C32C258A94355786A41F6EAF1D17DFFEAD2F10843C3C885482FBF0B
701A8ACE202C4A0D5AF737436776178A52C9D5620E16C79FEFA0172A5C79484A
5355601A41E6057B39A9D72802E51D68945402B0C8AEF2B722A799A5959AFB2E
CBA80FDCA4C1B89701E62F8D6E661E058F76D3C4DF51C2DC6FA8DCF11672247C
0D972670F52928FCC6CDE1A1D5C6E62C430F188BF5BC2A9B0E86BE55AF07BECE
0C066FAC978B9E8F9DB97D109DB9178DCA3133FBFFA933A8E66F767252A76F5E
2F44D6AE5D30BA77846FADF4AC95F6898B493B8B382D584FC75EC83FF41A4E95
914A67FD01E49FA15F421645E69D62B9A22F6DF488650DB4A479EDDC55A8CA1F
4789DDD75A55F5F1A46DF41CDB0A977094AEF42BB45C4C4323E16414C5833D1F
1244E4FD33BAB17EEA4C3ED803C558700183F810824AE395AFAB13A37D194B40
41B8064B276EA89A6F9B3ED2A0717D50D01029389970FD3BBB4764DB693FC18F
E1335EBF207472082E780E179929360F7E590865D2F7B930C4B0AAFC4A1764B6
7C5E5E8F9D0B4EE420551A7D9B547E3A4CFC21B3377F263D0E7EEDDF0D6947EA
D7A2E4121E41A3298C45E9D877F1516A36DE0A2DB220DA2F1A250D38F8B711BB
95ED8C8BCD2CFF2F4F3ADCC1B445C9AD7CACE403A38577B809E7DC0102E96418
7B327A47C72C645044EFAD056C0F18EB08E8CEA8B0CCF4130837E810D9C60491
ED535266B43EFCA81933D479A055DB0E946674A6FF6194C1F360EAD10C6F69CE
A2EB0386F45FAD2BEC71D27DE5E87F3DFFF04F5525E82A59F91B580FD36268B1
0A77A7039C39E61BEF9196F2D1E5BFDBBBC2953CB6341DF6C5A6580E03131C42
C7B226ACE318711966BC12CC2EC8C8F2C247BEFCCC8319223742109AF5E0A1D0
233C6E34C37041357268F65EB1628B2B30FBCB22733672A5677D34F6F6C7A0DD
E3558B4E339F6F61635077D8E56479EEBF642D278851AFBA91D6C1ADA3FA7E97
0438882C1F942DA8201E3D249186E18585ABFB02BF32319F8D5A74BE98C4B30E
4B08C4DC1627A9587CC64735B84DC656E5E857FB1ECE6A94684BBC2A92EFD744
E7A87AE92C54D0B4F69A48C728FFD706D9B7BCE84FDF224CA7809A07A0AFD3A2
E184B6974122A6F89F029BDBA2DE8D068E5AF6602C4B6CEE184D98E4E4B0103A
EE69E12B7A65646B22D7BC636DD43CF94C1A2EAAAFBBC28D81EEA4479E5019B5
913222915E072174366E8C58691C7D4635306AF931ECFA260DC391FA53417653
6A047096C7E1253CEF3014E64408C38FEE74EFA78BF83E86A011FB158F0173F6
ADF697EA78174515AAAB93E0E381B68E946931ED2AE7B57D9C360702DA015EEC
3F0E6B61C553D07FE62599F6B3F0D1A66DE1454BFAB2950B1A08DCC0515384A4
C32D080DB90A971F2BCC421FD72F6FD70EF45E980FAAD7FE0B4287283CE6BA17
C86315A8B5C3A15D7154C776ECFDA5DC5294B16D990159AE999C3948B3D83333
7537D6F73714F4C2C9D2341E915C49A923AE8C5E44FE81A32834B826039D7D83
8FB35B7111ECB69A104A66FF52ED3B5E0542CEF1D506F1B500F96844AB2001F7
264DE374FA47640CEE3417F5456CA21500917652321E31BCE25618570485D145
A9B9BC6BBC07F993453AA60C3C3A6E193ED547F620C3BB707488B33618FEA166
B607C93B5839CC6CF150B2ED2AC5D95CAFC0F40E02BA96CA21C065B0DFB4316F
5319CF2B312BB09A1A7860A02744510CC956C04E40EE3319C805830749CDF351
663D4793A1DEFEFEE01751ECA588313482E5BA2182E854CE996AF326A6C013F5
AB2B92F0E5AA47768DD792FE32E0D3D4B3AEBC18AEB19FD0644DC1286960BF20
DBB070DC8063414668499589BCF9815D1875B3623369A9101E373FA67EDBB9CB
4474B4F6931683D4DB43383C178C04E23287901427FCF04C2E175DD8E2D43048
0A76B01D6CCB8DCAB538B9C01F98791312C1BB3FDB9520CEB2B6750954504F89
544A9145042A1AABCB7E2F17286922AAE6518262C249F9F014E2349D2B0EA362
E988F1FCFB48A78EED65E461D8B21117F1C53A90CA5D0CAAA084DE0742C4969E
D14E0DA0326427A4ECDE6D2C3223E287A66CD225869B7DBAC6B80301213D6AE0
02A78CE80D9C4CD65914999735A186FB9DC4621801AF218FB7B2F2D32C716AE1
1077F4913341466DF1FFBE2D12C9EA78E88D2984312E77B23560E6ECECAABA50
53CCDFB37599FF22C53F7A5B0E650EB809278DBE5567DE3935DCE2B9B8C87F97
FE98C83F962C430059DED85EA8C6407E9272DBBE60663FF60FC445E26AC9CA7B
D6482BACE4CD2B1CC101E33B75C8F43759459093B82A7873488164DF186A0C55
1B19FEA89DB75576A0F593874864E02963FED3FC80A288759EE10AE18745704E
A1B72C6FA285895C2562BBCD542F715FCE399CAA40060BF233DF03AFB1CE8605
9F97542146F16F002BFFC876418A20408998E931C35FAA12FB25580A4DF82B67
001D9AF0E25007317AE9506EF7331BCE20164EAF76D58963EB60E4B5E3EB779C
346D4081F66C562455B0F98CB8EE7B949626C781EFF168B2B45BCC9764E35A92
91B1D33A9C1D678844B5A63597D19096E1329ADCF2F9072FBDF455A8D0A77F97
09B4AB2DB908F634A74DBF9F61EF07A8C715E5640D47BB7FA283792E5911D392
41C951B48983699B18D6380CF46765B5C63C356FD4B5A5D474E8B118EF477416
7F6D464994B3BA6893C817547DD5B3E1D57AF5ED95E818179EB8EB0930A91196
2FFFD959586DE78A6FED8A03B8B4299F0A1B3C26BF4E4520D7CB0938906A64BD
9FE3D0B1AF2DD549C5E2CA5F6C53C159FCC37118A744BD5BD74955BA447F1D6B
82A65C5B11545FF24488ADA942FE0F0D4C49BCF0F9F09EB99E51B229C4347B7E
82C10478F7CBDED6EACF5CCC4A861F7BD75285E8D9F5C4518F4E0F608AE08148
961AC78F0E34D50F4ABD04604EC29FA1290FC4C17388402052EB317A420C724B
1592EBE60A0D65006CEA1ADDD0401BE96AA4383E2837B7DE02940C3A8B82EC27
4493C4AA03FC4DFCF89483A8CFA45BBB2C6DD820F35659DFFC5F73082E99504D
ADFE7B743C82C36EB5C7792F5F1913F543DDE17BD9A004F3B2108E48B4BD4ABE
8002E9483226AFEE639BF663B17A9A7ADA25395FA27330F549A2D2987F1D8559
615AE235E517F3E0930E5DA6742465BA8D594EC578DDEE9B71AADED8E87EA74E
AC7DDA3043A9677DD426AE56E6AA2287523AA08129B161352BC3CDF5C666587C
8AC488E1FD57994D6665441FA88906681B6E4EE6CC86EA9511A80FFBE8D45AE2
AAE0DD3844DC05BFF1FBDF4DE3D33E3CD93AC142E5C705D674589251600C091A
18CE73EAE0AA5DC65097A4467C8D930FD46D585C82666A56F0FC514863D59C9C
614C4BA53726B29BC257257D576891D864B65D5F936B1B606231A9C114F35261
782B74696117BD102BA7C9A016C72C04A7820508945C0FE2413F08C92747790F
15F716437B438595A8C13E86EE76B9E7EA82BE11CB06BFE39FEC3F0AB5F3192A
2501397B2D50B1E0B998D2912940ECDB3F15F97978122FE63CD876D177EE9A5A
72857C064D662050AD92003B7A18A665827C364FC2D38BBFC1FEA8A4E2ED6959
F58BCE4146BCB3155C47E6AD8BF94A1810E2CCCA2ED25129CD05911F2C285859
AD5E1D65BCAD03AAF40939C24BC944BB1E071C7A2E6C7243BBCDC9F0884050E0
0BF0E4707EDF8D4C8E645CA48D12B4FB1F77DFD6D68DD215892E0CBA7524AD3C
BE1C024CBF76F055A5D06693595415CE95A51CFD9192E2F814E28E79FB2BE7DE
AEADA384A47CFE6CE22DDDC61EE9F937FCB295E7EAB349314F1C141734B8FD64
B1FBBDD50F6E4BA34577A35813623B184B8C655EC3D44FF356B32E869708D43A
8A3FF1E632B266A27E2823ECF00A3DBDB0D13CD42D1E4198F71308CD45685DBE
4C396A258B8A8435FF9155E9A621F27BDBBE9299C35E67092149A116298EA1A9
232534B2173EBAD2765D76A6F561699EDBEAB63C56FB6BFAF157FEAF36A060AC
C9EC5A90E5CD2E0CF749E1FD62B34D0CE1CD9827A4F05B6D94BC6385FA80BD8A
C2A0DC07C12277BE2C51CADD548FA66D1713F2A353B903A517A934100EC767AB
D5AA6D0353F5C165C2991487450141962ECF5FBF60E424D4C3052C7842F8DD4D
4C30920F46397176EDB9654CFAA7A4A58AF3B536D4CEECD9711F4E69A8EF3F5B
1001EBAB673CD45EAB5449F7421D04DD1778EFF0B49C6AB85F6DD34BD4F13E54
6FC710C3EFD542BE7345963D54A343062271947EB03BEED26669E4AFB5D2CB22
8C10EF251D2619C880F7649B72CC3161F95F10064EC207497BA38D8D29ABC1CE
011BE42F86D6A1FFDA87AFC2F56187DA5F4D35D3133938A38EFD01084A97C58D
EB933551E478B03C602556E14B29DB684307B7143A0AD565280F0F48BE924B12
BEEDA9F3BFEB52164CBAE592A0265255BC744338ABAB788B5CACE8670204DD31
4D504FC9909417DC81176509985042D0C10029B8D879A660A4C57D284B2EC9C5
7D8DC15C3754E5D563C2C8F0E8DB031BB3BBE6BA9486DE3E4E6430079CF86C28
C7A89EB70EF2898965653A27FA13D125903FF762601217A06F414BCE232A05F8
88E05E7A2A28C0EFB0F3A1EACE647CAE0B6F28035BCB27A0A492E278060CC615
046FB81CE33D75CAB5C5B76859F7AC47519DC0039C3371C2B1AF189171BA4E41
E2E033B1E128197082981868682A8844C91FB651041DBD77DE6C79AAF75F4333
42B2138ADCF91DFD270E558E4245FD9580AC03ACC16D7EB456E7A429C1B1A3BC
45FD5D9F54EDBE507D22E41A65D5F74936FF7E7E2DB38FE907E533F653C0E3C0
22D4BDFB88CAA92C81845D89C4B73B6CE053685028C3A2E890085C37A9BCB439
76C38087422482D43DCD51405DD0919ACB19E69B7DF39BA3BDCE71FD4C3F2F5B
9F97D736C695A629DAEC5892CD37BDF0BA687FF9E5B6F0D622CCA560BA862FF8
9DFB6A0DD7B7B3F31A3A3A3A9994AA34D1F23FC52BCB43D736EC3922E59B091E
D736AE1E64D1FD4F628B60F59B2A0A37AECBF304019BDF71CA43B55B5CFE2C51
344E113E4CA2D3275A836527262C12937392F4F212CDF55D1436FFD7F20F1A10
720238B81D77AC383663BF4A533372C2A063A3E4038674A302F525FF8946AF83
C837AAD1D4ED7D91C8E09044D550E6A127BE0D2CCB31DC66B9E6235AB47CDB66
FCCEE6041FB6B60A8A2AA70718A45D4A550208C5D005B66F00986788632E6DAA
F47C957512B2466A793AF8F4413F91DB73C965C0247A1CBEDAC22B548ED6F014
9B0AECBF726A398D09A73E1BCC24CA42400ABA47F88BB6F17785CFA2F6079D4D
6E4F21B047A76A45A2EF95AC622613E779518260EA0B5568837A1B5CCD72A3E6
C0D6401498D6E2A579ADB3100D217E8ECE8A26576B9436E926E73EA7EE87AA4F
1A15BFA2DA09E183460E95ECFC68BBB94B4D5F642D02B574A5567734B65D5BFB
40ADEBFA879B7CBCCADCE3BBDF1F97B4333FA90BCFD2A9B05D3B02E807FFB05C
531FCC5FE8EE5CF9FEB362089E0500643786AFE0CD88FF1D9C5465AB4E94708D
40B7ABE8741250CCFEBDE04A059D87FB9FA2AB45C848CE4534C9C10F0E0A4E85
E902340D00686F2FA80265166B12F239460D63E02219B072EDAEDEF3A6AD41CE
07BE578B0CF52BC6DBD7C92053F815919D5192AC1B868BC71D0CB588AB97A269
080816B7BC7B7CD60FB92813582FC0F1651453F6E2697D3678152C930A6B804A
D5BC04DF52AA8C47C83B75FD2460AF1069FAE2A82DD162EEC64A31629776188B
77BB0EFB54B7B5D75A653AF58497E1D13E49D217A58746255B884F2B96E0A22E
D345AE8E09379BD91791D15577EAE09B409362B946784FAA328414814E36D752
2163DC4778821563A5FCBAD0DC0EC2D27285DAD7422992D1C8C3DE2567B1FF87
952B71588158C9872905517F512B9A29E4863A9C8984E01DDD0B9C5DADF7BDE0
7D661C7ECFE01AB269850CBE2A3B1004E799927E38A42A886BAA28777E4776CC
10DD4DB9C3768CE506C5B9749942E63439783AAEA8DCD8A7A6DB84B10A407F7D
EB582E67D4CB5DD38AD6DEBEB6ED67DD3436E774FBB38CF0305DA3DD07D7F398
9F721351F88178C73D146C8DE690E93C7FBABBA0C794DE1C0BDCFCB2337B999E
07960DB943405F3AC7C783521A214B02DBF99A7A97A34251CD2070B13256A5D8
4FD32A5C3E7A6AA2C763EB52528855EAEC5F91C14C9A3BA1BB44AADA9A7D851A
062BD3B70C6A51F663EEDFF9920139280EFEB188483E275A884BC7BB1062223E
EA122F7E6495CE3BAC197FBEF1F695E060640D60D426A8BA78E398B1725EA11B
9E055FD3393BCF9C16BE210FAE99C51678C8A3F15DE008F0F8E095CDC4038680
ADA86CD3721287625292B361AAD793F439A55E2E653A9FF098401B508414194F
B9E1DD15F243D8A32E0010E0908E372A910055714A4B24F5D539E7D713E71615
D9610811FB4ECEB68EF3A1
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMMIB10
%!PS-AdobeFont-1.1: CMMIB10 1.100
%%CreationDate: 1996 Jul 23 07:54:00
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.100) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMMIB10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMMIB10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-15 -250 1216 750}readonly def
/UniqueID 5087392 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D004B836D34E88C25F6CE738846C8E2E59A2BCF
4ACF80A26D78872E9343A0537BC3BD7715F32ACD958D5AAED865BFE129278935
063A31C2634DE2F9077E0AAAAEB224466B779096D8E3FF0A12AD5157F6603DED
1A82F3511359143311179080C510740B401C930C96270FD1AB3ECBCFEF5DE53F
E846BAAE95828D5790922640EF8AB9D7CEBE7669FEA02B72F86872D3D8754A18
A1629C40A7C00C956F140BC63362478279C36EE353638CD3E249897207A94504
4400668C8E702058EBF7284C9BDF830A3FC79C7EE900CC4C3664F9767A237275
CEE3671644A75F1E696DA906B4C66870DBE87F5B4A176920C078ADBE24F55C09
3D18CDE21B5FBC1C6A8AB18E05EDBEF9D1C1C18B3E6377BA2A688579D4F708F9
A5CF4F56C5E39E2726106E9713E638775E606464CD674E5DC25CE9A696A65806
C8E9D206B421E246F18013ACC6C7B2985BA93B1B7D7745CCB25B09957F50128C
B523A55ACA6A7A2A0193A536E590291ED9D577B527CAD0372E05BFCA1829FED1
662D06144A5FFA628C587A4FA05B179F1A7E3B23B47765FDC054271A0DBF9C2B
B4F4771F80D1F7AAD9024868C30DAD5CF728DB2A71D86D53B0E674996E8C01F7
EF97B225A28872F8AD4752A466E078C2B020EB832F237CB9B5631EB2D2EDDB00
709D3864CA3A6C3EF18085EAEABC011E9F35C9BE4B5D0B608361F329B5784DAC
5557A602E9E3C204909D84DB988F0BAB914E87CD685C7DA55C5E0B9F0176184F
FC39B570873BBF346A0D1DE3942DA05434949A65CE64D8BAB0A091C40F7FF47A
4FC57CB4420221C7B3EB8B891044B5FB0227009F0F6028D3F28545E63C975F11
6BCCB67C58A544AE706BA5309FE391816985AF4604732D2B7E4FC947AD9F29C6
2858ED5A9824C2915162453046790D522BFFB881ED8F0062D056722A2C8926BD
A33AE1A7D5EEFEDA8A86A78433FF239D5F2D86F992C0185EF15A0163A628A238
87F9840BDF26E48AAD35DD0C167FF38D5B79ECBBD7B979DEBF71637081E4E6FF
F0254425900735A94CD403F46B7C86DA97AB3DBEF2B96778670FC35AE8505ED8
90CB2001B067456419D278B2519062A9E49F703BCAF1D4FC03A460063745D434
F1FA3EEDC0A0F87EEEE6FAF906D40E292B67EBFE4FB76F60C73EF72A8FC3CD5C
FD18FAC6150B6147E1973FEB7BC1656BE667A5FABD016DD4978ECDC06B0D5246
0CD9FB08BE8EEBF4E17EDE9EC0DDAFADF98894E1F8F4F30770D47FE68D912591
6CD81D2B42B3972955DDF84CC6D60E83643C478952A9AA1BEDEF4B45860E1C8E
8F191A3C1378E75350B7E217F83348C43BF7ECC0F76AB946DB13586DF26CE6D4
688261
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258431 52099146 1000 600 600 (ver.dvi)
@start /Fa 129[39 4[39 39 39 1[39 39 39 39 1[39 39 39
39 39 1[39 39 39 39 39 39 39 39 39 39 3[39 1[39 4[39
1[39 1[39 2[39 39 1[39 2[39 4[39 1[39 39 3[39 2[39 39
39 39 39 39 39 39 39 39 39 39 39 1[39 2[39 39 40[{
 TeX09fbbfacEncoding ReEncodeFont }52 74.7198 /CMTT9
rf /Fb 133[31 37 2[35 41 25 31 32 1[39 39 43 63 20 35
1[24 39 35 24 35 39 35 1[39 12[55 43 2[52 1[57 69 48
1[40 30 1[59 50 1[58 55 54 57 14[39 39 3[27 32[43 12[{
 TeX74afc74cEncoding ReEncodeFont }39 74.7198 /CMTI9
rf /Fc 141[29 2[35 38 9[35 2[35 97[{ TeX74afc74cEncoding ReEncodeFont }
5 58.1154 /CMTI7 rf /Fd 150[21 1[38 32[47 14[38 38 1[38
5[21 46[{ TeXf7b6d320Encoding ReEncodeFont }7 58.1154
/CMBX7 rf /Fe 139[25 5[41 2[35 27 3[32 102[{
 TeXaae443f0Encoding ReEncodeFont }5 58.1154 /CMMI7 rf
/Ff 137[50 1[37 38 39 2[48 53 80 3[27 53 2[44 2[53 46
12[66 4[72 26[48 48 48 48 2[27 46[{ TeXf7b6d320Encoding ReEncodeFont }
19 83.022 /CMBX10 rf /Fg 207[19 32[34 11[34 52 2[{
 TeXbbad153fEncoding ReEncodeFont }4 58.1154 /CMSY7 rf
/Fh 134[40 39 55 38 45 28 34 35 38 42 42 47 68 21 2[25
42 38 25 38 42 38 38 42 12[59 3[56 1[62 1[52 3[62 1[54
4[62 17[42 25 30 25 4[25 26[47 12[{ TeX74afc74cEncoding ReEncodeFont }
36 83.022 /CMTI10 rf /Fi 156[25 31 28 45[28 28 28 49[{
 TeX0ef0afcaEncoding ReEncodeFont }6 41.511 /CMR5 rf
/Fj 145[46 68 1[40 107[{ TeXaae443f0Encoding ReEncodeFont }3
74.7198 /CMMI9 rf /Fk 204[30 30 30 49[{
 TeXf7b6d320Encoding ReEncodeFont }3 49.8132 /CMR6 rf
/Fl 148[33 43[32 63[{ TeXaae443f0Encoding ReEncodeFont }2
49.8132 /CMMI6 rf /Fm 152[42 42 9[55 8[50 67[42 12[65
1[65{ TeXbbad153fEncoding ReEncodeFont }7 83.022 /CMSY10
rf /Fn 141[37 37 42 1[50 73 2[34 3[41 1[43 36 36 44 12[49
51 1[66 53 6[36 3[61 7[42 1[23 23 32[47 25[{
 TeXaae443f0Encoding ReEncodeFont }21 83.022 /CMMI10
rf /Fo 134[35 35 47 35 37 26 26 26 35 37 33 37 55 19
2[19 37 33 21 30 37 30 37 33 4[33 2[49 4[47 1[48 1[45
51 49 1[41 3[49 1[43 3[46 49 5[19 1[33 33 33 33 33 33
33 33 33 33 33 19 22 1[51 1[26 26 19 4[33 21[38 12[{
 TeXf7b6d320Encoding ReEncodeFont }55 58.1154 /CMR7 rf
/Fp 134[59 59 81 1[62 44 44 46 1[62 56 62 1[31 2[31 62
56 34 51 62 50 1[54 7[85 2[85 3[84 8[42 3[74 1[81 1[85
11[56 56 56 56 56 1[56 7[31 39[{ TeXf7b6d320Encoding ReEncodeFont }33
99.6264 /CMBX12 rf /Fq 139[34 35 36 8[25 1[44 3[39 49
43 26[56 4[67 7[44 44 2[44 1[44 44 44 2[25 46[{
 TeXf7b6d320Encoding ReEncodeFont }17 74.7198 /CMBX9
rf /Fr 152[38 38 86[38 12[60 2[{ TeXbbad153fEncoding ReEncodeFont }4
74.7198 /CMSY9 rf /Fs 128[38 3[38 34 41 41 55 41 43 30
30 30 1[43 38 43 64 21 41 23 21 43 38 23 34 43 34 43
38 3[21 38 21 1[58 58 79 58 58 55 43 57 1[52 60 58 70
48 60 39 28 58 60 50 52 59 55 54 58 60 4[21 21 38 38
38 38 38 38 38 38 38 38 38 21 26 21 2[30 30 21 4[38 21[43
12[{ TeXf7b6d320Encoding ReEncodeFont }76 74.7198 /CMR9
rf /Ft 133[37 44 44 60 44 46 32 33 33 44 46 42 46 69
23 44 25 23 46 42 25 37 46 37 46 42 3[23 42 23 1[62 1[85
2[60 46 61 1[57 65 62 76 52 1[43 30 62 65 54 57 1[60
59 62 3[65 1[23 23 42 42 42 42 42 42 42 42 42 42 42 23
28 23 65 1[32 32 23 4[42 19[69 1[46 48 11[{
 TeXf7b6d320Encoding ReEncodeFont }73 83.022 /CMR10 rf
/Fu 192[48 63[{ TeXaae443f0Encoding ReEncodeFont }1 83.022
/CMMIB10 rf /Fv 134[71 71 1[71 75 52 53 55 2[67 75 112
3[37 1[67 41 61 1[60 1[65 24[105 6[102 52[75 12[{
 TeXf7b6d320Encoding ReEncodeFont }19 119.552 /CMBX12
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
letter
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 772 448 a Fv(Automatic)45 b(strategy)i(v)l
(eri\014cation)f(for)f(Hex)3104 405 y Fu(?)855 737 y
Ft(Ry)n(an)27 b(B.)g(Ha)n(yw)n(ard,)f(Bro)r(deric)n(k)g(Arneson,)h(and)
g(Philip)h(Henderson)644 911 y Fs(Departmen)n(t)d(of)h(Computing)g
(Science,)h(Univ)n(ersit)n(y)d(of)j(Alb)r(erta,)f(Edmon)n(ton,)f(Alb)r
(erta,)1171 1002 y(Canada,)i Fr(f)p Fs(ha)n(yw)n(ard,bro)r(deric,ph)p
Fr(g)p Fs(@cs.ualb)r(erta.ca)759 1334 y Fq(Abstract.)43
b Fs(W)-6 b(e)19 b(presen)n(t)g(a)h(concise)g(and/or-tree)g(notation)g
(for)g(describing)g(Hex)759 1426 y(strategies)35 b(together)e(with)h
(an)f(easily)h(implemen)n(ted)e(algorithm)j(for)e(v)n(erifying)759
1517 y(strategy)25 b(correctness.)g(T)-6 b(o)24 b(illustrate)h(our)f
(algorithm,)h(w)n(e)f(use)g(it)g(to)g(v)n(erify)g(Jing)759
1608 y(Y)-6 b(ang's)26 b(7)p Fr(\002)p Fs(7)g(cen)n(tre-op)r(ening)g
(strategy)-6 b(.)1091 2331 y @beginspecial 0 @llx 0 @lly
68 @urx 43 @ury 680 @rwi @setspecial
%%BeginDocument: B3.eps
%!PS-Adobe-3.0
%%Creator: Jack van Rijswijck, thanks to Cameron Browne
%%BoundingBox: 0 0 68 43
%%Pages: 0
%%EndComments

/OriginX -2 def
/OriginY 21 def
%---------------- Variables -------------------

/DimX 3 def
/DimY 3 def
/Scale 1.2 def


%---------------- Constants -------------------

/Root2 1.414213562 def
/Root3 1.732050808 def

/Chars {[(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)(n)]} def
/Digits {[(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)(12)(13)(14)]} def

/HexRadius 5 Scale mul def
/HexLineWidth 0.014 def
/CircleRadius 3.3 Scale mul def
/CircleLineWidth 0.346 def
/BoardOutlineWidth 0.5 def
%/TextHeight 4.5 def
/TextHeight 6 def
/TextWidth TextHeight 0.45 mul def
/BoardShade 0.8 def
/FadedBoardShade 0.9 def
/CoordinatesShade 0.5 def
/DeadPieceShade 0.6 def
/DeadCellShade 0.6 def
/EarLength 0.5 def
/GraphVertexSize 1.5 def
/GraphLineWidth 0.5 def
/MoveEvalSize 0.9 def
/FatLineWidth 1.0 def
/MarkerSize 1.2 def

%----------- Functions -------------

/HexCenterX { % X coordinate of center of cell: i j HexX
    /j exch def
    /i exch def
    OriginX i j add HexRadius mul 1.5 mul add
} def

/HexCenterY { % Y coordinate of center of cell: i j HexY
    /j exch def
    /i exch def
    OriginY i j sub HexRadius mul Root3 mul 2 div sub
} def

/HexCenterVertex {
    /j exch def
    /i exch def
    i j HexCenterX
    i j HexCenterY
} def

/HexTopLeftVertex {
    /j exch def
    /i exch def
    i j HexCenterX HexRadius 2 div sub
    i j HexCenterY HexRadius Root3 mul 2 div add
} def

/HexTopRightVertex {
    /j exch def
    /i exch def
    i j HexCenterX HexRadius 2 div add
    i j HexCenterY HexRadius Root3 mul 2 div add
} def

/HexRightVertex {
    /j exch def
    /i exch def
    i j HexCenterX HexRadius add
    i j HexCenterY 
} def

/HexBottomRightVertex {
    /j exch def
    /i exch def
    i j HexCenterX HexRadius 2 div add
    i j HexCenterY HexRadius Root3 mul 2 div sub
} def

/HexBottomLeftVertex {
    /j exch def
    /i exch def
    i j HexCenterX HexRadius 2 div sub
    i j HexCenterY HexRadius Root3 mul 2 div sub
} def

/HexLeftVertex {
    /j exch def
    /i exch def
    i j HexCenterX HexRadius sub
    i j HexCenterY 
} def

/HexUpRightEdge {
    /size exch def
    
    HexRadius 2 div size mul
    HexRadius Root3 mul 2 div size mul
} def

/HexRightEdge {
    /size exch def
    
    HexRadius size mul
    0
} def

/HexDownRightEdge {
    /size exch def

    HexRadius 2 div size mul
    HexRadius Root3 mul 2 div neg size mul
} def

/HexDownLeftEdge {
    /size exch def

    HexRadius 2 div neg size mul
    HexRadius Root3 mul 2 div neg size mul
} def

/HexLeftEdge {
    /size exch def

    HexRadius neg size mul
    0 size mul
} def

/HexUpLeftEdge {
    /size exch def

    HexRadius 2 div neg size mul
    HexRadius Root3 mul 2 div size mul
} def

/HexagonPath{
    /j exch def
    /i exch def

    newpath
    i j HexLeftVertex moveto

    1.0 HexUpRightEdge rlineto
    1.0 HexRightEdge rlineto
    1.0 HexDownRightEdge rlineto
    1.0 HexDownLeftEdge rlineto
    1.0 HexLeftEdge rlineto
    1.0 HexUpLeftEdge rlineto

    closepath
} def

/HexTopLeftEar {
    /j exch def
    /i exch def

    newpath
    i j HexTopLeftVertex moveto
    EarLength HexUpLeftEdge rlineto
    stroke
} def

/HexTopRightEar {
    /j exch def
    /i exch def

    newpath
    i j HexTopRightVertex moveto
    EarLength HexUpRightEdge rlineto
    stroke
} def

/HexRightEar {
    /j exch def
    /i exch def

    newpath
    i j HexRightVertex moveto
    EarLength HexRightEdge rlineto
    stroke
} def

/HexBottomRightEar {
    /j exch def
    /i exch def

    newpath
    i j HexBottomRightVertex moveto
    EarLength HexDownRightEdge rlineto
    stroke
} def

/HexBottomLeftEar {
    /j exch def
    /i exch def

    newpath
    i j HexBottomLeftVertex moveto
    EarLength HexDownLeftEdge rlineto
    stroke
} def

/HexLeftEar {
    /j exch def
    /i exch def

    newpath
    i j HexLeftVertex moveto
    EarLength HexLeftEdge rlineto
    stroke
} def

/HexagonEars {
    /j exch def
    /i exch def

    HexLineWidth setlinewidth
    
    i j HexTopLeftEar
    i j HexTopRightEar
    i j HexRightEar
    i j HexBottomRightEar
    i j HexBottomLeftEar
    i j HexLeftEar
} def

/HexDeadCell {
    /j exch def
    /i exch def

    i j DeadCellShade ShadedHexagon
} def

/HexDeadMarkedCell {
    /j exch def
    /i exch def

    i j DeadCellShade ShadedHexagon
    i j HexBlackMarker
} def
    
    
/ShadedHexagonWithEars {
    /shade exch def
    /j exch def
    /i exch def

    i j shade ShadedHexagon
    i j HexagonEars
} def
    
/BoundedShadedHexagonWithEars {
    /shade exch def
    /j exch def
    /i exch def

    i j shade BoundedShadedHexagon
    i j BoundedHexagonWithEars
} def

/BoundedHexagonWithEars {
    /j exch def
    /i exch def

    i j BoundedHexagon

    i 1 gt {
	j 1 gt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexLeftVertex moveto
	EarLength HexLeftEdge rlineto
	stroke

	j DimY lt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexTopLeftVertex moveto
	EarLength HexUpLeftEdge rlineto
	stroke
    }
    if

    i DimX lt {
	j DimY lt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexRightVertex moveto
	EarLength HexRightEdge rlineto
	stroke

	j 1 gt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexBottomRightVertex moveto
	EarLength HexDownRightEdge rlineto
	stroke
    }
    if

    j DimY lt {
	i 1 gt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexTopRightVertex moveto
	EarLength HexUpRightEdge rlineto
	stroke

	i DimX lt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexRightVertex moveto
	EarLength HexRightEdge rlineto
	stroke
    }
    if

    j 1 gt {
	i DimX lt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexBottomLeftVertex moveto
	EarLength HexDownLeftEdge rlineto
	stroke

	i 1 gt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexLeftVertex moveto
	EarLength HexLeftEdge rlineto
	stroke
    }
    if
} def

/BoundedShadedHexagon {
    /shade exch def
    /j exch def
    /i exch def

    i j shade FillHexagon
    i j BoundedHexagon
} def

/BoundedHexagon {
    /j exch def
    /i exch def

    0 setgray
    HexLineWidth setlinewidth
    i j HexagonPath
    stroke

    BoardOutlineWidth setlinewidth

    i 1 eq {
	newpath
	i j HexLeftVertex moveto
	1.0 HexUpRightEdge rlineto
	1.0 HexRightEdge rlineto
	stroke
    }
    if

    j DimY eq {
	newpath
	i j HexTopLeftVertex moveto
	1.0 HexRightEdge rlineto
	1.0 HexDownRightEdge rlineto
	stroke
    }
    if

    i DimX eq {
	newpath
	i j HexRightVertex moveto
	1.0 HexDownLeftEdge rlineto
	1.0 HexLeftEdge rlineto
	stroke
    }
    if

    j 1 eq {
	newpath
	i j HexBottomRightVertex moveto
	1.0 HexLeftEdge rlineto
	1.0 HexUpLeftEdge rlineto
	stroke
    }
    if
} def

/ShadedHexagon {
    /shade exch def
    /j exch def
    /i exch def

    i j shade FillHexagon
    i j Hexagon
} def

/Hexagon { % call: i j Hexagon
    /j exch def
    /i exch def

    i j HexagonPath
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

/FillHexagon {   % call: i j shade FillHexagon
    /shade exch def
    /j exch def
    /i exch def

    i j HexagonPath
    0 setlinewidth
    shade setgray
    fill
    i j Hexagon
} def

/HexBoardOutlinePath {
    newpath
    1 1 HexLeftVertex moveto

    1 1 DimY {
	1.0 HexUpRightEdge rlineto
	1.0 HexRightEdge rlineto
    } for

    1 1 DimX 1 sub {
	1.0 HexDownRightEdge rlineto
	1.0 HexRightEdge rlineto
    } for
    1.0 HexDownRightEdge rlineto

    1 1 DimY {
	1.0 HexDownLeftEdge rlineto
	1.0 HexLeftEdge rlineto
    } for

    1 1 DimX 1 sub {
	1.0 HexUpLeftEdge rlineto
	1.0 HexLeftEdge rlineto
    } for
    1.0 HexUpLeftEdge rlineto

    closepath
} def

/HexBoardOutline {
    HexBoardOutlinePath
    BoardOutlineWidth setlinewidth
    0 setgray
    stroke
} def

/HexBoardFillNoOutline {
    /shade exch def
    HexBoardOutlinePath
    0 setlinewidth
    shade setgray
    fill
} def

/HexBoardFill {
    /shade exch def
    shade HexBoardFillNoOutline
    HexBoardOutline
} def

/HexShannonGrid {
    1 1 DimY {
	/j exch def
	1 1 DimX {
	    /i exch def
	    i j HexVertex
	} for
    } for

    1 1 DimY {
	/j exch def
	1 j DimX j HexLine
    } for

    1 1 DimX {
	/i exch def
	i 1 i DimY HexLine
    } for

    2 1 DimX DimY add 2 sub {
	/i exch def
	i DimY lt {1 i} {i DimY sub 1 add DimY} ifelse
	i DimX lt {i 1} {DimX i DimX sub 1 add} ifelse
	HexLine
    } for
} def

/HexBoardGrid {
    1 1 DimY {
	/j exch def
	1 1 DimX {
	    /i exch def
	    i j Hexagon
	} for
    } for
} def

/DrawHexBoard {
    BoardShade HexBoardFill
    HexBoardGrid
} def

/DrawHexBoardNoOutline {
    1 1 DimY {
	/j exch def
	1 1 DimX {
	    /i exch def
	    i j BoardShade FillHexagon
	    i j Hexagon
	} for
    } for
} def

/YBoardOutlinePath {
    newpath
    0 0 HexLeftVertex moveto

    1 1 DimX {
	1.0 HexUpRightEdge rlineto
	1.0 HexRightEdge rlineto
    } for

    1 1 DimX {
	1.0 HexDownRightEdge rlineto
	1.0 HexDownLeftEdge rlineto
    } for

    1 1 DimX {
	1.0 HexLeftEdge rlineto
	1.0 HexUpLeftEdge rlineto
    } for

    closepath
} def

/YBoardOutline {
    YBoardOutlinePath
    BoardOutlineWidth setlinewidth
    0 setgray
    stroke
} def

/YBoardFill {
    /shade exch def
    YBoardOutlinePath
    0 setlinewidth
    shade setgray
    fill
    YBoardOutline
} def

/YBoardGrid {
    0 1 DimX 1 sub {
	/j exch def
	0 1 DimX 1 sub j sub {
	    /i exch def
	    i j Hexagon
	} for
    } for
} def

/DrawYBoard {
    BoardShade YBoardFill
    YBoardGrid
} def

/FontSelect { % bold italic FontSelect
    /italic exch def
    /bold exch def

    bold {
	italic {
	    /Times-BoldItalic findfont TextHeight scalefont setfont
	} {
	    /Times-Bold findfont TextHeight scalefont setfont
	}
	ifelse
    } {
	italic {
	    /Times-Italic findfont TextHeight scalefont setfont
	} {
	    /Times findfont TextHeight scalefont setfont
	}
	ifelse
    }
    ifelse
} def
	    
/LabelString {   % call: i j (str) strlen LabelString
    /strlen exch def
    /str exch def
    /j exch def
    /i exch def

    newpath
    i j HexCenterX TextWidth strlen mul 0.5 mul sub
    i j HexCenterY TextHeight 0.225 mul sub
    moveto
    str
    show
} def

/AbsLabelString {
    /strlen exch def
    /str exch def
    /y exch def
    /x exch def

    newpath
    x AbsCoordX TextWidth strlen mul 0.5 mul sub
    y AbsCoordY TextHeight 0.225 mul sub
    moveto
    str
    show
} def

/LabelStringVerb { % i j (str) strlen shade bold italic LabelStringVerb
    /italic exch def
    /bold exch def
    /shade exch def
    /strlen exch def
    /str exch def
    /j exch def
    /i exch def
    bold italic FontSelect
    shade setgray
    i j str strlen LabelString
} def

/HexBoardCoordinates {
    false true FontSelect
    CoordinatesShade setgray
    
    1 1 DimX {
	/i exch def
	i 0 Chars i 1 sub get 1 LabelString
	i DimY 1 add Chars i 1 sub get 1 LabelString
    } for

    1 1 DimY {
	/j exch def
	0 j Digits j 1 sub get
	DimY 9 gt {2} {1} ifelse
	LabelString
	DimX 1 add j Digits j 1 sub get
	DimY 9 gt {2} {1} ifelse
	LabelString
    } for
} def

/HexEdgePieceLocationBottomLeft {
    /dist exch def
    /midx DimX 1 add 2 div def
    /midy DimY 1 add 2 div def

    midx
    2 midx sub dist sub
} def

/HexEdgePieceLocationTopRight {
    /dist exch def
    /midx DimX 1 add 2 div def
    /midy DimY 1 add 2 div def

    midx
    DimX DimY add midx sub dist add
} def

/HexEdgePieceLocationTopLeft {
    /dist exch def
    /midx DimX 1 add 2 div def
    /midy DimY 1 add 2 div def
    
    2 midy sub dist sub
    midy
} def

/HexEdgePieceLocationBottomRight {
    /dist exch def
    /midx DimX 1 add 2 div def
    /midy DimY 1 add 2 div def
    
    DimX DimY add midy sub dist add
    midy
} def

/HexWhiteTerminal {
    (T) 1 HexWhiteLabelledPiece
} def

/HexBlackTerminal {
    (T) 1 HexBlackLabelledPiece
} def
    
/HexShannonTerminalBottomLeft {
    /dist exch def

    dist HexEdgePieceLocationBottomLeft
    HexWhiteTerminal
} def

/HexShannonTerminalTopRight {
    /dist exch def

    dist HexEdgePieceLocationTopRight
    HexWhiteTerminal
} def

/HexShannonTerminalConnectionsWhite {
    /dist exch def
    /midx DimX 1 add 2 div def
    /midy DimY 1 add 2 div def

    1 1 DimX {
	/i exch def
	dist HexEdgePieceLocationBottomLeft i 1 HexLine
	dist HexEdgePieceLocationTopRight i DimY HexLine
    } for

    dist HexShannonTerminalBottomLeft
    dist HexShannonTerminalTopRight
} def

/HexShannonTerminalTopLeft {
    /dist exch def

    dist HexEdgePieceLocationTopLeft
    HexBlackTerminal
} def

/HexShannonTerminalBottomRight {
    /dist exch def

    dist HexEdgePieceLocationBottomRight
    HexBlackTerminal
} def

/HexShannonTerminalConnectionsBlack {
    /dist exch def
    /midx DimX 1 add 2 div def
    /midy DimY 1 add 2 div def

    1 1 DimY {
	/j exch def
	dist HexEdgePieceLocationTopLeft 1 j HexLine
	dist HexEdgePieceLocationBottomRight DimX j HexLine
    } for

    dist HexShannonTerminalTopLeft
    dist HexShannonTerminalBottomRight
} def

/HexBoardEdgePieceTopLeft {
    /dist exch def
    dist HexEdgePieceLocationTopLeft HexBlackPiece
} def
/HexBoardEdgePieceBottomLeft {
    /dist exch def
    dist HexEdgePieceLocationBottomLeft HexWhitePiece
} def
/HexBoardEdgePieceTopRight {
    /dist exch def
    dist HexEdgePieceLocationTopRight HexWhitePiece
} def
/HexBoardEdgePieceBottomRight {
    /dist exch def
    dist HexEdgePieceLocationBottomRight HexBlackPiece
} def

/HexBoardEdgePieces { % extradist
    /dist exch def

    dist HexBoardEdgePieceTopLeft
    dist HexBoardEdgePieceBottomLeft
    dist HexBoardEdgePieceTopRight
    dist HexBoardEdgePieceBottomRight
} def

/HexDot { % i j size
    /size exch def
    /j exch def
    /i exch def

    0 setlinewidth
    0 setgray
    newpath
    i j HexCenterVertex size 0 360 arc
    fill
} def


/HexWhiteMarkedPiece {
    /j exch def
    /i exch def

    i j HexWhitePiece
    
    0 setgray
    0 setlinewidth
    newpath
    i j HexCenterVertex MarkerSize 0 360 arc
    fill
} def

/HexBlackMarkedPiece {
    /j exch def
    /i exch def

    i j HexBlackPiece
    
    1 setgray
    0 setlinewidth
    newpath
    i j HexCenterVertex MarkerSize 0 360 arc
    fill
} def


/HexDoubleMarker {
    /shaderight exch def
    /shadeleft exch def
    /j exch def
    /i exch def

    shadeleft setgray
    0 setlinewidth
    newpath
    i j HexCenterX MarkerSize sub i j HexCenterY MarkerSize 0 360 arc
    fill

    0 setgray
    CircleLineWidth setlinewidth
    newpath
    i j HexCenterX MarkerSize sub i j HexCenterY MarkerSize 0 360 arc
    stroke

    shaderight setgray
    0 setlinewidth
    newpath
    i j HexCenterX MarkerSize add i j HexCenterY MarkerSize 0 360 arc
    fill

    0 setgray
    CircleLineWidth setlinewidth
    newpath
    i j HexCenterX MarkerSize add i j HexCenterY MarkerSize 0 360 arc
    stroke
} def

/HexBlackWhiteMarker {
    /j exch def
    /i exch def
    i j 0.0 1.0 HexDoubleMarker
} def

/HexWhiteBlackMarker {
    /j exch def
    /i exch def
    i j 1.0 0.0 HexDoubleMarker
} def
        
/HexMarker {
    /j exch def
    /i exch def

    0 setlinewidth
    newpath
    i j HexCenterVertex MarkerSize 0 360 arc
    fill

    0 setgray
    CircleLineWidth setlinewidth
    newpath
    i j HexCenterVertex MarkerSize 0 360 arc
    stroke  
} def

/HexBlackMarker {
    /j exch def
    /i exch def

    0 setgray
    i j HexMarker
} def

/HexWhiteMarker {
    /j exch def
    /i exch def

    1 setgray
    i j HexMarker
} def
    
/HexVertex {
    /j exch def
    /i exch def

    i j GraphVertexSize HexDot
} def

/HexLine {
    /j2 exch def
    /i2 exch def
    /j1 exch def
    /i1 exch def

    GraphLineWidth setlinewidth
    0 setgray
    newpath
    i1 j1 HexCenterVertex moveto
    i2 j2 HexCenterVertex lineto
    stroke
} def

/HexPiece { % i j shade
    /shade exch def
    /j exch def
    /i exch def

    0 setlinewidth
    shade setgray
    newpath
    i j HexCenterVertex CircleRadius 0 360 arc
    fill

    0 setgray
    CircleLineWidth setlinewidth
    newpath
    i j HexCenterVertex CircleRadius 0 360 arc
    stroke
} def

/HexWhitePiece {
    /j exch def
    /i exch def

    i j 1.0 HexPiece
} def

/HexBlackPiece {
    /j exch def
    /i exch def

    i j 0.0 HexPiece
} def

/HexWhiteLabelledPiece { % i j (str) strlen
    /strlen exch def
    /str exch def
    /j exch def
    /i exch def

    i j HexWhitePiece
    i j str strlen 0.0 true true LabelStringVerb
} def

/HexBlackLabelledPiece { % i j (str) strlen
    /strlen exch def
    /str exch def
    /j exch def
    /i exch def

    i j HexBlackPiece
    i j str strlen 1.0 true true LabelStringVerb
} def

/DrawBox { % minx miny maxx maxy
    /maxy exch def
    /maxx exch def
    /miny exch def
    /minx exch def

    newpath
    minx miny moveto
    maxx minx sub 0 rlineto
    0 maxy miny sub rlineto
    minx maxx sub 0 rlineto
    0 miny maxy sub rlineto
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

/HexMoveEval {
    /eval exch def
    /j exch def
    /i exch def

%    i j 1.0 eval sub FadedBoardShade mul BoundedShadedHexagon
    newpath
    i j HexCenterVertex moveto
    MoveEvalSize HexLeftEdge rlineto
    MoveEvalSize HexUpRightEdge rlineto
    MoveEvalSize HexRightEdge rlineto
    MoveEvalSize HexDownRightEdge rlineto
    MoveEvalSize HexDownLeftEdge rlineto
    MoveEvalSize HexLeftEdge rlineto
    MoveEvalSize HexUpLeftEdge rlineto
%    eval MoveEvalSize mul HexLeftEdge rlineto
%    eval MoveEvalSize mul HexUpRightEdge rlineto
%    eval MoveEvalSize mul HexRightEdge rlineto
%    eval MoveEvalSize mul HexDownRightEdge rlineto
%    eval MoveEvalSize mul HexDownLeftEdge rlineto
%    eval MoveEvalSize mul HexLeftEdge rlineto
%    eval MoveEvalSize mul HexUpLeftEdge rlineto

    closepath

    0 setlinewidth
    1.0 eval sub BoardShade mul setgray
    fill
} def

/HexSymmetricalMoveEval {
    /eval exch def
    /j exch def
    /i exch def

    i j eval HexMoveEval
    DimX 1 add i sub DimY 1 add j sub eval HexMoveEval
} def

/AbsCoordX {
    /x exch def

    OriginX x Scale mul add
} def

/AbsCoordY {
    /y exch def

    OriginY y Scale mul add
} def

/AbsCoords {
    /y exch def
    /x exch def

    x AbsCoordX
    y AbsCoordY
} def

/AbsLine {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def

    newpath
    x1 y1 AbsCoords moveto
    x2 y2 AbsCoords lineto
    stroke
} def

/AbsDot {
    /size exch def
    /y exch def
    /x exch def

    0 setlinewidth
    0 setgray
    newpath
    x y AbsCoords size 0 360 arc
    fill
} def

/AbsVertex {
    /y exch def
    /x exch def

    x y GraphVertexSize AbsDot
} def

/HexUpArrow {
   /size exch def
   /j exch def
   /i exch def

   GraphLineWidth setlinewidth
   0 setgray
   newpath
   i j HexCenterVertex moveto
   0 CircleRadius size mul neg rmoveto
   0 CircleRadius size mul 2 mul rlineto
   CircleRadius size mul 4 div neg CircleRadius size mul 2 div neg rmoveto
   CircleRadius size mul 4 div CircleRadius size mul 2 div rlineto
   CircleRadius size mul 4 div CircleRadius size mul 2 div neg rlineto
   stroke
} def

/HexRightArrow {
   /size exch def
   /j exch def
   /i exch def

   GraphLineWidth setlinewidth
   0 setgray
   newpath
   i j HexCenterVertex moveto
   CircleRadius size mul neg 0 rmoveto
   CircleRadius size mul 2 mul 0 rlineto
   CircleRadius size mul 2 div neg CircleRadius size mul 4 div neg rmoveto
   CircleRadius size mul 2 div CircleRadius size mul 4 div rlineto
   CircleRadius size mul 2 div neg CircleRadius size mul 4 div rlineto
   stroke
} def

/HexLeftArrow {
   /size exch def
   /j exch def
   /i exch def

   GraphLineWidth setlinewidth
   0 setgray
   newpath
   i j HexCenterVertex moveto
   CircleRadius size mul 0 rmoveto
   CircleRadius size mul 2 mul neg 0 rlineto
   CircleRadius size mul 2 div CircleRadius size mul 4 div neg rmoveto
   CircleRadius size mul 2 div neg CircleRadius size mul 4 div rlineto
   CircleRadius size mul 2 div CircleRadius size mul 4 div rlineto
   stroke
} def

/HexBlackCapturedPiece {
    /j exch def
    /i exch def

    i j HexBlackMarkedPiece
} def

/HexWhiteCapturedPiece {
    /j exch def
    /i exch def

    i j HexWhiteMarkedPiece
} def

/HexDeadPiece {
    /j exch def
    /i exch def

    i j DeadPieceShade HexPiece
    
   GraphLineWidth setlinewidth
   0 setgray
   newpath
   i j HexCenterVertex moveto
   MarkerSize neg 0 rmoveto
   MarkerSize 2 mul 0 rlineto
   MarkerSize neg MarkerSize neg rmoveto
   0 MarkerSize 2 mul rlineto
   stroke
} def

/HexDominatedCell {
    /j exch def
    /i exch def

   GraphLineWidth setlinewidth
   0 setgray
   newpath
   i j HexCenterVertex moveto
   MarkerSize Root2 div neg MarkerSize Root2 div neg rmoveto
   MarkerSize Root2 mul MarkerSize Root2 mul rlineto
   MarkerSize Root2 mul neg 0 rmoveto
   MarkerSize Root2 mul MarkerSize Root2 mul neg rlineto
   stroke
} def


%%---------------- Program -------------------


DrawHexBoard
1 HexBoardEdgePieces
HexBoardCoordinates

3 1 (1) 1 HexWhiteLabelledPiece


%------------ Trailer --------------

showpage

%%EndDocument
 @endspecial 1157 w @beginspecial 0 @llx 0 @lly 68 @urx
43 @ury 680 @rwi @setspecial
%%BeginDocument: B3full.eps
%!PS-Adobe-3.0
%%Creator: Jack van Rijswijck, thanks to Cameron Browne
%%BoundingBox: 0 0 68 43
%%Pages: 0
%%EndComments

/OriginX -2 def
/OriginY 21 def
%---------------- Variables -------------------

/DimX 3 def
/DimY 3 def
/Scale 1.2 def


%---------------- Constants -------------------

/Root2 1.414213562 def
/Root3 1.732050808 def

/Chars {[(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)(n)]} def
/Digits {[(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)(12)(13)(14)]} def

/HexRadius 5 Scale mul def
/HexLineWidth 0.014 def
/CircleRadius 3.3 Scale mul def
/CircleLineWidth 0.346 def
/BoardOutlineWidth 0.5 def
%/TextHeight 4.5 def
/TextHeight 6 def
/TextWidth TextHeight 0.45 mul def
/BoardShade 0.8 def
/FadedBoardShade 0.9 def
/CoordinatesShade 0.5 def
/DeadPieceShade 0.6 def
/DeadCellShade 0.6 def
/EarLength 0.5 def
/GraphVertexSize 1.5 def
/GraphLineWidth 0.5 def
/MoveEvalSize 0.9 def
/FatLineWidth 1.0 def
/MarkerSize 1.2 def

%----------- Functions -------------

/HexCenterX { % X coordinate of center of cell: i j HexX
    /j exch def
    /i exch def
    OriginX i j add HexRadius mul 1.5 mul add
} def

/HexCenterY { % Y coordinate of center of cell: i j HexY
    /j exch def
    /i exch def
    OriginY i j sub HexRadius mul Root3 mul 2 div sub
} def

/HexCenterVertex {
    /j exch def
    /i exch def
    i j HexCenterX
    i j HexCenterY
} def

/HexTopLeftVertex {
    /j exch def
    /i exch def
    i j HexCenterX HexRadius 2 div sub
    i j HexCenterY HexRadius Root3 mul 2 div add
} def

/HexTopRightVertex {
    /j exch def
    /i exch def
    i j HexCenterX HexRadius 2 div add
    i j HexCenterY HexRadius Root3 mul 2 div add
} def

/HexRightVertex {
    /j exch def
    /i exch def
    i j HexCenterX HexRadius add
    i j HexCenterY 
} def

/HexBottomRightVertex {
    /j exch def
    /i exch def
    i j HexCenterX HexRadius 2 div add
    i j HexCenterY HexRadius Root3 mul 2 div sub
} def

/HexBottomLeftVertex {
    /j exch def
    /i exch def
    i j HexCenterX HexRadius 2 div sub
    i j HexCenterY HexRadius Root3 mul 2 div sub
} def

/HexLeftVertex {
    /j exch def
    /i exch def
    i j HexCenterX HexRadius sub
    i j HexCenterY 
} def

/HexUpRightEdge {
    /size exch def
    
    HexRadius 2 div size mul
    HexRadius Root3 mul 2 div size mul
} def

/HexRightEdge {
    /size exch def
    
    HexRadius size mul
    0
} def

/HexDownRightEdge {
    /size exch def

    HexRadius 2 div size mul
    HexRadius Root3 mul 2 div neg size mul
} def

/HexDownLeftEdge {
    /size exch def

    HexRadius 2 div neg size mul
    HexRadius Root3 mul 2 div neg size mul
} def

/HexLeftEdge {
    /size exch def

    HexRadius neg size mul
    0 size mul
} def

/HexUpLeftEdge {
    /size exch def

    HexRadius 2 div neg size mul
    HexRadius Root3 mul 2 div size mul
} def

/HexagonPath{
    /j exch def
    /i exch def

    newpath
    i j HexLeftVertex moveto

    1.0 HexUpRightEdge rlineto
    1.0 HexRightEdge rlineto
    1.0 HexDownRightEdge rlineto
    1.0 HexDownLeftEdge rlineto
    1.0 HexLeftEdge rlineto
    1.0 HexUpLeftEdge rlineto

    closepath
} def

/HexTopLeftEar {
    /j exch def
    /i exch def

    newpath
    i j HexTopLeftVertex moveto
    EarLength HexUpLeftEdge rlineto
    stroke
} def

/HexTopRightEar {
    /j exch def
    /i exch def

    newpath
    i j HexTopRightVertex moveto
    EarLength HexUpRightEdge rlineto
    stroke
} def

/HexRightEar {
    /j exch def
    /i exch def

    newpath
    i j HexRightVertex moveto
    EarLength HexRightEdge rlineto
    stroke
} def

/HexBottomRightEar {
    /j exch def
    /i exch def

    newpath
    i j HexBottomRightVertex moveto
    EarLength HexDownRightEdge rlineto
    stroke
} def

/HexBottomLeftEar {
    /j exch def
    /i exch def

    newpath
    i j HexBottomLeftVertex moveto
    EarLength HexDownLeftEdge rlineto
    stroke
} def

/HexLeftEar {
    /j exch def
    /i exch def

    newpath
    i j HexLeftVertex moveto
    EarLength HexLeftEdge rlineto
    stroke
} def

/HexagonEars {
    /j exch def
    /i exch def

    HexLineWidth setlinewidth
    
    i j HexTopLeftEar
    i j HexTopRightEar
    i j HexRightEar
    i j HexBottomRightEar
    i j HexBottomLeftEar
    i j HexLeftEar
} def

/HexDeadCell {
    /j exch def
    /i exch def

    i j DeadCellShade ShadedHexagon
} def

/HexDeadMarkedCell {
    /j exch def
    /i exch def

    i j DeadCellShade ShadedHexagon
    i j HexBlackMarker
} def
    
    
/ShadedHexagonWithEars {
    /shade exch def
    /j exch def
    /i exch def

    i j shade ShadedHexagon
    i j HexagonEars
} def
    
/BoundedShadedHexagonWithEars {
    /shade exch def
    /j exch def
    /i exch def

    i j shade BoundedShadedHexagon
    i j BoundedHexagonWithEars
} def

/BoundedHexagonWithEars {
    /j exch def
    /i exch def

    i j BoundedHexagon

    i 1 gt {
	j 1 gt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexLeftVertex moveto
	EarLength HexLeftEdge rlineto
	stroke

	j DimY lt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexTopLeftVertex moveto
	EarLength HexUpLeftEdge rlineto
	stroke
    }
    if

    i DimX lt {
	j DimY lt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexRightVertex moveto
	EarLength HexRightEdge rlineto
	stroke

	j 1 gt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexBottomRightVertex moveto
	EarLength HexDownRightEdge rlineto
	stroke
    }
    if

    j DimY lt {
	i 1 gt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexTopRightVertex moveto
	EarLength HexUpRightEdge rlineto
	stroke

	i DimX lt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexRightVertex moveto
	EarLength HexRightEdge rlineto
	stroke
    }
    if

    j 1 gt {
	i DimX lt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexBottomLeftVertex moveto
	EarLength HexDownLeftEdge rlineto
	stroke

	i 1 gt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexLeftVertex moveto
	EarLength HexLeftEdge rlineto
	stroke
    }
    if
} def

/BoundedShadedHexagon {
    /shade exch def
    /j exch def
    /i exch def

    i j shade FillHexagon
    i j BoundedHexagon
} def

/BoundedHexagon {
    /j exch def
    /i exch def

    0 setgray
    HexLineWidth setlinewidth
    i j HexagonPath
    stroke

    BoardOutlineWidth setlinewidth

    i 1 eq {
	newpath
	i j HexLeftVertex moveto
	1.0 HexUpRightEdge rlineto
	1.0 HexRightEdge rlineto
	stroke
    }
    if

    j DimY eq {
	newpath
	i j HexTopLeftVertex moveto
	1.0 HexRightEdge rlineto
	1.0 HexDownRightEdge rlineto
	stroke
    }
    if

    i DimX eq {
	newpath
	i j HexRightVertex moveto
	1.0 HexDownLeftEdge rlineto
	1.0 HexLeftEdge rlineto
	stroke
    }
    if

    j 1 eq {
	newpath
	i j HexBottomRightVertex moveto
	1.0 HexLeftEdge rlineto
	1.0 HexUpLeftEdge rlineto
	stroke
    }
    if
} def

/ShadedHexagon {
    /shade exch def
    /j exch def
    /i exch def

    i j shade FillHexagon
    i j Hexagon
} def

/Hexagon { % call: i j Hexagon
    /j exch def
    /i exch def

    i j HexagonPath
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

/FillHexagon {   % call: i j shade FillHexagon
    /shade exch def
    /j exch def
    /i exch def

    i j HexagonPath
    0 setlinewidth
    shade setgray
    fill
    i j Hexagon
} def

/HexBoardOutlinePath {
    newpath
    1 1 HexLeftVertex moveto

    1 1 DimY {
	1.0 HexUpRightEdge rlineto
	1.0 HexRightEdge rlineto
    } for

    1 1 DimX 1 sub {
	1.0 HexDownRightEdge rlineto
	1.0 HexRightEdge rlineto
    } for
    1.0 HexDownRightEdge rlineto

    1 1 DimY {
	1.0 HexDownLeftEdge rlineto
	1.0 HexLeftEdge rlineto
    } for

    1 1 DimX 1 sub {
	1.0 HexUpLeftEdge rlineto
	1.0 HexLeftEdge rlineto
    } for
    1.0 HexUpLeftEdge rlineto

    closepath
} def

/HexBoardOutline {
    HexBoardOutlinePath
    BoardOutlineWidth setlinewidth
    0 setgray
    stroke
} def

/HexBoardFillNoOutline {
    /shade exch def
    HexBoardOutlinePath
    0 setlinewidth
    shade setgray
    fill
} def

/HexBoardFill {
    /shade exch def
    shade HexBoardFillNoOutline
    HexBoardOutline
} def

/HexShannonGrid {
    1 1 DimY {
	/j exch def
	1 1 DimX {
	    /i exch def
	    i j HexVertex
	} for
    } for

    1 1 DimY {
	/j exch def
	1 j DimX j HexLine
    } for

    1 1 DimX {
	/i exch def
	i 1 i DimY HexLine
    } for

    2 1 DimX DimY add 2 sub {
	/i exch def
	i DimY lt {1 i} {i DimY sub 1 add DimY} ifelse
	i DimX lt {i 1} {DimX i DimX sub 1 add} ifelse
	HexLine
    } for
} def

/HexBoardGrid {
    1 1 DimY {
	/j exch def
	1 1 DimX {
	    /i exch def
	    i j Hexagon
	} for
    } for
} def

/DrawHexBoard {
    BoardShade HexBoardFill
    HexBoardGrid
} def

/DrawHexBoardNoOutline {
    1 1 DimY {
	/j exch def
	1 1 DimX {
	    /i exch def
	    i j BoardShade FillHexagon
	    i j Hexagon
	} for
    } for
} def

/YBoardOutlinePath {
    newpath
    0 0 HexLeftVertex moveto

    1 1 DimX {
	1.0 HexUpRightEdge rlineto
	1.0 HexRightEdge rlineto
    } for

    1 1 DimX {
	1.0 HexDownRightEdge rlineto
	1.0 HexDownLeftEdge rlineto
    } for

    1 1 DimX {
	1.0 HexLeftEdge rlineto
	1.0 HexUpLeftEdge rlineto
    } for

    closepath
} def

/YBoardOutline {
    YBoardOutlinePath
    BoardOutlineWidth setlinewidth
    0 setgray
    stroke
} def

/YBoardFill {
    /shade exch def
    YBoardOutlinePath
    0 setlinewidth
    shade setgray
    fill
    YBoardOutline
} def

/YBoardGrid {
    0 1 DimX 1 sub {
	/j exch def
	0 1 DimX 1 sub j sub {
	    /i exch def
	    i j Hexagon
	} for
    } for
} def

/DrawYBoard {
    BoardShade YBoardFill
    YBoardGrid
} def

/FontSelect { % bold italic FontSelect
    /italic exch def
    /bold exch def

    bold {
	italic {
	    /Times-BoldItalic findfont TextHeight scalefont setfont
	} {
	    /Times-Bold findfont TextHeight scalefont setfont
	}
	ifelse
    } {
	italic {
	    /Times-Italic findfont TextHeight scalefont setfont
	} {
	    /Times findfont TextHeight scalefont setfont
	}
	ifelse
    }
    ifelse
} def
	    
/LabelString {   % call: i j (str) strlen LabelString
    /strlen exch def
    /str exch def
    /j exch def
    /i exch def

    newpath
    i j HexCenterX TextWidth strlen mul 0.5 mul sub
    i j HexCenterY TextHeight 0.225 mul sub
    moveto
    str
    show
} def

/AbsLabelString {
    /strlen exch def
    /str exch def
    /y exch def
    /x exch def

    newpath
    x AbsCoordX TextWidth strlen mul 0.5 mul sub
    y AbsCoordY TextHeight 0.225 mul sub
    moveto
    str
    show
} def

/LabelStringVerb { % i j (str) strlen shade bold italic LabelStringVerb
    /italic exch def
    /bold exch def
    /shade exch def
    /strlen exch def
    /str exch def
    /j exch def
    /i exch def
    bold italic FontSelect
    shade setgray
    i j str strlen LabelString
} def

/HexBoardCoordinates {
    false true FontSelect
    CoordinatesShade setgray
    
    1 1 DimX {
	/i exch def
	i 0 Chars i 1 sub get 1 LabelString
	i DimY 1 add Chars i 1 sub get 1 LabelString
    } for

    1 1 DimY {
	/j exch def
	0 j Digits j 1 sub get
	DimY 9 gt {2} {1} ifelse
	LabelString
	DimX 1 add j Digits j 1 sub get
	DimY 9 gt {2} {1} ifelse
	LabelString
    } for
} def

/HexEdgePieceLocationBottomLeft {
    /dist exch def
    /midx DimX 1 add 2 div def
    /midy DimY 1 add 2 div def

    midx
    2 midx sub dist sub
} def

/HexEdgePieceLocationTopRight {
    /dist exch def
    /midx DimX 1 add 2 div def
    /midy DimY 1 add 2 div def

    midx
    DimX DimY add midx sub dist add
} def

/HexEdgePieceLocationTopLeft {
    /dist exch def
    /midx DimX 1 add 2 div def
    /midy DimY 1 add 2 div def
    
    2 midy sub dist sub
    midy
} def

/HexEdgePieceLocationBottomRight {
    /dist exch def
    /midx DimX 1 add 2 div def
    /midy DimY 1 add 2 div def
    
    DimX DimY add midy sub dist add
    midy
} def

/HexWhiteTerminal {
    (T) 1 HexWhiteLabelledPiece
} def

/HexBlackTerminal {
    (T) 1 HexBlackLabelledPiece
} def
    
/HexShannonTerminalBottomLeft {
    /dist exch def

    dist HexEdgePieceLocationBottomLeft
    HexWhiteTerminal
} def

/HexShannonTerminalTopRight {
    /dist exch def

    dist HexEdgePieceLocationTopRight
    HexWhiteTerminal
} def

/HexShannonTerminalConnectionsWhite {
    /dist exch def
    /midx DimX 1 add 2 div def
    /midy DimY 1 add 2 div def

    1 1 DimX {
	/i exch def
	dist HexEdgePieceLocationBottomLeft i 1 HexLine
	dist HexEdgePieceLocationTopRight i DimY HexLine
    } for

    dist HexShannonTerminalBottomLeft
    dist HexShannonTerminalTopRight
} def

/HexShannonTerminalTopLeft {
    /dist exch def

    dist HexEdgePieceLocationTopLeft
    HexBlackTerminal
} def

/HexShannonTerminalBottomRight {
    /dist exch def

    dist HexEdgePieceLocationBottomRight
    HexBlackTerminal
} def

/HexShannonTerminalConnectionsBlack {
    /dist exch def
    /midx DimX 1 add 2 div def
    /midy DimY 1 add 2 div def

    1 1 DimY {
	/j exch def
	dist HexEdgePieceLocationTopLeft 1 j HexLine
	dist HexEdgePieceLocationBottomRight DimX j HexLine
    } for

    dist HexShannonTerminalTopLeft
    dist HexShannonTerminalBottomRight
} def

/HexBoardEdgePieceTopLeft {
    /dist exch def
    dist HexEdgePieceLocationTopLeft HexBlackPiece
} def
/HexBoardEdgePieceBottomLeft {
    /dist exch def
    dist HexEdgePieceLocationBottomLeft HexWhitePiece
} def
/HexBoardEdgePieceTopRight {
    /dist exch def
    dist HexEdgePieceLocationTopRight HexWhitePiece
} def
/HexBoardEdgePieceBottomRight {
    /dist exch def
    dist HexEdgePieceLocationBottomRight HexBlackPiece
} def

/HexBoardEdgePieces { % extradist
    /dist exch def

    dist HexBoardEdgePieceTopLeft
    dist HexBoardEdgePieceBottomLeft
    dist HexBoardEdgePieceTopRight
    dist HexBoardEdgePieceBottomRight
} def

/HexDot { % i j size
    /size exch def
    /j exch def
    /i exch def

    0 setlinewidth
    0 setgray
    newpath
    i j HexCenterVertex size 0 360 arc
    fill
} def


/HexWhiteMarkedPiece {
    /j exch def
    /i exch def

    i j HexWhitePiece
    
    0 setgray
    0 setlinewidth
    newpath
    i j HexCenterVertex MarkerSize 0 360 arc
    fill
} def

/HexBlackMarkedPiece {
    /j exch def
    /i exch def

    i j HexBlackPiece
    
    1 setgray
    0 setlinewidth
    newpath
    i j HexCenterVertex MarkerSize 0 360 arc
    fill
} def


/HexDoubleMarker {
    /shaderight exch def
    /shadeleft exch def
    /j exch def
    /i exch def

    shadeleft setgray
    0 setlinewidth
    newpath
    i j HexCenterX MarkerSize sub i j HexCenterY MarkerSize 0 360 arc
    fill

    0 setgray
    CircleLineWidth setlinewidth
    newpath
    i j HexCenterX MarkerSize sub i j HexCenterY MarkerSize 0 360 arc
    stroke

    shaderight setgray
    0 setlinewidth
    newpath
    i j HexCenterX MarkerSize add i j HexCenterY MarkerSize 0 360 arc
    fill

    0 setgray
    CircleLineWidth setlinewidth
    newpath
    i j HexCenterX MarkerSize add i j HexCenterY MarkerSize 0 360 arc
    stroke
} def

/HexBlackWhiteMarker {
    /j exch def
    /i exch def
    i j 0.0 1.0 HexDoubleMarker
} def

/HexWhiteBlackMarker {
    /j exch def
    /i exch def
    i j 1.0 0.0 HexDoubleMarker
} def
        
/HexMarker {
    /j exch def
    /i exch def

    0 setlinewidth
    newpath
    i j HexCenterVertex MarkerSize 0 360 arc
    fill

    0 setgray
    CircleLineWidth setlinewidth
    newpath
    i j HexCenterVertex MarkerSize 0 360 arc
    stroke  
} def

/HexBlackMarker {
    /j exch def
    /i exch def

    0 setgray
    i j HexMarker
} def

/HexWhiteMarker {
    /j exch def
    /i exch def

    1 setgray
    i j HexMarker
} def
    
/HexVertex {
    /j exch def
    /i exch def

    i j GraphVertexSize HexDot
} def

/HexLine {
    /j2 exch def
    /i2 exch def
    /j1 exch def
    /i1 exch def

    GraphLineWidth setlinewidth
    0 setgray
    newpath
    i1 j1 HexCenterVertex moveto
    i2 j2 HexCenterVertex lineto
    stroke
} def

/HexPiece { % i j shade
    /shade exch def
    /j exch def
    /i exch def

    0 setlinewidth
    shade setgray
    newpath
    i j HexCenterVertex CircleRadius 0 360 arc
    fill

    0 setgray
    CircleLineWidth setlinewidth
    newpath
    i j HexCenterVertex CircleRadius 0 360 arc
    stroke
} def

/HexWhitePiece {
    /j exch def
    /i exch def

    i j 1.0 HexPiece
} def

/HexBlackPiece {
    /j exch def
    /i exch def

    i j 0.0 HexPiece
} def

/HexWhiteLabelledPiece { % i j (str) strlen
    /strlen exch def
    /str exch def
    /j exch def
    /i exch def

    i j HexWhitePiece
    i j str strlen 0.0 true true LabelStringVerb
} def

/HexBlackLabelledPiece { % i j (str) strlen
    /strlen exch def
    /str exch def
    /j exch def
    /i exch def

    i j HexBlackPiece
    i j str strlen 1.0 true true LabelStringVerb
} def

/DrawBox { % minx miny maxx maxy
    /maxy exch def
    /maxx exch def
    /miny exch def
    /minx exch def

    newpath
    minx miny moveto
    maxx minx sub 0 rlineto
    0 maxy miny sub rlineto
    minx maxx sub 0 rlineto
    0 miny maxy sub rlineto
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

/HexMoveEval {
    /eval exch def
    /j exch def
    /i exch def

%    i j 1.0 eval sub FadedBoardShade mul BoundedShadedHexagon
    newpath
    i j HexCenterVertex moveto
    MoveEvalSize HexLeftEdge rlineto
    MoveEvalSize HexUpRightEdge rlineto
    MoveEvalSize HexRightEdge rlineto
    MoveEvalSize HexDownRightEdge rlineto
    MoveEvalSize HexDownLeftEdge rlineto
    MoveEvalSize HexLeftEdge rlineto
    MoveEvalSize HexUpLeftEdge rlineto
%    eval MoveEvalSize mul HexLeftEdge rlineto
%    eval MoveEvalSize mul HexUpRightEdge rlineto
%    eval MoveEvalSize mul HexRightEdge rlineto
%    eval MoveEvalSize mul HexDownRightEdge rlineto
%    eval MoveEvalSize mul HexDownLeftEdge rlineto
%    eval MoveEvalSize mul HexLeftEdge rlineto
%    eval MoveEvalSize mul HexUpLeftEdge rlineto

    closepath

    0 setlinewidth
    1.0 eval sub BoardShade mul setgray
    fill
} def

/HexSymmetricalMoveEval {
    /eval exch def
    /j exch def
    /i exch def

    i j eval HexMoveEval
    DimX 1 add i sub DimY 1 add j sub eval HexMoveEval
} def

/AbsCoordX {
    /x exch def

    OriginX x Scale mul add
} def

/AbsCoordY {
    /y exch def

    OriginY y Scale mul add
} def

/AbsCoords {
    /y exch def
    /x exch def

    x AbsCoordX
    y AbsCoordY
} def

/AbsLine {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def

    newpath
    x1 y1 AbsCoords moveto
    x2 y2 AbsCoords lineto
    stroke
} def

/AbsDot {
    /size exch def
    /y exch def
    /x exch def

    0 setlinewidth
    0 setgray
    newpath
    x y AbsCoords size 0 360 arc
    fill
} def

/AbsVertex {
    /y exch def
    /x exch def

    x y GraphVertexSize AbsDot
} def

/HexUpArrow {
   /size exch def
   /j exch def
   /i exch def

   GraphLineWidth setlinewidth
   0 setgray
   newpath
   i j HexCenterVertex moveto
   0 CircleRadius size mul neg rmoveto
   0 CircleRadius size mul 2 mul rlineto
   CircleRadius size mul 4 div neg CircleRadius size mul 2 div neg rmoveto
   CircleRadius size mul 4 div CircleRadius size mul 2 div rlineto
   CircleRadius size mul 4 div CircleRadius size mul 2 div neg rlineto
   stroke
} def

/HexRightArrow {
   /size exch def
   /j exch def
   /i exch def

   GraphLineWidth setlinewidth
   0 setgray
   newpath
   i j HexCenterVertex moveto
   CircleRadius size mul neg 0 rmoveto
   CircleRadius size mul 2 mul 0 rlineto
   CircleRadius size mul 2 div neg CircleRadius size mul 4 div neg rmoveto
   CircleRadius size mul 2 div CircleRadius size mul 4 div rlineto
   CircleRadius size mul 2 div neg CircleRadius size mul 4 div rlineto
   stroke
} def

/HexLeftArrow {
   /size exch def
   /j exch def
   /i exch def

   GraphLineWidth setlinewidth
   0 setgray
   newpath
   i j HexCenterVertex moveto
   CircleRadius size mul 0 rmoveto
   CircleRadius size mul 2 mul neg 0 rlineto
   CircleRadius size mul 2 div CircleRadius size mul 4 div neg rmoveto
   CircleRadius size mul 2 div neg CircleRadius size mul 4 div rlineto
   CircleRadius size mul 2 div CircleRadius size mul 4 div rlineto
   stroke
} def

/HexBlackCapturedPiece {
    /j exch def
    /i exch def

    i j HexBlackMarkedPiece
} def

/HexWhiteCapturedPiece {
    /j exch def
    /i exch def

    i j HexWhiteMarkedPiece
} def

/HexDeadPiece {
    /j exch def
    /i exch def

    i j DeadPieceShade HexPiece
    
   GraphLineWidth setlinewidth
   0 setgray
   newpath
   i j HexCenterVertex moveto
   MarkerSize neg 0 rmoveto
   MarkerSize 2 mul 0 rlineto
   MarkerSize neg MarkerSize neg rmoveto
   0 MarkerSize 2 mul rlineto
   stroke
} def

/HexDominatedCell {
    /j exch def
    /i exch def

   GraphLineWidth setlinewidth
   0 setgray
   newpath
   i j HexCenterVertex moveto
   MarkerSize Root2 div neg MarkerSize Root2 div neg rmoveto
   MarkerSize Root2 mul MarkerSize Root2 mul rlineto
   MarkerSize Root2 mul neg 0 rmoveto
   MarkerSize Root2 mul MarkerSize Root2 mul neg rlineto
   stroke
} def


%%---------------- Program -------------------


DrawHexBoard
1 HexBoardEdgePieces
HexBoardCoordinates

3 1 (1) 1 HexWhiteLabelledPiece
2 3 (2) 1 HexBlackLabelledPiece
1 3 (3) 1 HexWhiteLabelledPiece
2 2 (4) 1 HexBlackLabelledPiece
1 2 (5) 1 HexWhiteLabelledPiece
1 1 (6) 1 HexBlackLabelledPiece
2 1 (7) 1 HexWhiteLabelledPiece


%------------ Trailer --------------

showpage

%%EndDocument
 @endspecial 738 2505 a Fq(Fig.)13 b(1.)26 b Fs(The)g(start)g(\(left\))
g(and)f(\014nish)g(\(righ)n(t\))h(of)g(a)g(Hex)f(game)i(on)e(a)h(3)p
Fr(\002)p Fs(3)h(b)r(oard.)523 2959 y Fp(1)112 b(In)m(tro)s(duction)523
3156 y Ft(An)31 b(in)n(triguing)f(asp)r(ect)g(of)h(the)g(game)f(of)g
(Hex)2009 3126 y Fo(1)2077 3156 y Ft(is)h(that)g(for)f(all)g
Fn(n)p Fm(\002)p Fn(n)g Ft(b)r(oards,)g(although)523
3255 y(a)d(winning)g(\014rst-pla)n(y)n(er)e(strategy)h(is)i(kno)n(wn)e
(to)i(exist)f([9,)13 b(1,)h(2],)27 b(explicit)g(suc)n(h)g(strategies)
523 3355 y(ha)n(v)n(e)19 b(b)r(een)i(found)g(only)f(for)g(small)g(b)r
(oards.)g(While)h(\014nding)g(suc)n(h)f(strategies)f(is)h(routine)g(on)
523 3455 y(v)n(ery)25 b(small)g(b)r(oards,)g(the)h(task)g(quic)n(kly)f
(b)r(ecomes)g(c)n(hallenging)g(as)g(b)r(oard)g(size)g(increases.)523
3554 y(This)f(is)g(not)g(surprising)f(since,)h(as)f(Stefan)i(Reisc)n(h)
f(has)f(sho)n(wn,)h(determining)g(the)g(winner)523 3654
y(of)k(arbitrary)d(Hex)j(p)r(ositions)f(is)g(PSP)-7 b(A)n(CE-complete)
26 b([11].)648 3754 y(F)-7 b(or)38 b(7)p Fm(\002)p Ft(7)n(,)h(8)p
Fm(\002)p Ft(8)o(,)g(and)f(9)p Fm(\002)p Ft(9)f(b)r(oards,)h(Jing)g(Y)
-7 b(ang)38 b(found)h(strategies)f(b)n(y)g(hand)h([13,)523
3853 y(15,)13 b(16,)g(12].)27 b(Later,)h(Ha)n(yw)n(ard)e(et)j(al.)f
(found)g(other)g(7)p Fm(\002)p Ft(7)f(strategies)g(b)n(y)h(computer)g
([4,)13 b(5],)p 523 3926 473 4 v 544 3979 a Fl(?)606
4011 y Fs(authors)21 b(gratefully)h(ac)n(kno)n(wledge)g(the)e(supp)r
(ort)h(of)g(NSER)n(C)f(and)h(the)f(Univ)n(ersit)n(y)g(of)i(Alb)r(erta)
606 4102 y(Games)27 b(Group.)546 4162 y Fk(1)606 4194
y Fs(Hex)20 b(is)i(the)f(classic)i(t)n(w)n(o-pla)n(y)n(er)e(b)r(oard)h
(game)g(in)n(v)n(en)n(ted)d(b)n(y)i(Piet)g(Hein)g(in)g(1942)i(and)e
(indep)r(en-)606 4285 y(den)n(tly)k(b)n(y)f(John)i(Nash)g(around)f
(1948)i([9,)14 b(1,)g(2,)f(6{8].)28 b(The)d(game)i(is)f(named)g(after)g
(the)f(b)r(oard,)606 4376 y(whic)n(h)j(consists)i(of)f(a)g
(parallelogram-shap)r(ed)i Fj(m)p Fr(\002)p Fj(n)d Fs(arra)n(y)g(of)h
(hexagons,)g(also)h(called)f(cells.)606 4468 y(Eac)n(h)e(pla)n(y)n(er)g
(is)g(assigned)h(a)f(set)g(of)g(stones)h(and)e(t)n(w)n(o)h(opp)r(osing)
h(b)r(oard)f(sides;)h(pla)n(y)n(ers)f(alter-)606 4559
y(nately)21 b(place)h(a)g(stone)f(on)h(an)f(uno)r(ccupied)g(cell;)h
(the)f(\014rst)g(pla)n(y)n(er)g(to)h(form)g(a)g(path)f(connecting)606
4650 y(her)29 b(t)n(w)n(o)h(sides)g(with)g(her)f(stones)h(wins)g(the)f
(game.)h(F)-6 b(or)30 b(example,)g(Fig.)g(1,)g(sho)n(ws)g(the)f(start)
606 4742 y(and)34 b(end)g(of)i(a)f(game)g(on)g(a)f(3)p
Fr(\002)p Fs(3)i(b)r(oard.)f(White)f(succeeds)h(in)g(joining)g(her)g(t)
n(w)n(o)g(sides,)g(so)606 4833 y(White)23 b(wins)h(this)g(game.)g(F)-6
b(or)23 b(more)h(on)f(Hex,)g(see)h(the)f(recen)n(t)g(surv)n(ey)f(b)n(y)
h(Ha)n(yw)n(ard)g(and)g(V)-6 b(an)606 4924 y(Rijswijc)n(k)27
b([3])g(or)f(the)f(w)n(eb)h(page)g(b)n(y)f(Thomas)h(Maarup)h([7].)p
eop end
%%Page: 2 2
TeXDict begin 2 1 bop 523 232 a Fs(I)r(I)2094 393 y
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.45842 3.2292 1.50693
} false /N@T-0 16 {InitRnode } NewNode end end
 2094
393 a Fi(c1)706 535 y
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-0 16 {InitRnode } NewNode end end
 706 535 a Fi(a1)734 523 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 734 523
a 707 678 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.45842 3.2292 1.50693
} false /N@T-0-0-0 16 {InitRnode } NewNode end end
 707 678 a Fi(c2)734 666 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0 /N@T-0-0-0 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 734 666 a 540 821
a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-0-0-0 16 {InitRnode } NewNode end end
 540 821 a Fi(a2)568 808 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0 /N@T-0-0-0-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 568 808 a 541 964 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.45842 3.2292 1.50693
} false /N@T-0-0-0-0-0 16 {InitRnode } NewNode end end
 541 964
a Fi(c3)568 951 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0-0 /N@T-0-0-0-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 568 951 a 605 821 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-0-0-1 16 {InitRnode } NewNode end end
 605 821 a Fi(a3)633
808 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0 /N@T-0-0-0-1 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 633 808 a 606 964 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.45842 3.2292 1.50693
} false /N@T-0-0-0-1-0 16 {InitRnode } NewNode end end
 606 964 a Fi(c3)633 951 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0-1 /N@T-0-0-0-1-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 633
951 a 670 821 a
 tx@Dict begin tx@NodeDict begin {3.47221 0.0 7.1529 3.57645 1.50693
} false /N@T-0-0-0-2 16 {InitRnode } NewNode end end
 670 821 a Fi(b1)699 808 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0 /N@T-0-0-0-2 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 699 808 a 672
964 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.45842 3.2292 1.50693
} false /N@T-0-0-0-2-0 16 {InitRnode } NewNode end end
 672 964 a Fi(c3)699 951 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0-2 /N@T-0-0-0-2-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 699 951 a 737 821 a
 tx@Dict begin tx@NodeDict begin {3.47221 0.0 7.1529 3.57645 1.50693
} false /N@T-0-0-0-3 16 {InitRnode } NewNode end end
 737
821 a Fi(b2)767 808 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0 /N@T-0-0-0-3 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 767 808 a 740 964 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.45842 3.2292 1.50693
} false /N@T-0-0-0-3-0 16 {InitRnode } NewNode end end
 740 964 a Fi(c3)767
951 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0-3 /N@T-0-0-0-3-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 767 951 a 805 821 a
 tx@Dict begin tx@NodeDict begin {3.47221 0.0 7.1529 3.57645 1.50693
} false /N@T-0-0-0-4 16 {InitRnode } NewNode end end
 805 821 a Fi(b3)835 808 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0 /N@T-0-0-0-4 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 835
808 a 808 964 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.45842 3.2292 1.50693
} false /N@T-0-0-0-4-0 16 {InitRnode } NewNode end end
 808 964 a Fi(c3)835 951 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0-4 /N@T-0-0-0-4-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 835 951 a 873
821 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.45842 3.2292 1.50693
} false /N@T-0-0-0-5 16 {InitRnode } NewNode end end
 873 821 a Fi(c3)900 808 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0 /N@T-0-0-0-5 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 900 808 a 870 964 a
 tx@Dict begin tx@NodeDict begin {3.47221 0.0 7.1529 3.57645 1.50693
} false /N@T-0-0-0-5-0 16 {InitRnode } NewNode end end
 870
964 a Fi(b3)900 951 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0-5 /N@T-0-0-0-5-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 900 951 a 1102 535 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-1 16 {InitRnode } NewNode end end
 1102 535 a
Fi(a2)1130 523 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-1 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 1130 523 a 1103 678 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.45842 3.2292 1.50693
} false /N@T-0-1-0 16 {InitRnode } NewNode end end
 1103 678 a Fi(c2)1130
666 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-1 /N@T-0-1-0 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1130 666 a 936 821 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-1-0-0 16 {InitRnode } NewNode end end
 936 821 a Fi(a1)964 808 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-1-0 /N@T-0-1-0-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end

964 808 a 937 964 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.45842 3.2292 1.50693
} false /N@T-0-1-0-0-0 16 {InitRnode } NewNode end end
 937 964 a Fi(c3)964 951 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-1-0-0 /N@T-0-1-0-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 964 951
a 1001 821 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-1-0-1 16 {InitRnode } NewNode end end
 1001 821 a Fi(a3)1029 808 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-1-0 /N@T-0-1-0-1 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1029 808 a 1002
964 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.45842 3.2292 1.50693
} false /N@T-0-1-0-1-0 16 {InitRnode } NewNode end end
 1002 964 a Fi(c3)1029 951 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-1-0-1 /N@T-0-1-0-1-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1029 951 a 1066 821
a
 tx@Dict begin tx@NodeDict begin {3.47221 0.0 7.1529 3.57645 1.50693
} false /N@T-0-1-0-2 16 {InitRnode } NewNode end end
 1066 821 a Fi(b1)1095 808 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-1-0 /N@T-0-1-0-2 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1095 808 a 1068 964 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.45842 3.2292 1.50693
} false /N@T-0-1-0-2-0 16 {InitRnode } NewNode end end
 1068
964 a Fi(c3)1095 951 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-1-0-2 /N@T-0-1-0-2-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1095 951 a 1133 821 a
 tx@Dict begin tx@NodeDict begin {3.47221 0.0 7.1529 3.57645 1.50693
} false /N@T-0-1-0-3 16 {InitRnode } NewNode end end
 1133 821
a Fi(b2)1163 808 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-1-0 /N@T-0-1-0-3 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1163 808 a 1136 964 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.45842 3.2292 1.50693
} false /N@T-0-1-0-3-0 16 {InitRnode } NewNode end end
 1136 964 a Fi(c3)1163
951 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-1-0-3 /N@T-0-1-0-3-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1163 951 a 1201 821 a
 tx@Dict begin tx@NodeDict begin {3.47221 0.0 7.1529 3.57645 1.50693
} false /N@T-0-1-0-4 16 {InitRnode } NewNode end end
 1201 821 a Fi(b3)1231 808
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-1-0 /N@T-0-1-0-4 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1231 808 a 1204 964 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.45842 3.2292 1.50693
} false /N@T-0-1-0-4-0 16 {InitRnode } NewNode end end
 1204 964 a Fi(c3)1231 951 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-1-0-4 /N@T-0-1-0-4-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1231
951 a 1269 821 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.45842 3.2292 1.50693
} false /N@T-0-1-0-5 16 {InitRnode } NewNode end end
 1269 821 a Fi(c3)1296 808 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-1-0 /N@T-0-1-0-5 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1296 808
a 1266 964 a
 tx@Dict begin tx@NodeDict begin {3.47221 0.0 7.1529 3.57645 1.50693
} false /N@T-0-1-0-5-0 16 {InitRnode } NewNode end end
 1266 964 a Fi(b3)1296 951 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-1-0-5 /N@T-0-1-0-5-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1296 951 a 1498
535 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-2 16 {InitRnode } NewNode end end
 1498 535 a Fi(a3)1526 523 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-2 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 1526 523 a 1499 678
a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.45842 3.2292 1.50693
} false /N@T-0-2-0 16 {InitRnode } NewNode end end
 1499 678 a Fi(c2)1526 666 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-2 /N@T-0-2-0 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1526 666 a 1332 821 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-2-0-0 16 {InitRnode } NewNode end end
 1332
821 a Fi(a1)1360 808 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-2-0 /N@T-0-2-0-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1360 808 a 1333 964 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.45842 3.2292 1.50693
} false /N@T-0-2-0-0-0 16 {InitRnode } NewNode end end
 1333 964
a Fi(c3)1360 951 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-2-0-0 /N@T-0-2-0-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1360 951 a 1397 821 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-2-0-1 16 {InitRnode } NewNode end end
 1397 821 a Fi(a2)1425
808 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-2-0 /N@T-0-2-0-1 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1425 808 a 1398 964 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.45842 3.2292 1.50693
} false /N@T-0-2-0-1-0 16 {InitRnode } NewNode end end
 1398 964 a Fi(c3)1425 951
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-2-0-1 /N@T-0-2-0-1-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1425 951 a 1462 821 a
 tx@Dict begin tx@NodeDict begin {3.47221 0.0 7.1529 3.57645 1.50693
} false /N@T-0-2-0-2 16 {InitRnode } NewNode end end
 1462 821 a Fi(b1)1491 808 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-2-0 /N@T-0-2-0-2 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1491
808 a 1464 964 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.45842 3.2292 1.50693
} false /N@T-0-2-0-2-0 16 {InitRnode } NewNode end end
 1464 964 a Fi(c3)1491 951 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-2-0-2 /N@T-0-2-0-2-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1491 951
a 1529 821 a
 tx@Dict begin tx@NodeDict begin {3.47221 0.0 7.1529 3.57645 1.50693
} false /N@T-0-2-0-3 16 {InitRnode } NewNode end end
 1529 821 a Fi(b2)1559 808 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-2-0 /N@T-0-2-0-3 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1559 808 a 1532
964 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.45842 3.2292 1.50693
} false /N@T-0-2-0-3-0 16 {InitRnode } NewNode end end
 1532 964 a Fi(c3)1559 951 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-2-0-3 /N@T-0-2-0-3-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1559 951 a 1597 821
a
 tx@Dict begin tx@NodeDict begin {3.47221 0.0 7.1529 3.57645 1.50693
} false /N@T-0-2-0-4 16 {InitRnode } NewNode end end
 1597 821 a Fi(b3)1627 808 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-2-0 /N@T-0-2-0-4 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1627 808 a 1600 964 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.45842 3.2292 1.50693
} false /N@T-0-2-0-4-0 16 {InitRnode } NewNode end end
 1600
964 a Fi(c3)1627 951 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-2-0-4 /N@T-0-2-0-4-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1627 951 a 1665 821 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.45842 3.2292 1.50693
} false /N@T-0-2-0-5 16 {InitRnode } NewNode end end
 1665 821
a Fi(c3)1692 808 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-2-0 /N@T-0-2-0-5 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1692 808 a 1662 964 a
 tx@Dict begin tx@NodeDict begin {3.47221 0.0 7.1529 3.57645 1.50693
} false /N@T-0-2-0-5-0 16 {InitRnode } NewNode end end
 1662 964 a Fi(b3)1692
951 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-2-0-5 /N@T-0-2-0-5-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1692 951 a 1891 535 a
 tx@Dict begin tx@NodeDict begin {3.47221 0.0 7.1529 3.57645 1.50693
} false /N@T-0-3 16 {InitRnode } NewNode end end
 1891 535 a Fi(b1)1921 523
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-3 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 1921 523 a 1894 678 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.45842 3.2292 1.50693
} false /N@T-0-3-0 16 {InitRnode } NewNode end end
 1894 678 a Fi(c2)1921 666 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-3 /N@T-0-3-0 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1921
666 a 1728 821 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-3-0-0 16 {InitRnode } NewNode end end
 1728 821 a Fi(a1)1756 808 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-3-0 /N@T-0-3-0-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1756 808
a 1729 964 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.45842 3.2292 1.50693
} false /N@T-0-3-0-0-0 16 {InitRnode } NewNode end end
 1729 964 a Fi(c3)1756 951 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-3-0-0 /N@T-0-3-0-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1756 951 a 1793
821 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-3-0-1 16 {InitRnode } NewNode end end
 1793 821 a Fi(a2)1821 808 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-3-0 /N@T-0-3-0-1 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1821 808 a 1794 964
a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.45842 3.2292 1.50693
} false /N@T-0-3-0-1-0 16 {InitRnode } NewNode end end
 1794 964 a Fi(c3)1821 951 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-3-0-1 /N@T-0-3-0-1-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1821 951 a 1858 821 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-3-0-2 16 {InitRnode } NewNode end end
 1858
821 a Fi(a3)1886 808 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-3-0 /N@T-0-3-0-2 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1886 808 a 1859 964 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.45842 3.2292 1.50693
} false /N@T-0-3-0-2-0 16 {InitRnode } NewNode end end
 1859 964
a Fi(c3)1886 951 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-3-0-2 /N@T-0-3-0-2-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1886 951 a 1923 821 a
 tx@Dict begin tx@NodeDict begin {3.47221 0.0 7.1529 3.57645 1.50693
} false /N@T-0-3-0-3 16 {InitRnode } NewNode end end
 1923 821 a Fi(b2)1952
808 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-3-0 /N@T-0-3-0-3 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1952 808 a 1925 964 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.45842 3.2292 1.50693
} false /N@T-0-3-0-3-0 16 {InitRnode } NewNode end end
 1925 964 a Fi(c3)1952 951
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-3-0-3 /N@T-0-3-0-3-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1952 951 a 1990 821 a
 tx@Dict begin tx@NodeDict begin {3.47221 0.0 7.1529 3.57645 1.50693
} false /N@T-0-3-0-4 16 {InitRnode } NewNode end end
 1990 821 a Fi(b3)2020 808 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-3-0 /N@T-0-3-0-4 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2020
808 a 1993 964 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.45842 3.2292 1.50693
} false /N@T-0-3-0-4-0 16 {InitRnode } NewNode end end
 1993 964 a Fi(c3)2020 951 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-3-0-4 /N@T-0-3-0-4-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2020 951
a 2058 821 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.45842 3.2292 1.50693
} false /N@T-0-3-0-5 16 {InitRnode } NewNode end end
 2058 821 a Fi(c3)2085 808 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-3-0 /N@T-0-3-0-5 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2085 808 a 2055
964 a
 tx@Dict begin tx@NodeDict begin {3.47221 0.0 7.1529 3.57645 1.50693
} false /N@T-0-3-0-5-0 16 {InitRnode } NewNode end end
 2055 964 a Fi(b3)2085 951 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-3-0-5 /N@T-0-3-0-5-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2085 951 a 2284 535
a
 tx@Dict begin tx@NodeDict begin {3.47221 0.0 7.1529 3.57645 1.50693
} false /N@T-0-4 16 {InitRnode } NewNode end end
 2284 535 a Fi(b2)2314 523 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-4 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 2314 523 a 2287 678 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.45842 3.2292 1.50693
} false /N@T-0-4-0 16 {InitRnode } NewNode end end
 2287
678 a Fi(c2)2314 666 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-4 /N@T-0-4-0 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 2314 666 a 2121 821 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-4-0-0 16 {InitRnode } NewNode end end
 2121 821
a Fi(a1)2150 808 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-4-0 /N@T-0-4-0-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2150 808 a 2123 964 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.45842 3.2292 1.50693
} false /N@T-0-4-0-0-0 16 {InitRnode } NewNode end end
 2123 964 a Fi(c3)2150
951 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-4-0-0 /N@T-0-4-0-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2150 951 a 2186 821 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-4-0-1 16 {InitRnode } NewNode end end
 2186 821 a Fi(a2)2214 808
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-4-0 /N@T-0-4-0-1 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2214 808 a 2187 964 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.45842 3.2292 1.50693
} false /N@T-0-4-0-1-0 16 {InitRnode } NewNode end end
 2187 964 a Fi(c3)2214 951 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-4-0-1 /N@T-0-4-0-1-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2214
951 a 2251 821 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-4-0-2 16 {InitRnode } NewNode end end
 2251 821 a Fi(a3)2279 808 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-4-0 /N@T-0-4-0-2 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2279 808
a 2252 964 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.45842 3.2292 1.50693
} false /N@T-0-4-0-2-0 16 {InitRnode } NewNode end end
 2252 964 a Fi(c3)2279 951 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-4-0-2 /N@T-0-4-0-2-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2279 951 a 2316
821 a
 tx@Dict begin tx@NodeDict begin {3.47221 0.0 7.1529 3.57645 1.50693
} false /N@T-0-4-0-3 16 {InitRnode } NewNode end end
 2316 821 a Fi(b1)2345 808 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-4-0 /N@T-0-4-0-3 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2345 808 a 2318 964
a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.45842 3.2292 1.50693
} false /N@T-0-4-0-3-0 16 {InitRnode } NewNode end end
 2318 964 a Fi(c3)2345 951 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-4-0-3 /N@T-0-4-0-3-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2345 951 a 2383 821 a
 tx@Dict begin tx@NodeDict begin {3.47221 0.0 7.1529 3.57645 1.50693
} false /N@T-0-4-0-4 16 {InitRnode } NewNode end end
 2383
821 a Fi(b3)2413 808 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-4-0 /N@T-0-4-0-4 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2413 808 a 2386 964 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.45842 3.2292 1.50693
} false /N@T-0-4-0-4-0 16 {InitRnode } NewNode end end
 2386 964
a Fi(c3)2413 951 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-4-0-4 /N@T-0-4-0-4-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2413 951 a 2451 821 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.45842 3.2292 1.50693
} false /N@T-0-4-0-5 16 {InitRnode } NewNode end end
 2451 821 a Fi(c3)2478
808 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-4-0 /N@T-0-4-0-5 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2478 808 a 2448 964 a
 tx@Dict begin tx@NodeDict begin {3.47221 0.0 7.1529 3.57645 1.50693
} false /N@T-0-4-0-5-0 16 {InitRnode } NewNode end end
 2448 964 a Fi(b3)2478 951
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-4-0-5 /N@T-0-4-0-5-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2478 951 a 2684 535 a
 tx@Dict begin tx@NodeDict begin {3.47221 0.0 7.1529 3.57645 1.50693
} false /N@T-0-5 16 {InitRnode } NewNode end end
 2684 535 a Fi(b3)2714 523 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-5 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 2714
523 a 2686 678 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-5-0 16 {InitRnode } NewNode end end
 2686 678 a Fi(a3)2714 666 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5 /N@T-0-5-0 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 2714 666
a 2517 821 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-5-0-0 16 {InitRnode } NewNode end end
 2517 821 a Fi(a1)2546 808 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5-0 /N@T-0-5-0-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2546 808 a 2516
964 a
 tx@Dict begin tx@NodeDict begin {3.47221 0.0 7.1529 3.57645 1.50693
} false /N@T-0-5-0-0-0 16 {InitRnode } NewNode end end
 2516 964 a Fi(b2)2546 951 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5-0-0 /N@T-0-5-0-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2546 951 a 2585 821
a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-5-0-1 16 {InitRnode } NewNode end end
 2585 821 a Fi(a2)2613 808 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5-0 /N@T-0-5-0-1 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2613 808 a 2583 964 a
 tx@Dict begin tx@NodeDict begin {3.47221 0.0 7.1529 3.57645 1.50693
} false /N@T-0-5-0-1-0 16 {InitRnode } NewNode end end
 2583
964 a Fi(b2)2613 951 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5-0-1 /N@T-0-5-0-1-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2613 951 a 2651 821 a
 tx@Dict begin tx@NodeDict begin {3.47221 0.0 7.1529 3.57645 1.50693
} false /N@T-0-5-0-2 16 {InitRnode } NewNode end end
 2651 821
a Fi(b1)2681 808 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5-0 /N@T-0-5-0-2 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2681 808 a 2651 964 a
 tx@Dict begin tx@NodeDict begin {3.47221 0.0 7.1529 3.57645 1.50693
} false /N@T-0-5-0-2-0 16 {InitRnode } NewNode end end
 2651 964 a Fi(b2)2681
951 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5-0-2 /N@T-0-5-0-2-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2681 951 a 2719 821 a
 tx@Dict begin tx@NodeDict begin {3.47221 0.0 7.1529 3.57645 1.50693
} false /N@T-0-5-0-3 16 {InitRnode } NewNode end end
 2719 821 a Fi(b2)2749 808
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5-0 /N@T-0-5-0-3 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2749 808 a 2721 964 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-5-0-3-0 16 {InitRnode } NewNode end end
 2721 964 a Fi(a2)2749 951 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5-0-3 /N@T-0-5-0-3-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2749
951 a 2623 1107 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-5-0-3-0-0 16 {InitRnode } NewNode end end
 2623 1107 a Fi(a1)2651 1094 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5-0-3-0 /N@T-0-5-0-3-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2651
1094 a 2621 1250 a
 tx@Dict begin tx@NodeDict begin {3.47221 0.0 7.1529 3.57645 1.50693
} false /N@T-0-5-0-3-0-0-0 16 {InitRnode } NewNode end end
 2621 1250 a Fi(b1)2651 1237 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5-0-3-0-0 /N@T-0-5-0-3-0-0-0 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2651
1237 a 2687 1107 a
 tx@Dict begin tx@NodeDict begin {3.47221 0.0 7.1529 3.57645 1.50693
} false /N@T-0-5-0-3-0-1 16 {InitRnode } NewNode end end
 2687 1107 a Fi(b1)2717 1094 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5-0-3-0 /N@T-0-5-0-3-0-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2717
1094 a 2689 1250 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-5-0-3-0-1-0 16 {InitRnode } NewNode end end
 2689 1250 a Fi(a1)2717 1237 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5-0-3-0-1 /N@T-0-5-0-3-0-1-0 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2717
1237 a 2755 1107 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.45842 3.2292 1.50693
} false /N@T-0-5-0-3-0-2 16 {InitRnode } NewNode end end
 2755 1107 a Fi(c2)2782 1094 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5-0-3-0 /N@T-0-5-0-3-0-2 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2782
1094 a 2754 1250 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-5-0-3-0-2-0 16 {InitRnode } NewNode end end
 2754 1250 a Fi(a1)2782 1237 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5-0-3-0-2 /N@T-0-5-0-3-0-2-0 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2782
1237 a 2820 1107 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.45842 3.2292 1.50693
} false /N@T-0-5-0-3-0-3 16 {InitRnode } NewNode end end
 2820 1107 a Fi(c3)2847 1094 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5-0-3-0 /N@T-0-5-0-3-0-3 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2847
1094 a 2819 1250 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-5-0-3-0-3-0 16 {InitRnode } NewNode end end
 2819 1250 a Fi(a1)2847 1237 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5-0-3-0-3 /N@T-0-5-0-3-0-3-0 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2847
1237 a 2788 821 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.45842 3.2292 1.50693
} false /N@T-0-5-0-4 16 {InitRnode } NewNode end end
 2788 821 a Fi(c2)2815 808 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5-0 /N@T-0-5-0-4 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2815 808
a 2785 964 a
 tx@Dict begin tx@NodeDict begin {3.47221 0.0 7.1529 3.57645 1.50693
} false /N@T-0-5-0-4-0 16 {InitRnode } NewNode end end
 2785 964 a Fi(b2)2815 951 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5-0-4 /N@T-0-5-0-4-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2815 951 a 2856
821 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.45842 3.2292 1.50693
} false /N@T-0-5-0-5 16 {InitRnode } NewNode end end
 2856 821 a Fi(c3)2883 808 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5-0 /N@T-0-5-0-5 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2883 808 a 2853 964
a
 tx@Dict begin tx@NodeDict begin {3.47221 0.0 7.1529 3.57645 1.50693
} false /N@T-0-5-0-5-0 16 {InitRnode } NewNode end end
 2853 964 a Fi(b2)2883 951 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5-0-5 /N@T-0-5-0-5-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2883 951 a 3087 535 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.45842 3.2292 1.50693
} false /N@T-0-6 16 {InitRnode } NewNode end end
 3087
535 a Fi(c2)3114 523 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-6 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 3114 523 a 3084 678 a
 tx@Dict begin tx@NodeDict begin {3.47221 0.0 7.1529 3.57645 1.50693
} false /N@T-0-6-0 16 {InitRnode } NewNode end end
 3084 678
a Fi(b2)3114 666 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6 /N@T-0-6-0 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 3114 666 a 2921 821 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-0-0 16 {InitRnode } NewNode end end
 2921 821 a Fi(a1)2949
808 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-0 /N@T-0-6-0-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2949 808 a 2921 964 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-0-0-0 16 {InitRnode } NewNode end end
 2921 964 a Fi(a3)2949 951
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-0-0 /N@T-0-6-0-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2949 951 a 2985 821 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-0-1 16 {InitRnode } NewNode end end
 2985 821 a Fi(a2)3014 808 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-0 /N@T-0-6-0-1 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3014
808 a 2986 964 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-0-1-0 16 {InitRnode } NewNode end end
 2986 964 a Fi(a3)3014 951 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-0-1 /N@T-0-6-0-1-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3014 951
a 3052 821 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-0-2 16 {InitRnode } NewNode end end
 3052 821 a Fi(a3)3080 808 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-0 /N@T-0-6-0-2 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3080 808 a 3050
964 a
 tx@Dict begin tx@NodeDict begin {3.47221 0.0 7.1529 3.57645 1.50693
} false /N@T-0-6-0-2-0 16 {InitRnode } NewNode end end
 3050 964 a Fi(b3)3080 951 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-0-2 /N@T-0-6-0-2-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3080 951 a 3117 821
a
 tx@Dict begin tx@NodeDict begin {3.47221 0.0 7.1529 3.57645 1.50693
} false /N@T-0-6-0-3 16 {InitRnode } NewNode end end
 3117 821 a Fi(b1)3146 808 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-0 /N@T-0-6-0-3 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3146 808 a 3118 964 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-0-3-0 16 {InitRnode } NewNode end end
 3118
964 a Fi(a3)3146 951 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-0-3 /N@T-0-6-0-3-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3146 951 a 3184 821 a
 tx@Dict begin tx@NodeDict begin {3.47221 0.0 7.1529 3.57645 1.50693
} false /N@T-0-6-0-4 16 {InitRnode } NewNode end end
 3184 821
a Fi(b3)3214 808 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-0 /N@T-0-6-0-4 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3214 808 a 3186 964 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-0-4-0 16 {InitRnode } NewNode end end
 3186 964 a Fi(a3)3214
951 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-0-4 /N@T-0-6-0-4-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3214 951 a 3252 821 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.45842 3.2292 1.50693
} false /N@T-0-6-0-5 16 {InitRnode } NewNode end end
 3252 821 a Fi(c3)3279 808
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-0 /N@T-0-6-0-5 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3279 808 a 3251 964 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-0-5-0 16 {InitRnode } NewNode end end
 3251 964 a Fi(a3)3279 951 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-0-5 /N@T-0-6-0-5-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3279
951 a 3482 535 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.45842 3.2292 1.50693
} false /N@T-0-7 16 {InitRnode } NewNode end end
 3482 535 a Fi(c3)3508 523 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-7 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 3508 523
a 3478 678 a
 tx@Dict begin tx@NodeDict begin {3.47221 0.0 7.1529 3.57645 1.50693
} false /N@T-0-7-0 16 {InitRnode } NewNode end end
 3478 678 a Fi(b2)3508 666 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-7 /N@T-0-7-0 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 3508 666 a 3315
821 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-7-0-0 16 {InitRnode } NewNode end end
 3315 821 a Fi(a1)3343 808 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-7-0 /N@T-0-7-0-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3343 808 a 3315 964
a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-7-0-0-0 16 {InitRnode } NewNode end end
 3315 964 a Fi(a3)3343 951 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-7-0-0 /N@T-0-7-0-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3343 951 a 3380 821 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-7-0-1 16 {InitRnode } NewNode end end
 3380
821 a Fi(a2)3408 808 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-7-0 /N@T-0-7-0-1 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3408 808 a 3380 964 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-7-0-1-0 16 {InitRnode } NewNode end end
 3380 964
a Fi(a3)3408 951 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-7-0-1 /N@T-0-7-0-1-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3408 951 a 3446 821 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-7-0-2 16 {InitRnode } NewNode end end
 3446 821 a Fi(a3)3474
808 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-7-0 /N@T-0-7-0-2 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3474 808 a 3444 964 a
 tx@Dict begin tx@NodeDict begin {3.47221 0.0 7.1529 3.57645 1.50693
} false /N@T-0-7-0-2-0 16 {InitRnode } NewNode end end
 3444 964 a Fi(b3)3474 951
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-7-0-2 /N@T-0-7-0-2-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3474 951 a 3511 821 a
 tx@Dict begin tx@NodeDict begin {3.47221 0.0 7.1529 3.57645 1.50693
} false /N@T-0-7-0-3 16 {InitRnode } NewNode end end
 3511 821 a Fi(b1)3541 808 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-7-0 /N@T-0-7-0-3 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3541
808 a 3513 964 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-7-0-3-0 16 {InitRnode } NewNode end end
 3513 964 a Fi(a3)3541 951 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-7-0-3 /N@T-0-7-0-3-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3541 951
a 3579 821 a
 tx@Dict begin tx@NodeDict begin {3.47221 0.0 7.1529 3.57645 1.50693
} false /N@T-0-7-0-4 16 {InitRnode } NewNode end end
 3579 821 a Fi(b3)3608 808 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-7-0 /N@T-0-7-0-4 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3608 808 a 3580
964 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-7-0-4-0 16 {InitRnode } NewNode end end
 3580 964 a Fi(a3)3608 951 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-7-0-4 /N@T-0-7-0-4-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3608 951 a 3646 821
a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.45842 3.2292 1.50693
} false /N@T-0-7-0-5 16 {InitRnode } NewNode end end
 3646 821 a Fi(c2)3673 808 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-7-0 /N@T-0-7-0-5 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3673 808 a 3645 964 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-7-0-5-0 16 {InitRnode } NewNode end end
 3645
964 a Fi(a3)3673 951 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-7-0-5 /N@T-0-7-0-5-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3673 951 a 523 1433 a Fq(Fig.)14
b(2.)24 b Fs(A)f(winning)i(\014rst-pla)n(y)n(er)f(3)p
Fr(\002)p Fs(3)g(Hex)g(strategy)-6 b(.)25 b(Fig.)g(1)g(sho)n(ws)g(one)f
(line)h(of)g(this)f(strategy)-6 b(.)523 1719 y Ft(while)31
b(Noshita)g(found)g(7)p Fm(\002)p Ft(7)e(strategies)h(and)h(one)f(8)p
Fm(\002)p Ft(8)g(strategy)f(similar)h(to)h(Y)-7 b(ang's)30
b(b)n(y)523 1819 y(hand)e([10].)e(F)-7 b(or)27 b(b)r(oards)g(10)p
Fm(\002)p Ft(10)e(or)i(larger,)f(no)h(winning)h(strategies)e(are)g(kno)
n(wn.)648 1919 y(As)32 b(the)h(searc)n(h)d(for)i(winning)h(strategies)e
(on)h(larger)e(b)r(oards)h(con)n(tin)n(ues,)h(it)h(is)f(of)g(in-)523
2019 y(terest)24 b(to)f(pro)n(vide)g(algorithms)f(for)h(v)n(erifying)g
(strategy)g(correctness.)f(Recen)n(tly)-7 b(,)23 b(Noshita)523
2118 y(describ)r(ed)39 b(strategies)e(in)i(a)g(manner)f(that)i
(arguably)d(facilitates)i(h)n(uman)f(v)n(eri\014cation)523
2218 y([10].)33 b(By)h(con)n(trast,)f(in)h(this)h(pap)r(er)e(w)n(e)h
(presen)n(t)f(a)h(system)g(that)g(allo)n(ws)f(for)g(computer)523
2317 y(v)n(eri\014cation.)c(T)-7 b(o)30 b(demonstrate)f(the)h(utilit)n
(y)h(of)f(our)g(system,)g(w)n(e)f(use)h(it)h(to)f(con\014rm)g(the)523
2417 y(correctness)c(of)h(Y)-7 b(ang's)27 b(original)f(7)p
Fm(\002)p Ft(7)h(strategy)f([13].)523 2684 y Fp(2)112
b(Excised)38 b(trees)f(and)h(autotrees)523 2884 y Ft(The)26
b(underlying)f(feature)g(of)g(our)g(v)n(eri\014cation)f(system)i(is)f
(the)h(condensed)f(tree)h(notation)523 2983 y(w)n(e)20
b(use)h(to)f(represen)n(t)f(strategies.)1587 2953 y Fo(2)1644
2983 y Ft(Our)h(notation)g(allo)n(ws)f(the)i(standard)e(tree)i
(description)523 3083 y(of)e(a)g(strategy)f(to)h(b)r(e)h(condensed)f
(in)h(three)f(w)n(a)n(ys.)f(Firstly)-7 b(,)19 b(it)g(p)r(ermits)h(the)g
(use)f(of)g(an)g(\\and")523 3183 y(op)r(eration)24 b(corresp)r(onding)f
(to)h(the)h(com)n(binatorial)e(sum)i(of)g(indep)r(enden)n(t)g
(substrategies.)523 3282 y(Secondly)-7 b(,)34 b(it)g(p)r(ermits)g(the)g
(use)g(of)g(a)f(macro)g(descriptor)g(for)g(represen)n(ting)f(rep)r
(eatedly)523 3382 y(o)r(ccurring)22 b(substrategies.)g(Thirdly)-7
b(,)23 b(it)h(allo)n(ws)e(all)h(opp)r(onen)n(t)g(mo)n(v)n(es)f(to)i(b)r
(e)f(excised)g(from)523 3482 y(the)33 b(tree)g(b)n(y)f(replacing)g(eac)
n(h)g(set)h(of)f(opp)r(onen)n(t)h(resp)r(onses)f(with)h(a)f(single)h
(anon)n(ymous)523 3581 y(meta-resp)r(onse.)648 3681 y(The)22
b(\014rst)f(t)n(w)n(o)h(of)g(these)g(three)g(ideas)f(are)g(w)n(ell)h
(kno)n(wn;)f(for)h(example,)g(they)g(w)n(ere)f(used)523
3781 y(b)n(y)32 b(Y)-7 b(ang)31 b(in)h(his)g(description)g(of)g(his)f
(pro)r(ofs)h([13,)13 b(15,)f(16,)h(12].)32 b(The)g(third)g(idea,)f
(namely)523 3880 y(using)f(excised)g(trees,)g(is)g(new.)g(In)h(the)g
(rest)e(of)i(this)f(section)g(w)n(e)g(illustrate)g(the)h(excision)523
3980 y(pro)r(cess)26 b(and)i(sho)n(w)f(that)g(it)i(do)r(es)e(not)g
(hamp)r(er)h(v)n(eri\014cation.)648 4080 y(T)-7 b(o)26
b(b)r(egin,)h(consider)f(the)h(\014rst-pla)n(y)n(er)e(strategy)g(tree)i
(in)g(Fig.)g(2.)f(The)h(no)r(des)g(at)f(ev)n(en)523 4179
y(depth)f(indicate)f(\014rst-pla)n(y)n(er)e(mo)n(v)n(es;)h(the)i(no)r
(des)f(at)g(o)r(dd)g(depth)h(indicate)g(second-pla)n(y)n(er)523
4279 y(mo)n(v)n(es;)g(the)i(game)f(in)g(Fig.)h(1)f(follo)n(ws)f(one)h
(ro)r(ot-to-leaf)f(path)h(through)g(the)h(tree.)f(Notice)523
4379 y(that)c(the)g(\014rst-pla)n(y)n(er)e(strategy)g(describ)r(ed)i(b)
n(y)f(the)i(tree)e(is)h Fh(c)l(omplete)p Ft(:)h(after)e(eac)n(h)g
(second-)523 4478 y(pla)n(y)n(er)j(mo)n(v)n(e,)g(there)h(is)g(a)g
(unique)g(\014rst-pla)n(y)n(er)e(resp)r(onse;)i(after)g(eac)n(h)f
(\014rst-pla)n(y)n(er)f(mo)n(v)n(e,)523 4578 y(there)i(is)g(ev)n(ery)f
(p)r(ossible)h(second-pla)n(y)n(er)e(resp)r(onse.)i(Also,)g(eac)n(h)f
(leaf)h(no)r(de)h(establishes)e(a)523 4677 y(\014rst-pla)n(y)n(er)h
(win,)j(so)f(this)h(is)g(a)f(winning)g(strategy)g(for)g(the)h(\014rst)f
(pla)n(y)n(er.)p 523 4748 473 4 v 546 4801 a Fk(2)606
4833 y Fs(This)j(notation)g(could)g(also)h(b)r(e)f(used)f(for)h(other)g
(t)n(w)n(o-pla)n(y)n(er)f(b)r(oard)h(games)h(in)e(whic)n(h)h(game)606
4924 y(pieces)c(are)h(\014xed)d(once)i(they)f(ha)n(v)n(e)g(b)r(een)g
(placed.)p eop end
%%Page: 3 3
TeXDict begin 3 2 bop 3318 232 a Fs(I)r(I)r(I)2069 403
y
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.5417 3.77084 2.1097
} false /N@T-0 16 {InitRnode } NewNode end end
 2069 403 a Fo(c1)2083 553 y
 tx@Dict begin tx@NodeDict begin {3.25694 0.0 4.09723 2.04861 2.1097
} false /N@T-0-0 16 {InitRnode } NewNode end end
 2083 553 a Fg(\017)2100
535 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 2100 535 a 698 703 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.5417 3.77084 2.1097
} false /N@T-0-0-0 16 {InitRnode } NewNode end end
 698 703 a Fo(c2)730 685 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0 /N@T-0-0-0 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end

730 685 a 713 853 a
 tx@Dict begin tx@NodeDict begin {3.25694 0.0 4.09723 2.04861 2.1097
} false /N@T-0-0-0-0 16 {InitRnode } NewNode end end
 713 853 a Fg(\017)730 836 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0 /N@T-0-0-0-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 730 836
a 540 1003 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.5417 3.77084 2.1097
} false /N@T-0-0-0-0-0 16 {InitRnode } NewNode end end
 540 1003 a Fo(c3)571 986 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0-0 /N@T-0-0-0-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 571 986 a 603
1003 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.5417 3.77084 2.1097
} false /N@T-0-0-0-0-1 16 {InitRnode } NewNode end end
 603 1003 a Fo(c3)634 986 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0-0 /N@T-0-0-0-0-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 634 986 a 665 1003
a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.5417 3.77084 2.1097
} false /N@T-0-0-0-0-2 16 {InitRnode } NewNode end end
 665 1003 a Fo(c3)697 986 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0-0 /N@T-0-0-0-0-2 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 697 986 a 728 1003 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.5417 3.77084 2.1097
} false /N@T-0-0-0-0-3 16 {InitRnode } NewNode end end
 728
1003 a Fo(c3)759 986 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0-0 /N@T-0-0-0-0-3 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 759 986 a 791 1003 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.5417 3.77084 2.1097
} false /N@T-0-0-0-0-4 16 {InitRnode } NewNode end end
 791 1003
a Fo(c3)822 986 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0-0 /N@T-0-0-0-0-4 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 822 986 a 853 1003 a
 tx@Dict begin tx@NodeDict begin {4.8611 0.0 8.40282 4.2014 2.1097
} false /N@T-0-0-0-0-5 16 {InitRnode } NewNode end end
 853 1003 a Fo(b3)888
986 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0-0 /N@T-0-0-0-0-5 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 888 986 a 1081 703 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.5417 3.77084 2.1097
} false /N@T-0-0-1 16 {InitRnode } NewNode end end
 1081 703 a Fo(c2)1113 685
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0 /N@T-0-0-1 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1113 685 a 1096 853 a
 tx@Dict begin tx@NodeDict begin {3.25694 0.0 4.09723 2.04861 2.1097
} false /N@T-0-0-1-0 16 {InitRnode } NewNode end end
 1096 853 a Fg(\017)1113 836 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1 /N@T-0-0-1-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end

1113 836 a 923 1003 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.5417 3.77084 2.1097
} false /N@T-0-0-1-0-0 16 {InitRnode } NewNode end end
 923 1003 a Fo(c3)954 986 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1-0 /N@T-0-0-1-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 954
986 a 986 1003 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.5417 3.77084 2.1097
} false /N@T-0-0-1-0-1 16 {InitRnode } NewNode end end
 986 1003 a Fo(c3)1017 986 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1-0 /N@T-0-0-1-0-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1017 986
a 1048 1003 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.5417 3.77084 2.1097
} false /N@T-0-0-1-0-2 16 {InitRnode } NewNode end end
 1048 1003 a Fo(c3)1079 986 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1-0 /N@T-0-0-1-0-2 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1079 986 a
1111 1003 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.5417 3.77084 2.1097
} false /N@T-0-0-1-0-3 16 {InitRnode } NewNode end end
 1111 1003 a Fo(c3)1142 986 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1-0 /N@T-0-0-1-0-3 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1142 986 a 1173
1003 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.5417 3.77084 2.1097
} false /N@T-0-0-1-0-4 16 {InitRnode } NewNode end end
 1173 1003 a Fo(c3)1205 986 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1-0 /N@T-0-0-1-0-4 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1205 986 a 1236 1003
a
 tx@Dict begin tx@NodeDict begin {4.8611 0.0 8.40282 4.2014 2.1097
} false /N@T-0-0-1-0-5 16 {InitRnode } NewNode end end
 1236 1003 a Fo(b3)1271 986 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1-0 /N@T-0-0-1-0-5 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1271 986 a 1464 703 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.5417 3.77084 2.1097
} false /N@T-0-0-2 16 {InitRnode } NewNode end end

1464 703 a Fo(c2)1495 685 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0 /N@T-0-0-2 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1495 685 a 1478 853 a
 tx@Dict begin tx@NodeDict begin {3.25694 0.0 4.09723 2.04861 2.1097
} false /N@T-0-0-2-0 16 {InitRnode } NewNode end end
 1478
853 a Fg(\017)1495 836 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2 /N@T-0-0-2-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1495 836 a 1306 1003 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.5417 3.77084 2.1097
} false /N@T-0-0-2-0-0 16 {InitRnode } NewNode end end
 1306
1003 a Fo(c3)1337 986 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-0 /N@T-0-0-2-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1337 986 a 1368 1003 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.5417 3.77084 2.1097
} false /N@T-0-0-2-0-1 16 {InitRnode } NewNode end end
 1368 1003
a Fo(c3)1400 986 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-0 /N@T-0-0-2-0-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1400 986 a 1431 1003 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.5417 3.77084 2.1097
} false /N@T-0-0-2-0-2 16 {InitRnode } NewNode end end
 1431 1003 a
Fo(c3)1462 986 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-0 /N@T-0-0-2-0-2 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1462 986 a 1494 1003 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.5417 3.77084 2.1097
} false /N@T-0-0-2-0-3 16 {InitRnode } NewNode end end
 1494 1003 a Fo(c3)1525
986 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-0 /N@T-0-0-2-0-3 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1525 986 a 1556 1003 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.5417 3.77084 2.1097
} false /N@T-0-0-2-0-4 16 {InitRnode } NewNode end end
 1556 1003 a Fo(c3)1588 986
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-0 /N@T-0-0-2-0-4 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1588 986 a 1619 1003 a
 tx@Dict begin tx@NodeDict begin {4.8611 0.0 8.40282 4.2014 2.1097
} false /N@T-0-0-2-0-5 16 {InitRnode } NewNode end end
 1619 1003 a Fo(b3)1654 986 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-0 /N@T-0-0-2-0-5 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end

1654 986 a 1847 703 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.5417 3.77084 2.1097
} false /N@T-0-0-3 16 {InitRnode } NewNode end end
 1847 703 a Fo(c2)1878 685 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0 /N@T-0-0-3 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1878
685 a 1861 853 a
 tx@Dict begin tx@NodeDict begin {3.25694 0.0 4.09723 2.04861 2.1097
} false /N@T-0-0-3-0 16 {InitRnode } NewNode end end
 1861 853 a Fg(\017)1878 836 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3 /N@T-0-0-3-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1878 836
a 1689 1003 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.5417 3.77084 2.1097
} false /N@T-0-0-3-0-0 16 {InitRnode } NewNode end end
 1689 1003 a Fo(c3)1720 986 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3-0 /N@T-0-0-3-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1720 986 a
1751 1003 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.5417 3.77084 2.1097
} false /N@T-0-0-3-0-1 16 {InitRnode } NewNode end end
 1751 1003 a Fo(c3)1782 986 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3-0 /N@T-0-0-3-0-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1782 986 a 1814
1003 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.5417 3.77084 2.1097
} false /N@T-0-0-3-0-2 16 {InitRnode } NewNode end end
 1814 1003 a Fo(c3)1845 986 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3-0 /N@T-0-0-3-0-2 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1845 986 a 1876 1003
a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.5417 3.77084 2.1097
} false /N@T-0-0-3-0-3 16 {InitRnode } NewNode end end
 1876 1003 a Fo(c3)1908 986 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3-0 /N@T-0-0-3-0-3 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1908 986 a 1939 1003 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.5417 3.77084 2.1097
} false /N@T-0-0-3-0-4 16 {InitRnode } NewNode end end

1939 1003 a Fo(c3)1970 986 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3-0 /N@T-0-0-3-0-4 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1970 986 a 2002 1003 a
 tx@Dict begin tx@NodeDict begin {4.8611 0.0 8.40282 4.2014 2.1097
} false /N@T-0-0-3-0-5 16 {InitRnode } NewNode end end
 2002
1003 a Fo(b3)2037 986 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3-0 /N@T-0-0-3-0-5 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2037 986 a 2230 703 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.5417 3.77084 2.1097
} false /N@T-0-0-4 16 {InitRnode } NewNode end end
 2230 703
a Fo(c2)2261 685 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0 /N@T-0-0-4 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 2261 685 a 2244 853 a
 tx@Dict begin tx@NodeDict begin {3.25694 0.0 4.09723 2.04861 2.1097
} false /N@T-0-0-4-0 16 {InitRnode } NewNode end end
 2244 853 a Fg(\017)2261
836 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-4 /N@T-0-0-4-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2261 836 a 2071 1003 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.5417 3.77084 2.1097
} false /N@T-0-0-4-0-0 16 {InitRnode } NewNode end end
 2071 1003 a Fo(c3)2103 986
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-4-0 /N@T-0-0-4-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2103 986 a 2134 1003 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.5417 3.77084 2.1097
} false /N@T-0-0-4-0-1 16 {InitRnode } NewNode end end
 2134 1003 a Fo(c3)2165 986 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-4-0 /N@T-0-0-4-0-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end

2165 986 a 2197 1003 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.5417 3.77084 2.1097
} false /N@T-0-0-4-0-2 16 {InitRnode } NewNode end end
 2197 1003 a Fo(c3)2228 986 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-4-0 /N@T-0-0-4-0-2 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2228
986 a 2259 1003 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.5417 3.77084 2.1097
} false /N@T-0-0-4-0-3 16 {InitRnode } NewNode end end
 2259 1003 a Fo(c3)2291 986 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-4-0 /N@T-0-0-4-0-3 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2291 986
a 2322 1003 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.5417 3.77084 2.1097
} false /N@T-0-0-4-0-4 16 {InitRnode } NewNode end end
 2322 1003 a Fo(c3)2353 986 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-4-0 /N@T-0-0-4-0-4 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2353 986 a
2384 1003 a
 tx@Dict begin tx@NodeDict begin {4.8611 0.0 8.40282 4.2014 2.1097
} false /N@T-0-0-4-0-5 16 {InitRnode } NewNode end end
 2384 1003 a Fo(b3)2419 986 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-4-0 /N@T-0-0-4-0-5 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2419 986 a 2629
703 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-0-5 16 {InitRnode } NewNode end end
 2629 703 a Fo(a3)2662 685 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0 /N@T-0-0-5 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 2662 685 a 2645 853
a
 tx@Dict begin tx@NodeDict begin {3.25694 0.0 4.09723 2.04861 2.1097
} false /N@T-0-0-5-0 16 {InitRnode } NewNode end end
 2645 853 a Fg(\017)2662 836 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-5 /N@T-0-0-5-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2662 836 a 2454 1003
a
 tx@Dict begin tx@NodeDict begin {4.8611 0.0 8.40282 4.2014 2.1097
} false /N@T-0-0-5-0-0 16 {InitRnode } NewNode end end
 2454 1003 a Fo(b2)2489 986 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-5-0 /N@T-0-0-5-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2489 986 a 2524 1003 a
 tx@Dict begin tx@NodeDict begin {4.8611 0.0 8.40282 4.2014 2.1097
} false /N@T-0-0-5-0-1 16 {InitRnode } NewNode end end

2524 1003 a Fo(b2)2559 986 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-5-0 /N@T-0-0-5-0-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2559 986 a 2594 1003 a
 tx@Dict begin tx@NodeDict begin {4.8611 0.0 8.40282 4.2014 2.1097
} false /N@T-0-0-5-0-2 16 {InitRnode } NewNode end end
 2594
1003 a Fo(b2)2629 986 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-5-0 /N@T-0-0-5-0-2 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2629 986 a 2664 1003 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-0-5-0-3 16 {InitRnode } NewNode end end
 2664 1003
a Fo(a2)2697 986 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-5-0 /N@T-0-0-5-0-3 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2697 986 a 2680 1153 a
 tx@Dict begin tx@NodeDict begin {3.25694 0.0 4.09723 2.04861 2.1097
} false /N@T-0-0-5-0-3-0 16 {InitRnode } NewNode end end
 2680 1153 a
Fg(\017)2697 1136 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-5-0-3 /N@T-0-0-5-0-3-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2697 1136 a 2562 1304 a
 tx@Dict begin tx@NodeDict begin {4.8611 0.0 8.40282 4.2014 2.1097
} false /N@T-0-0-5-0-3-0-0 16 {InitRnode } NewNode end end
 2562 1304
a Fo(b1)2596 1286 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-5-0-3-0 /N@T-0-0-5-0-3-0-0 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2596 1286 a 2631 1304 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-0-5-0-3-0-1 16 {InitRnode } NewNode end end
 2631 1304
a Fo(a1)2664 1286 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-5-0-3-0 /N@T-0-0-5-0-3-0-1 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2664 1286 a 2698 1304 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-0-5-0-3-0-2 16 {InitRnode } NewNode end end
 2698 1304
a Fo(a1)2731 1286 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-5-0-3-0 /N@T-0-0-5-0-3-0-2 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2731 1286 a 2764 1304 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-0-5-0-3-0-3 16 {InitRnode } NewNode end end
 2764 1304
a Fo(a1)2797 1286 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-5-0-3-0 /N@T-0-0-5-0-3-0-3 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2797 1286 a 2730 1003 a
 tx@Dict begin tx@NodeDict begin {4.8611 0.0 8.40282 4.2014 2.1097
} false /N@T-0-0-5-0-4 16 {InitRnode } NewNode end end
 2730 1003
a Fo(b2)2765 986 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-5-0 /N@T-0-0-5-0-4 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2765 986 a 2799 1003 a
 tx@Dict begin tx@NodeDict begin {4.8611 0.0 8.40282 4.2014 2.1097
} false /N@T-0-0-5-0-5 16 {InitRnode } NewNode end end
 2799 1003 a
Fo(b2)2834 986 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-5-0 /N@T-0-0-5-0-5 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2834 986 a 3035 703 a
 tx@Dict begin tx@NodeDict begin {4.8611 0.0 8.40282 4.2014 2.1097
} false /N@T-0-0-6 16 {InitRnode } NewNode end end
 3035 703 a Fo(b2)3070
685 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0 /N@T-0-0-6 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 3070 685 a 3053 853 a
 tx@Dict begin tx@NodeDict begin {3.25694 0.0 4.09723 2.04861 2.1097
} false /N@T-0-0-6-0 16 {InitRnode } NewNode end end
 3053 853 a Fg(\017)3070 836
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-6 /N@T-0-0-6-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3070 836 a 2869 1003 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-0-6-0-0 16 {InitRnode } NewNode end end
 2869 1003 a Fo(a3)2902 986 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-6-0 /N@T-0-0-6-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end

2902 986 a 2935 1003 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-0-6-0-1 16 {InitRnode } NewNode end end
 2935 1003 a Fo(a3)2969 986 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-6-0 /N@T-0-0-6-0-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2969
986 a 3002 1003 a
 tx@Dict begin tx@NodeDict begin {4.8611 0.0 8.40282 4.2014 2.1097
} false /N@T-0-0-6-0-2 16 {InitRnode } NewNode end end
 3002 1003 a Fo(b3)3036 986 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-6-0 /N@T-0-0-6-0-2 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3036 986
a 3071 1003 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-0-6-0-3 16 {InitRnode } NewNode end end
 3071 1003 a Fo(a3)3104 986 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-6-0 /N@T-0-0-6-0-3 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3104 986 a
3138 1003 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-0-6-0-4 16 {InitRnode } NewNode end end
 3138 1003 a Fo(a3)3171 986 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-6-0 /N@T-0-0-6-0-4 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3171 986 a 3204
1003 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-0-6-0-5 16 {InitRnode } NewNode end end
 3204 1003 a Fo(a3)3237 986 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-6-0 /N@T-0-0-6-0-5 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3237 986 a 3435 703
a
 tx@Dict begin tx@NodeDict begin {4.8611 0.0 8.40282 4.2014 2.1097
} false /N@T-0-0-7 16 {InitRnode } NewNode end end
 3435 703 a Fo(b2)3470 685 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0 /N@T-0-0-7 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 3470 685 a 3453 853 a
 tx@Dict begin tx@NodeDict begin {3.25694 0.0 4.09723 2.04861 2.1097
} false /N@T-0-0-7-0 16 {InitRnode } NewNode end end
 3453
853 a Fg(\017)3470 836 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-7 /N@T-0-0-7-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3470 836 a 3270 1003 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-0-7-0-0 16 {InitRnode } NewNode end end
 3270
1003 a Fo(a3)3303 986 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-7-0 /N@T-0-0-7-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3303 986 a 3336 1003 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-0-7-0-1 16 {InitRnode } NewNode end end
 3336 1003
a Fo(a3)3369 986 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-7-0 /N@T-0-0-7-0-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3369 986 a 3402 1003 a
 tx@Dict begin tx@NodeDict begin {4.8611 0.0 8.40282 4.2014 2.1097
} false /N@T-0-0-7-0-2 16 {InitRnode } NewNode end end
 3402 1003 a
Fo(b3)3437 986 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-7-0 /N@T-0-0-7-0-2 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3437 986 a 3472 1003 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-0-7-0-3 16 {InitRnode } NewNode end end
 3472 1003 a Fo(a3)3505
986 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-7-0 /N@T-0-0-7-0-3 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3505 986 a 3538 1003 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-0-7-0-4 16 {InitRnode } NewNode end end
 3538 1003 a Fo(a3)3571 986
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-7-0 /N@T-0-0-7-0-4 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3571 986 a 3604 1003 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-0-7-0-5 16 {InitRnode } NewNode end end
 3604 1003 a Fo(a3)3638 986 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-7-0 /N@T-0-0-7-0-5 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end

3638 986 a 1930 1241 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.5417 3.77084 2.1097
} false /N@T-0 16 {InitRnode } NewNode end end
 1930 1241 a Fo(c1)1945 1391 y
 tx@Dict begin tx@NodeDict begin {3.25694 0.0 4.09723 2.04861 2.1097
} false /N@T-0-0 16 {InitRnode } NewNode end end

1945 1391 a Fg(\017)1962 1373 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 1962 1373 a 1778 1541
a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.5417 3.77084 2.1097
} false /N@T-0-0-0 16 {InitRnode } NewNode end end
 1778 1541 a Fo(c2)1810 1523 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0 /N@T-0-0-0 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1810 1523 a 1793 1691
a
 tx@Dict begin tx@NodeDict begin {3.25694 0.0 4.09723 2.04861 2.1097
} false /N@T-0-0-0-0 16 {InitRnode } NewNode end end
 1793 1691 a Fg(\017)1810 1674 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0 /N@T-0-0-0-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1810 1674 a 1741 1841
a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.5417 3.77084 2.1097
} false /N@T-0-0-0-0-0 16 {InitRnode } NewNode end end
 1741 1841 a Fo(c3)1773 1824 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0-0 /N@T-0-0-0-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1773 1824 a 1812 1841
a
 tx@Dict begin tx@NodeDict begin {4.8611 0.0 8.40282 4.2014 2.1097
} false /N@T-0-0-0-0-1 16 {InitRnode } NewNode end end
 1812 1841 a Fo(b3)1847 1824 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0-0 /N@T-0-0-0-0-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1847 1824 a 1930 1541
a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-0-1 16 {InitRnode } NewNode end end
 1930 1541 a Fo(a3)1963 1523 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0 /N@T-0-0-1 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1963 1523 a 1946 1691
a
 tx@Dict begin tx@NodeDict begin {3.25694 0.0 4.09723 2.04861 2.1097
} false /N@T-0-0-1-0 16 {InitRnode } NewNode end end
 1946 1691 a Fg(\017)1963 1674 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1 /N@T-0-0-1-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1963 1674 a 1890 1841
a
 tx@Dict begin tx@NodeDict begin {4.8611 0.0 8.40282 4.2014 2.1097
} false /N@T-0-0-1-0-0 16 {InitRnode } NewNode end end
 1890 1841 a Fo(b2)1925 1824 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1-0 /N@T-0-0-1-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1925 1824 a 1968 1841
a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-0-1-0-1 16 {InitRnode } NewNode end end
 1968 1841 a Fo(a2)2001 1824 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1-0 /N@T-0-0-1-0-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2001 1824 a 1984 1991
a
 tx@Dict begin tx@NodeDict begin {3.25694 0.0 4.09723 2.04861 2.1097
} false /N@T-0-0-1-0-1-0 16 {InitRnode } NewNode end end
 1984 1991 a Fg(\017)2001 1974 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1-0-1 /N@T-0-0-1-0-1-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2001 1974 a 1928 2141
a
 tx@Dict begin tx@NodeDict begin {4.8611 0.0 8.40282 4.2014 2.1097
} false /N@T-0-0-1-0-1-0-0 16 {InitRnode } NewNode end end
 1928 2141 a Fo(b1)1963 2124 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1-0-1-0 /N@T-0-0-1-0-1-0-0 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1963 2124 a 2006 2141
a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-0-1-0-1-0-1 16 {InitRnode } NewNode end end
 2006 2141 a Fo(a1)2039 2124 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1-0-1-0 /N@T-0-0-1-0-1-0-1 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2039 2124 a 2079 1541
a
 tx@Dict begin tx@NodeDict begin {4.8611 0.0 8.40282 4.2014 2.1097
} false /N@T-0-0-2 16 {InitRnode } NewNode end end
 2079 1541 a Fo(b2)2114 1523 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0 /N@T-0-0-2 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 2114 1523 a 2097 1691
a
 tx@Dict begin tx@NodeDict begin {3.25694 0.0 4.09723 2.04861 2.1097
} false /N@T-0-0-2-0 16 {InitRnode } NewNode end end
 2097 1691 a Fg(\017)2114 1674 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2 /N@T-0-0-2-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2114 1674 a 2043 1841
a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-0-2-0-0 16 {InitRnode } NewNode end end
 2043 1841 a Fo(a3)2076 1824 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-0 /N@T-0-0-2-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2076 1824 a 2117 1841
a
 tx@Dict begin tx@NodeDict begin {4.8611 0.0 8.40282 4.2014 2.1097
} false /N@T-0-0-2-0-1 16 {InitRnode } NewNode end end
 2117 1841 a Fo(b3)2152 1824 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-0 /N@T-0-0-2-0-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2152 1824 a 523 2285
a Fq(Fig.)14 b(3.)20 b Fs(The)g(tree)h(obtained)f(from)i(the)e
(strategy)h(tree)f(in)h(Fig.)g(2)g(b)n(y)e(replacing)j(eac)n(h)e(set)h
(of)g(opp)r(o-)523 2376 y(nen)n(t)k(resp)r(onse)i(no)r(des)f(with)h(a)f
(single)h(\\)p Fr(\017)p Fs(")h(meta-no)r(de)e(\(top\),)g(and)g(the)f
(excised)i(tree)f(obtained)523 2467 y(b)n(y)f(then)g(rep)r(eatedly)g
(merging)i(iden)n(tical)f(subtrees)g(\(b)r(ottom\).)648
2742 y Ft(Next,)j(consider)f(the)i(t)n(w)n(o)e(trees)g(sho)n(wn)h(in)g
(Fig.)g(3.)g(The)g(top)g(tree)g(is)g(obtained)f(from)523
2842 y(the)g(tree)f(in)g(Fig.)h(2)f(b)n(y)g(excising)f(no)r(des)h
(corresp)r(onding)f(to)h(second-pla)n(y)n(er)e(mo)n(v)n(es;)h(eac)n(h)
523 2941 y(set)40 b(of)g(second-pla)n(y)n(er)d(mo)n(v)n(es)h(is)i
(replaced)f(with)h(a)g(single)f(meta-no)r(de,)h(indicated)g(in)523
3041 y(our)33 b(diagrams)f(b)n(y)i(a)f(dot)h(\()p Fm(\017)p
Ft(\).)g(The)g(b)r(ottom)g(tree)g(is)g(obtained)f(from)h(the)g(top)g
(tree)f(b)n(y)523 3141 y(rep)r(eatedly)28 b(merging)f(iden)n(tical)i
(subtrees)f(in)n(to)g(a)g(single)g(subtree)g(un)n(til,)h(for)f(eac)n(h)
g(no)r(de,)523 3240 y(all)f(subtrees)g(are)g(distinct.)h(W)-7
b(e)28 b(refer)f(to)h(the)g(b)r(ottom)f(tree)h(as)f(an)g
Fh(excise)l(d)j(tr)l(e)l(e)p Ft(.)648 3340 y(More)j(generally)-7
b(,)34 b(giv)n(en)g(an)n(y)f(complete)i(\(but)h(not)e(necessarily)f
(winning\))i(strategy)523 3440 y(tree,)k(the)g(follo)n(wing)f(pro)r
(cess,)f(whic)n(h)i(w)n(e)f(call)h Fh(excision)p Ft(,)h(replaces)d(the)
i(tree)g(with)g(an)523 3539 y(excised)27 b(tree.)664
3702 y Fh(F)-6 b(or)23 b(e)l(ach)g(non-le)l(af)g(\014rst-player)f(no)l
(de,)i(mer)l(ge)e(the)g(childr)l(en)i(into)e(a)h(single)g(meta-)664
3802 y(no)l(de.)37 b(Next,)e(as)h(long)g(as)g(some)g(se)l(c)l
(ond-player)h(no)l(de)f(has)h(two)e(identic)l(al)i(sub-)664
3901 y(tr)l(e)l(es,)30 b(r)l(emove)g(one)g(of)h(these)f(subtr)l(e)l
(es.)648 4064 y Ft(Excised)23 b(trees)h(represen)n(t)g(equiv)-5
b(alence)24 b(classes)g(of)g(strategies,)g(so)g(some)g(information)523
4164 y(is)30 b(lost)g(when)h(a)f(strategy)f(tree)h(is)g(replaced)g
(with)h(its)f(excised)g(tree.)g(Ho)n(w)n(ev)n(er,)f(excision)523
4263 y(can)d(b)r(e)i(rev)n(ersed)c(in)k(the)f(follo)n(wing)e(sense:)i
(for)f(an)n(y)g(excised)g(tree)h Fn(E)k Ft(for)c(a)f(pla)n(y)n(er,)f
(there)523 4363 y(is)33 b(a)h(set)f Fm(S)40 b Ft(of)34
b(strategy)e(trees)h(suc)n(h)g(that)h Fn(E)k Ft(is)c(the)g(excised)f
(tree)g(of)g(ev)n(ery)f(tree)i(in)f Fm(S)7 b Ft(.)523
4463 y(F)-7 b(urthermore,)29 b(it)i(is)f(easy)f(to)h(construct)g(all)g
(elemen)n(ts)g(of)g Fm(S)37 b Ft(from)30 b Fn(E)35 b
Ft(via)29 b(the)i(follo)n(wing)523 4562 y(pro)r(cess,)c(whic)n(h)g(w)n
(e)g(call)g Fh(r)l(estor)l(ation)p Ft(:)664 4725 y Fh(A)n(t)g(e)l(ach)h
(meta-no)l(de)g Fn(m)p Fh(,)g(for)g(e)l(ach)h(p)l(ossible)g(opp)l
(onent)f(move)g(to)g(a)g(c)l(el)t(l)g Fn(c)p Fh(,)g(sele)l(ct)664
4825 y(for)33 b(the)f(player's)i(r)l(esp)l(onding)f(move)g(any)f(c)l
(el)t(l)h Fn(r)i Fh(that)d(is)g(the)g(r)l(o)l(ot)g(of)h(a)g(subtr)l(e)l
(e)664 4924 y(of)e Fn(m)e Fh(in)h(which)i Fn(c)d Fh(do)l(es)i(not)e
(app)l(e)l(ar.)p eop end
%%Page: 4 4
TeXDict begin 4 3 bop 523 232 a Fs(IV)648 448 y Ft(F)-7
b(or)30 b(example,)h(consider)f(the)h(restoration)e(pro)r(cess)h(for)g
(the)i(excised)e(tree)h(sho)n(wn)f(at)523 548 y(the)g(b)r(ottom)f(of)g
(Fig.)g(3.)g(Start)g(with)g(the)h(top-most)f(meta-no)r(de)f
Fn(m)2707 518 y Fg(\003)2745 548 y Ft(,)i(namely)e(the)i(c)n(hild)523
648 y(of)35 b Fn(c)p Ft(1.)f(F)-7 b(or)34 b(this)h(b)r(oard)f(p)r
(osition,)g(the)h(cell)g(set)g(of)f(p)r(ossible)h(opp)r(onen)n(t)f(mo)n
(v)n(es)f(is)i Fm(f)p Fn(a)p Ft(1,)523 747 y Fn(a)p Ft(2,)d
Fn(a)p Ft(3,)g Fn(b)p Ft(1,)g Fn(b)p Ft(2,)g Fn(b)p Ft(3,)f
Fn(c)p Ft(2,)h Fn(c)p Ft(3)p Fm(g)p Ft(.)g(Consider)f(the)i(\014rst)f
(suc)n(h)g(cell,)h Fn(a)p Ft(1.)f(The)h(cell)f(sets)g(of)h(the)523
847 y(subtrees)g(of)h Fn(m)1027 817 y Fg(\003)1098 847
y Ft(are)f Fm(f)p Fn(c)p Ft(2)p Fn(;)14 b(b)p Ft(3)p
Fn(;)g(c)p Ft(3)p Fm(g)p Ft(,)31 b Fm(f)p Fn(a)p Ft(3)p
Fn(;)14 b(b)p Ft(2)p Fn(;)g(a)p Ft(2)p Fn(;)g(b)p Ft(1)p
Fn(;)g(a)p Ft(1)p Fm(g)p Ft(,)28 b(and)34 b Fm(f)p Fn(b)p
Ft(2)p Fn(;)14 b(a)p Ft(3)p Fn(;)g(b)p Ft(3)p Fm(g)p
Ft(.)30 b(Since)k Fn(a)p Ft(1)f(is)523 946 y(not)d(in)g(the)g(\014rst)g
(or)e(third)i(of)g(these)g(three)f(cell)h(sets,)g(w)n(e)f(can)h(select)
f(the)h(ro)r(ot)f(of)h(either)523 1046 y(the)h(\014rst)f(or)g(third)h
(subtree)f(of)g Fn(m)1623 1016 y Fg(\003)1661 1046 y
Ft(.)h(Let)g(us)f(assume)g(in)h(this)g(example)f(that)h(w)n(e)f(alw)n
(a)n(ys)523 1146 y(select)22 b(the)h(ro)r(ot)e(of)i(the)f(\014rst)g(a)n
(v)-5 b(ailable)21 b(subtree.)i(Th)n(us,)f(as)f(the)i(resp)r(onse)e(to)
h Fn(a)p Ft(1)g(w)n(e)g(select)523 1245 y(the)28 b(ro)r(ot)f(of)g(the)h
(\014rst)g(subtree,)f(namely)h Fn(c)p Ft(2.)f(Con)n(tin)n(uing)g(in)h
(this)g(fashion,)f(w)n(e)g(select)g Fn(c)p Ft(2)523 1345
y(as)c(the)h(resp)r(onse)e(for)h(opp)r(onen)n(t)h(mo)n(v)n(es)e(to)h
Fn(a)p Ft(2,)g Fn(a)p Ft(3,)h Fn(b)p Ft(1,)e(and)i Fn(b)p
Ft(2,)f(and)g(w)n(e)g(select)h Fn(a)p Ft(3)f(as)g(the)523
1445 y(resp)r(onse)k(for)h(opp)r(onen)n(t)g(mo)n(v)n(es)f(to)i
Fn(b)p Ft(3,)e Fn(c)p Ft(2,)h(and)g Fn(c)p Ft(3.)g(Ha)n(ving)g
(selected)g(all)g(resp)r(onses)f(to)523 1544 y Fn(m)596
1514 y Fg(\003)634 1544 y Ft(,)32 b(w)n(e)f(con)n(tin)n(ue)g(in)h
(top-do)n(wn)f(order)f(to)i(pro)r(cess)e(meta-no)r(des)h(un)n(til)i
(all)e(suc)n(h)g(no)r(des)523 1644 y(ha)n(v)n(e)i(b)r(een)i(dealt)g
(with)g(and)f(the)h(excised)f(tree)g(has)g(b)r(een)h(replaced)f(with)h
(a)f(complete)523 1743 y(strategy)26 b(tree)i Fn(S)1067
1713 y Fg(0)1117 1743 y Ft(of)g Fm(S)6 b Ft(.)648 1843
y(Notice)21 b(that)g Fn(S)1131 1813 y Fg(0)1175 1843
y Ft(is)g(di\013eren)n(t)g(from)g(the)h(strategy)d(tree)i
Fn(S)26 b Ft(of)21 b(Fig.)g(2)g(from)g(whic)n(h)g Fn(E)26
b Ft(w)n(as)523 1943 y(deriv)n(ed;)e(for)g(example,)g(in)g(the)h
(restoration)e(pro)r(cess)g(w)n(e)h(nev)n(er)f(selected)i(the)g(ro)r
(ot)e(of)i(the)523 2042 y(third)k(subtree)f(of)g Fn(m)1192
2012 y Fg(\003)1259 2042 y Ft(as)g(a)g(resp)r(onse)f(to)i(an)f(opp)r
(onen)n(t)g(mo)n(v)n(e.)g(Ho)n(w)n(ev)n(er,)e(b)n(y)j(rep)r(eating)523
2142 y(the)f(restoration)d(pro)r(cess)h(once)g(for)h(eac)n(h)f(of)h
(the)h(p)r(ossible)f(p)r(erm)n(utations)f(of)h(c)n(hoices)g(for)523
2242 y Fn(r)r Ft(,)f(w)n(e)f(w)n(ould)h(construct)e(all)i(p)r(ossible)f
(strategy)f(trees)h(asso)r(ciated)f(with)i Fn(E)5 b Ft(,)26
b(including)f Fn(S)5 b Ft(.)648 2341 y(In)25 b(the)h(restoration)d(pro)
r(cess)h(it)i(will)f(alw)n(a)n(ys)f(b)r(e)h(p)r(ossible)g(to)g(\014nd)h
(at)f(least)g(one)g(v)-5 b(alue)523 2441 y(of)30 b Fn(r)i
Ft(at)e(eac)n(h)f(meta-no)r(de)g(as)g(long)g(as)h(the)g(excised)f(tree)
g(b)r(eing)h(restored)f(w)n(as)f(obtained)523 2540 y(from)j(a)h
(complete)f(strategy)g(tree.)g(This)h(follo)n(ws)e(from)i(Observ)-5
b(ation)30 b(1,)h(whic)n(h)h(in)g(turn)523 2640 y(follo)n(ws)27
b(from)g(the)h(fact)g(that)f(in)h(Hex,)g(stones)f(nev)n(er)g(mo)n(v)n
(e)f(once)h(pla)n(y)n(ed.)648 2740 y(With)39 b(resp)r(ect)f(to)g(a)g
(strategy)-7 b(,)37 b(a)h Fn(\031)s Ft(-mo)n(v)n(e)f(is)h(a)g(mo)n(v)n
(e)f(made)i(b)n(y)f(pla)n(y)n(er)e Fn(\031)s Ft(.)j(With)523
2839 y(resp)r(ect)30 b(to)h(a)f(strategy)f(tree,)h(a)g
Fn(\031)s Ft(-no)r(de)h(is)f(a)g(no)r(de)h(asso)r(ciated)e(with)i(a)f
Fn(\031)s Ft(-mo)n(v)n(e,)f(and)h(a)p 523 2893 51 4 v
523 2939 a Fn(\031)s Ft(-no)r(de)e(is)f(a)g(no)r(de)h(asso)r(ciated)e
(with)i Fn(\031)s Ft('s)g(opp)r(onen)n(t.)523 3099 y
Ff(Observ)-5 b(ation)31 b(1)42 b Fh(L)l(et)33 b Fn(T)45
b Fh(b)l(e)34 b(a)g(c)l(omplete)h(Hex)e(str)l(ate)l(gy)h(tr)l(e)l(e)f
(for)i(a)f(player)i Fn(\031)s Fh(,)e(let)g Fn(p)g Fh(b)l(e)523
3198 y(a)d Fn(\031)s Fh(-no)l(de)f(of)h Fn(T)42 b Fh(that)30
b(is)h(not)e(a)i(le)l(af,)h(let)e Fn(S)1886 3210 y Fo(1)1923
3198 y Fh(,.)13 b(.)g(.)g(,)p Fn(S)2138 3210 y Fe(k)2211
3198 y Fh(b)l(e)30 b(the)g(subtr)l(e)l(es)g(of)h Fn(T)41
b Fh(r)l(o)l(ote)l(d)31 b(at)f(the)523 3298 y(childr)l(en)c(of)f
Fn(p)p Fh(,)f(and)h(for)g(e)l(ach)g Fn(S)1531 3310 y
Fe(j)1590 3298 y Fh(let)f Fn(P)1754 3310 y Fe(j)1814
3298 y Fh(b)l(e)g(the)h(set)e(of)j(c)l(el)t(ls)f(asso)l(ciate)l(d)g
(with)g(the)f Fn(\031)s Fh(-no)l(des)523 3397 y(of)31
b Fn(S)672 3409 y Fe(j)707 3397 y Fh(.)f(Then)g(the)g(c)l(ombine)l(d)h
(interse)l(ction)f Fn(I)g Ft(=)22 b Fn(P)2134 3409 y
Fo(1)2190 3397 y Fm(\\)d Fn(:)14 b(:)g(:)k Fm(\\)h Fn(P)2506
3409 y Fe(k)2577 3397 y Fh(is)30 b(empty.)523 3557 y(Pr)l(o)l(of.)43
b Ft(F)-7 b(or)31 b(eac)n(h)h(index)g Fn(j)5 b Ft(,)32
b(let)g Fn(q)1611 3569 y Fe(j)1678 3557 y Ft(b)r(e)g(the)h(cell)f(asso)
r(ciated)e(with)j(the)f(ro)r(ot)f(of)h Fn(S)3167 3569
y Fe(j)3202 3557 y Ft(.)g Fn(T)43 b Ft(is)523 3657 y(complete,)28
b(so)f Fn(Q)c Ft(=)g Fm(f)p Fn(q)1255 3669 y Fo(1)1292
3657 y Fn(;)14 b(:)g(:)g(:)g(;)g(q)1514 3669 y Fe(t)1543
3657 y Fm(g)27 b Ft(corresp)r(onds)f(to)i(all)f(p)r(ossible)h(opp)r
(onen)n(t)g(resp)r(onses)e(to)523 3756 y Fn(p)p Ft(,)h(namely)f(all)h
(the)g(uno)r(ccupied)g(cells)g(after)f(the)h(mo)n(v)n(e)f
Fn(p)p Ft(.)h(Also,)f(for)g(eac)n(h)g(index)h Fn(j)5
b Ft(,)27 b Fn(q)3287 3768 y Fe(j)3349 3756 y Ft(is)523
3856 y(o)r(ccupied)h(b)n(y)f(an)h(opp)r(onen)n(t's)f(stone)g(and)h(so)f
(is)g(not)h(in)g Fn(P)2380 3868 y Fe(j)2415 3856 y Ft(,)g(and)f(so)g
(is)h(not)g(in)g Fn(I)7 b Ft(.)28 b(Th)n(us)f Fn(I)523
3956 y Ft(is)h(empt)n(y)-7 b(.)648 4107 y(The)27 b(follo)n(wing)g(is)g
(a)g(corollary)f(of)h(the)h(preceding)f(observ)-5 b(ation.)523
4267 y Ff(Observ)g(ation)31 b(2)42 b Fh(L)l(et)21 b Fn(E)5
b Ft(\()p Fn(T)12 b Ft(\))22 b Fh(b)l(e)g(the)h(excise)l(d)f(tr)l(e)l
(e)g(obtaine)l(d)h(fr)l(om)g(a)f(c)l(omplete)h(Hex)f(str)l(at-)523
4366 y(e)l(gy)34 b(tr)l(e)l(e)f Fn(T)45 b Fh(for)35 b(a)f(player)h
Fn(\031)s Fh(,)f(let)g Fn(m)g Fh(b)l(e)f(a)i(meta-no)l(de)f(of)g
Fn(E)5 b Ft(\()p Fn(T)12 b Ft(\))33 b Fh(that)h(is)g(not)g(a)g(le)l
(af,)h(let)523 4466 y Fn(S)574 4478 y Fo(1)611 4466 y
Fh(,.)13 b(.)g(.)g(,)p Fn(S)826 4478 y Fe(k)901 4466
y Fh(b)l(e)33 b(the)h(subtr)l(e)l(es)e(of)h Fn(E)5 b
Ft(\()p Fn(T)12 b Ft(\))33 b Fh(r)l(o)l(ote)l(d)g(at)g(the)g(childr)l
(en)i(of)f Fn(m)p Fh(,)f(and)g(for)h(e)l(ach)g Fn(S)3370
4478 y Fe(j)523 4565 y Fh(let)g Fn(P)697 4577 y Fe(j)766
4565 y Fh(b)l(e)f(the)h(set)f(of)i(c)l(el)t(ls)f(asso)l(ciate)l(d)h
(with)g(the)e Fn(\031)s Fh(-no)l(des)h(of)h Fn(S)2618
4577 y Fe(j)2653 4565 y Fh(.)f(Then)g(the)g(c)l(ombine)l(d)523
4665 y(interse)l(ction)c Fn(I)g Ft(=)23 b Fn(P)1181 4677
y Fo(1)1237 4665 y Fm(\\)18 b Fn(:)c(:)g(:)19 b Fm(\\)f
Fn(P)1552 4677 y Fe(k)1623 4665 y Fh(is)30 b(empty.)648
4825 y Ft(W)-7 b(e)30 b(refer)f(to)h(the)h(class)e(of)h(trees)f(that)h
(w)n(e)g(use)g(in)g(our)f(v)n(eri\014cation)g(system)h(as)f(\\au-)523
4924 y(totrees";)18 b(w)n(e)g(use)h(this)g(term)g(since)f(suc)n(h)h
(trees)f(mak)n(e)g(explicit)h(men)n(tion)g(only)g(of)f(a)h(pla)n(y)n
(er's)p eop end
%%Page: 5 5
TeXDict begin 5 4 bop 3347 232 a Fs(V)523 448 y Fh(own)32
b Ft(mo)n(v)n(es.)f(Autotrees)g(ha)n(v)n(e)g(the)i(same)e(form)h(and)f
(function)i(as)e(excised)h(trees;)f(ho)n(w-)523 548 y(ev)n(er,)c(they)h
(ma)n(y)f(not)h(ha)n(v)n(e)f(arisen)g(via)g(excision,)g(and)h(so)f(w)n
(e)g(do)h(not)g(de\014ne)g(them)g(with)523 648 y(resp)r(ect)35
b(to)g(excision.)f(An)i Fh(autotr)l(e)l(e)f Ft(is)g(de\014ned)g(as)g
(follo)n(ws:)f(eac)n(h)g(no)r(de)h(at)g(one)g(set)g(of)523
747 y(alternating)d(lev)n(els)f(is)i(a)f(sp)r(ecial)g(no)r(de)h(called)
f(a)g Fh(meta-no)l(de)p Ft(;)h(eac)n(h)f(no)r(de)g(at)h(the)g(other)523
847 y(set)28 b(of)f(alternating)g(lev)n(els)g(is)g(lab)r(elled)h(with)g
(a)f(b)r(oard)g(cell.)648 946 y(W)-7 b(e)38 b(call)f(an)h(autotree)f
Fh(elusive)i Ft(if)f(it)g(satis\014es)f(the)i(conditions)e(of)h(Observ)
-5 b(ation)36 b(2.)523 1046 y(Notice)d(that)h(restoration)d(generates)g
(a)i(complete)g(strategy)f(tree)h(from)f(an)h(autotree)f(if)523
1146 y(and)27 b(only)h(if)g(the)g(autotree)e(is)i(elusiv)n(e.)648
1245 y(As)i(an)f(initial)h(step)g(in)g(our)f(v)n(eri\014cation)g
(algorithm,)g(w)n(e)g(c)n(hec)n(k)g(whether)h(the)g(input)523
1345 y(autotree)d(is)i(elusiv)n(e.)f(The)g(second)g(and)g(\014nal)g
(step)h(in)f(our)g(v)n(eri\014cation)f(algorithm)g(is)h(to)523
1445 y(determine)22 b(whether)f(the)h(strategies)e(asso)r(ciated)g
(with)i(the)g(input)g(autotree)e(are)h(winning.)523 1544
y(W)-7 b(e)28 b(call)g(an)f(autotree)g(of)h(a)f(pla)n(y)n(er)g
Fh(satisfying)i Ft(if,)g(for)e(ev)n(ery)f(leaf,)i(the)g(cells)g(of)g
(the)g(ro)r(ot-)523 1644 y(to-leaf)k(path)g(satisfy)h(the)f(conditions)
g(of)h(a)f(win,)g(namely)h(join)f(the)h(pla)n(y)n(er's)e(t)n(w)n(o)g
(sides)523 1743 y(on)25 b(the)h(Hex)g(b)r(oard.)f(An)h(elusiv)n(e)e
(autotree)h(represen)n(ts)f(a)h(winning)h(strategy)e(if)i(and)f(only)
523 1843 y(if)30 b(the)g(autotree)e(is)h(satisfying.)g(This)g(follo)n
(ws)g(from)g(the)g(follo)n(wing)g(theorems,)f(whic)n(h)i(in)523
1943 y(turn)22 b(follo)n(w)f(b)n(y)g(straigh)n(tforw)n(ard)e(argumen)n
(ts)i(from)g(our)g(de\014nitions)h(and)g(the)g(discussion)523
2042 y(to)28 b(this)f(p)r(oin)n(t;)h(w)n(e)f(omit)h(the)g(details)g(of)
f(the)h(pro)r(ofs.)523 2210 y Ff(Theorem)j(3.)41 b Fh(F)-6
b(or)23 b(Hex,)f(for)i(any)e(c)l(omplete)i(str)l(ate)l(gy)e(tr)l(e)l(e)
g(ther)l(e)h(is)f(a)h(unique)f(asso)l(ciate)l(d)523 2310
y(elusive)g(excise)l(d)h(tr)l(e)l(e,)e(and)h(for)h(any)f(elusive)g
(autotr)l(e)l(e)f(ther)l(e)h(is)g(a)f(unique)h(set)f(of)h(asso)l(ciate)
l(d)523 2409 y(c)l(omplete)36 b(str)l(ate)l(gy)f(tr)l(e)l(es.)g(F)-6
b(urthermor)l(e,)35 b(for)h(any)f(c)l(omplete)h(str)l(ate)l(gy)f(tr)l
(e)l(e)f Fn(S)40 b Fh(and)c(the)523 2509 y(excise)l(d)e(tr)l(e)l(e)f
Fn(E)5 b Ft(\()p Fn(S)g Ft(\))33 b Fh(derive)l(d)i(fr)l(om)f
Fn(S)5 b Fh(,)34 b Fn(S)k Fh(is)33 b(winning)h(if)g(and)g(only)g(if)g
(al)t(l)g(str)l(ate)l(gy)f(tr)l(e)l(es)523 2609 y Fn(S)579
2578 y Fg(0)632 2609 y Fh(cr)l(e)l(ate)l(d)d(via)h(r)l(estor)l(ation)e
(fr)l(om)i Fn(E)5 b Ft(\()p Fn(S)g Ft(\))30 b Fh(ar)l(e)g(winning.)523
2776 y Ff(Theorem)h(4.)41 b Fh(A)n(n)35 b(autotr)l(e)l(e)h(r)l(epr)l
(esents)g(a)g(winning)g(str)l(ate)l(gy)g(if)h(and)g(only)f(if)h(the)f
(au-)523 2876 y(totr)l(e)l(e)29 b(is)h(elusive)h(and)f(satisfying.)523
3136 y Fp(3)112 b(And/or)38 b(autotrees)f(with)g(leaf)i(patterns)523
3330 y Ft(T)-7 b(o)32 b(complete)f(the)i(description)e(of)h(our)f
(notation,)g(w)n(e)h(need)g(only)f(to)h(describ)r(e)f(ho)n(w)g(w)n(e)
523 3430 y(add)c(t)n(w)n(o)g(features)g(to)h(autotrees:)e
Fh(and)q Ft(-no)r(des)h(and)g(leaf)h(patterns.)648 3530
y(Notice)23 b(that)h(the)g(c)n(hildren)g(of)f(a)g(meta-no)r(de)h(in)g
(an)f(autotree)g(corresp)r(ond)f(to)h(an)h(\\or")523
3629 y(decision)38 b(in)g(a)g(strategy;)f(dep)r(ending)i(on)f(the)h
(opp)r(onen)n(t's)e(mo)n(v)n(e)h(at)g(the)g(meta-no)r(de,)523
3729 y(the)30 b(pla)n(y)n(er)d(will)i(pla)n(y)g(the)g(strategy)f
(corresp)r(onding)f(to)i(the)h(\014rst)f(subtree,)g Fh(or)g
Ft(the)h(next)523 3828 y(subtree,)20 b Fh(or)h Ft(the)g(next)f
(subtree,)g(and)g(so)g(on;)g(see)g(the)h(excised)f(tree)g(in)g(Fig.)g
(3.)g(By)g(con)n(trast,)523 3928 y(in)25 b(Hex)h(as)e(in)i(man)n(y)e
(other)h(games,)f(a)h(particular)e(strategy)h(often)i(decomp)r(oses)e
(in)n(to)h(t)n(w)n(o)523 4028 y(or)i(more)g(indep)r(enden)n(t)h
(subtrategies)e(that)i(eac)n(h)f(need)h(to)f(b)r(e)h(follo)n(w)n(ed.)
648 4127 y(Suc)n(h)e(\\and")g(op)r(erations)g(are)g(easily)g(incorp)r
(orated)f(in)n(to)h(our)h(notation)f(b)n(y)g(allo)n(wing)523
4227 y(eac)n(h)c(lab)r(elled)i(no)r(de)f(\(namely)-7
b(,)23 b(not)g(a)g(meta-no)r(de\))g(of)g(a)f(mo)r(di\014ed)i(autotree)e
(to)h(ha)n(v)n(e)f(an)n(y)523 4327 y(n)n(um)n(b)r(er)f(of)g(c)n
(hildren.)g(W)-7 b(e)22 b(refer)e(to)h(autotrees)f(that)i(are)e(mo)r
(di\014ed)i(in)f(this)h(w)n(a)n(y)e(as)h Fh(and/or)523
4426 y(autotr)l(e)l(es)28 b Ft(since,)f(when)i(in)n(terpreting)e(them)h
(as)g(strategies,)e(the)j(o)r(dd)f(depth)h(no)r(des)e(\(the)523
4526 y(meta-no)r(des\))f(are)f Fh(or)p Ft(-no)r(des)h(while)g(the)g(ev)
n(en)g(depth)h(no)r(des)f(\(with)g(cell)h(lab)r(els\))f(are)f
Fh(and)p Ft(-)523 4625 y(no)r(des.)648 4725 y(Consider)j(for)g(example)
h(Fig.)g(4,)f(whic)n(h)h(sho)n(ws)f(an)h Fh(and)p Ft(/)p
Fh(or)h Ft(autotree)e(for)g(a)h(winning)523 4825 y(4)p
Fm(\002)p Ft(4)20 b(strategy)-7 b(.)20 b(The)i(ro)r(ot)e(is)h(an)g
Fh(and)q Ft(-no)r(de,)g(so)g(w)n(e)g(ha)n(v)n(e)f(to)h(pla)n(y)f(all)i
(substrategies)d(sim)n(ul-)523 4924 y(taneously;)24 b(in)h(this)f
(case,)g(there)h(is)f(only)g(one)g(subtree)g(so)g(there)h(is)f(only)g
(one)g(substrategy)p eop end
%%Page: 6 6
TeXDict begin 6 5 bop 523 232 a Fs(VI)1816 406 y
 tx@Dict begin tx@NodeDict begin {4.8611 0.0 8.40282 4.2014 2.1097
} false /N@T-0 16 {InitRnode } NewNode end end
 1816
406 a Fo(d1)1834 556 y
 tx@Dict begin tx@NodeDict begin {3.25694 0.0 4.09723 2.04861 2.1097
} false /N@T-0-0 16 {InitRnode } NewNode end end
 1834 556 a Fg(\017)1851 538 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end

1851 538 a 1333 706 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.5417 3.77084 2.1097
} false /N@T-0-0-0 16 {InitRnode } NewNode end end
 1333 706 a Fo(c3)1365 688 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0 /N@T-0-0-0 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1365
688 a 1275 856 a
 tx@Dict begin tx@NodeDict begin {3.25694 0.0 4.09723 2.04861 2.1097
} false /N@T-0-0-0-0 16 {InitRnode } NewNode end end
 1275 856 a Fg(\017)1292 839 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0 /N@T-0-0-0-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1292 839
a 1220 1006 a
 tx@Dict begin tx@NodeDict begin {4.8611 0.0 8.40282 4.2014 2.1097
} false /N@T-0-0-0-0-0 16 {InitRnode } NewNode end end
 1220 1006 a Fo(b4)1255 989 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0-0 /N@T-0-0-0-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1255 989 a
1298 1006 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.5417 3.77084 2.1097
} false /N@T-0-0-0-0-1 16 {InitRnode } NewNode end end
 1298 1006 a Fo(c4)1329 989 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0-0 /N@T-0-0-0-0-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1329 989 a 1420
856 a
 tx@Dict begin tx@NodeDict begin {3.25694 0.0 4.09723 2.04861 2.1097
} false /N@T-0-0-0-1 16 {InitRnode } NewNode end end
 1420 856 a Fg(\017)1437 839 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0 /N@T-0-0-0-1 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1437 839 a 1369 1006
a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.5417 3.77084 2.1097
} false /N@T-0-0-0-1-0 16 {InitRnode } NewNode end end
 1369 1006 a Fo(c2)1400 989 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0-1 /N@T-0-0-0-1-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1400 989 a 1440 1006 a
 tx@Dict begin tx@NodeDict begin {4.8611 0.0 8.40282 4.2014 2.1097
} false /N@T-0-0-0-1-1 16 {InitRnode } NewNode end end

1440 1006 a Fo(d2)1475 989 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0-1 /N@T-0-0-0-1-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1475 989 a 1630 706 a
 tx@Dict begin tx@NodeDict begin {4.8611 0.0 8.40282 4.2014 2.1097
} false /N@T-0-0-1 16 {InitRnode } NewNode end end
 1630
706 a Fo(b3)1665 688 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0 /N@T-0-0-1 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1665 688 a 1572 856 a
 tx@Dict begin tx@NodeDict begin {3.25694 0.0 4.09723 2.04861 2.1097
} false /N@T-0-0-1-0 16 {InitRnode } NewNode end end
 1572 856
a Fg(\017)1589 839 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1 /N@T-0-0-1-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1589 839 a 1518 1006 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-0-1-0-0 16 {InitRnode } NewNode end end
 1518 1006
a Fo(a4)1551 989 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1-0 /N@T-0-0-1-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1551 989 a 1592 1006 a
 tx@Dict begin tx@NodeDict begin {4.8611 0.0 8.40282 4.2014 2.1097
} false /N@T-0-0-1-0-1 16 {InitRnode } NewNode end end
 1592 1006 a
Fo(b4)1627 989 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1-0 /N@T-0-0-1-0-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1627 989 a 1723 856 a
 tx@Dict begin tx@NodeDict begin {3.25694 0.0 4.09723 2.04861 2.1097
} false /N@T-0-0-1-1 16 {InitRnode } NewNode end end
 1723 856 a Fg(\017)1740
839 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1 /N@T-0-0-1-1 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1740 839 a 1670 1006 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-0-1-1-0 16 {InitRnode } NewNode end end
 1670 1006 a Fo(a2)1704 989
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1-1 /N@T-0-0-1-1-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1704 989 a 1610 1156 a
 tx@Dict begin tx@NodeDict begin {3.25694 0.0 4.09723 2.04861 2.1097
} false /N@T-0-0-1-1-0-0 16 {InitRnode } NewNode end end
 1610 1156 a Fg(\017)1627 1139
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1-1-0 /N@T-0-0-1-1-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1627 1139 a 1556 1306 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-0-1-1-0-0-0 16 {InitRnode } NewNode end end
 1556 1306 a Fo(a1)1589 1289
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1-1-0-0 /N@T-0-0-1-1-0-0-0 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1589 1289 a 1631 1306 a
 tx@Dict begin tx@NodeDict begin {4.8611 0.0 8.40282 4.2014 2.1097
} false /N@T-0-0-1-1-0-0-1 16 {InitRnode } NewNode end end
 1631 1306 a Fo(b1)1665 1289
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1-1-0-0 /N@T-0-0-1-1-0-0-1 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1665 1289 a 1763 1156 a
 tx@Dict begin tx@NodeDict begin {3.25694 0.0 4.09723 2.04861 2.1097
} false /N@T-0-0-1-1-0-1 16 {InitRnode } NewNode end end
 1763 1156 a Fg(\017)1780 1139
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1-1-0 /N@T-0-0-1-1-0-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1780 1139 a 1709 1306 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-0-1-1-0-1-0 16 {InitRnode } NewNode end end
 1709 1306 a Fo(a3)1742 1289
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1-1-0-1 /N@T-0-0-1-1-0-1-0 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1742 1289 a 1783 1306 a
 tx@Dict begin tx@NodeDict begin {4.8611 0.0 8.40282 4.2014 2.1097
} false /N@T-0-0-1-1-0-1-1 16 {InitRnode } NewNode end end
 1783 1306 a Fo(b2)1818 1289
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1-1-0-1 /N@T-0-0-1-1-0-1-1 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1818 1289 a 1745 1006 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.5417 3.77084 2.1097
} false /N@T-0-0-1-1-1 16 {InitRnode } NewNode end end
 1745 1006 a Fo(c2)1776 989
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1-1 /N@T-0-0-1-1-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1776 989 a 1947 706 a
 tx@Dict begin tx@NodeDict begin {4.8611 0.0 8.40282 4.2014 2.1097
} false /N@T-0-0-2 16 {InitRnode } NewNode end end
 1947 706 a Fo(b3)1982 688 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0 /N@T-0-0-2 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1982
688 a 1870 856 a
 tx@Dict begin tx@NodeDict begin {3.25694 0.0 4.09723 2.04861 2.1097
} false /N@T-0-0-2-0 16 {InitRnode } NewNode end end
 1870 856 a Fg(\017)1887 839 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2 /N@T-0-0-2-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1887 839
a 1816 1006 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-0-2-0-0 16 {InitRnode } NewNode end end
 1816 1006 a Fo(a4)1849 989 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-0 /N@T-0-0-2-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1849 989 a
1890 1006 a
 tx@Dict begin tx@NodeDict begin {4.8611 0.0 8.40282 4.2014 2.1097
} false /N@T-0-0-2-0-1 16 {InitRnode } NewNode end end
 1890 1006 a Fo(b4)1925 989 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-0 /N@T-0-0-2-0-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1925 989 a 2059
856 a
 tx@Dict begin tx@NodeDict begin {3.25694 0.0 4.09723 2.04861 2.1097
} false /N@T-0-0-2-1 16 {InitRnode } NewNode end end
 2059 856 a Fg(\017)2076 839 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2 /N@T-0-0-2-1 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2076 839 a 1968 1006
a
 tx@Dict begin tx@NodeDict begin {4.8611 0.0 8.40282 4.2014 2.1097
} false /N@T-0-0-2-1-0 16 {InitRnode } NewNode end end
 1968 1006 a Fo(b2)2003 989 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-1 /N@T-0-0-2-1-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2003 989 a 1986 1156 a
 tx@Dict begin tx@NodeDict begin {3.25694 0.0 4.09723 2.04861 2.1097
} false /N@T-0-0-2-1-0-0 16 {InitRnode } NewNode end end

1986 1156 a Fg(\017)2003 1139 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-1-0 /N@T-0-0-2-1-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2003 1139 a 1931 1306
a
 tx@Dict begin tx@NodeDict begin {4.8611 0.0 8.40282 4.2014 2.1097
} false /N@T-0-0-2-1-0-0-0 16 {InitRnode } NewNode end end
 1931 1306 a Fo(b1)1966 1289 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-1-0-0 /N@T-0-0-2-1-0-0-0 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1966 1289 a 2009 1306
a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.5417 3.77084 2.1097
} false /N@T-0-0-2-1-0-0-1 16 {InitRnode } NewNode end end
 2009 1306 a Fo(c1)2041 1289 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-1-0-0 /N@T-0-0-2-1-0-0-1 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2041 1289 a 2114 1006
a
 tx@Dict begin tx@NodeDict begin {4.8611 0.0 8.40282 4.2014 2.1097
} false /N@T-0-0-2-1-1 16 {InitRnode } NewNode end end
 2114 1006 a Fo(d2)2149 989 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-1 /N@T-0-0-2-1-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2149 989 a 2132 1156 a
 tx@Dict begin tx@NodeDict begin {3.25694 0.0 4.09723 2.04861 2.1097
} false /N@T-0-0-2-1-1-0 16 {InitRnode } NewNode end end

2132 1156 a Fg(\017)2149 1139 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-1-1 /N@T-0-0-2-1-1-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2149 1139 a 2080 1306
a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.5417 3.77084 2.1097
} false /N@T-0-0-2-1-1-0-0 16 {InitRnode } NewNode end end
 2080 1306 a Fo(c3)2112 1289 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-1-1-0 /N@T-0-0-2-1-1-0-0 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2112 1289 a 2151 1306
a
 tx@Dict begin tx@NodeDict begin {4.8611 0.0 8.40282 4.2014 2.1097
} false /N@T-0-0-2-1-1-0-1 16 {InitRnode } NewNode end end
 2151 1306 a Fo(d3)2186 1289 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-1-1-0 /N@T-0-0-2-1-1-0-1 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2186 1289 a 2169 1457
a
 tx@Dict begin tx@NodeDict begin {3.25694 0.0 4.09723 2.04861 2.1097
} false /N@T-0-0-2-1-1-0-1-0 16 {InitRnode } NewNode end end
 2169 1457 a Fg(\017)2186 1439 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-1-1-0-1 /N@T-0-0-2-1-1-0-1-0 InitNC { NCLine  }
if end gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore
end
 2186 1439 a 2117 1607
a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.5417 3.77084 2.1097
} false /N@T-0-0-2-1-1-0-1-0-0 16 {InitRnode } NewNode end end
 2117 1607 a Fo(c4)2149 1589 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-1-1-0-1-0 /N@T-0-0-2-1-1-0-1-0-0 InitNC { NCLine
 } if end gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore
end
 2149 1589 a 2188 1607
a
 tx@Dict begin tx@NodeDict begin {4.8611 0.0 8.40282 4.2014 2.1097
} false /N@T-0-0-2-1-1-0-1-0-1 16 {InitRnode } NewNode end end
 2188 1607 a Fo(d4)2223 1589 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-1-1-0-1-0 /N@T-0-0-2-1-1-0-1-0-1 InitNC { NCLine
 } if end gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore
end
 2223 1589 a 2303 706
a
 tx@Dict begin tx@NodeDict begin {4.8611 0.0 8.40282 4.2014 2.1097
} false /N@T-0-0-3 16 {InitRnode } NewNode end end
 2303 706 a Fo(d3)2338 688 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0 /N@T-0-0-3 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 2338 688 a 2243 856 a
 tx@Dict begin tx@NodeDict begin {3.25694 0.0 4.09723 2.04861 2.1097
} false /N@T-0-0-3-0 16 {InitRnode } NewNode end end
 2243
856 a Fg(\017)2260 839 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3 /N@T-0-0-3-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2260 839 a 2192 1006 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.5417 3.77084 2.1097
} false /N@T-0-0-3-0-0 16 {InitRnode } NewNode end end
 2192
1006 a Fo(c4)2223 989 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3-0 /N@T-0-0-3-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2223 989 a 2263 1006 a
 tx@Dict begin tx@NodeDict begin {4.8611 0.0 8.40282 4.2014 2.1097
} false /N@T-0-0-3-0-1 16 {InitRnode } NewNode end end
 2263 1006
a Fo(d4)2298 989 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3-0 /N@T-0-0-3-0-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2298 989 a 2398 856 a
 tx@Dict begin tx@NodeDict begin {3.25694 0.0 4.09723 2.04861 2.1097
} false /N@T-0-0-3-1 16 {InitRnode } NewNode end end
 2398 856 a Fg(\017)2415
839 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3 /N@T-0-0-3-1 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2415 839 a 2341 1006 a
 tx@Dict begin tx@NodeDict begin {4.8611 0.0 8.40282 4.2014 2.1097
} false /N@T-0-0-3-1-0 16 {InitRnode } NewNode end end
 2341 1006 a Fo(d2)2376 989
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3-1 /N@T-0-0-3-1-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2376 989 a 2419 1006 a
 tx@Dict begin tx@NodeDict begin {4.8611 0.0 8.40282 4.2014 2.1097
} false /N@T-0-0-3-1-1 16 {InitRnode } NewNode end end
 2419 1006 a Fo(b3)2454 989 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3-1 /N@T-0-0-3-1-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end

2454 989 a 2365 1156 a
 tx@Dict begin tx@NodeDict begin {3.25694 0.0 4.09723 2.04861 2.1097
} false /N@T-0-0-3-1-1-0 16 {InitRnode } NewNode end end
 2365 1156 a Fg(\017)2382 1139
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3-1-1 /N@T-0-0-3-1-1-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2382 1139 a 2313 1306 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-0-3-1-1-0-0 16 {InitRnode } NewNode end end
 2313 1306 a Fo(a4)2346 1289
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3-1-1-0 /N@T-0-0-3-1-1-0-0 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2346 1289 a 2387 1306 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.5417 3.77084 2.1097
} false /N@T-0-0-3-1-1-0-1 16 {InitRnode } NewNode end end
 2387 1306 a Fo(c3)2418 1289
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3-1-1-0 /N@T-0-0-3-1-1-0-1 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2418 1289 a 2509 1156 a
 tx@Dict begin tx@NodeDict begin {3.25694 0.0 4.09723 2.04861 2.1097
} false /N@T-0-0-3-1-1-1 16 {InitRnode } NewNode end end
 2509 1156 a Fg(\017)2526 1139
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3-1-1 /N@T-0-0-3-1-1-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2526 1139 a 2458 1306 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.5417 3.77084 2.1097
} false /N@T-0-0-3-1-1-1-0 16 {InitRnode } NewNode end end
 2458 1306 a Fo(c2)2490 1289
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3-1-1-1 /N@T-0-0-3-1-1-1-0 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2490 1289 a 2529 1306 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-0-3-1-1-1-1 16 {InitRnode } NewNode end end
 2529 1306 a Fo(a2)2562 1289
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3-1-1-1 /N@T-0-0-3-1-1-1-1 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2562 1289 a 2469 1457 a
 tx@Dict begin tx@NodeDict begin {3.25694 0.0 4.09723 2.04861 2.1097
} false /N@T-0-0-3-1-1-1-1-0 16 {InitRnode } NewNode end end
 2469 1457 a Fg(\017)2486 1439
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3-1-1-1-1 /N@T-0-0-3-1-1-1-1-0 InitNC { NCLine  }
if end gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore
end
 2486 1439 a 2414 1607 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-0-3-1-1-1-1-0-0 16 {InitRnode } NewNode end end
 2414 1607 a Fo(a1)2448 1589
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3-1-1-1-1-0 /N@T-0-0-3-1-1-1-1-0-0 InitNC { NCLine
 } if end gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore
end
 2448 1589 a 2489 1607 a
 tx@Dict begin tx@NodeDict begin {4.8611 0.0 8.40282 4.2014 2.1097
} false /N@T-0-0-3-1-1-1-1-0-1 16 {InitRnode } NewNode end end
 2489 1607 a Fo(b1)2524 1589
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3-1-1-1-1-0 /N@T-0-0-3-1-1-1-1-0-1 InitNC { NCLine
 } if end gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore
end
 2524 1589 a 2621 1457 a
 tx@Dict begin tx@NodeDict begin {3.25694 0.0 4.09723 2.04861 2.1097
} false /N@T-0-0-3-1-1-1-1-1 16 {InitRnode } NewNode end end
 2621 1457 a Fg(\017)2638 1439
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3-1-1-1-1 /N@T-0-0-3-1-1-1-1-1 InitNC { NCLine  }
if end gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore
end
 2638 1439 a 2567 1607 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-0-3-1-1-1-1-1-0 16 {InitRnode } NewNode end end
 2567 1607 a Fo(a3)2600 1589
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3-1-1-1-1-1 /N@T-0-0-3-1-1-1-1-1-0 InitNC { NCLine
 } if end gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore
end
 2600 1589 a 2641 1607 a
 tx@Dict begin tx@NodeDict begin {4.8611 0.0 8.40282 4.2014 2.1097
} false /N@T-0-0-3-1-1-1-1-1-1 16 {InitRnode } NewNode end end
 2641 1607 a Fo(b2)2676 1589
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3-1-1-1-1-1 /N@T-0-0-3-1-1-1-1-1-1 InitNC { NCLine
 } if end gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore
end
 2676 1589 a 523 1742 a Fd(Fig.)12 b(4.)26 b Fo(An)g
Fc(and)p Fo(/)p Fc(or)h Fo(autotree)d(for)i(a)g(winning)f(\014rst-pla)n
(y)n(er)h(4)p Fg(\002)p Fo(4)g(Hex)f(strategy)-5 b(.)26
b(Odd)f(depth)f(no)r(des)h(\()p Fg(\017)p Fo(\))h(are)523
1808 y(\\or"-no)r(des;)c(ev)n(en)f(depth)g(no)r(des)g(\(cell)g(lab)r
(els\))g(are)h(\\and"-no)r(des.)g(Fig.)f(5)i(sho)n(ws)g(one)f(line)f
(of)h(this)g(strategy)-5 b(.)523 2127 y Ft(to)30 b(follo)n(w.)f(Supp)r
(ose)h(that)g(the)g(opp)r(onen)n(t's)g(resp)r(onse)e(to)i(the)g(pla)n
(y)n(er's)e(initial)i(mo)n(v)n(e)f Fn(d)p Ft(1)523 2227
y(is)37 b Fn(b)p Ft(3.)f(Then)h(the)g(pla)n(y)n(er)e(can)h(select)h(an)
n(y)f(subtree)g(not)h(con)n(taining)f Fn(b)p Ft(3,)g(sa)n(y)f(the)i
(\014rst)523 2326 y(subtree;)31 b(th)n(us)g(the)g(pla)n(y)n(er)f(mo)n
(v)n(es)f(to)i Fn(c)p Ft(3,)g(the)g(ro)r(ot)f(of)h(the)g(\014rst)g
(subtree.)g(This)g(ro)r(ot)f(is)523 2426 y(an)g Fh(and)q
Ft(-no)r(de)g(with)g(t)n(w)n(o)g(subtrees,)g(so)f(no)n(w)h(the)g(pla)n
(y)n(er)f(has)h(to)g(follo)n(w)f(these)i(t)n(w)n(o)e(sub-)523
2525 y(strategies)j(sim)n(ultaneously;)g(the)i(pla)n(y)n(er)d(m)n(ust)i
(ensure)g(that)h(she)f(reac)n(hes)e(a)i(leaf)g(no)r(de)523
2625 y(in)e(eac)n(h)g(of)f(the)i(subtrees)e(of)h(ev)n(ery)f
Fh(and)q Ft(-no)r(de.)g(F)-7 b(or)31 b(example,)f(if)i(the)f(opp)r
(onen)n(t's)g(next)523 2725 y(mo)n(v)n(e)d(is)g(at)h(one)f(of)h
Fm(f)p Fn(b)p Ft(4)p Fn(;)14 b(c)p Ft(4)p Fm(g)p Ft(,)26
b(the)j(pla)n(y)n(er)f(m)n(ust)g(immediately)h(reply)g(with)g(the)g
(other)f(of)523 2824 y(these)d(t)n(w)n(o)e(cells)i(or)e(risk)h(not)h
(reac)n(hing)e(a)h(leaf)g(of)h(the)g Fm(f)p Fn(b)p Ft(4)p
Fn(;)14 b(c)p Ft(4)p Fm(g)22 b Ft(subtree.)i(Similarly)-7
b(,)25 b(if)g(the)523 2924 y(opp)r(onen)n(t's)31 b(next)h(mo)n(v)n(e)e
(is)h(at)g(one)g(of)g Fm(f)p Fn(c)p Ft(2)p Fn(;)14 b(d)p
Ft(2)p Fm(g)p Ft(,)30 b(the)i(pla)n(y)n(er)e(m)n(ust)h(immediately)h
(reply)523 3024 y(with)d(the)g(other)f(of)h(these)f(t)n(w)n(o)g(cells.)
h(If)g(the)g(opp)r(onen)n(t's)f(next)h(mo)n(v)n(e)e(is)i(not)g(in)f
Fm(f)p Fn(b)p Ft(4)p Fn(;)14 b(c)p Ft(4)p Fm(g)523 3123
y Ft(or)24 b Fm(f)p Fn(c)p Ft(2)p Fn(;)14 b(d)p Ft(2)p
Fm(g)p Ft(,)24 b(the)h(pla)n(y)n(er)f(can)g(mo)n(v)n(e)g(an)n(ywhere.)g
(Fig.)h(5)g(illustrates)f(another)g(line)i(of)f(pla)n(y)523
3223 y(of)j(this)f(strategy)-7 b(.)648 3339 y(Finally)g(,)41
b(subtrees)g(of)g Fh(and)p Ft(/)p Fh(or)h Ft(autotrees)e(that)i
(corresp)r(ond)e(to)h(isomorphic)f(sub-)523 3438 y(strategies)27
b(can)h(b)r(e)g(replaced)f(with)i(a)f(sp)r(ecial)g(no)r(de)g(corresp)r
(onding)e(to)i(suc)n(h)g(substrate-)523 3538 y(gies.)38
b(This)g(is)h(illustrated)f(in)g(Fig.)h(6,)f(where)g(t)n(w)n(o)f
(substrategy)g(macros)g(are)h(used)g(to)523 3637 y(simplify)28
b(the)g(tree)f(of)h(Fig.)f(4.)648 3753 y(Mo)r(difying)20
b(our)f(v)n(eri\014cation)g(algorithms)g(to)h(handle)g
Fh(and)p Ft(-)g(and)g Fh(or)q Ft(-no)r(des)f(is)i(straigh)n(t-)523
3853 y(forw)n(ard.)27 b(F)-7 b(or)28 b Fh(or)q Ft(-no)r(des,)g(the)h
(test)g(for)f(the)h(elusiv)n(e)f(prop)r(ert)n(y)g(is)h(the)g(same)f(as)
g(with)h(un-)523 3953 y(mo)r(di\014ed)24 b(autotrees:)f(c)n(hec)n(k)g
(whether)g(the)h(com)n(bined)g(in)n(tersection)f(of)g(all)h(c)n(hild)g
(no)r(des)f(is)523 4052 y(the)30 b(empt)n(y)h(set.)f(F)-7
b(or)29 b Fh(and)q Ft(-no)r(des,)g(it)h(is)g(necessary)f(to)g(c)n(hec)n
(k)h(whether)f(the)i(in)n(tersection)991 4731 y @beginspecial
0 @llx 0 @lly 86 @urx 53 @ury 860 @rwi @setspecial
%%BeginDocument: B4.eps
%!PS-Adobe-3.0
%%Creator: Jack van Rijswijck, thanks to Cameron Browne
%%BoundingBox: 0 0 86 53
%%Pages: 0
%%EndComments

/OriginX -2 def
/OriginY 26 def
%---------------- Variables -------------------

/DimX 4 def
/DimY 4 def
/Scale 1.2 def


%---------------- Constants -------------------

/Root2 1.414213562 def
/Root3 1.732050808 def

/Chars {[(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)(n)]} def
/Digits {[(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)(12)(13)(14)]} def

/HexRadius 5 Scale mul def
/HexLineWidth 0.014 def
/CircleRadius 3.3 Scale mul def
/CircleLineWidth 0.346 def
/BoardOutlineWidth 0.5 def
%/TextHeight 4.5 def
/TextHeight 6 def
/TextWidth TextHeight 0.45 mul def
/BoardShade 0.8 def
/FadedBoardShade 0.9 def
/CoordinatesShade 0.5 def
/DeadPieceShade 0.6 def
/DeadCellShade 0.6 def
/EarLength 0.5 def
/GraphVertexSize 1.5 def
/GraphLineWidth 0.5 def
/MoveEvalSize 0.9 def
/FatLineWidth 1.0 def
/MarkerSize 1.2 def

%----------- Functions -------------

/HexCenterX { % X coordinate of center of cell: i j HexX
    /j exch def
    /i exch def
    OriginX i j add HexRadius mul 1.5 mul add
} def

/HexCenterY { % Y coordinate of center of cell: i j HexY
    /j exch def
    /i exch def
    OriginY i j sub HexRadius mul Root3 mul 2 div sub
} def

/HexCenterVertex {
    /j exch def
    /i exch def
    i j HexCenterX
    i j HexCenterY
} def

/HexTopLeftVertex {
    /j exch def
    /i exch def
    i j HexCenterX HexRadius 2 div sub
    i j HexCenterY HexRadius Root3 mul 2 div add
} def

/HexTopRightVertex {
    /j exch def
    /i exch def
    i j HexCenterX HexRadius 2 div add
    i j HexCenterY HexRadius Root3 mul 2 div add
} def

/HexRightVertex {
    /j exch def
    /i exch def
    i j HexCenterX HexRadius add
    i j HexCenterY 
} def

/HexBottomRightVertex {
    /j exch def
    /i exch def
    i j HexCenterX HexRadius 2 div add
    i j HexCenterY HexRadius Root3 mul 2 div sub
} def

/HexBottomLeftVertex {
    /j exch def
    /i exch def
    i j HexCenterX HexRadius 2 div sub
    i j HexCenterY HexRadius Root3 mul 2 div sub
} def

/HexLeftVertex {
    /j exch def
    /i exch def
    i j HexCenterX HexRadius sub
    i j HexCenterY 
} def

/HexUpRightEdge {
    /size exch def
    
    HexRadius 2 div size mul
    HexRadius Root3 mul 2 div size mul
} def

/HexRightEdge {
    /size exch def
    
    HexRadius size mul
    0
} def

/HexDownRightEdge {
    /size exch def

    HexRadius 2 div size mul
    HexRadius Root3 mul 2 div neg size mul
} def

/HexDownLeftEdge {
    /size exch def

    HexRadius 2 div neg size mul
    HexRadius Root3 mul 2 div neg size mul
} def

/HexLeftEdge {
    /size exch def

    HexRadius neg size mul
    0 size mul
} def

/HexUpLeftEdge {
    /size exch def

    HexRadius 2 div neg size mul
    HexRadius Root3 mul 2 div size mul
} def

/HexagonPath{
    /j exch def
    /i exch def

    newpath
    i j HexLeftVertex moveto

    1.0 HexUpRightEdge rlineto
    1.0 HexRightEdge rlineto
    1.0 HexDownRightEdge rlineto
    1.0 HexDownLeftEdge rlineto
    1.0 HexLeftEdge rlineto
    1.0 HexUpLeftEdge rlineto

    closepath
} def

/HexTopLeftEar {
    /j exch def
    /i exch def

    newpath
    i j HexTopLeftVertex moveto
    EarLength HexUpLeftEdge rlineto
    stroke
} def

/HexTopRightEar {
    /j exch def
    /i exch def

    newpath
    i j HexTopRightVertex moveto
    EarLength HexUpRightEdge rlineto
    stroke
} def

/HexRightEar {
    /j exch def
    /i exch def

    newpath
    i j HexRightVertex moveto
    EarLength HexRightEdge rlineto
    stroke
} def

/HexBottomRightEar {
    /j exch def
    /i exch def

    newpath
    i j HexBottomRightVertex moveto
    EarLength HexDownRightEdge rlineto
    stroke
} def

/HexBottomLeftEar {
    /j exch def
    /i exch def

    newpath
    i j HexBottomLeftVertex moveto
    EarLength HexDownLeftEdge rlineto
    stroke
} def

/HexLeftEar {
    /j exch def
    /i exch def

    newpath
    i j HexLeftVertex moveto
    EarLength HexLeftEdge rlineto
    stroke
} def

/HexagonEars {
    /j exch def
    /i exch def

    HexLineWidth setlinewidth
    
    i j HexTopLeftEar
    i j HexTopRightEar
    i j HexRightEar
    i j HexBottomRightEar
    i j HexBottomLeftEar
    i j HexLeftEar
} def

/HexDeadCell {
    /j exch def
    /i exch def

    i j DeadCellShade ShadedHexagon
} def

/HexDeadMarkedCell {
    /j exch def
    /i exch def

    i j DeadCellShade ShadedHexagon
    i j HexBlackMarker
} def
    
    
/ShadedHexagonWithEars {
    /shade exch def
    /j exch def
    /i exch def

    i j shade ShadedHexagon
    i j HexagonEars
} def
    
/BoundedShadedHexagonWithEars {
    /shade exch def
    /j exch def
    /i exch def

    i j shade BoundedShadedHexagon
    i j BoundedHexagonWithEars
} def

/BoundedHexagonWithEars {
    /j exch def
    /i exch def

    i j BoundedHexagon

    i 1 gt {
	j 1 gt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexLeftVertex moveto
	EarLength HexLeftEdge rlineto
	stroke

	j DimY lt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexTopLeftVertex moveto
	EarLength HexUpLeftEdge rlineto
	stroke
    }
    if

    i DimX lt {
	j DimY lt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexRightVertex moveto
	EarLength HexRightEdge rlineto
	stroke

	j 1 gt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexBottomRightVertex moveto
	EarLength HexDownRightEdge rlineto
	stroke
    }
    if

    j DimY lt {
	i 1 gt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexTopRightVertex moveto
	EarLength HexUpRightEdge rlineto
	stroke

	i DimX lt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexRightVertex moveto
	EarLength HexRightEdge rlineto
	stroke
    }
    if

    j 1 gt {
	i DimX lt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexBottomLeftVertex moveto
	EarLength HexDownLeftEdge rlineto
	stroke

	i 1 gt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexLeftVertex moveto
	EarLength HexLeftEdge rlineto
	stroke
    }
    if
} def

/BoundedShadedHexagon {
    /shade exch def
    /j exch def
    /i exch def

    i j shade FillHexagon
    i j BoundedHexagon
} def

/BoundedHexagon {
    /j exch def
    /i exch def

    0 setgray
    HexLineWidth setlinewidth
    i j HexagonPath
    stroke

    BoardOutlineWidth setlinewidth

    i 1 eq {
	newpath
	i j HexLeftVertex moveto
	1.0 HexUpRightEdge rlineto
	1.0 HexRightEdge rlineto
	stroke
    }
    if

    j DimY eq {
	newpath
	i j HexTopLeftVertex moveto
	1.0 HexRightEdge rlineto
	1.0 HexDownRightEdge rlineto
	stroke
    }
    if

    i DimX eq {
	newpath
	i j HexRightVertex moveto
	1.0 HexDownLeftEdge rlineto
	1.0 HexLeftEdge rlineto
	stroke
    }
    if

    j 1 eq {
	newpath
	i j HexBottomRightVertex moveto
	1.0 HexLeftEdge rlineto
	1.0 HexUpLeftEdge rlineto
	stroke
    }
    if
} def

/ShadedHexagon {
    /shade exch def
    /j exch def
    /i exch def

    i j shade FillHexagon
    i j Hexagon
} def

/Hexagon { % call: i j Hexagon
    /j exch def
    /i exch def

    i j HexagonPath
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

/FillHexagon {   % call: i j shade FillHexagon
    /shade exch def
    /j exch def
    /i exch def

    i j HexagonPath
    0 setlinewidth
    shade setgray
    fill
    i j Hexagon
} def

/HexBoardOutlinePath {
    newpath
    1 1 HexLeftVertex moveto

    1 1 DimY {
	1.0 HexUpRightEdge rlineto
	1.0 HexRightEdge rlineto
    } for

    1 1 DimX 1 sub {
	1.0 HexDownRightEdge rlineto
	1.0 HexRightEdge rlineto
    } for
    1.0 HexDownRightEdge rlineto

    1 1 DimY {
	1.0 HexDownLeftEdge rlineto
	1.0 HexLeftEdge rlineto
    } for

    1 1 DimX 1 sub {
	1.0 HexUpLeftEdge rlineto
	1.0 HexLeftEdge rlineto
    } for
    1.0 HexUpLeftEdge rlineto

    closepath
} def

/HexBoardOutline {
    HexBoardOutlinePath
    BoardOutlineWidth setlinewidth
    0 setgray
    stroke
} def

/HexBoardFillNoOutline {
    /shade exch def
    HexBoardOutlinePath
    0 setlinewidth
    shade setgray
    fill
} def

/HexBoardFill {
    /shade exch def
    shade HexBoardFillNoOutline
    HexBoardOutline
} def

/HexShannonGrid {
    1 1 DimY {
	/j exch def
	1 1 DimX {
	    /i exch def
	    i j HexVertex
	} for
    } for

    1 1 DimY {
	/j exch def
	1 j DimX j HexLine
    } for

    1 1 DimX {
	/i exch def
	i 1 i DimY HexLine
    } for

    2 1 DimX DimY add 2 sub {
	/i exch def
	i DimY lt {1 i} {i DimY sub 1 add DimY} ifelse
	i DimX lt {i 1} {DimX i DimX sub 1 add} ifelse
	HexLine
    } for
} def

/HexBoardGrid {
    1 1 DimY {
	/j exch def
	1 1 DimX {
	    /i exch def
	    i j Hexagon
	} for
    } for
} def

/DrawHexBoard {
    BoardShade HexBoardFill
    HexBoardGrid
} def

/DrawHexBoardNoOutline {
    1 1 DimY {
	/j exch def
	1 1 DimX {
	    /i exch def
	    i j BoardShade FillHexagon
	    i j Hexagon
	} for
    } for
} def

/YBoardOutlinePath {
    newpath
    0 0 HexLeftVertex moveto

    1 1 DimX {
	1.0 HexUpRightEdge rlineto
	1.0 HexRightEdge rlineto
    } for

    1 1 DimX {
	1.0 HexDownRightEdge rlineto
	1.0 HexDownLeftEdge rlineto
    } for

    1 1 DimX {
	1.0 HexLeftEdge rlineto
	1.0 HexUpLeftEdge rlineto
    } for

    closepath
} def

/YBoardOutline {
    YBoardOutlinePath
    BoardOutlineWidth setlinewidth
    0 setgray
    stroke
} def

/YBoardFill {
    /shade exch def
    YBoardOutlinePath
    0 setlinewidth
    shade setgray
    fill
    YBoardOutline
} def

/YBoardGrid {
    0 1 DimX 1 sub {
	/j exch def
	0 1 DimX 1 sub j sub {
	    /i exch def
	    i j Hexagon
	} for
    } for
} def

/DrawYBoard {
    BoardShade YBoardFill
    YBoardGrid
} def

/FontSelect { % bold italic FontSelect
    /italic exch def
    /bold exch def

    bold {
	italic {
	    /Times-BoldItalic findfont TextHeight scalefont setfont
	} {
	    /Times-Bold findfont TextHeight scalefont setfont
	}
	ifelse
    } {
	italic {
	    /Times-Italic findfont TextHeight scalefont setfont
	} {
	    /Times findfont TextHeight scalefont setfont
	}
	ifelse
    }
    ifelse
} def
	    
/LabelString {   % call: i j (str) strlen LabelString
    /strlen exch def
    /str exch def
    /j exch def
    /i exch def

    newpath
    i j HexCenterX TextWidth strlen mul 0.5 mul sub
    i j HexCenterY TextHeight 0.225 mul sub
    moveto
    str
    show
} def

/AbsLabelString {
    /strlen exch def
    /str exch def
    /y exch def
    /x exch def

    newpath
    x AbsCoordX TextWidth strlen mul 0.5 mul sub
    y AbsCoordY TextHeight 0.225 mul sub
    moveto
    str
    show
} def

/LabelStringVerb { % i j (str) strlen shade bold italic LabelStringVerb
    /italic exch def
    /bold exch def
    /shade exch def
    /strlen exch def
    /str exch def
    /j exch def
    /i exch def
    bold italic FontSelect
    shade setgray
    i j str strlen LabelString
} def

/HexBoardCoordinates {
    false true FontSelect
    CoordinatesShade setgray
    
    1 1 DimX {
	/i exch def
	i 0 Chars i 1 sub get 1 LabelString
	i DimY 1 add Chars i 1 sub get 1 LabelString
    } for

    1 1 DimY {
	/j exch def
	0 j Digits j 1 sub get
	DimY 9 gt {2} {1} ifelse
	LabelString
	DimX 1 add j Digits j 1 sub get
	DimY 9 gt {2} {1} ifelse
	LabelString
    } for
} def

/HexEdgePieceLocationBottomLeft {
    /dist exch def
    /midx DimX 1 add 2 div def
    /midy DimY 1 add 2 div def

    midx
    2 midx sub dist sub
} def

/HexEdgePieceLocationTopRight {
    /dist exch def
    /midx DimX 1 add 2 div def
    /midy DimY 1 add 2 div def

    midx
    DimX DimY add midx sub dist add
} def

/HexEdgePieceLocationTopLeft {
    /dist exch def
    /midx DimX 1 add 2 div def
    /midy DimY 1 add 2 div def
    
    2 midy sub dist sub
    midy
} def

/HexEdgePieceLocationBottomRight {
    /dist exch def
    /midx DimX 1 add 2 div def
    /midy DimY 1 add 2 div def
    
    DimX DimY add midy sub dist add
    midy
} def

/HexWhiteTerminal {
    (T) 1 HexWhiteLabelledPiece
} def

/HexBlackTerminal {
    (T) 1 HexBlackLabelledPiece
} def
    
/HexShannonTerminalBottomLeft {
    /dist exch def

    dist HexEdgePieceLocationBottomLeft
    HexWhiteTerminal
} def

/HexShannonTerminalTopRight {
    /dist exch def

    dist HexEdgePieceLocationTopRight
    HexWhiteTerminal
} def

/HexShannonTerminalConnectionsWhite {
    /dist exch def
    /midx DimX 1 add 2 div def
    /midy DimY 1 add 2 div def

    1 1 DimX {
	/i exch def
	dist HexEdgePieceLocationBottomLeft i 1 HexLine
	dist HexEdgePieceLocationTopRight i DimY HexLine
    } for

    dist HexShannonTerminalBottomLeft
    dist HexShannonTerminalTopRight
} def

/HexShannonTerminalTopLeft {
    /dist exch def

    dist HexEdgePieceLocationTopLeft
    HexBlackTerminal
} def

/HexShannonTerminalBottomRight {
    /dist exch def

    dist HexEdgePieceLocationBottomRight
    HexBlackTerminal
} def

/HexShannonTerminalConnectionsBlack {
    /dist exch def
    /midx DimX 1 add 2 div def
    /midy DimY 1 add 2 div def

    1 1 DimY {
	/j exch def
	dist HexEdgePieceLocationTopLeft 1 j HexLine
	dist HexEdgePieceLocationBottomRight DimX j HexLine
    } for

    dist HexShannonTerminalTopLeft
    dist HexShannonTerminalBottomRight
} def

/HexBoardEdgePieceTopLeft {
    /dist exch def
    dist HexEdgePieceLocationTopLeft HexBlackPiece
} def
/HexBoardEdgePieceBottomLeft {
    /dist exch def
    dist HexEdgePieceLocationBottomLeft HexWhitePiece
} def
/HexBoardEdgePieceTopRight {
    /dist exch def
    dist HexEdgePieceLocationTopRight HexWhitePiece
} def
/HexBoardEdgePieceBottomRight {
    /dist exch def
    dist HexEdgePieceLocationBottomRight HexBlackPiece
} def

/HexBoardEdgePieces { % extradist
    /dist exch def

    dist HexBoardEdgePieceTopLeft
    dist HexBoardEdgePieceBottomLeft
    dist HexBoardEdgePieceTopRight
    dist HexBoardEdgePieceBottomRight
} def

/HexDot { % i j size
    /size exch def
    /j exch def
    /i exch def

    0 setlinewidth
    0 setgray
    newpath
    i j HexCenterVertex size 0 360 arc
    fill
} def


/HexWhiteMarkedPiece {
    /j exch def
    /i exch def

    i j HexWhitePiece
    
    0 setgray
    0 setlinewidth
    newpath
    i j HexCenterVertex MarkerSize 0 360 arc
    fill
} def

/HexBlackMarkedPiece {
    /j exch def
    /i exch def

    i j HexBlackPiece
    
    1 setgray
    0 setlinewidth
    newpath
    i j HexCenterVertex MarkerSize 0 360 arc
    fill
} def


/HexDoubleMarker {
    /shaderight exch def
    /shadeleft exch def
    /j exch def
    /i exch def

    shadeleft setgray
    0 setlinewidth
    newpath
    i j HexCenterX MarkerSize sub i j HexCenterY MarkerSize 0 360 arc
    fill

    0 setgray
    CircleLineWidth setlinewidth
    newpath
    i j HexCenterX MarkerSize sub i j HexCenterY MarkerSize 0 360 arc
    stroke

    shaderight setgray
    0 setlinewidth
    newpath
    i j HexCenterX MarkerSize add i j HexCenterY MarkerSize 0 360 arc
    fill

    0 setgray
    CircleLineWidth setlinewidth
    newpath
    i j HexCenterX MarkerSize add i j HexCenterY MarkerSize 0 360 arc
    stroke
} def

/HexBlackWhiteMarker {
    /j exch def
    /i exch def
    i j 0.0 1.0 HexDoubleMarker
} def

/HexWhiteBlackMarker {
    /j exch def
    /i exch def
    i j 1.0 0.0 HexDoubleMarker
} def
        
/HexMarker {
    /j exch def
    /i exch def

    0 setlinewidth
    newpath
    i j HexCenterVertex MarkerSize 0 360 arc
    fill

    0 setgray
    CircleLineWidth setlinewidth
    newpath
    i j HexCenterVertex MarkerSize 0 360 arc
    stroke  
} def

/HexBlackMarker {
    /j exch def
    /i exch def

    0 setgray
    i j HexMarker
} def

/HexWhiteMarker {
    /j exch def
    /i exch def

    1 setgray
    i j HexMarker
} def
    
/HexVertex {
    /j exch def
    /i exch def

    i j GraphVertexSize HexDot
} def

/HexLine {
    /j2 exch def
    /i2 exch def
    /j1 exch def
    /i1 exch def

    GraphLineWidth setlinewidth
    0 setgray
    newpath
    i1 j1 HexCenterVertex moveto
    i2 j2 HexCenterVertex lineto
    stroke
} def

/HexPiece { % i j shade
    /shade exch def
    /j exch def
    /i exch def

    0 setlinewidth
    shade setgray
    newpath
    i j HexCenterVertex CircleRadius 0 360 arc
    fill

    0 setgray
    CircleLineWidth setlinewidth
    newpath
    i j HexCenterVertex CircleRadius 0 360 arc
    stroke
} def

/HexWhitePiece {
    /j exch def
    /i exch def

    i j 1.0 HexPiece
} def

/HexBlackPiece {
    /j exch def
    /i exch def

    i j 0.0 HexPiece
} def

/HexWhiteLabelledPiece { % i j (str) strlen
    /strlen exch def
    /str exch def
    /j exch def
    /i exch def

    i j HexWhitePiece
    i j str strlen 0.0 true true LabelStringVerb
} def

/HexBlackLabelledPiece { % i j (str) strlen
    /strlen exch def
    /str exch def
    /j exch def
    /i exch def

    i j HexBlackPiece
    i j str strlen 1.0 true true LabelStringVerb
} def

/DrawBox { % minx miny maxx maxy
    /maxy exch def
    /maxx exch def
    /miny exch def
    /minx exch def

    newpath
    minx miny moveto
    maxx minx sub 0 rlineto
    0 maxy miny sub rlineto
    minx maxx sub 0 rlineto
    0 miny maxy sub rlineto
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

/HexMoveEval {
    /eval exch def
    /j exch def
    /i exch def

%    i j 1.0 eval sub FadedBoardShade mul BoundedShadedHexagon
    newpath
    i j HexCenterVertex moveto
    MoveEvalSize HexLeftEdge rlineto
    MoveEvalSize HexUpRightEdge rlineto
    MoveEvalSize HexRightEdge rlineto
    MoveEvalSize HexDownRightEdge rlineto
    MoveEvalSize HexDownLeftEdge rlineto
    MoveEvalSize HexLeftEdge rlineto
    MoveEvalSize HexUpLeftEdge rlineto
%    eval MoveEvalSize mul HexLeftEdge rlineto
%    eval MoveEvalSize mul HexUpRightEdge rlineto
%    eval MoveEvalSize mul HexRightEdge rlineto
%    eval MoveEvalSize mul HexDownRightEdge rlineto
%    eval MoveEvalSize mul HexDownLeftEdge rlineto
%    eval MoveEvalSize mul HexLeftEdge rlineto
%    eval MoveEvalSize mul HexUpLeftEdge rlineto

    closepath

    0 setlinewidth
    1.0 eval sub BoardShade mul setgray
    fill
} def

/HexSymmetricalMoveEval {
    /eval exch def
    /j exch def
    /i exch def

    i j eval HexMoveEval
    DimX 1 add i sub DimY 1 add j sub eval HexMoveEval
} def

/AbsCoordX {
    /x exch def

    OriginX x Scale mul add
} def

/AbsCoordY {
    /y exch def

    OriginY y Scale mul add
} def

/AbsCoords {
    /y exch def
    /x exch def

    x AbsCoordX
    y AbsCoordY
} def

/AbsLine {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def

    newpath
    x1 y1 AbsCoords moveto
    x2 y2 AbsCoords lineto
    stroke
} def

/AbsDot {
    /size exch def
    /y exch def
    /x exch def

    0 setlinewidth
    0 setgray
    newpath
    x y AbsCoords size 0 360 arc
    fill
} def

/AbsVertex {
    /y exch def
    /x exch def

    x y GraphVertexSize AbsDot
} def

/HexUpArrow {
   /size exch def
   /j exch def
   /i exch def

   GraphLineWidth setlinewidth
   0 setgray
   newpath
   i j HexCenterVertex moveto
   0 CircleRadius size mul neg rmoveto
   0 CircleRadius size mul 2 mul rlineto
   CircleRadius size mul 4 div neg CircleRadius size mul 2 div neg rmoveto
   CircleRadius size mul 4 div CircleRadius size mul 2 div rlineto
   CircleRadius size mul 4 div CircleRadius size mul 2 div neg rlineto
   stroke
} def

/HexRightArrow {
   /size exch def
   /j exch def
   /i exch def

   GraphLineWidth setlinewidth
   0 setgray
   newpath
   i j HexCenterVertex moveto
   CircleRadius size mul neg 0 rmoveto
   CircleRadius size mul 2 mul 0 rlineto
   CircleRadius size mul 2 div neg CircleRadius size mul 4 div neg rmoveto
   CircleRadius size mul 2 div CircleRadius size mul 4 div rlineto
   CircleRadius size mul 2 div neg CircleRadius size mul 4 div rlineto
   stroke
} def

/HexLeftArrow {
   /size exch def
   /j exch def
   /i exch def

   GraphLineWidth setlinewidth
   0 setgray
   newpath
   i j HexCenterVertex moveto
   CircleRadius size mul 0 rmoveto
   CircleRadius size mul 2 mul neg 0 rlineto
   CircleRadius size mul 2 div CircleRadius size mul 4 div neg rmoveto
   CircleRadius size mul 2 div neg CircleRadius size mul 4 div rlineto
   CircleRadius size mul 2 div CircleRadius size mul 4 div rlineto
   stroke
} def

/HexBlackCapturedPiece {
    /j exch def
    /i exch def

    i j HexBlackMarkedPiece
} def

/HexWhiteCapturedPiece {
    /j exch def
    /i exch def

    i j HexWhiteMarkedPiece
} def

/HexDeadPiece {
    /j exch def
    /i exch def

    i j DeadPieceShade HexPiece
    
   GraphLineWidth setlinewidth
   0 setgray
   newpath
   i j HexCenterVertex moveto
   MarkerSize neg 0 rmoveto
   MarkerSize 2 mul 0 rlineto
   MarkerSize neg MarkerSize neg rmoveto
   0 MarkerSize 2 mul rlineto
   stroke
} def

/HexDominatedCell {
    /j exch def
    /i exch def

   GraphLineWidth setlinewidth
   0 setgray
   newpath
   i j HexCenterVertex moveto
   MarkerSize Root2 div neg MarkerSize Root2 div neg rmoveto
   MarkerSize Root2 mul MarkerSize Root2 mul rlineto
   MarkerSize Root2 mul neg 0 rmoveto
   MarkerSize Root2 mul MarkerSize Root2 mul neg rlineto
   stroke
} def


%%---------------- Program -------------------


DrawHexBoard
1 HexBoardEdgePieces
HexBoardCoordinates

4 1 (1) 1 HexWhiteLabelledPiece


%------------ Trailer --------------

showpage

%%EndDocument
 @endspecial 1207 w @beginspecial 0 @llx 0 @lly 86 @urx
53 @ury 860 @rwi @setspecial
%%BeginDocument: B4full.eps
%!PS-Adobe-3.0
%%Creator: Jack van Rijswijck, thanks to Cameron Browne
%%BoundingBox: 0 0 86 53
%%Pages: 0
%%EndComments

/OriginX -2 def
/OriginY 26 def
%---------------- Variables -------------------

/DimX 4 def
/DimY 4 def
/Scale 1.2 def


%---------------- Constants -------------------

/Root2 1.414213562 def
/Root3 1.732050808 def

/Chars {[(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)(n)]} def
/Digits {[(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)(12)(13)(14)]} def

/HexRadius 5 Scale mul def
/HexLineWidth 0.014 def
/CircleRadius 3.3 Scale mul def
/CircleLineWidth 0.346 def
/BoardOutlineWidth 0.5 def
%/TextHeight 4.5 def
/TextHeight 6 def
/TextWidth TextHeight 0.45 mul def
/BoardShade 0.8 def
/FadedBoardShade 0.9 def
/CoordinatesShade 0.5 def
/DeadPieceShade 0.6 def
/DeadCellShade 0.6 def
/EarLength 0.5 def
/GraphVertexSize 1.5 def
/GraphLineWidth 0.5 def
/MoveEvalSize 0.9 def
/FatLineWidth 1.0 def
/MarkerSize 1.2 def

%----------- Functions -------------

/HexCenterX { % X coordinate of center of cell: i j HexX
    /j exch def
    /i exch def
    OriginX i j add HexRadius mul 1.5 mul add
} def

/HexCenterY { % Y coordinate of center of cell: i j HexY
    /j exch def
    /i exch def
    OriginY i j sub HexRadius mul Root3 mul 2 div sub
} def

/HexCenterVertex {
    /j exch def
    /i exch def
    i j HexCenterX
    i j HexCenterY
} def

/HexTopLeftVertex {
    /j exch def
    /i exch def
    i j HexCenterX HexRadius 2 div sub
    i j HexCenterY HexRadius Root3 mul 2 div add
} def

/HexTopRightVertex {
    /j exch def
    /i exch def
    i j HexCenterX HexRadius 2 div add
    i j HexCenterY HexRadius Root3 mul 2 div add
} def

/HexRightVertex {
    /j exch def
    /i exch def
    i j HexCenterX HexRadius add
    i j HexCenterY 
} def

/HexBottomRightVertex {
    /j exch def
    /i exch def
    i j HexCenterX HexRadius 2 div add
    i j HexCenterY HexRadius Root3 mul 2 div sub
} def

/HexBottomLeftVertex {
    /j exch def
    /i exch def
    i j HexCenterX HexRadius 2 div sub
    i j HexCenterY HexRadius Root3 mul 2 div sub
} def

/HexLeftVertex {
    /j exch def
    /i exch def
    i j HexCenterX HexRadius sub
    i j HexCenterY 
} def

/HexUpRightEdge {
    /size exch def
    
    HexRadius 2 div size mul
    HexRadius Root3 mul 2 div size mul
} def

/HexRightEdge {
    /size exch def
    
    HexRadius size mul
    0
} def

/HexDownRightEdge {
    /size exch def

    HexRadius 2 div size mul
    HexRadius Root3 mul 2 div neg size mul
} def

/HexDownLeftEdge {
    /size exch def

    HexRadius 2 div neg size mul
    HexRadius Root3 mul 2 div neg size mul
} def

/HexLeftEdge {
    /size exch def

    HexRadius neg size mul
    0 size mul
} def

/HexUpLeftEdge {
    /size exch def

    HexRadius 2 div neg size mul
    HexRadius Root3 mul 2 div size mul
} def

/HexagonPath{
    /j exch def
    /i exch def

    newpath
    i j HexLeftVertex moveto

    1.0 HexUpRightEdge rlineto
    1.0 HexRightEdge rlineto
    1.0 HexDownRightEdge rlineto
    1.0 HexDownLeftEdge rlineto
    1.0 HexLeftEdge rlineto
    1.0 HexUpLeftEdge rlineto

    closepath
} def

/HexTopLeftEar {
    /j exch def
    /i exch def

    newpath
    i j HexTopLeftVertex moveto
    EarLength HexUpLeftEdge rlineto
    stroke
} def

/HexTopRightEar {
    /j exch def
    /i exch def

    newpath
    i j HexTopRightVertex moveto
    EarLength HexUpRightEdge rlineto
    stroke
} def

/HexRightEar {
    /j exch def
    /i exch def

    newpath
    i j HexRightVertex moveto
    EarLength HexRightEdge rlineto
    stroke
} def

/HexBottomRightEar {
    /j exch def
    /i exch def

    newpath
    i j HexBottomRightVertex moveto
    EarLength HexDownRightEdge rlineto
    stroke
} def

/HexBottomLeftEar {
    /j exch def
    /i exch def

    newpath
    i j HexBottomLeftVertex moveto
    EarLength HexDownLeftEdge rlineto
    stroke
} def

/HexLeftEar {
    /j exch def
    /i exch def

    newpath
    i j HexLeftVertex moveto
    EarLength HexLeftEdge rlineto
    stroke
} def

/HexagonEars {
    /j exch def
    /i exch def

    HexLineWidth setlinewidth
    
    i j HexTopLeftEar
    i j HexTopRightEar
    i j HexRightEar
    i j HexBottomRightEar
    i j HexBottomLeftEar
    i j HexLeftEar
} def

/HexDeadCell {
    /j exch def
    /i exch def

    i j DeadCellShade ShadedHexagon
} def

/HexDeadMarkedCell {
    /j exch def
    /i exch def

    i j DeadCellShade ShadedHexagon
    i j HexBlackMarker
} def
    
    
/ShadedHexagonWithEars {
    /shade exch def
    /j exch def
    /i exch def

    i j shade ShadedHexagon
    i j HexagonEars
} def
    
/BoundedShadedHexagonWithEars {
    /shade exch def
    /j exch def
    /i exch def

    i j shade BoundedShadedHexagon
    i j BoundedHexagonWithEars
} def

/BoundedHexagonWithEars {
    /j exch def
    /i exch def

    i j BoundedHexagon

    i 1 gt {
	j 1 gt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexLeftVertex moveto
	EarLength HexLeftEdge rlineto
	stroke

	j DimY lt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexTopLeftVertex moveto
	EarLength HexUpLeftEdge rlineto
	stroke
    }
    if

    i DimX lt {
	j DimY lt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexRightVertex moveto
	EarLength HexRightEdge rlineto
	stroke

	j 1 gt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexBottomRightVertex moveto
	EarLength HexDownRightEdge rlineto
	stroke
    }
    if

    j DimY lt {
	i 1 gt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexTopRightVertex moveto
	EarLength HexUpRightEdge rlineto
	stroke

	i DimX lt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexRightVertex moveto
	EarLength HexRightEdge rlineto
	stroke
    }
    if

    j 1 gt {
	i DimX lt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexBottomLeftVertex moveto
	EarLength HexDownLeftEdge rlineto
	stroke

	i 1 gt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexLeftVertex moveto
	EarLength HexLeftEdge rlineto
	stroke
    }
    if
} def

/BoundedShadedHexagon {
    /shade exch def
    /j exch def
    /i exch def

    i j shade FillHexagon
    i j BoundedHexagon
} def

/BoundedHexagon {
    /j exch def
    /i exch def

    0 setgray
    HexLineWidth setlinewidth
    i j HexagonPath
    stroke

    BoardOutlineWidth setlinewidth

    i 1 eq {
	newpath
	i j HexLeftVertex moveto
	1.0 HexUpRightEdge rlineto
	1.0 HexRightEdge rlineto
	stroke
    }
    if

    j DimY eq {
	newpath
	i j HexTopLeftVertex moveto
	1.0 HexRightEdge rlineto
	1.0 HexDownRightEdge rlineto
	stroke
    }
    if

    i DimX eq {
	newpath
	i j HexRightVertex moveto
	1.0 HexDownLeftEdge rlineto
	1.0 HexLeftEdge rlineto
	stroke
    }
    if

    j 1 eq {
	newpath
	i j HexBottomRightVertex moveto
	1.0 HexLeftEdge rlineto
	1.0 HexUpLeftEdge rlineto
	stroke
    }
    if
} def

/ShadedHexagon {
    /shade exch def
    /j exch def
    /i exch def

    i j shade FillHexagon
    i j Hexagon
} def

/Hexagon { % call: i j Hexagon
    /j exch def
    /i exch def

    i j HexagonPath
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

/FillHexagon {   % call: i j shade FillHexagon
    /shade exch def
    /j exch def
    /i exch def

    i j HexagonPath
    0 setlinewidth
    shade setgray
    fill
    i j Hexagon
} def

/HexBoardOutlinePath {
    newpath
    1 1 HexLeftVertex moveto

    1 1 DimY {
	1.0 HexUpRightEdge rlineto
	1.0 HexRightEdge rlineto
    } for

    1 1 DimX 1 sub {
	1.0 HexDownRightEdge rlineto
	1.0 HexRightEdge rlineto
    } for
    1.0 HexDownRightEdge rlineto

    1 1 DimY {
	1.0 HexDownLeftEdge rlineto
	1.0 HexLeftEdge rlineto
    } for

    1 1 DimX 1 sub {
	1.0 HexUpLeftEdge rlineto
	1.0 HexLeftEdge rlineto
    } for
    1.0 HexUpLeftEdge rlineto

    closepath
} def

/HexBoardOutline {
    HexBoardOutlinePath
    BoardOutlineWidth setlinewidth
    0 setgray
    stroke
} def

/HexBoardFillNoOutline {
    /shade exch def
    HexBoardOutlinePath
    0 setlinewidth
    shade setgray
    fill
} def

/HexBoardFill {
    /shade exch def
    shade HexBoardFillNoOutline
    HexBoardOutline
} def

/HexShannonGrid {
    1 1 DimY {
	/j exch def
	1 1 DimX {
	    /i exch def
	    i j HexVertex
	} for
    } for

    1 1 DimY {
	/j exch def
	1 j DimX j HexLine
    } for

    1 1 DimX {
	/i exch def
	i 1 i DimY HexLine
    } for

    2 1 DimX DimY add 2 sub {
	/i exch def
	i DimY lt {1 i} {i DimY sub 1 add DimY} ifelse
	i DimX lt {i 1} {DimX i DimX sub 1 add} ifelse
	HexLine
    } for
} def

/HexBoardGrid {
    1 1 DimY {
	/j exch def
	1 1 DimX {
	    /i exch def
	    i j Hexagon
	} for
    } for
} def

/DrawHexBoard {
    BoardShade HexBoardFill
    HexBoardGrid
} def

/DrawHexBoardNoOutline {
    1 1 DimY {
	/j exch def
	1 1 DimX {
	    /i exch def
	    i j BoardShade FillHexagon
	    i j Hexagon
	} for
    } for
} def

/YBoardOutlinePath {
    newpath
    0 0 HexLeftVertex moveto

    1 1 DimX {
	1.0 HexUpRightEdge rlineto
	1.0 HexRightEdge rlineto
    } for

    1 1 DimX {
	1.0 HexDownRightEdge rlineto
	1.0 HexDownLeftEdge rlineto
    } for

    1 1 DimX {
	1.0 HexLeftEdge rlineto
	1.0 HexUpLeftEdge rlineto
    } for

    closepath
} def

/YBoardOutline {
    YBoardOutlinePath
    BoardOutlineWidth setlinewidth
    0 setgray
    stroke
} def

/YBoardFill {
    /shade exch def
    YBoardOutlinePath
    0 setlinewidth
    shade setgray
    fill
    YBoardOutline
} def

/YBoardGrid {
    0 1 DimX 1 sub {
	/j exch def
	0 1 DimX 1 sub j sub {
	    /i exch def
	    i j Hexagon
	} for
    } for
} def

/DrawYBoard {
    BoardShade YBoardFill
    YBoardGrid
} def

/FontSelect { % bold italic FontSelect
    /italic exch def
    /bold exch def

    bold {
	italic {
	    /Times-BoldItalic findfont TextHeight scalefont setfont
	} {
	    /Times-Bold findfont TextHeight scalefont setfont
	}
	ifelse
    } {
	italic {
	    /Times-Italic findfont TextHeight scalefont setfont
	} {
	    /Times findfont TextHeight scalefont setfont
	}
	ifelse
    }
    ifelse
} def
	    
/LabelString {   % call: i j (str) strlen LabelString
    /strlen exch def
    /str exch def
    /j exch def
    /i exch def

    newpath
    i j HexCenterX TextWidth strlen mul 0.5 mul sub
    i j HexCenterY TextHeight 0.225 mul sub
    moveto
    str
    show
} def

/AbsLabelString {
    /strlen exch def
    /str exch def
    /y exch def
    /x exch def

    newpath
    x AbsCoordX TextWidth strlen mul 0.5 mul sub
    y AbsCoordY TextHeight 0.225 mul sub
    moveto
    str
    show
} def

/LabelStringVerb { % i j (str) strlen shade bold italic LabelStringVerb
    /italic exch def
    /bold exch def
    /shade exch def
    /strlen exch def
    /str exch def
    /j exch def
    /i exch def
    bold italic FontSelect
    shade setgray
    i j str strlen LabelString
} def

/HexBoardCoordinates {
    false true FontSelect
    CoordinatesShade setgray
    
    1 1 DimX {
	/i exch def
	i 0 Chars i 1 sub get 1 LabelString
	i DimY 1 add Chars i 1 sub get 1 LabelString
    } for

    1 1 DimY {
	/j exch def
	0 j Digits j 1 sub get
	DimY 9 gt {2} {1} ifelse
	LabelString
	DimX 1 add j Digits j 1 sub get
	DimY 9 gt {2} {1} ifelse
	LabelString
    } for
} def

/HexEdgePieceLocationBottomLeft {
    /dist exch def
    /midx DimX 1 add 2 div def
    /midy DimY 1 add 2 div def

    midx
    2 midx sub dist sub
} def

/HexEdgePieceLocationTopRight {
    /dist exch def
    /midx DimX 1 add 2 div def
    /midy DimY 1 add 2 div def

    midx
    DimX DimY add midx sub dist add
} def

/HexEdgePieceLocationTopLeft {
    /dist exch def
    /midx DimX 1 add 2 div def
    /midy DimY 1 add 2 div def
    
    2 midy sub dist sub
    midy
} def

/HexEdgePieceLocationBottomRight {
    /dist exch def
    /midx DimX 1 add 2 div def
    /midy DimY 1 add 2 div def
    
    DimX DimY add midy sub dist add
    midy
} def

/HexWhiteTerminal {
    (T) 1 HexWhiteLabelledPiece
} def

/HexBlackTerminal {
    (T) 1 HexBlackLabelledPiece
} def
    
/HexShannonTerminalBottomLeft {
    /dist exch def

    dist HexEdgePieceLocationBottomLeft
    HexWhiteTerminal
} def

/HexShannonTerminalTopRight {
    /dist exch def

    dist HexEdgePieceLocationTopRight
    HexWhiteTerminal
} def

/HexShannonTerminalConnectionsWhite {
    /dist exch def
    /midx DimX 1 add 2 div def
    /midy DimY 1 add 2 div def

    1 1 DimX {
	/i exch def
	dist HexEdgePieceLocationBottomLeft i 1 HexLine
	dist HexEdgePieceLocationTopRight i DimY HexLine
    } for

    dist HexShannonTerminalBottomLeft
    dist HexShannonTerminalTopRight
} def

/HexShannonTerminalTopLeft {
    /dist exch def

    dist HexEdgePieceLocationTopLeft
    HexBlackTerminal
} def

/HexShannonTerminalBottomRight {
    /dist exch def

    dist HexEdgePieceLocationBottomRight
    HexBlackTerminal
} def

/HexShannonTerminalConnectionsBlack {
    /dist exch def
    /midx DimX 1 add 2 div def
    /midy DimY 1 add 2 div def

    1 1 DimY {
	/j exch def
	dist HexEdgePieceLocationTopLeft 1 j HexLine
	dist HexEdgePieceLocationBottomRight DimX j HexLine
    } for

    dist HexShannonTerminalTopLeft
    dist HexShannonTerminalBottomRight
} def

/HexBoardEdgePieceTopLeft {
    /dist exch def
    dist HexEdgePieceLocationTopLeft HexBlackPiece
} def
/HexBoardEdgePieceBottomLeft {
    /dist exch def
    dist HexEdgePieceLocationBottomLeft HexWhitePiece
} def
/HexBoardEdgePieceTopRight {
    /dist exch def
    dist HexEdgePieceLocationTopRight HexWhitePiece
} def
/HexBoardEdgePieceBottomRight {
    /dist exch def
    dist HexEdgePieceLocationBottomRight HexBlackPiece
} def

/HexBoardEdgePieces { % extradist
    /dist exch def

    dist HexBoardEdgePieceTopLeft
    dist HexBoardEdgePieceBottomLeft
    dist HexBoardEdgePieceTopRight
    dist HexBoardEdgePieceBottomRight
} def

/HexDot { % i j size
    /size exch def
    /j exch def
    /i exch def

    0 setlinewidth
    0 setgray
    newpath
    i j HexCenterVertex size 0 360 arc
    fill
} def


/HexWhiteMarkedPiece {
    /j exch def
    /i exch def

    i j HexWhitePiece
    
    0 setgray
    0 setlinewidth
    newpath
    i j HexCenterVertex MarkerSize 0 360 arc
    fill
} def

/HexBlackMarkedPiece {
    /j exch def
    /i exch def

    i j HexBlackPiece
    
    1 setgray
    0 setlinewidth
    newpath
    i j HexCenterVertex MarkerSize 0 360 arc
    fill
} def


/HexDoubleMarker {
    /shaderight exch def
    /shadeleft exch def
    /j exch def
    /i exch def

    shadeleft setgray
    0 setlinewidth
    newpath
    i j HexCenterX MarkerSize sub i j HexCenterY MarkerSize 0 360 arc
    fill

    0 setgray
    CircleLineWidth setlinewidth
    newpath
    i j HexCenterX MarkerSize sub i j HexCenterY MarkerSize 0 360 arc
    stroke

    shaderight setgray
    0 setlinewidth
    newpath
    i j HexCenterX MarkerSize add i j HexCenterY MarkerSize 0 360 arc
    fill

    0 setgray
    CircleLineWidth setlinewidth
    newpath
    i j HexCenterX MarkerSize add i j HexCenterY MarkerSize 0 360 arc
    stroke
} def

/HexBlackWhiteMarker {
    /j exch def
    /i exch def
    i j 0.0 1.0 HexDoubleMarker
} def

/HexWhiteBlackMarker {
    /j exch def
    /i exch def
    i j 1.0 0.0 HexDoubleMarker
} def
        
/HexMarker {
    /j exch def
    /i exch def

    0 setlinewidth
    newpath
    i j HexCenterVertex MarkerSize 0 360 arc
    fill

    0 setgray
    CircleLineWidth setlinewidth
    newpath
    i j HexCenterVertex MarkerSize 0 360 arc
    stroke  
} def

/HexBlackMarker {
    /j exch def
    /i exch def

    0 setgray
    i j HexMarker
} def

/HexWhiteMarker {
    /j exch def
    /i exch def

    1 setgray
    i j HexMarker
} def
    
/HexVertex {
    /j exch def
    /i exch def

    i j GraphVertexSize HexDot
} def

/HexLine {
    /j2 exch def
    /i2 exch def
    /j1 exch def
    /i1 exch def

    GraphLineWidth setlinewidth
    0 setgray
    newpath
    i1 j1 HexCenterVertex moveto
    i2 j2 HexCenterVertex lineto
    stroke
} def

/HexPiece { % i j shade
    /shade exch def
    /j exch def
    /i exch def

    0 setlinewidth
    shade setgray
    newpath
    i j HexCenterVertex CircleRadius 0 360 arc
    fill

    0 setgray
    CircleLineWidth setlinewidth
    newpath
    i j HexCenterVertex CircleRadius 0 360 arc
    stroke
} def

/HexWhitePiece {
    /j exch def
    /i exch def

    i j 1.0 HexPiece
} def

/HexBlackPiece {
    /j exch def
    /i exch def

    i j 0.0 HexPiece
} def

/HexWhiteLabelledPiece { % i j (str) strlen
    /strlen exch def
    /str exch def
    /j exch def
    /i exch def

    i j HexWhitePiece
    i j str strlen 0.0 true true LabelStringVerb
} def

/HexBlackLabelledPiece { % i j (str) strlen
    /strlen exch def
    /str exch def
    /j exch def
    /i exch def

    i j HexBlackPiece
    i j str strlen 1.0 true true LabelStringVerb
} def

/DrawBox { % minx miny maxx maxy
    /maxy exch def
    /maxx exch def
    /miny exch def
    /minx exch def

    newpath
    minx miny moveto
    maxx minx sub 0 rlineto
    0 maxy miny sub rlineto
    minx maxx sub 0 rlineto
    0 miny maxy sub rlineto
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

/HexMoveEval {
    /eval exch def
    /j exch def
    /i exch def

%    i j 1.0 eval sub FadedBoardShade mul BoundedShadedHexagon
    newpath
    i j HexCenterVertex moveto
    MoveEvalSize HexLeftEdge rlineto
    MoveEvalSize HexUpRightEdge rlineto
    MoveEvalSize HexRightEdge rlineto
    MoveEvalSize HexDownRightEdge rlineto
    MoveEvalSize HexDownLeftEdge rlineto
    MoveEvalSize HexLeftEdge rlineto
    MoveEvalSize HexUpLeftEdge rlineto
%    eval MoveEvalSize mul HexLeftEdge rlineto
%    eval MoveEvalSize mul HexUpRightEdge rlineto
%    eval MoveEvalSize mul HexRightEdge rlineto
%    eval MoveEvalSize mul HexDownRightEdge rlineto
%    eval MoveEvalSize mul HexDownLeftEdge rlineto
%    eval MoveEvalSize mul HexLeftEdge rlineto
%    eval MoveEvalSize mul HexUpLeftEdge rlineto

    closepath

    0 setlinewidth
    1.0 eval sub BoardShade mul setgray
    fill
} def

/HexSymmetricalMoveEval {
    /eval exch def
    /j exch def
    /i exch def

    i j eval HexMoveEval
    DimX 1 add i sub DimY 1 add j sub eval HexMoveEval
} def

/AbsCoordX {
    /x exch def

    OriginX x Scale mul add
} def

/AbsCoordY {
    /y exch def

    OriginY y Scale mul add
} def

/AbsCoords {
    /y exch def
    /x exch def

    x AbsCoordX
    y AbsCoordY
} def

/AbsLine {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def

    newpath
    x1 y1 AbsCoords moveto
    x2 y2 AbsCoords lineto
    stroke
} def

/AbsDot {
    /size exch def
    /y exch def
    /x exch def

    0 setlinewidth
    0 setgray
    newpath
    x y AbsCoords size 0 360 arc
    fill
} def

/AbsVertex {
    /y exch def
    /x exch def

    x y GraphVertexSize AbsDot
} def

/HexUpArrow {
   /size exch def
   /j exch def
   /i exch def

   GraphLineWidth setlinewidth
   0 setgray
   newpath
   i j HexCenterVertex moveto
   0 CircleRadius size mul neg rmoveto
   0 CircleRadius size mul 2 mul rlineto
   CircleRadius size mul 4 div neg CircleRadius size mul 2 div neg rmoveto
   CircleRadius size mul 4 div CircleRadius size mul 2 div rlineto
   CircleRadius size mul 4 div CircleRadius size mul 2 div neg rlineto
   stroke
} def

/HexRightArrow {
   /size exch def
   /j exch def
   /i exch def

   GraphLineWidth setlinewidth
   0 setgray
   newpath
   i j HexCenterVertex moveto
   CircleRadius size mul neg 0 rmoveto
   CircleRadius size mul 2 mul 0 rlineto
   CircleRadius size mul 2 div neg CircleRadius size mul 4 div neg rmoveto
   CircleRadius size mul 2 div CircleRadius size mul 4 div rlineto
   CircleRadius size mul 2 div neg CircleRadius size mul 4 div rlineto
   stroke
} def

/HexLeftArrow {
   /size exch def
   /j exch def
   /i exch def

   GraphLineWidth setlinewidth
   0 setgray
   newpath
   i j HexCenterVertex moveto
   CircleRadius size mul 0 rmoveto
   CircleRadius size mul 2 mul neg 0 rlineto
   CircleRadius size mul 2 div CircleRadius size mul 4 div neg rmoveto
   CircleRadius size mul 2 div neg CircleRadius size mul 4 div rlineto
   CircleRadius size mul 2 div CircleRadius size mul 4 div rlineto
   stroke
} def

/HexBlackCapturedPiece {
    /j exch def
    /i exch def

    i j HexBlackMarkedPiece
} def

/HexWhiteCapturedPiece {
    /j exch def
    /i exch def

    i j HexWhiteMarkedPiece
} def

/HexDeadPiece {
    /j exch def
    /i exch def

    i j DeadPieceShade HexPiece
    
   GraphLineWidth setlinewidth
   0 setgray
   newpath
   i j HexCenterVertex moveto
   MarkerSize neg 0 rmoveto
   MarkerSize 2 mul 0 rlineto
   MarkerSize neg MarkerSize neg rmoveto
   0 MarkerSize 2 mul rlineto
   stroke
} def

/HexDominatedCell {
    /j exch def
    /i exch def

   GraphLineWidth setlinewidth
   0 setgray
   newpath
   i j HexCenterVertex moveto
   MarkerSize Root2 div neg MarkerSize Root2 div neg rmoveto
   MarkerSize Root2 mul MarkerSize Root2 mul rlineto
   MarkerSize Root2 mul neg 0 rmoveto
   MarkerSize Root2 mul MarkerSize Root2 mul neg rlineto
   stroke
} def


%%---------------- Program -------------------


DrawHexBoard
1 HexBoardEdgePieces
HexBoardCoordinates

4 1 (1) 1 HexWhiteLabelledPiece
2 4 (2) 1 HexBlackLabelledPiece
4 3 (3) 1 HexWhiteLabelledPiece
4 2 (4) 1 HexBlackLabelledPiece
2 3 (5) 1 HexWhiteLabelledPiece
3 4 (6) 1 HexBlackLabelledPiece
4 4 (7) 1 HexWhiteLabelledPiece
3 2 (8) 1 HexBlackLabelledPiece
1 2 (9) 1 HexWhiteLabelledPiece
3 3 (10) 2 HexBlackLabelledPiece
1 4 (11) 2 HexWhiteLabelledPiece
2 1 (12) 2 HexBlackLabelledPiece
1 1 (13) 2 HexWhiteLabelledPiece
1 3 (14) 2 HexBlackLabelledPiece
2 2 (15) 2 HexWhiteLabelledPiece


%------------ Trailer --------------

showpage

%%EndDocument
 @endspecial 670 4906 a Fq(Fig.)13 b(5.)26 b Fs(The)g(start)g(\(left\))
g(and)f(\014nish)g(\(righ)n(t\))h(of)g(one)g(line)g(of)h(the)e
(strategy)h(of)h(Fig.)f(4.)p eop end
%%Page: 7 7
TeXDict begin 7 6 bop 3290 232 a Fs(VI)r(I)1862 406 y
 tx@Dict begin tx@NodeDict begin {4.8611 0.0 8.40282 4.2014 2.1097
} false /N@T-0 16 {InitRnode } NewNode end end

1862 406 a Fo(d1)1880 556 y
 tx@Dict begin tx@NodeDict begin {3.25694 0.0 4.09723 2.04861 2.1097
} false /N@T-0-0 16 {InitRnode } NewNode end end
 1880 556 a Fg(\017)1897 538
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 1897 538 a 1452 706 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.5417 3.77084 2.1097
} false /N@T-0-0-0 16 {InitRnode } NewNode end end
 1452 706 a Fo(c3)1484 688 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0 /N@T-0-0-0 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1484
688 a 1393 856 a
 tx@Dict begin tx@NodeDict begin {4.78334 0.0 5.90282 2.9514 2.1097
} false /N@T-0-0-0-0 16 {InitRnode } NewNode end end
 1393 856 a Fo(A)1418 839 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0 /N@T-0-0-0-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1418 839
a 1525 856 a
 tx@Dict begin tx@NodeDict begin {4.78334 0.0 5.90282 2.9514 2.1097
} false /N@T-0-0-0-1 16 {InitRnode } NewNode end end
 1525 856 a Fo(A)1550 839 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0 /N@T-0-0-0-1 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1550 839 a 1712
706 a
 tx@Dict begin tx@NodeDict begin {4.8611 0.0 8.40282 4.2014 2.1097
} false /N@T-0-0-1 16 {InitRnode } NewNode end end
 1712 706 a Fo(b3)1747 688 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0 /N@T-0-0-1 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1747 688 a 1657 856
a
 tx@Dict begin tx@NodeDict begin {4.78334 0.0 5.90282 2.9514 2.1097
} false /N@T-0-0-1-0 16 {InitRnode } NewNode end end
 1657 856 a Fo(A)1682 839 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1 /N@T-0-0-1-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1682 839 a 1789 856 a
 tx@Dict begin tx@NodeDict begin {4.78334 0.0 5.5903 2.79515 2.1097
} false /N@T-0-0-1-1 16 {InitRnode } NewNode end end
 1789
856 a Fo(B)1812 839 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1 /N@T-0-0-1-1 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1812 839 a 1970 706 a
 tx@Dict begin tx@NodeDict begin {4.8611 0.0 8.40282 4.2014 2.1097
} false /N@T-0-0-2 16 {InitRnode } NewNode end end
 1970 706
a Fo(b3)2005 688 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0 /N@T-0-0-2 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 2005 688 a 1919 856 a
 tx@Dict begin tx@NodeDict begin {4.78334 0.0 5.90282 2.9514 2.1097
} false /N@T-0-0-2-0 16 {InitRnode } NewNode end end
 1919 856 a Fo(A)1943
839 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2 /N@T-0-0-2-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1943 839 a 2051 856 a
 tx@Dict begin tx@NodeDict begin {3.25694 0.0 4.09723 2.04861 2.1097
} false /N@T-0-0-2-1 16 {InitRnode } NewNode end end
 2051 856 a Fg(\017)2068 839
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2 /N@T-0-0-2-1 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2068 839 a 1956 1006 a
 tx@Dict begin tx@NodeDict begin {4.8611 0.0 8.40282 4.2014 2.1097
} false /N@T-0-0-2-1-0 16 {InitRnode } NewNode end end
 1956 1006 a Fo(b2)1991 989 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-1 /N@T-0-0-2-1-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end

1991 989 a 1966 1156 a
 tx@Dict begin tx@NodeDict begin {4.78334 0.0 5.90282 2.9514 2.1097
} false /N@T-0-0-2-1-0-0 16 {InitRnode } NewNode end end
 1966 1156 a Fo(A)1991 1139 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-1-0 /N@T-0-0-2-1-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1991
1139 a 2109 1006 a
 tx@Dict begin tx@NodeDict begin {4.8611 0.0 8.40282 4.2014 2.1097
} false /N@T-0-0-2-1-1 16 {InitRnode } NewNode end end
 2109 1006 a Fo(d2)2144 989 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-1 /N@T-0-0-2-1-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2144
989 a 2127 1156 a
 tx@Dict begin tx@NodeDict begin {3.25694 0.0 4.09723 2.04861 2.1097
} false /N@T-0-0-2-1-1-0 16 {InitRnode } NewNode end end
 2127 1156 a Fg(\017)2144 1139 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-1-1 /N@T-0-0-2-1-1-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2144
1139 a 2038 1306 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.5417 3.77084 2.1097
} false /N@T-0-0-2-1-1-0-0 16 {InitRnode } NewNode end end
 2038 1306 a Fo(c3)2069 1289 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-1-1-0 /N@T-0-0-2-1-1-0-0 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2069
1289 a 2184 1306 a
 tx@Dict begin tx@NodeDict begin {4.8611 0.0 8.40282 4.2014 2.1097
} false /N@T-0-0-2-1-1-0-1 16 {InitRnode } NewNode end end
 2184 1306 a Fo(d3)2219 1289 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-1-1-0 /N@T-0-0-2-1-1-0-1 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2219
1289 a 2194 1457 a
 tx@Dict begin tx@NodeDict begin {4.78334 0.0 5.90282 2.9514 2.1097
} false /N@T-0-0-2-1-1-0-1-0 16 {InitRnode } NewNode end end
 2194 1457 a Fo(A)2219 1439 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-1-1-0-1 /N@T-0-0-2-1-1-0-1-0 InitNC { NCLine  }
if end gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore
end
 2219
1439 a 2276 706 a
 tx@Dict begin tx@NodeDict begin {4.8611 0.0 8.40282 4.2014 2.1097
} false /N@T-0-0-3 16 {InitRnode } NewNode end end
 2276 706 a Fo(d3)2311 688 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0 /N@T-0-0-3 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 2311 688
a 2224 856 a
 tx@Dict begin tx@NodeDict begin {4.78334 0.0 5.90282 2.9514 2.1097
} false /N@T-0-0-3-0 16 {InitRnode } NewNode end end
 2224 856 a Fo(A)2249 839 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3 /N@T-0-0-3-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2249 839 a 2356
856 a
 tx@Dict begin tx@NodeDict begin {3.25694 0.0 4.09723 2.04861 2.1097
} false /N@T-0-0-3-1 16 {InitRnode } NewNode end end
 2356 856 a Fg(\017)2373 839 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3 /N@T-0-0-3-1 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2373 839 a 2262 1006
a
 tx@Dict begin tx@NodeDict begin {4.8611 0.0 8.40282 4.2014 2.1097
} false /N@T-0-0-3-1-0 16 {InitRnode } NewNode end end
 2262 1006 a Fo(d2)2297 989 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3-1 /N@T-0-0-3-1-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2297 989 a 2415 1006 a
 tx@Dict begin tx@NodeDict begin {4.8611 0.0 8.40282 4.2014 2.1097
} false /N@T-0-0-3-1-1 16 {InitRnode } NewNode end end

2415 1006 a Fo(b3)2450 989 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3-1 /N@T-0-0-3-1-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2450 989 a 2360 1156 a
 tx@Dict begin tx@NodeDict begin {4.78334 0.0 5.90282 2.9514 2.1097
} false /N@T-0-0-3-1-1-0 16 {InitRnode } NewNode end end
 2360
1156 a Fo(A)2384 1139 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3-1-1 /N@T-0-0-3-1-1-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2384 1139 a 2492 1156 a
 tx@Dict begin tx@NodeDict begin {4.78334 0.0 5.5903 2.79515 2.1097
} false /N@T-0-0-3-1-1-1 16 {InitRnode } NewNode end end
 2492
1156 a Fo(B)2515 1139 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3-1-1 /N@T-0-0-3-1-1-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2515 1139 a 523 1591 a Fd(Fig.)12
b(6.)28 b Fo(An)g Fc(and)p Fo(/)p Fc(or)h Fo(autotree)e(with)h(t)n(w)n
(o)h(macro)f(pattern)f(no)r(des.)g(This)h(tree)g(is)g(equiv)l(alen)n(t)
f(to)h(the)f(tree)g(in)523 1658 y(Fig.)22 b(4;)g(pattern)f(parameters)g
(ha)n(v)n(e)h(b)r(een)f(omitted.)523 1936 y Ft(of)33
b(eac)n(h)f(pair)g(of)h(c)n(hild)g(no)r(des)g(is)g(empt)n(y)-7
b(.)33 b(Another)g(algorithmic)e(approac)n(h)h(one)g(migh)n(t)523
2035 y(tak)n(e)22 b(here)h(is)g(to)g(expand)f(the)i Fh(and)p
Ft(/)p Fh(or)f Ft(autotree)g(in)n(to)f(the)i(corresp)r(onding)d(equiv)
-5 b(alen)n(t)23 b(au-)523 2135 y(totree;)g(ho)n(w)n(ev)n(er,)e(the)j
(resulting)f(trees)f(can)h(b)r(e)h(large,)2247 2105 y
Fo(3)2306 2135 y Ft(so)f(this)h(approac)n(h)d(w)n(ould)i(require)523
2235 y(signi\014can)n(tly)k(more)g(space)f(than)i(our)f(approac)n(h.)
648 2334 y(T)-7 b(esting)29 b(the)h(satisfying)f(prop)r(ert)n(y)g(on)h
Fh(and)p Ft(/)p Fh(or)g Ft(autotrees)f(in)n(v)n(olv)n(es)f(c)n(hec)n
(king)g(ev)n(ery)523 2434 y(ro)r(ot-to-leaf)h(path)i(in)g(the)g(asso)r
(ciated)f(expanded)g(autotree.)g(F)-7 b(or)30 b(reasons)f(of)i
(e\016ciency)523 2533 y(w)n(e)d(do)h(not)f(w)n(an)n(t)g(to)h(generate)e
(the)j(expanded)e(autotree;)g(w)n(e)g(th)n(us)h(carry)e(out)i(this)g
(task)523 2633 y(in)j(an)f(implicit)h(fashion.)f(By)f(using)h(a)g
(simple)h(indexing)f(sc)n(heme)g(for)f(eac)n(h)h(ro)r(ot-to-leaf)523
2733 y(path)h(in)h(the)f Fh(and)p Ft(/)p Fh(or)h Ft(autotree,)e(w)n(e)h
(can)g(reconstruct)f(the)h(cell)g(sets)g(for)g(eac)n(h)f(p)r(ossible)
523 2832 y(ro)r(ot-to-leaf)36 b(path)i(in)g(the)g(asso)r(ciated)f
(autotree.)g(Eac)n(h)g(no)r(de)h(stores)e(the)i(n)n(um)n(b)r(er)g(of)
523 2932 y(ro)r(ot-to-leaf)31 b(paths)i(it)g(con)n(tains.)f(W)-7
b(e)33 b(consider)f(all)h(suc)n(h)f(paths)h(and)g(v)n(erify)f(that)h
(eac)n(h)523 3032 y(satis\014es)27 b(the)h(winning)f(condition.)648
3131 y(W)-7 b(e)35 b(implemen)n(t)h(the)g(isomorphic)e(substrategy)g
(feature)h(in)g(the)h(simplest)f(p)r(ossible)523 3231
y(w)n(a)n(y)-7 b(,)17 b(namely)h(using)g(macro)g(substitution)h(to)f
(generate)f(the)i(equiv)-5 b(alen)n(t)18 b Fh(and)p Ft(/)p
Fh(or)h Ft(autotree.)523 3491 y Fp(4)112 b(V)-9 b(erifying)38
b(Y)-9 b(ang's)37 b(pro)s(of)523 3685 y Ft(As)h(a)f(b)r(enc)n(hmark)g
(for)g(testing)h(our)f(system,)g(w)n(e)g(used)h(it)g(to)f(v)n(erify)g
(the)h(\014rst)g(kno)n(wn)523 3784 y(winning)28 b(7)p
Fm(\002)p Ft(7)e(Hex)i(strategy)-7 b(,)27 b(namely)g(Y)-7
b(ang's)27 b(original)f(7)p Fm(\002)p Ft(7)h(cen)n(tre-op)r(ening)f
(strategy)523 3884 y([14,)13 b(13].)27 b(Y)-7 b(ang)27
b(describ)r(ed)g(his)g(strategy)f(in)i(an)f(easily)g(understo)r(o)r(d)g
(notation)g(similar)f(to)523 3984 y(that)e(used)f(in)g(the)h(C)f
(programming)e(language;)h(an)h(applet)g(that)h(follo)n(ws)e(this)h
(strategy)f(is)523 4083 y(a)n(v)-5 b(ailable)22 b(on)h(his)h
(homepage[12].)d(The)j(v)n(ersion)d(of)j(the)g(strategy)e(that)h(w)n(e)
g(tested)h(is)f(from)523 4183 y(a)i(preprin)n(t)f(also)g(a)n(v)-5
b(ailable)24 b(from)g(his)h(w)n(eb)g(page)f([14].)g(In)h(Y)-7
b(ang's)25 b(notation,)f(his)h(strategy)523 4282 y(uses)32
b(ab)r(out)g(40)f(patterns)g(\(not)h(coun)n(ting)g(pattern)g(v)-5
b(ariations\))31 b(comprising)f(ab)r(out)i(six)523 4382
y(pages)26 b(of)i(text.)g(A)g(recursion)e(tree)h(indicating)h(the)g
(hierarc)n(h)n(y)d(of)j(his)f(patterns)g(is)h(sho)n(wn)523
4482 y(in)g(Fig.)f(7.)648 4581 y(W)-7 b(e)27 b(translated)f(Y)-7
b(ang's)27 b(pro)r(of)f(in)n(to)h(our)f(notation)h(b)n(y)g(hand,)g
(follo)n(wing)f(his)h(pattern)523 4681 y(naming)21 b(con)n(v)n(en)n
(tion.)g(As)g(an)h(example)f(of)h(our)f(notation,)g(see)g(Fig.)h(8.)f
(The)h(\014rst)f(line)h(giv)n(es)p 523 4748 473 4 v 546
4801 a Fk(3)606 4833 y Fs(F)-6 b(or)35 b(example,)g(an)g
Fb(and)p Fs(-no)r(de)g(with)g Fj(k)i Fs(subtrees)d(of)i(t)n(w)n(o)f(no)
r(des)g(eac)n(h)g(corresp)r(onds)h(in)e(the)606 4924
y(expanded)25 b(autotree)h(to)g(a)g(no)r(de)f(with)h(2)1809
4893 y Fl(k)1873 4924 y Fs(subtrees.)p eop end
%%Page: 8 8
TeXDict begin 8 7 bop 523 232 a Fs(VI)r(I)r(I)2145 403
y
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 3.98613 1.99306 2.1097
} false /N@T-0 16 {InitRnode } NewNode end end
 2145 403 a Fo(1)573 653 y
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 3.98613 1.99306 2.1097
} false /N@T-0-0 16 {InitRnode } NewNode end end
 573 653 a Fo(3)589 635 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end

589 635 a 539 903 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 3.98613 1.99306 2.1097
} false /N@T-0-0-0 16 {InitRnode } NewNode end end
 539 903 a Fo(9)556 886 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0 /N@T-0-0-0 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 556 886
a 523 1153 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-0-0-0 16 {InitRnode } NewNode end end
 523 1153 a Fo(18)556 1136 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0 /N@T-0-0-0-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 556 1136 a 589
903 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-0-1 16 {InitRnode } NewNode end end
 589 903 a Fo(14)622 886 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0 /N@T-0-0-1 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 622 886 a 589 1153 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-0-1-0 16 {InitRnode } NewNode end end

589 1153 a Fo(24)622 1136 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1 /N@T-0-0-1-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 622 1136 a 589 1404 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-0-1-0-0 16 {InitRnode } NewNode end end
 589
1404 a Fo(31)622 1386 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1-0 /N@T-0-0-1-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 622 1386 a 606 653 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 3.98613 1.99306 2.1097
} false /N@T-0-1 16 {InitRnode } NewNode end end
 606 653
a Fo(3)622 635 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-1 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 622 635 a 736 653 a
 tx@Dict begin tx@NodeDict begin {4.33334 0.83334 6.13892 3.06946 2.1097
} false /N@T-0-2 16 {InitRnode } NewNode end end
 736 653 a Fo(+)762
635 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-2 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 762 635 a 707 903 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 3.98613 1.99306 2.1097
} false /N@T-0-2-0 16 {InitRnode } NewNode end end
 707 903 a Fo(4)724 886 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-2 /N@T-0-2-0 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 724
886 a 691 1153 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-2-0-0 16 {InitRnode } NewNode end end
 691 1153 a Fo(15)724 1136 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-2-0 /N@T-0-2-0-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 724 1136
a 655 1404 a
 tx@Dict begin tx@NodeDict begin {4.8611 0.0 16.37508 8.18753 2.1097
} false /N@T-0-2-0-0-0 16 {InitRnode } NewNode end end
 655 1404 a Fo(25ab)724 1386 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-2-0-0 /N@T-0-2-0-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 724 1386 a
783 903 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 3.98613 1.99306 2.1097
} false /N@T-0-2-1 16 {InitRnode } NewNode end end
 783 903 a Fo(5)800 886 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-2 /N@T-0-2-1 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 800 886 a 759 1153
a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 3.98613 1.99306 2.1097
} false /N@T-0-2-1-0 16 {InitRnode } NewNode end end
 759 1153 a Fo(9)775 1136 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-2-1 /N@T-0-2-1-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 775 1136 a 791 1153 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-2-1-1 16 {InitRnode } NewNode end end
 791
1153 a Fo(16)824 1136 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-2-1 /N@T-0-2-1-1 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 824 1136 a 791 1404 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-2-1-1-0 16 {InitRnode } NewNode end end
 791 1404
a Fo(26)824 1386 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-2-1-1 /N@T-0-2-1-1-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 824 1386 a 824 653 a
 tx@Dict begin tx@NodeDict begin {4.33334 0.83334 6.13892 3.06946 2.1097
} false /N@T-0-3 16 {InitRnode } NewNode end end
 824 653 a Fo(+)849
635 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-3 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 849 635 a 816 903 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 3.98613 1.99306 2.1097
} false /N@T-0-3-0 16 {InitRnode } NewNode end end
 816 903 a Fo(6)832 886 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-3 /N@T-0-3-0 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 832
886 a 849 903 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 3.98613 1.99306 2.1097
} false /N@T-0-3-1 16 {InitRnode } NewNode end end
 849 903 a Fo(5)866 886 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-3 /N@T-0-3-1 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 866 886 a 890
653 a
 tx@Dict begin tx@NodeDict begin {4.33334 0.83334 6.13892 3.06946 2.1097
} false /N@T-0-4 16 {InitRnode } NewNode end end
 890 653 a Fo(+)915 635 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-4 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 915 635 a 882 903 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 3.98613 1.99306 2.1097
} false /N@T-0-4-0 16 {InitRnode } NewNode end end
 882
903 a Fo(7)898 886 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-4 /N@T-0-4-0 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 898 886 a 915 903 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 3.98613 1.99306 2.1097
} false /N@T-0-4-1 16 {InitRnode } NewNode end end
 915 903 a Fo(8)932
886 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-4 /N@T-0-4-1 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 932 886 a 891 1153 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 3.98613 1.99306 2.1097
} false /N@T-0-4-1-0 16 {InitRnode } NewNode end end
 891 1153 a Fo(9)907 1136 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-4-1 /N@T-0-4-1-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end

907 1136 a 924 1153 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-4-1-1 16 {InitRnode } NewNode end end
 924 1153 a Fo(17)957 1136 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-4-1 /N@T-0-4-1-1 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 957
1136 a 924 1404 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-4-1-1-0 16 {InitRnode } NewNode end end
 924 1404 a Fo(27)957 1386 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-4-1-1 /N@T-0-4-1-1-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 957 1386
a 924 1654 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-4-1-1-0-0 16 {InitRnode } NewNode end end
 924 1654 a Fo(33)957 1636 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-4-1-1-0 /N@T-0-4-1-1-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 957 1636 a 981
653 a
 tx@Dict begin tx@NodeDict begin {4.33334 0.83334 6.13892 3.06946 2.1097
} false /N@T-0-5 16 {InitRnode } NewNode end end
 981 653 a Fo(+)1006 635 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-5 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 1006 635 a 965 903 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 3.98613 1.99306 2.1097
} false /N@T-0-5-0 16 {InitRnode } NewNode end end

965 903 a Fo(9)981 886 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5 /N@T-0-5-0 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 981 886 a 998 903 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-5-1 16 {InitRnode } NewNode end end
 998 903
a Fo(10)1031 886 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5 /N@T-0-5-1 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1031 886 a 990 1153 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 3.98613 1.99306 2.1097
} false /N@T-0-5-1-0 16 {InitRnode } NewNode end end
 990 1153 a Fo(9)1006
1136 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5-1 /N@T-0-5-1-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1006 1136 a 1023 1153 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-5-1-1 16 {InitRnode } NewNode end end
 1023 1153 a Fo(19)1056
1136 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5-1 /N@T-0-5-1-1 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1056 1136 a 1023 1404 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-5-1-1-0 16 {InitRnode } NewNode end end
 1023 1404 a Fo(28)1056
1386 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5-1-1 /N@T-0-5-1-1-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1056 1386 a 1023 1654 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-5-1-1-0-0 16 {InitRnode } NewNode end end
 1023 1654 a Fo(34)1056
1636 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5-1-1-0 /N@T-0-5-1-1-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1056 1636 a 1923 653 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-6 16 {InitRnode } NewNode end end
 1923 653 a Fo(11)1956 635
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-6 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 1956 635 a 1064 903 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 3.98613 1.99306 2.1097
} false /N@T-0-6-0 16 {InitRnode } NewNode end end
 1064 903 a Fo(5)1081 886 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6 /N@T-0-6-0 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1081
886 a 1097 903 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 3.98613 1.99306 2.1097
} false /N@T-0-6-1 16 {InitRnode } NewNode end end
 1097 903 a Fo(5)1114 886 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6 /N@T-0-6-1 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1114 886
a 1131 903 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-6-2 16 {InitRnode } NewNode end end
 1131 903 a Fo(14)1164 886 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6 /N@T-0-6-2 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1164 886 a 1197
903 a
 tx@Dict begin tx@NodeDict begin {4.33334 0.83334 6.13892 3.06946 2.1097
} false /N@T-0-6-3 16 {InitRnode } NewNode end end
 1197 903 a Fo(+)1222 886 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6 /N@T-0-6-3 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1222 886 a 1181 1153
a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 3.98613 1.99306 2.1097
} false /N@T-0-6-3-0 16 {InitRnode } NewNode end end
 1181 1153 a Fo(4)1197 1136 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-3 /N@T-0-6-3-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1197 1136 a 1214 1153
a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-6-3-1 16 {InitRnode } NewNode end end
 1214 1153 a Fo(16)1247 1136 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-3 /N@T-0-6-3-1 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1247 1136 a 1313 903
a
 tx@Dict begin tx@NodeDict begin {4.33334 0.83334 6.13892 3.06946 2.1097
} false /N@T-0-6-4 16 {InitRnode } NewNode end end
 1313 903 a Fo(+)1338 886 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6 /N@T-0-6-4 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1338 886 a 1280 1153 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-6-4-0 16 {InitRnode } NewNode end end
 1280
1153 a Fo(17)1313 1136 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-4 /N@T-0-6-4-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1313 1136 a 1346 1153 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 3.98613 1.99306 2.1097
} false /N@T-0-6-4-1 16 {InitRnode } NewNode end end
 1346
1153 a Fo(7)1363 1136 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-4 /N@T-0-6-4-1 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1363 1136 a 1395 903 a
 tx@Dict begin tx@NodeDict begin {4.33334 0.83334 6.13892 3.06946 2.1097
} false /N@T-0-6-5 16 {InitRnode } NewNode end end
 1395 903
a Fo(+)1421 886 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6 /N@T-0-6-5 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1421 886 a 1380 1153 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 3.98613 1.99306 2.1097
} false /N@T-0-6-5-0 16 {InitRnode } NewNode end end
 1380 1153 a
Fo(9)1396 1136 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-5 /N@T-0-6-5-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1396 1136 a 1413 1153 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-6-5-1 16 {InitRnode } NewNode end end
 1413 1153 a
Fo(19)1446 1136 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-5 /N@T-0-6-5-1 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1446 1136 a 1495 903 a
 tx@Dict begin tx@NodeDict begin {4.33334 0.83334 6.13892 3.06946 2.1097
} false /N@T-0-6-6 16 {InitRnode } NewNode end end
 1495 903 a Fo(+)1520
886 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6 /N@T-0-6-6 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1520 886 a 1479 1153 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 3.98613 1.99306 2.1097
} false /N@T-0-6-6-0 16 {InitRnode } NewNode end end
 1479 1153 a Fo(6)1495 1136
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-6 /N@T-0-6-6-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1495 1136 a 1512 1153 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-6-6-1 16 {InitRnode } NewNode end end
 1512 1153 a Fo(16)1545 1136
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-6 /N@T-0-6-6-1 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1545 1136 a 1619 903 a
 tx@Dict begin tx@NodeDict begin {4.33334 0.83334 6.13892 3.06946 2.1097
} false /N@T-0-6-7 16 {InitRnode } NewNode end end
 1619 903 a Fo(+)1644 886 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6 /N@T-0-6-7 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1644
886 a 1578 1153 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-6-7-0 16 {InitRnode } NewNode end end
 1578 1153 a Fo(16)1611 1136 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-7 /N@T-0-6-7-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1611
1136 a 1644 1153 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-6-7-1 16 {InitRnode } NewNode end end
 1644 1153 a Fo(16)1677 1136 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-7 /N@T-0-6-7-1 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1677
1136 a 1960 903 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-6-8 16 {InitRnode } NewNode end end
 1960 903 a Fo(20)1993 886 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6 /N@T-0-6-8 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1993 886
a 1710 1153 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-6-8-0 16 {InitRnode } NewNode end end
 1710 1153 a Fo(14)1743 1136 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8 /N@T-0-6-8-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1743 1136
a 1777 1153 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-6-8-1 16 {InitRnode } NewNode end end
 1777 1153 a Fo(22)1810 1136 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8 /N@T-0-6-8-1 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1810 1136
a 1691 1404 a
 tx@Dict begin tx@NodeDict begin {4.8611 0.0 16.37508 8.18753 2.1097
} false /N@T-0-6-8-1-0 16 {InitRnode } NewNode end end
 1691 1404 a Fo(25ab)1759 1386 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-1 /N@T-0-6-8-1-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1759 1386
a 1827 1404 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-6-8-1-1 16 {InitRnode } NewNode end end
 1827 1404 a Fo(21)1860 1386 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-1 /N@T-0-6-8-1-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1860 1386
a 1827 1654 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-6-8-1-1-0 16 {InitRnode } NewNode end end
 1827 1654 a Fo(30)1860 1636 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-1-1 /N@T-0-6-8-1-1-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1860 1636
a 1792 1904 a
 tx@Dict begin tx@NodeDict begin {4.8611 0.0 16.37508 8.18753 2.1097
} false /N@T-0-6-8-1-1-0-0 16 {InitRnode } NewNode end end
 1792 1904 a Fo(25ab)1860 1887 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-1-1-0 /N@T-0-6-8-1-1-0-0 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1860 1887
a 1934 1153 a
 tx@Dict begin tx@NodeDict begin {4.33334 0.83334 6.13892 3.06946 2.1097
} false /N@T-0-6-8-2 16 {InitRnode } NewNode end end
 1934 1153 a Fo(+)1959 1136 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8 /N@T-0-6-8-2 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1959 1136
a 1893 1404 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-6-8-2-0 16 {InitRnode } NewNode end end
 1893 1404 a Fo(23)1926 1386 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-2 /N@T-0-6-8-2-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1926 1386
a 1959 1404 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-6-8-2-1 16 {InitRnode } NewNode end end
 1959 1404 a Fo(14)1993 1386 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-2 /N@T-0-6-8-2-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1993 1386
a 2210 1153 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-6-8-3 16 {InitRnode } NewNode end end
 2210 1153 a Fo(29)2243 1136 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8 /N@T-0-6-8-3 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2243 1136
a 2026 1404 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-6-8-3-0 16 {InitRnode } NewNode end end
 2026 1404 a Fo(24)2059 1386 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-3 /N@T-0-6-8-3-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2059 1386
a 2092 1404 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-6-8-3-1 16 {InitRnode } NewNode end end
 2092 1404 a Fo(22)2125 1386 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-3 /N@T-0-6-8-3-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2125 1386
a 2158 1404 a
 tx@Dict begin tx@NodeDict begin {4.33334 0.83334 6.13892 3.06946 2.1097
} false /N@T-0-6-8-3-2 16 {InitRnode } NewNode end end
 2158 1404 a Fo(+)2184 1386 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-3 /N@T-0-6-8-3-2 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2184 1386
a 2117 1654 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-6-8-3-2-0 16 {InitRnode } NewNode end end
 2117 1654 a Fo(23)2151 1636 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-3-2 /N@T-0-6-8-3-2-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2151 1636
a 2184 1654 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-6-8-3-2-1 16 {InitRnode } NewNode end end
 2184 1654 a Fo(24)2217 1636 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-3-2 /N@T-0-6-8-3-2-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2217 1636
a 2395 1404 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-6-8-3-3 16 {InitRnode } NewNode end end
 2395 1404 a Fo(36)2428 1386 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-3 /N@T-0-6-8-3-3 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2428 1386
a 2250 1654 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-6-8-3-3-0 16 {InitRnode } NewNode end end
 2250 1654 a Fo(31)2283 1636 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-3-3 /N@T-0-6-8-3-3-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2283 1636
a 2316 1654 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-6-8-3-3-1 16 {InitRnode } NewNode end end
 2316 1654 a Fo(22)2349 1636 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-3-3 /N@T-0-6-8-3-3-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2349 1636
a 2382 1654 a
 tx@Dict begin tx@NodeDict begin {4.33334 0.83334 6.13892 3.06946 2.1097
} false /N@T-0-6-8-3-3-2 16 {InitRnode } NewNode end end
 2382 1654 a Fo(+)2408 1636 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-3-3 /N@T-0-6-8-3-3-2 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2408 1636
a 2341 1904 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-6-8-3-3-2-0 16 {InitRnode } NewNode end end
 2341 1904 a Fo(23)2375 1887 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-3-3-2 /N@T-0-6-8-3-3-2-0 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2375 1887
a 2408 1904 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-6-8-3-3-2-1 16 {InitRnode } NewNode end end
 2408 1904 a Fo(31)2441 1887 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-3-3-2 /N@T-0-6-8-3-3-2-1 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2441 1887
a 2540 1654 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-6-8-3-3-3 16 {InitRnode } NewNode end end
 2540 1654 a Fo(37)2573 1636 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-3-3 /N@T-0-6-8-3-3-3 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2573 1636
a 2474 1904 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-6-8-3-3-3-0 16 {InitRnode } NewNode end end
 2474 1904 a Fo(22)2507 1887 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-3-3-3 /N@T-0-6-8-3-3-3-0 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2507 1887
a 2540 1904 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-6-8-3-3-3-1 16 {InitRnode } NewNode end end
 2540 1904 a Fo(23)2573 1887 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-3-3-3 /N@T-0-6-8-3-3-3-1 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2573 1887
a 2606 1904 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-6-8-3-3-3-2 16 {InitRnode } NewNode end end
 2606 1904 a Fo(38)2639 1887 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-3-3-3 /N@T-0-6-8-3-3-3-2 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2639 1887
a 2606 2154 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-6-8-3-3-3-2-0 16 {InitRnode } NewNode end end
 2606 2154 a Fo(39)2639 2137 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-3-3-3-2 /N@T-0-6-8-3-3-3-2-0 InitNC { NCLine  }
if end gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore
end
 2639 2137
a 2606 2404 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-6-8-3-3-3-2-0-0 16 {InitRnode } NewNode end end
 2606 2404 a Fo(26)2639 2387 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-3-3-3-2-0 /N@T-0-6-8-3-3-3-2-0-0 InitNC { NCLine
 } if end gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore
end
 2639 2387
a 2799 903 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-6-9 16 {InitRnode } NewNode end end
 2799 903 a Fo(35)2832 886 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6 /N@T-0-6-9 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 2832 886 a 2394
1153 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 3.98613 1.99306 2.1097
} false /N@T-0-6-9-0 16 {InitRnode } NewNode end end
 2394 1153 a Fo(5)2411 1136 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9 /N@T-0-6-9-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2411 1136 a 2427
1153 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-6-9-1 16 {InitRnode } NewNode end end
 2427 1153 a Fo(24)2460 1136 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9 /N@T-0-6-9-1 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2460 1136 a 2493
1153 a
 tx@Dict begin tx@NodeDict begin {4.33334 0.83334 6.13892 3.06946 2.1097
} false /N@T-0-6-9-2 16 {InitRnode } NewNode end end
 2493 1153 a Fo(+)2519 1136 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9 /N@T-0-6-9-2 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2519 1136 a 2461
1404 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-6-9-2-0 16 {InitRnode } NewNode end end
 2461 1404 a Fo(26)2494 1386 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-2 /N@T-0-6-9-2-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2494 1386 a 2527
1404 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 3.98613 1.99306 2.1097
} false /N@T-0-6-9-2-1 16 {InitRnode } NewNode end end
 2527 1404 a Fo(4)2544 1386 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-2 /N@T-0-6-9-2-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2544 1386 a 2576
1153 a
 tx@Dict begin tx@NodeDict begin {4.33334 0.83334 6.13892 3.06946 2.1097
} false /N@T-0-6-9-3 16 {InitRnode } NewNode end end
 2576 1153 a Fo(+)2602 1136 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9 /N@T-0-6-9-3 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2602 1136 a 2561
1404 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 3.98613 1.99306 2.1097
} false /N@T-0-6-9-3-0 16 {InitRnode } NewNode end end
 2561 1404 a Fo(7)2577 1386 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-3 /N@T-0-6-9-3-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2577 1386 a 2593
1404 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-6-9-3-1 16 {InitRnode } NewNode end end
 2593 1404 a Fo(27)2626 1386 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-3 /N@T-0-6-9-3-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2626 1386 a 2675
1153 a
 tx@Dict begin tx@NodeDict begin {4.33334 0.83334 6.13892 3.06946 2.1097
} false /N@T-0-6-9-4 16 {InitRnode } NewNode end end
 2675 1153 a Fo(+)2701 1136 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9 /N@T-0-6-9-4 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2701 1136 a 2660
1404 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 3.98613 1.99306 2.1097
} false /N@T-0-6-9-4-0 16 {InitRnode } NewNode end end
 2660 1404 a Fo(9)2676 1386 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-4 /N@T-0-6-9-4-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2676 1386 a 2693
1404 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-6-9-4-1 16 {InitRnode } NewNode end end
 2693 1404 a Fo(28)2726 1386 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-4 /N@T-0-6-9-4-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2726 1386 a 2791
1153 a
 tx@Dict begin tx@NodeDict begin {4.33334 0.83334 6.13892 3.06946 2.1097
} false /N@T-0-6-9-5 16 {InitRnode } NewNode end end
 2791 1153 a Fo(+)2817 1136 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9 /N@T-0-6-9-5 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2817 1136 a 2759
1404 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-6-9-5-0 16 {InitRnode } NewNode end end
 2759 1404 a Fo(26)2792 1386 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-5 /N@T-0-6-9-5-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2792 1386 a 2825
1404 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 3.98613 1.99306 2.1097
} false /N@T-0-6-9-5-1 16 {InitRnode } NewNode end end
 2825 1404 a Fo(6)2842 1386 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-5 /N@T-0-6-9-5-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2842 1386 a 2842
1153 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-6-9-6 16 {InitRnode } NewNode end end
 2842 1153 a Fo(29)2875 1136 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9 /N@T-0-6-9-6 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2875 1136 a 2908
1153 a
 tx@Dict begin tx@NodeDict begin {4.33334 0.83334 6.13892 3.06946 2.1097
} false /N@T-0-6-9-7 16 {InitRnode } NewNode end end
 2908 1153 a Fo(+)2934 1136 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9 /N@T-0-6-9-7 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2934 1136 a 2868
1404 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-6-9-7-0 16 {InitRnode } NewNode end end
 2868 1404 a Fo(26)2901 1386 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-7 /N@T-0-6-9-7-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2901 1386 a 2934
1404 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-6-9-7-1 16 {InitRnode } NewNode end end
 2934 1404 a Fo(16)2967 1386 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-7 /N@T-0-6-9-7-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2967 1386 a 3220
1153 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-6-9-8 16 {InitRnode } NewNode end end
 3220 1153 a Fo(40)3253 1136 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9 /N@T-0-6-9-8 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3253 1136 a 3000
1404 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 3.98613 1.99306 2.1097
} false /N@T-0-6-9-8-0 16 {InitRnode } NewNode end end
 3000 1404 a Fo(5)3017 1386 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8 /N@T-0-6-9-8-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3017 1386 a 3033
1404 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-6-9-8-1 16 {InitRnode } NewNode end end
 3033 1404 a Fo(31)3066 1386 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8 /N@T-0-6-9-8-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3066 1386 a 3099
1404 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 3.98613 1.99306 2.1097
} false /N@T-0-6-9-8-2 16 {InitRnode } NewNode end end
 3099 1404 a Fo(4)3116 1386 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8 /N@T-0-6-9-8-2 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3116 1386 a 3132
1404 a
 tx@Dict begin tx@NodeDict begin {4.33334 0.83334 6.13892 3.06946 2.1097
} false /N@T-0-6-9-8-3 16 {InitRnode } NewNode end end
 3132 1404 a Fo(+)3158 1386 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8 /N@T-0-6-9-8-3 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3158 1386 a 3117
1654 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 3.98613 1.99306 2.1097
} false /N@T-0-6-9-8-3-0 16 {InitRnode } NewNode end end
 3117 1654 a Fo(7)3133 1636 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8-3 /N@T-0-6-9-8-3-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3133 1636 a 3150
1654 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-6-9-8-3-1 16 {InitRnode } NewNode end end
 3150 1654 a Fo(33)3183 1636 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8-3 /N@T-0-6-9-8-3-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3183 1636 a 3232
1404 a
 tx@Dict begin tx@NodeDict begin {4.33334 0.83334 6.13892 3.06946 2.1097
} false /N@T-0-6-9-8-4 16 {InitRnode } NewNode end end
 3232 1404 a Fo(+)3257 1386 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8 /N@T-0-6-9-8-4 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3257 1386 a 3216
1654 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 3.98613 1.99306 2.1097
} false /N@T-0-6-9-8-4-0 16 {InitRnode } NewNode end end
 3216 1654 a Fo(9)3232 1636 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8-4 /N@T-0-6-9-8-4-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3232 1636 a 3249
1654 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-6-9-8-4-1 16 {InitRnode } NewNode end end
 3249 1654 a Fo(34)3282 1636 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8-4 /N@T-0-6-9-8-4-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3282 1636 a 3283
1404 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 3.98613 1.99306 2.1097
} false /N@T-0-6-9-8-5 16 {InitRnode } NewNode end end
 3283 1404 a Fo(6)3299 1386 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8 /N@T-0-6-9-8-5 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3299 1386 a 3316
1404 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-6-9-8-6 16 {InitRnode } NewNode end end
 3316 1404 a Fo(36)3349 1386 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8 /N@T-0-6-9-8-6 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3349 1386 a 3382
1404 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-6-9-8-7 16 {InitRnode } NewNode end end
 3382 1404 a Fo(16)3415 1386 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8 /N@T-0-6-9-8-7 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3415 1386 a 3456
1404 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-6-9-8-8 16 {InitRnode } NewNode end end
 3456 1404 a Fo(41)3489 1386 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8 /N@T-0-6-9-8-8 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3489 1386 a 3315
1654 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 3.98613 1.99306 2.1097
} false /N@T-0-6-9-8-8-0 16 {InitRnode } NewNode end end
 3315 1654 a Fo(5)3332 1636 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8-8 /N@T-0-6-9-8-8-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3332 1636 a 3348
1654 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 3.98613 1.99306 2.1097
} false /N@T-0-6-9-8-8-1 16 {InitRnode } NewNode end end
 3348 1654 a Fo(4)3365 1636 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8-8 /N@T-0-6-9-8-8-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3365 1636 a 3381
1654 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 3.98613 1.99306 2.1097
} false /N@T-0-6-9-8-8-2 16 {InitRnode } NewNode end end
 3381 1654 a Fo(7)3398 1636 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8-8 /N@T-0-6-9-8-8-2 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3398 1636 a 3414
1654 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 3.98613 1.99306 2.1097
} false /N@T-0-6-9-8-8-3 16 {InitRnode } NewNode end end
 3414 1654 a Fo(9)3431 1636 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8-8 /N@T-0-6-9-8-8-3 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3431 1636 a 3448
1654 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 3.98613 1.99306 2.1097
} false /N@T-0-6-9-8-8-4 16 {InitRnode } NewNode end end
 3448 1654 a Fo(6)3464 1636 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8-8 /N@T-0-6-9-8-8-4 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3464 1636 a 3481
1654 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-6-9-8-8-5 16 {InitRnode } NewNode end end
 3481 1654 a Fo(37)3514 1636 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8-8 /N@T-0-6-9-8-8-5 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3514 1636 a 3547
1654 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-6-9-8-8-6 16 {InitRnode } NewNode end end
 3547 1654 a Fo(16)3580 1636 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8-8 /N@T-0-6-9-8-8-6 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3580 1636 a 3613
1654 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-6-9-8-8-7 16 {InitRnode } NewNode end end
 3613 1654 a Fo(38)3646 1636 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8-8 /N@T-0-6-9-8-8-7 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3646 1636 a 3207
653 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-7 16 {InitRnode } NewNode end end
 3207 653 a Fo(12)3240 635 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-7 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 3240 635 a 3120 903
a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 3.98613 1.99306 2.1097
} false /N@T-0-7-0 16 {InitRnode } NewNode end end
 3120 903 a Fo(3)3136 886 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-7 /N@T-0-7-0 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 3136 886 a 3153 903 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 3.98613 1.99306 2.1097
} false /N@T-0-7-1 16 {InitRnode } NewNode end end
 3153
903 a Fo(9)3169 886 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-7 /N@T-0-7-1 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 3169 886 a 3186 903 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-7-2 16 {InitRnode } NewNode end end
 3186 903
a Fo(20)3219 886 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-7 /N@T-0-7-2 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 3219 886 a 3252 903 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-7-3 16 {InitRnode } NewNode end end
 3252 903 a Fo(22)3285
886 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-7 /N@T-0-7-3 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 3285 886 a 3318 903 a
 tx@Dict begin tx@NodeDict begin {4.33334 0.83334 6.13892 3.06946 2.1097
} false /N@T-0-7-4 16 {InitRnode } NewNode end end
 3318 903 a Fo(+)3344 886
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-7 /N@T-0-7-4 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 3344 886 a 3286 1153 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-7-4-0 16 {InitRnode } NewNode end end
 3286 1153 a Fo(23)3319 1136
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-7-4 /N@T-0-7-4-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3319 1136 a 3352 1153 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 3.98613 1.99306 2.1097
} false /N@T-0-7-4-1 16 {InitRnode } NewNode end end
 3352 1153 a Fo(3)3369 1136
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-7-4 /N@T-0-7-4-1 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3369 1136 a 3273 653 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 3.98613 1.99306 2.1097
} false /N@T-0-8 16 {InitRnode } NewNode end end
 3273 653 a Fo(3)3290 635 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-8 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 3290
635 a 3306 653 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 3.98613 1.99306 2.1097
} false /N@T-0-9 16 {InitRnode } NewNode end end
 3306 653 a Fo(3)3323 635 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-9 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 3323 635
a 3377 653 a
 tx@Dict begin tx@NodeDict begin {4.33334 0.83334 6.13892 3.06946 2.1097
} false /N@T-0-10 16 {InitRnode } NewNode end end
 3377 653 a Fo(+)3402 635 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-10 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 3402 635 a 3369
903 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 3.98613 1.99306 2.1097
} false /N@T-0-10-0 16 {InitRnode } NewNode end end
 3369 903 a Fo(4)3385 886 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-10 /N@T-0-10-0 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 3385 886 a 3402 903
a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 3.98613 1.99306 2.1097
} false /N@T-0-10-1 16 {InitRnode } NewNode end end
 3402 903 a Fo(5)3419 886 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-10 /N@T-0-10-1 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 3419 886 a 3443 653 a
 tx@Dict begin tx@NodeDict begin {4.33334 0.83334 6.13892 3.06946 2.1097
} false /N@T-0-11 16 {InitRnode } NewNode end end
 3443
653 a Fo(+)3469 635 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-11 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 3469 635 a 3436 903 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 3.98613 1.99306 2.1097
} false /N@T-0-11-0 16 {InitRnode } NewNode end end
 3436 903
a Fo(6)3452 886 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-11 /N@T-0-11-0 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 3452 886 a 3469 903 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 3.98613 1.99306 2.1097
} false /N@T-0-11-1 16 {InitRnode } NewNode end end
 3469 903 a Fo(5)3485
886 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-11 /N@T-0-11-1 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 3485 886 a 3509 653 a
 tx@Dict begin tx@NodeDict begin {4.33334 0.83334 6.13892 3.06946 2.1097
} false /N@T-0-12 16 {InitRnode } NewNode end end
 3509 653 a Fo(+)3535 635
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-12 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 3535 635 a 3502 903 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 3.98613 1.99306 2.1097
} false /N@T-0-12-0 16 {InitRnode } NewNode end end
 3502 903 a Fo(7)3518 886 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-12 /N@T-0-12-0 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 3518
886 a 3535 903 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 3.98613 1.99306 2.1097
} false /N@T-0-12-1 16 {InitRnode } NewNode end end
 3535 903 a Fo(8)3551 886 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-12 /N@T-0-12-1 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 3551 886
a 3584 653 a
 tx@Dict begin tx@NodeDict begin {4.33334 0.83334 6.13892 3.06946 2.1097
} false /N@T-0-13 16 {InitRnode } NewNode end end
 3584 653 a Fo(+)3609 635 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-13 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 3609 635 a 3568
903 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 3.98613 1.99306 2.1097
} false /N@T-0-13-0 16 {InitRnode } NewNode end end
 3568 903 a Fo(9)3584 886 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-13 /N@T-0-13-0 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 3584 886 a 3601 903
a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-13-1 16 {InitRnode } NewNode end end
 3601 903 a Fo(10)3634 886 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-13 /N@T-0-13-1 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 3634 886 a 3635 653 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-14 16 {InitRnode } NewNode end end
 3635
653 a Fo(11)3668 635 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-14 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 3668 635 a 3701 653 a
 tx@Dict begin tx@NodeDict begin {4.51111 0.0 7.97226 3.98613 2.1097
} false /N@T-0-15 16 {InitRnode } NewNode end end
 3701 653
a Fo(12)3734 635 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-15 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 3734 635 a 523 2562 a Fd(Fig.)12 b(7.)20
b Fo(P)n(art)g(of)f(the)g(recursion)f(tree)h(for)g(Y)-5
b(ang's)20 b(pro)r(of.)e(References)f(to)j(frequen)n(tly)e(o)r
(ccurring)g(small)h(patterns)523 2629 y(ha)n(v)n(e)e(b)r(een)e
(omitted.)h(Lab)r(els)g(indicate)f(pattern)i(n)n(um)n(b)r(ers.)e(No)r
(des)i(lab)r(elled)e(+)i(are)g Fc(and)p Fo(-no)r(des;)g(all)f(other)h
(no)r(des)523 2695 y(are)22 b Fc(or)p Fo(-no)r(des.)523
3049 y Ft(the)i(name)g(of)g(the)g(pattern.)g(The)g(second)f(line)i(is)e
(a)h(commen)n(t)g(noting)f(that)h(the)h(only)e(pat-)523
3149 y(tern)c(calling)g(this)h(pattern)f(is)h(P)n(attern)e(1.)h(The)h
(third)g(line)f(giv)n(es)g(the)g(connections)g(that)h(are)523
3248 y(ac)n(hiev)n(ed)25 b(b)n(y)g(the)i(pattern;)e(in)h(this)h(case)e
(at)g(least)h(one)f(of)h(t)n(w)n(o)f(connections)g(is)h(ac)n(hiev)n
(ed,)523 3348 y(either)34 b(b)r(et)n(w)n(een)g Fn(c)p
Ft(6)f(and)h(the)g(b)r(ottom)h(righ)n(t)e(side)h(of)g(the)g(b)r(oard,)f
(or)g(b)r(et)n(w)n(een)h Fn(d)p Ft(4)g(and)523 3448 y(the)27
b(b)r(ottom)f(righ)n(t)f(side;)i(this)f(information)f(is)i(giv)n(en)e
(only)h(to)g(aid)g(in)g(h)n(uman)g(debugging)523 3547
y(purp)r(oses)31 b(and)h(is)g(not)h(used)f(b)n(y)g(our)f(algorithm.)g
(The)h(fourth)h(line)f(lists)g(the)h(cells)f(that)523
3647 y(m)n(ust)k(b)r(e)f(uno)r(ccupied)h(at)f(this)h(p)r(oin)n(t;)g
(the)g(\014fth)g(line)g(lists)f(the)h(cells)f(that)h(the)g(pla)n(y)n
(er)523 3746 y(m)n(ust)27 b(already)f(o)r(ccup)n(y)-7
b(.)27 b(The)g(subsequen)n(t)g(lines)h(describ)r(e)f(the)g
Fh(and)p Ft(/)p Fh(or)h Ft(autotree,)f(where)523 3846
y(paren)n(theses)i(surround)h(the)g(subtrees)g(of)h(an)f
Fh(or)q Ft(-no)r(de)g(and)g(square)f(brac)n(k)n(ets)g(surround)523
3946 y(the)f(subtrees)f(of)h(an)f Fh(and)p Ft(-no)r(de.)648
4086 y(In)d(the)g(pro)r(cess)f(of)h(v)n(erifying)f(the)h(description)f
(of)h(Y)-7 b(ang's)24 b(pro)r(of,)f(w)n(e)h(found)g(only)f(one)523
4186 y(t)n(yp)r(ographical)31 b(error:)f(in)j(the)g(description)f(of)g
(P)n(attern)f(11)h(there)g(is)h(a)f(call)g(to)g(P)n(attern)523
4286 y(17)27 b(that)h(should)f(instead)g(b)r(e)h(a)g(call)f(to)g(P)n
(attern)g(19.)648 4426 y(Our)c(notation)g(represen)n(ts)g(Y)-7
b(ang's)23 b(strategy)g(in)h(ab)r(out)g(700)f(lines)h(of)g(text.)g(The)
g(diag-)523 4526 y(nostic)h(message)g(returned)g(b)n(y)g(our)g(program)
f(after)h(recursiv)n(ely)f(v)n(erifying)h(Y)-7 b(ang's)25
b(pro)r(of)523 4625 y(is)k(sho)n(wn)f(in)h(Fig.)g(9.)f(The)h(resulting)
g(tree)f(had)h(1480)e Fh(and)q Ft(-no)r(des,)h(2339)f
Fh(or)p Ft(-no)r(des,)i(3514)523 4725 y(lea)n(v)n(es,)24
b(and)h(25574)e(implicit)j(ro)r(ot-to-leaf)e(paths.)h(The)h(v)n
(eri\014cation)e(to)r(ok)h(less)g(than)g(one)523 4825
y(second)31 b(to)h(execute)g(on)f(our)h(computer,)f(a)h(single-pro)r
(cessor)c(A)n(thlon64)j(3200+)f(with)i(1)523 4924 y(gigab)n(yte)26
b(of)i(memory)-7 b(.)p eop end
%%Page: 9 9
TeXDict begin 9 8 bop 3320 232 a Fs(IX)523 523 y Fa(\()39
b(pattern8)601 614 y(//)h(called)h(by:)f(1)601 706 y(\(\(c6)h(BR\))f
(\(d4)f(BR\)\))601 797 y(\(d6)h(e3)g(e4)g(e5)f(e6)h(f2)g(f3)f(f4)h(f5)g
(f6)g(g1)f(g2)h(g3)g(g4)f(g5)h(g6\))601 888 y(\(c6)g(d4)g(BR\))601
1071 y([\(f3)h([\(pattern2ab)h(\(e3)d(e4\))h(\(d4)g(f3\)\)])798
1162 y([\(pattern2ab)i(\(g2)d(g3\))h(\(f3)g(BR\)\)]\))641
1254 y(\(e5)g([\(d6\))g(\(e4\)])798 1345 y([\(pattern13)h(\(e6)f(f4)g
(f5)g(f6)f(g3)h(g4)g(g5)f(g6\))h(\(e5)g(BR\)\)]\))641
1436 y(\(f2)g([\(pattern2ab)i(\(g1)d(g2\))h(\(f2)g(BR\)\)])798
1528 y([\(pattern9)h(\(g5)f(g4)g(f5)f(f4)h(f3)g(e5)f(e4)h(e3\))g(\(BR)g
(f2)g(d4\)\)]\))641 1619 y(\(e3)g([\(pattern17)h(\(d6)f(e5)g(e6)g(f2)f
(f3)h(f4)g(f5)f(g1)h(g2)g(g3)f(g4)h(g5\))g(\(c6)g(d4)g(e3)f(BR\)\)]\))i
(]\))1274 1951 y Fq(Fig.)14 b(8.)25 b Fs(Y)-6 b(ang's)26
b(P)n(attern)g(8)g(in)f(our)h(notation.)523 2251 y Fa(pattern1)523
2343 y(connect:)41 b(\(TL)f(BR\))601 2434 y(empty:)h(\(a1)f(a2)g(a3)f
(a4)h(a5)g(a6)f(a7)h(b1)g(b2)f(b3)h(b4)g(b5)g(b6)f(b7)h(c1)g(c2)f(c3)h
(c4)g(c5)f(c6)h(c7)915 2525 y(d1)g(d2)g(d3)f(d5)h(d6)g(d7)f(e1)h(e2)g
(e3)f(e4)h(e5)g(e6)g(e7)f(f1)h(f2)g(f3)f(f4)h(f5)g(f6)f(f7)h(g1)915
2617 y(g2)g(g3)g(g4)f(g5)h(g6)g(g7\))562 2708 y(played:)h(\(TL)f(d4)g
(BR\))601 2799 y(stats:)h(AND)f(=)f(1480,)i(OR)e(=)h(2339,)g(Leafs)h(=)
e(3514)601 2891 y(paths:)i(25574/25574)523 2982 y(VALID)f(pattern.)1004
3314 y Fq(Fig.)13 b(9.)26 b Fs(Diagnostics)h(returned)e(after)h(v)n
(erifying)g(Y)-6 b(ang's)26 b(pro)r(of.)523 3629 y Fp(5)112
b(Conclusions)523 3900 y Ft(W)-7 b(e)24 b(ha)n(v)n(e)f(in)n(tro)r
(duced)h(the)g(notion)g(of)g(an)g Fh(excise)l(d)j(tr)l(e)l(e)c
Ft(as)g(a)h(compressed)f(represen)n(tation)523 3999 y(of)33
b(a)g(complete)g(strategy)f(tree)h(from)f(whic)n(h)i(all)e(explicit)i
(opp)r(onen)n(t)f(mo)n(v)n(es)f(ha)n(v)n(e)g(b)r(een)523
4099 y(excised.)23 b(W)-7 b(e)23 b(used)g(excised)f(trees)h(in)g(a)f
(simple)h(algorithm)f(that)h(v)n(eri\014ed)g(the)g(correctness)523
4198 y(of)28 b(Y)-7 b(ang's)27 b(original)f(winning)h(7)p
Fm(\002)p Ft(7)g(Hex)g(strategy)-7 b(.)648 4312 y(One)28
b(w)n(a)n(y)g(in)h(whic)n(h)g(our)g(system)f(could)h(b)r(e)h(impro)n(v)
n(ed)d(w)n(ould)i(b)r(e)g(to)g(automate)g(the)523 4412
y(pro)r(cess)d(of)i(translating)e(strategies)h(from)g(other)g
(notations)g(in)n(to)g(our)g(notation.)648 4526 y(Another)44
b(impro)n(v)n(emen)n(t)f(concerns)g(the)i(n)n(um)n(b)r(er)f(of)h(paths)
f(that)h(our)e(algorithm)523 4625 y(c)n(hec)n(ks)34 b(in)g(v)n
(erifying)g(the)h(correctness)e(of)i(a)f(strategy)-7
b(.)33 b(Curren)n(tly)h(our)g(system)g(explic-)523 4725
y(itly)26 b(v)n(eri\014es)e(that)i(ev)n(ery)e(p)r(ossible)h(cell)g(set)
g(that)h(a)f(pla)n(y)n(er)f(migh)n(t)h(end)g(up)h(with)g(con)n(tains)
523 4825 y(a)j(winning)h(path.)g(F)-7 b(or)29 b(example,)h(for)f(Y)-7
b(ang's)29 b(strategy)f(this)i(w)n(as)f(a)g(total)h(of)g(25574)d(cell)
523 4924 y(sets)k(that)g(w)n(ere)f(c)n(hec)n(k)n(ed.)f(The)i(problem)g
(with)g(this)g(approac)n(h)e(is)i(that)g(the)g(n)n(um)n(b)r(er)g(of)p
eop end
%%Page: 10 10
TeXDict begin 10 9 bop 523 232 a Fs(X)523 448 y Ft(suc)n(h)24
b(cell)h(sets,)f(corresp)r(onding)f(to)h(the)h(n)n(um)n(b)r(er)g(of)f
(ro)r(ot-to-leaf)f(paths)h(in)h(the)g(complete)523 548
y(strategy)h(tree,)i(increases)e(exp)r(onen)n(tially)h(in)h(the)g(b)r
(oard)e(size.)648 648 y(Consider)32 b(for)h(example)g(Martin)g
(Gardner's)f(winning)h(second-pla)n(y)n(er)e(strategy)h(for)523
747 y(the)c(pla)n(y)n(er)e(with)i(the)g(longer)e(sides)i(on)f(an)g
Fn(n)p Fm(\002)p Fn(n)18 b Fm(\000)g Ft(1)27 b(b)r(oard)g([2].)g(The)h
(strategy)e(consists)523 847 y(of)35 b(the)g Fh(and)g
Ft(of)g Fn(f)9 b Ft(\()p Fn(n)p Ft(\))35 b(=)f Fn(n)23
b Fm(\002)g Ft(\()p Fn(n)g Fm(\000)g Ft(1\))p Fn(=)p
Ft(2)34 b(substrategies)f(eac)n(h)h(consisting)g(of)h(the)g
Fh(or)g Ft(of)523 946 y(t)n(w)n(o)30 b(mo)n(v)n(es.)g(The)h(asso)r
(ciated)f(excised)h(tree)f(th)n(us)h(has)g(2)2367 916
y Fe(f)7 b Fo(\()p Fe(n)p Fo(\))2534 946 y Ft(ro)r(ot-to-leaf)29
b(paths.)i(Ev)n(en)523 1046 y(for)f Fn(n)h Ft(as)f(small)g(as)g(14,)g
(2)1343 1016 y Fe(f)7 b Fo(\()p Fe(n)p Fo(\))1506 1046
y Ft(=)28 b(2)1641 1016 y Fo(91)1711 1046 y Ft(,)i(and)h(c)n(hec)n
(king)e(this)i(man)n(y)f(paths)g(individually)h(is)523
1146 y(curren)n(tly)c(computationally)f(infeasible.)648
1245 y(Th)n(us,)d(as)f(b)r(oard)h(size)g(increases,)f(v)n
(eri\014cation)g(algorithms)g(will)h(b)r(e)h(required)f(that)g(do)523
1345 y(not)28 b(explicitly)f(c)n(hec)n(k)g(the)h(winning)g(condition)f
(for)g(eac)n(h)g(ro)r(ot-to-leaf)f(path.)523 1597 y Fp(References)561
1771 y Fs(1.)43 b(Martin)28 b(Gardner.)39 b(Mathematical)30
b(Games.)40 b Fb(Scienti\014c)30 b(Americ)l(an)p Fs(,)e(197,)h(1957.)41
b(July)27 b(pp.)663 1863 y(145{150;)h(August)d(pp.)h(120{127;)i(Octob)r
(er)e(pp.)f(130{138.)561 1951 y(2.)43 b(Martin)28 b(Gardner.)41
b Fb(The)29 b(Scienti\014c)h(A)n(meric)l(an)g(Bo)l(ok)g(of)f
(Mathematic)l(al)i(Puzzles)f(and)g(Di-)663 2042 y(versions)p
Fs(,)d(c)n(hapter)e(The)h(game)h(of)f(Hex,)f(pages)i(73{83.)36
b(Simon)25 b(and)h(Sc)n(h)n(uster,)f(New)g(Y)-6 b(ork,)663
2133 y(1959.)561 2221 y(3.)43 b(Ry)n(an)28 b(Ha)n(yw)n(ard)h(and)g(Jac)
n(k)g(v)l(an)g(Rijswijc)n(k.)46 b(Hex)29 b(and)g(Com)n(binatorics)i
(\(formerly)f(Notes)663 2313 y(on)25 b(Hex\).)34 b(to)26
b(app)r(ear)g(in)f(Discrete)i(Mathematics,)g(2005.)561
2401 y(4.)43 b(Ry)n(an)23 b(B.)i(Ha)n(yw)n(ard,)g(Yngvi)e(Bj\177)-38
b(ornsson,)27 b(Mic)n(hael)e(Johanson,)h(Morgan)g(Kan,)e(Nathan)g(P)n
(o,)663 2492 y(and)j(Jac)n(k)i(v)l(an)e(Rijswijc)n(k.)43
b(Solving)28 b(7)19 b Fr(\002)f Fs(7)29 b(Hex:)e(Virtual)h(Connections)
h(and)f(Game-state)663 2583 y(Reduction.)58 b(In)33 b(H.)h(Jaap)h(v)l
(an)e(den)g(Herik,)h(Hiro)n(yuki)f(Iida,)h(and)g(Ernst)f(A.)h(Heinz,)g
(edi-)663 2675 y(tors,)27 b Fb(A)l(dvanc)l(es)j(in)e(Computer)i(Games)p
Fs(,)d(v)n(olume)g(263)h(of)f Fb(IFIP)g(International)j(F)-6
b(e)l(der)l(ation)663 2766 y(for)28 b(Information)g(Pr)l(o)l(c)l
(essing)p Fs(,)h(pages)e(261{278.)i(Klu)n(w)n(er)e(Academic)f
(Publishers,)i(Boston,)663 2857 y(2003.)561 2945 y(5.)43
b(Ry)n(an)23 b(B.)i(Ha)n(yw)n(ard,)g(Yngvi)e(Bj\177)-38
b(ornsson,)27 b(Mic)n(hael)e(Johanson,)h(Morgan)g(Kan,)e(Nathan)g(P)n
(o,)663 3037 y(and)31 b(Jac)n(k)i(v)l(an)e(Rijswijc)n(k.)55
b(Solving)33 b(7)21 b Fr(\002)g Fs(7)33 b(Hex)e(with)i(domination,)g
(\014ll-in,)f(and)g(virtual)663 3128 y(connections.)j
Fb(The)l(or)l(etic)l(al)29 b(Computer)f(Scienc)l(e)p
Fs(,)f(349:123{139,)k(2005.)561 3216 y(6.)43 b(Thomas)33
b(Maarup.)53 b(Hex)31 b({)i(ev)n(erything)e(y)n(ou)g(alw)n(a)n(ys)i(w)n
(an)n(ted)f(to)g(kno)n(w)g(ab)r(out)g(Hex)f(but)663 3307
y(w)n(ere)i(afraid)g(to)g(ask.)54 b(Master's)34 b(thesis,)f(Departmen)n
(t)f(of)h(Mathematics)h(and)e(Computer)663 3399 y(Science,)26
b(Univ)n(ersit)n(y)f(of)h(Southern)f(Denmark,)g(Odense,)h(Denmark,)f
(2005.)561 3487 y(7.)43 b(Thomas)26 b(Maarup.)35 b(Hex)25
b(w)n(ebpage.)663 3578 y Fa(http://maarup.net/thomas/hex/)p
Fs(,)32 b(2005.)561 3666 y(8.)43 b(Sylvia)25 b(Nasar.)35
b Fb(A)28 b(Be)l(autiful)f(Mind)p Fs(.)34 b(T)-6 b(ouc)n(hstone,)26
b(New)g(Y)-6 b(ork,)25 b(1998.)561 3754 y(9.)43 b(John)37
b(Nash.)69 b(Some)37 b(Games)i(and)e(Mac)n(hines)h(for)g(Pla)n(ying)g
(Them.)69 b(T)-6 b(ec)n(hnical)38 b(Rep)r(ort)663 3845
y(D-1164,)26 b(Rand)f(Corp.,)i(1952.)523 3933 y(10.)43
b(Kohei)17 b(Noshita.)22 b(Union-Connections)17 b(and)g(Straigh)n
(tforw)n(ard)i(Winning)e(Strategies)i(in)e(Hex.)663 4024
y Fb(International)28 b(Computer)h(Games)g(Asso)l(ciation)f(Journal)p
Fs(,)f(28\(1\):3{12,)i(Marc)n(h)d(2005.)523 4112 y(11.)43
b(Stefan)25 b(Reisc)n(h.)35 b(Hex)25 b(ist)h(PSP)-6 b(A)n(CE-v)n
(ollst\177)-38 b(andig.)35 b Fb(A)l(cta)28 b(Informatic)l(a)p
Fs(,)f(15:167{191,)i(1981.)523 4200 y(12.)43 b(Jing)26
b(Y)-6 b(ang.)34 b(Jing)27 b(y)n(ang's)f(w)n(eb)f(site.)663
4292 y Fa(www.ee.umanitoba.ca/~jingyang)p Fs(,)32 b(2003.)523
4380 y(13.)43 b(Jing)35 b(Y)-6 b(ang,)35 b(Simon)g(Liao,)i(and)d(Mirek)
i(P)n(a)n(wlak.)63 b(A)34 b(decomp)r(osition)j(metho)r(d)e(for)g
(\014nd-)663 4471 y(ing)f(solution)h(in)f(game)h(Hex)e(7x7.)59
b(In)34 b Fb(International)i(Confer)l(enc)l(e)g(on)g(Applic)l(ation)f
(and)663 4562 y(Development)f(of)f(Computer)h(Games)h(in)d(the)i(21st)h
(Century)p Fs(,)e(pages)g(96{111,)i(No)n(v)n(em)n(b)r(er)663
4654 y(2001.)523 4742 y(14.)43 b(Jing)21 b(Y)-6 b(ang,)20
b(Simon)h(Liao,)h(and)e(Mirek)h(P)n(a)n(wlak.)27 b(On)20
b(a)h(decomp)r(osition)h(metho)r(d)e(for)i(\014nding)663
4833 y(winning)35 b(strategy)h(in)f(Hex)f(game.)63 b
Fa(www.ee.umanitoba.ca/~jingyan)q(g/hex)q(sol.)q(pdf)p
Fs(.)q(,)663 4924 y(2001.)p eop end
%%Page: 11 11
TeXDict begin 11 10 bop 3320 232 a Fs(XI)523 448 y(15.)43
b(Jing)19 b(Y)-6 b(ang,)18 b(Simon)h(Liao,)h(and)e(Mirek)h(P)n(a)n
(wlak.)24 b(Another)18 b(solution)h(for)g(Hex)f(7x7.)23
b(T)-6 b(ec)n(hnical)663 540 y(rep)r(ort,)26 b(Univ)n(ersit)n(y)f(of)h
(Manitoba,)h(Winnip)r(eg,)f(Canada,)h(2002.)663 631 y
Fa(www.ee.umanitoba.ca/~jingyang/T)q(R.pd)q(f)p Fs(.)523
722 y(16.)43 b(Jing)23 b(Y)-6 b(ang,)22 b(Simon)g(Liao,)i(and)e(Mirek)h
(P)n(a)n(wlak.)30 b(New)22 b(Winning)h(and)f(Losing)h(Positions)h(for)
663 814 y(7x7)30 b(Hex.)48 b(In)29 b Fb(Computers)34
b(and)e(Games)p Fs(,)f(v)n(olume)f(2883)i(of)f Fb(L)l(e)l(ctur)l(e)j
(Notes)f(in)f(Computer)663 905 y(Scienc)l(e)p Fs(,)27
b(pages)f(230{248.)j(Springer,)d(2002.)p eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
