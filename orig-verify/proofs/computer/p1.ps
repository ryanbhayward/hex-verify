%!PS-Adobe-2.0
%%Creator: dvips(k) 5.95a Copyright 2005 Radical Eye Software
%%Title: phil.dvi
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 595 842
%%DocumentFonts: CMR5 CMR10
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips phil
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2006.01.22:0115
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
%!
% PostScript prologue for pstricks.tex.
% Version 97 patch 4, 04/05/10
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
/pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
%
%%-------------- DG begin patch 15 ---------------%%
%/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
%PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
%mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
%/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
%0 } ifelse setdash stroke } def
/DashLine {
  dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def PathLength } ifelse
  /b ED /x1 ED /y1 ED /x ED /y ED 
  /z y x add y1 add x1 add def
  /Coef b a .5 sub 2 mul y mul sub z Div round 
  z mul a .5 sub 2 mul y mul add b exch Div def 
  /y y Coef mul def /x x Coef mul def /y1 y1 Coef mul def /x1 x1 Coef mul def
  x1 0 gt y1 0 gt x 0 gt y 0 gt and { [ y x y1 x1 ] 1 a sub y mul}
  { [ 1 0] 0 } ifelse setdash stroke
} def
%%-------------- DG end patch 15 ---------------%%
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
% DG/SR modification end
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
% def
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
pop pop } def
% DG/SR modification end
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { /mtrx CM def T rotate /h ED /w ED dup 0 eq { pop } { CLW mul
neg /d ED /a w h Atan def /h d a sin Div h add def /w d a cos Div w add
def } ifelse mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2
div /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
    n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
%!PS-Adobe-2.0
%%Title: Dot Font for PSTricks
%%Creator: Timothy Van Zandt <tvz@Princeton.EDU>
%%Creation Date: May 7, 1993
%% Version 97 patch 1, 99/12/16
%% Modified by Etienne Riga <etienne.riga@skynet.be> - Dec. 16, 1999
%% to add /Diamond, /SolidDiamond and /BoldDiamond
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
% DG/SR modification end
  /Metrics 13 dict def
  Metrics begin
    /Bullet        1000   def
    /Circle        1000   def
    /BoldCircle    1000   def
    /SolidTriangle 1344   def
    /Triangle      1344   def
    /BoldTriangle  1344   def
    /SolidSquare    886   def
    /Square         886   def
    /BoldSquare     886   def
    /SolidPentagon 1093.2 def
    /Pentagon      1093.2 def
    /BoldPentagon  1093.2 def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /SolidDiamond  1008   def
    /Diamond       1008   def
    /BoldDiamond   1008   def
% DG/SR modification end
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle        { -550 -550 550 550 } def
    /BoldCircle    /Circle load def
    /Bullet        /Circle load def
    /Triangle      { -571.5 -330 571.5 660 } def
    /BoldTriangle  /Triangle load def
    /SolidTriangle /Triangle load def
    /Square        { -450 -450 450 450 } def
    /BoldSquare    /Square load def
    /SolidSquare   /Square load def
    /Pentagon      { -546.6 -465 546.6 574.7 } def
    /BoldPentagon  /Pentagon load def
    /SolidPentagon /Pentagon load def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /Diamond       { -428.5 -742.5 428.5 742.5 } def
    /BoldDiamond   /Diamond load def
    /SolidDiamond  /Diamond load def
% DG/SR modification end
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath    { 0 0 500 0 360 arc closepath } def
    /Bullet        { 500 500 Adjust CirclePath fill } def
    /Circle        { 500 500 Adjust CirclePath .9 .9 scale CirclePath
                     eofill } def
    /BoldCircle    { 500 500 Adjust CirclePath .8 .8 scale CirclePath
                     eofill } def
    /BoldCircle    { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath  { 0  660 moveto -571.5 -330 lineto 571.5 -330 lineto
                     closepath } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle      { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle  { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath    { -450 450 moveto 450 450 lineto 450 -450 lineto
                     -450 -450 lineto closepath } def
    /SolidSquare   { SquarePath fill } def
    /Square        { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare    { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath  {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon      { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon  { PentagonPath .78 .78 scale PentagonPath eofill } def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /DiamondPath   { 0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto
                     428.5 0 lineto closepath } def
    /SolidDiamond  { DiamondPath fill } def
    /Diamond       { DiamondPath .85 .85 scale DiamondPath eofill } def
    /BoldDiamond   { DiamondPath .7 .7 scale DiamondPath eofill } def
% DG/SR modification end
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop
%END pst-dots.pro

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For distribution, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMR10
%!PS-AdobeFont-1.1: CMR10 1.00B
%%CreationDate: 1992 Feb 19 19:54:52
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 58 /colon put
dup 70 /F put
dup 97 /a put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 110 /n put
dup 112 /p put
dup 114 /r put
dup 116 /t put
dup 117 /u put
readonly def
/FontBBox{-251 -250 1009 969}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF7158F1163BC1F3352E22A1452E73FECA8A4
87100FB1FFC4C8AF409B2067537220E605DA0852CA49839E1386AF9D7A1A455F
D1F017CE45884D76EF2CB9BC5821FD25365DDEA6E45F332B5F68A44AD8A530F0
92A36FAC8D27F9087AFEEA2096F839A2BC4B937F24E080EF7C0F9374A18D565C
295A05210DB96A23175AC59A9BD0147A310EF49C551A417E0A22703F94FF7B75
409A5D417DA6730A69E310FA6A4229FC7E4F620B0FC4C63C50E99E179EB51E4C
4BC45217722F1E8E40F1E1428E792EAFE05C5A50D38C52114DFCD24D54027CBF
2512DD116F0463DE4052A7AD53B641A27E81E481947884CE35661B49153FA19E
0A2A860C7B61558671303DE6AE06A80E4E450E17067676E6BBB42A9A24ACBC3E
B0CA7B7A3BFEA84FED39CCFB6D545BB2BCC49E5E16976407AB9D94556CD4F008
24EF579B6800B6DC3AAF840B3FC6822872368E3B4274DD06CA36AF8F6346C11B
43C772CC242F3B212C4BD7018D71A1A74C9A94ED0093A5FB6557F4E0751047AF
D72098ECA301B8AE68110F983796E581F106144951DF5B750432A230FDA3B575
5A38B5E7972AABC12306A01A99FCF8189D71B8DBF49550BAEA9CF1B97CBFC7CC
96498ECC938B1A1710B670657DE923A659DB8757147B140A48067328E7E3F9C3
7D1888B284904301450CE0BC15EEEA00E48CCD6388F3FC3BEFD8D9C400015B65
0F2F536D035626B1FF0A69D732C7A1836D635C30C06BED4327737029E5BA5830
B9E88A4024C3326AD2F34F47B54739B48825AD6699F7D117EA4C4AEC4440BF6D
AA0099DEFD326235965C63647921828BF269ECC87A2B1C8CAD6C78B6E561B007
97BE2BC7CA32B4534075F6491BE959D1F635463E71679E527F4F456F774B2AF8
FEF3D8C63B283796A9AD847424B4E6508546C36223A3B17EB82A56592F27FC27
F1D49D5FF4BBC0E16231807AF7E195AA7D0D01C7566243448B222D57B811EAE6
DE9370F84E207DC9BEC731AD6040FD9B804FA14CA264B73136F9AF34390319F6
A543D5D4D7FDDDF2F76651E557683614521110DEC1CCAC426117DDA7D6CF1B8B
7879B21FDC78BAB3C944BCDCD6A65B67F3692F0A8D5E36FB783A63D4FBC9842E
2CBC2720A7206F42A99AEC79FBBA92A27965AF40A71E05E4BA8D7FC58C828491
84A8EBDB90B1167333987F7D42A76E9C5C5A842EF91A19C55CCA6ADEB88B59E2
4FE4A96A8CFF51A1BEC1F1A6A1A5A5BFB54A1BE8C704194D72A79D33F099107F
153E3FFC70BED6D04DB4820FDAC002428C6741B91D8206296D827D3171351E85
39BB0DF1C2457E876D3A2E7E499D9D4104762FD19BA0526D38D2BF751EC56EB5
C80EE2A7AAF2CA12D1EB4548266CE8C0D2F93158A6728EB552FA09202865142F
E8D1300D637E64C338DCAE28398846CB3752FA92F87103C231C0D072E20D0E00
0DBE4A0656BE7F021DB863F63DE612622FCCA2C5462EA92B205DD2FB6D547ED3
D559010FF2C4113755D38F0B959DD34D98A0D0401AD3156A3B3D6FBE90EA40D6
F8B539EDCB0A1EFE2AAAEC6B56780F9312CE3CF757F815AD506873D2884BFED0
EEBBC826E2C4F589833F59AB6528318A5DC7648A46AFE9EAA17E79A2B07D1997
E6DC26B83665DB71ADF03DB565CB3278F5B3E256939A1A89D3EAFC42D3E73F7B
50AC3C522A97D2E5597D2052B5FADF47DDBDB7B94A76052FF4259FCEB7036AD8
ECA3DBBBDF75A8D3277ECE54D3817639BD8CC2449FF7DD7989AA03DB3E75DA4B
8ACC9F21237117AD4B234438CDCA4A7E25421A64637FCDF8273A02C5DFAF14A6
E9660AA8253D564A36E9602213916412182D115B9384E0CC88F56A4967A14B81
7F1475D9DB546D59C877321D70FBC7D0FCBF66133B2C709876647745E059C34E
AF3FFCBE556EDA2B7FE2292D003C9AF87D0A87D9C2A2B7BAFC58FE825BC54EA5
B184716D9B3136AC2E7C2B34D3560C6B2F9F322B345A00A015146C0189EF288E
2BD9E00BCEB65DC40CC591217AAB40D20975E4017237825DB5F7B38287124B1D
F043B0FCB637C73B4A0958CFC8D7FA54497CDD56B2F395289F39DAE502F05768
F14D503C231278716A56A3C62D8E7B6C3CE95E516F31D93FC8698370527B22ED
0DFD95D84364C2FBF12D0E44E65C529AB7CA3877A74A818A141E536CC0A5FC3F
FC08589505FDED35B0CB4F82FB2888F763263301085EC0ED9F3F1E8F47C334F2
636167CE2E18DF66708F78F42D831456C864517A13EE3105928236468DE25286
9BFA949441A0F47003C0A09FA86DCFE22FC2AFB75E23A46F8651E1A1E2DF46B4
4921BE25AFC5D9787E594B20AC084B34D3B91864301EDA2B10C008DF56B124B2
527DD83B8234D67D17AACA68CCF444D8FE96D803E3157AE5B0B8C9DB9FAF3C17
34227E09E4DE85711300C7EE944935BC9B0ACF95DB07EBDEFBD2E749611CC896
E26B3692498985ADC3CBDFF019FAF8D2DF2074CB4EC5AE6D2922EA95EDC7BA50
2A326978B88228C34FAD3789D42885D36DD6B6C1F34F870ECF398AA65846650E
0AFD457125558B3CFE305B1D5356133BAB4A5FFAAB80B30D7594DDB1E850A976
F46ECB04F6C4E7A15FB52D0910046A3842E0613AA75AD9528429AC02CE5D92A9
43C7E488D3F4DD4CDFC7608B2273DCD44F2AEA4465980F63F5D824CF6FE6F3F6
AC45BB864C1283419FE17ABB6B685D067D4E5AE1D4CE1E27A33CDAA0022F6B3D
A84B4ABBF85F8BF6F640B44560B35199253F21ACC315CD84D0406A0F1A456587
60A258ADE7EFF19B13B86D8DA6C848FDCCA65A9A775FC38D0B42371CA27F629B
2C28FB6A800B24C4EBA5B5D4AAA0EDB7013593A3DAB0D7BE5BDDA67381CAF1D2
C28AAADF2F974D38C215F6C5CFD29EE1FA54F78887D5AAD4E23D31482C9F8DC8
7297D71CE9FA1D20E3E81EA31404A5851822262546B053240886D2242FE88843
889A965C9C39B0564FEC15A58EBFBA4154640880C26EAFDF94F738AECC969DB9
BB569765F8CA2E3377316B91238E327C1CD011F4A102BAAFE23FAB0A5F8052D1
915C96B921CD03965499A3E3C35121B60D6AD5038AC5362FC2F311C83C3EE750
88127B866368F5B344C0F1BA61D69B414ACF6BB78595EABA41D4A80B857301EB
10E46B0877251B47563FDD7719071E6361922B03E40A20E6C116858D8B7FDDA6
4C9671659A33C0A5F4D5D3645A39E5BA41E484212DCC7D434050595B5239CD7B
E3BACC7C37A8232A77F770EAFBFA60284D0453841EF695E457B446CCF4E0EEC5
84CDCF02833FAB1E4B3F7BC45E823C7589D0B3371E6561D8D609D89E09A2C955
CFE4A1FF3E95286D06A9B5D77CB6E7A47A47B8035BDE1683F99C3358831A2D07
DFE27B068863D3064933C0F14845B67C464956325DF1C8D0908C98C378A9CBF6
D404466A5DCF9468B4EC8B5849C02DC87EF0343FF09AB2F4E7E8CFE42DD6FEDD
7E01EBFD091D8629A55081350B737F3907820CCD606946A3AF3D700FB018BD94
B6B38BBEBE2E4AC9B129507BCC5E5C9AA5595A012BE9404970A58E767F732523
50510EDC333B5979876524F6BDB3F065BE2C7D30762D338D50BE029905131DB7
CD397728DB2EFA880D5F47F38ED961486F806620B014AD04E7C9150F83D8568C
7A709D03EB37A3D4C6EF0F060F6D4131B300C52054E34DD3C811BC4C8EB9A506
723A23AC53C7A299715C4C123CBEAB41D0EE1B6C1F1EFFEE926D7708B7B53608
E5652C98EE949036C1CE9E989C1B387DFA514B7DE3A578DCBDD9E887F022FEB6
BEBABF9FBC8F560317BD8E3C7C420A6ED711CF3D13DB213829D0FACB7170E6BE
8ECAC265531F07FE3819FAF6D2A5F116497AE16CF3E8071CBF7AA5D8EE74B568
478C743F32B35885D06FB5F9823A142E5156EDF954EA543C4D2C674E0C94D076
959639CC0FEA8FD90CAF88E0AB3AA62D39DE46F0936AA6EC91E4F485D33E0540
01EE1D6BB1C9593FB76E61AA2DB192843A4AF0C76334BFAD23DF0F74B461760F
4C10556EE123ECF47905194ECFB813B91B80FF6EC8CE4496E74E924D95475D70
7646790CA635193A46A0270FC0A689DBEBAA9F076082FB276516EAAB277A15DB
914BC29648DAC2F3DB278B22F92CBDEF648E6700DCB4A506335AB4010BC8EDE0
06F2B895A86039DD12080D521B03B2364B158A7959DF073540D8B5BBCCA83C40
BD6B1599B825106188D5026DA7C92BAA90759DD0380AC0726FF9B8525421A3B8
D52C3E3F2F58AAC75030091B3766FBF348E76058F8120D4CF9CA8799DC152ADF
8ED20A90B9699E7050719F87DF77F50DB46E7A67093C86C1C7104FC36966392D
E4C41C8D8257038C25B5AD8ABCB0F134510A5C0FDB2999F21EF446DE40F16237
EBD1578704E897D51EB9AC5D8C8E02361743CEEBF2DE69109C23DAE8B7E09ACA
422B0304FE232775F5D9A307F7F75CADB4A4186460E6382305950EF611CCC202
51903E965CBFB1C7185004748BB4A2307949B3DD17766FEDFB323A776EE1693C
AD51636703E6A2CE940B9261C041773181145DB5E0918C2C91A0AF3F314C49DB
EB442DD13067257F53534CE2BFC6FAAFEE473A57F12665BB7DAB7BC51B87E18A
7547AF4FD04E3649F175072E60F010065E40C89EFA6A61631EB5F9A5884FA15E
0353D9D45A6832A339F8DD373EC1C0B9E8C7AA6DE737E9099F4F289B73B21CF4
5E3F5697EF0B5BA92C6DDED0F4A1A5B715CE34805BA52FE9B1EBA1558FBB3BA3
8D177701F88E545B98508A0220CC60AFAABD62D4485A2CCA662CF355690F9F8C
F252AE351E09BE2FE312ADB5FED6BC2E1736E3E28F382909CCA18658DF842BAD
5FBFACB68DF9CAD59E5AB4048D66E6318B13C6E96771F0
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMR5
%!PS-AdobeFont-1.1: CMR5 1.00B
%%CreationDate: 1992 Feb 19 19:55:02
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR5) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR5 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 43 /plus put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 97 /a put
dup 98 /b put
dup 101 /e put
dup 110 /n put
dup 112 /p put
dup 114 /r put
dup 116 /t put
readonly def
/FontBBox{-341 -250 1304 965}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF7158F1163BC1F3352E22A1452E73FECA8A4
87100FB1FFC4C8AF409B2067537220E605DA0852CA49839E1386AF9D7A1A455F
D1F017CE45884D76EF2CB9BC5821FD25365DDEA1F9B0FF4CFF25B8E64D0747A3
7CAD14E0DBA3E3CA95F10F24B7D5D75451845F1FB7221D7794A860756CFBB3E7
704A52A22448C34812C3DBEDD41892577AABA7D555E9298C1A0F7DA638078167
F56E29672683C51CF1C003764A8E7AD9D8ADE77B4983F56FE2D12723AAD8BF36
682CFBB71B1D12210144D39DD841A971F71DB82AC6CD815987CDCF29ABC3CC96
5EEBD5D661F452C6E0C74F9ED8D0C5B3755551A172E0FE31EA02344176E32666
14B6853A1C303A5E818C2E455A6CF8FC9A66DC6E279101D61C523BD9DB8EB82F
EAF4D7FDF6372383C0794C4568D079648689A199D4B65BA646CF95B7647E4BEC
83856C27A8EF177B3A686EDA6354FE9573E123C12EC4BA56A7E8BFB8F9B75147
9DD79A743968F36F7D0D479FA610F0816E6267E5CE327686A5485AB72201525C
FB3B7CA10E1BF26E44C24E1696CB089CB0055BD692C89B237CF269F77A31DC81
0F4B75C8400ABCFDCEC6443CD0E81871CD71AA3064ABDE882C4C52322C27FA8B
41C689F827FB0F8AAF8022CF3C1F41C0B45601190C1328831857CBF9B1E7D1AA
246117E56D6B7938488055F4E63E2A1C8D57C17D213729C68349FEC2C3466F41
171E00413D39DF1F67BC15912F30775AFDF7FB3312587E20A68CF77AD3906040
842D63C45E19278622DD228C18ABDD024DD9613CDC0B109095DB0ADC3A3C0CB5
AB597D490189EA81239E39202CBC7A829EB9B313A8F962F7879D374ADF529BD0
5533EF977142F647AD2F5975BA7E340419116099B19ACCCC37C551276F5783DF
28AE5B1D05B6EA9C700E143836BB2D712A533507E463493866EA46D80C70EBDB
89A762EBFB39EAE383C836620141063AE87F90CE059CDA83AB6D2EEE93C42679
297D2274232E8251EB2C5E1A559AEB1E05D8EB7DFAD1C56F579A1FD348599D85
9001419DC413B4FDE4EEDBE3998AFF3A71FFA2064E2F046ED6C6733006B959E6
80285E4FEC984F970F37562FF0BCC03AD636D221C670F9816FC67846403A8F4E
029203B2B13A50DF4DCA2AE4D7ABF9D45FE5A7AB0B625B9CEADD974D2A62D82A
2D322F3AC958AEB50C0D6BB1DFE36F34579C30DCDF2576050698CE278120D3A5
E51559905305B00FFCC1FA852915077FE044B995862BAC9631B646EF3B484BB5
3B2C0246651B49E416B66B0F747BC8709234860152054F76FDCB029C3FB0A8D2
DD9639C5C32CF3011D8E89D8488D42033ED73A64A671B1850BF26A160E7D7F36
B3AADF15511F6C04CA0BD67775907253E890D1442EF96CDC8F6B703730C24133
63DAFEBEFFF4EC9F263F865C76E3ABFB3AC9F95B65C59AC78F12DC0E57CF1CBE
26DD699DA2AB74E9B3FC70B50B1E7B7EBC37C41E12237D6A06AD7CC64BCBAFE2
8AB8313406B9CB5F5E177E8C2E6CD5B7D2694B3FB8A8C4F5DD0C81246C72D747
753D4F1C29DD9D5BE914D5D3C3976E2AA89EC64F6507C23D6183F801A342BF15
2F680B07223034DB3E0347E76E6D497396E8F7C2A2BA2069693EACE809246BE9
FF7174DBA61AFCACCBE2A138F395431CA0DAB04E5AF93356CC6A7F06D2E899C7
0651603BB22842A6210C5EBB355D3003F80B068EF6B3EFFEC5638A61663C117C
6F30F22ED4A77AE72BD620F38860C406B568B630533A857397E67B06C5508B7A
4D37DFD24E6C144CF04D219AE9355292AF3F10D21F85409CBAFBF54D552E1A5F
A9CE80E2F516566683FFADCD92A121FD9472314CCEB7E2BC366DEC8F616E33E5
5477AC4E0ED781136DED0E5EC61F4B9DEA373FDC63C1B90056D508947E24ADDC
8862E590C761528034BACF46F3C82F86A3B7B29D6798EB84DB9691087AE4E17B
0B2B3C2E81CBAEB1C476CB28D96A02C5D6A336DCDB867DFBDD2AB044E9BCCC0B
FE6820411E5C1EB028B78F23688FA6A90431EDAFAD407A3C03D82B10B9F72E3C
D054412B833E4C565B822931471DD6A34108DD5781869DCF0C771A21760784EA
BFB144D78F953834D1EAC3925E4F514C4EF5C4DB90D15195987DF7A7379ECB8A
C906D39DFB59B579E97DC305098EEE4A825537A396F45C1727EBF33D6E40101C
721DE21E6F10D132298CE8F34C2E930BBF9B759F9AFFE03A857CC9C2DBFD5DD0
8CAA6F9896EA59B978D22B53D52A4FB8EAE486B9E6047C8C90E29B164D5EC9D9
C87525E8CD00F7D27C44BBFF7691BE6282002D11AF29D41C3CBA706C7DBFB28E
CD173C52C2F8DCBA435FB4040E6D09A9B6B8962605636B73A8CCF3AD1769764E
E3BBD81FC1B13C4F55FEB9D66BD2EEEB92DF593C2AC726C8325F25014329AAFC
F07EEDBF91468251334A494A389B5021283A62C4E9A116361BAE207428072FC9
17E08093BB7C4FF3D5586DB84D4015A84B1A07597685D3F6343D584D72D1AD6F
2483F2D0B3A1F59F86D2BDB86E11B0EF89E38FBF32DEE18B676D63B723F3D68B
2B99AE5992D05859B5BADFA9662A73499725F9CABE17D68E048EA2F2E53CF679
CB3A7294868363196C40127D6D975A5DD9FABEA0B4FD9ACC308C1EF917106CBB
5D507DFA2D32DBBE888C93F50E44ECF4E9EE960C18608EFE12E372074C64EE8A
DF2C8B8FA38A1FD3F340E0D200725D6F4720CA960AFD17A38FDE3983DF0B6602
935BFCBB69C560C28FA2979DB93F4729346C8368DD12D1FBFC5B19397E603A7C
658E3B779680542B9CBCA7114BD4F0D387756F732FCD1D80E6356BC7E101BCB3
EE07942E6A028F2CA0DF9548E6FFE43DD4FC4725AA1DD2DCE3B7CEEC9E7A6BAB
3991F63C1EE8125DB33E68DE84E8D7C1FAA153AFCE884C41B4211A0653C69993
791B46E875A1A8200959E901750D642208833F9F2F8477D680C027AF75587AF3
9A55B0080089A0BEBA9A4771357AED9BDC51BCEACB3F218E0DE767E7A107F7BE
4ED696E90B5F3355C2A30583A80BDD36B2FBAF56838B668009524FCFCBFFBE8D
2C1961B683C64A5988AB6B4B6988663B47AF0C2C560AD041D597EF4FF1748A35
3AE070D95F8016EE5599196841175EEABF070942F2E346E11F506A7A756735A7
5D48194718E6C6F43CA33B294E604E661DC2C96CB249C402BB09937F806CCC72
DF7E0F340C77C61E0FC40C502202440A94FD44CCB0FB9D30230CDE957EE9D7DE
D5E0594E407C276A3219509C27DCFBC4F700E208BE343499135808D83BE20CDE
7FA4DFD04723FAFE9905CCE58E72D316EAB165D5C1F3C92C51181A790F1B6FE5
E9CDE3C84BF6843EFFD461ECEA1BB5E72712131A9A47BB152BAA02637E5B87F6
96BD4A298BEAD2611DAC54D754CD16C8112C1DBAA8E17375CD8EAD2D29E508F1
FDF204398BFD10073265EE190A4379BCA1707FBD67C619B85A5E0411F21C26A5
B11167B9EE542FFEA53EA7C48E219468C5804B6045F2BC1CB71116547B3988AC
4B0F002C5D55FB53A4DC31FF8AA5058B75ADFFDD5C1D076EA598D63B5DF959FA
FBF9667CDFDF1F8C009BCAEEDCFFC4581B1EFAEB8567B9FB25C2690385A3B2F5
2925DA06664BBF93DBA3635E6E899E321A16ACFA2546923D41CC01137792BAC9
555669089297F81691E6B701A88280FC59FEF1EA676E4448189339219B192EA1
7489129A96165BA1036A92C7F4C42AB0A7C60362ADB3C7FBA29602B237EDBE4F
4EF4DBFABD84F44EE64E4716DE5B71EA24F717CF69038694A71E18F161C97523
6A93A6EA5CE2B24BCE1F067419D88406B218E1EB6929ADCDB9050C2B7A16A332
64EF3E3B548B2F3FC2CB4534E1AFA57F101D2359A3577BC97EAECEF749746C35
F594732739249BBBA1061A3C72920B2F9A24C3F30492EEFD4D5B9F9028A4AEB0
B2700362493F3A10D7674E9804DA07212E05ABD5B29B68CC1D437FC2F7F62B14
DD8FE43898A870C15AC9A7E82F64783053D9BF199F43BD0AFFA0AB4DEEE419D7
AAC31EA1B1ABA111C76BB41724B3D51EB1F8AEAACAABB2664CBBB3D7ED5164E5
F8ADFEDD38A5F3E5DF97D356AA2DE012468AFE4308F3C62CFA3606F51EBCA4D1
A082ED5231EFB1318268B192B35F6C659C808FB742294DBB1886AC90BBDF5619
7F4C082031CA62FED4C9FD87CFF0B29333D60DAA2167884FD96358DD7AD9A418
DEA43CD939DF6D97A463DDE92F68168983B178AD8B8B272B1A22B28C33133CC9
A8795B38CDA48B5023C30D22B65008882E3B38AF50092AA60A0E59488330B0D0
89E3053A7E383ED8E701DA709998D3B071C83B6F0FEF7691ACA5E71417161892
458DB5E51254287B094DC11B9937206E354413D6E169AAA2961482CA551374AB
A913DB8FD3F34B9DBEE68231FD30212052404679800D36A8E85EFF9EDE89B829
80E5866334BBDE81090824AA437563FACC6B1806723BB1F8160280F6F50C9E53
4304545DD93A078FE7E84430A6B4B70B1C538A1EB94A2D2829972D1D9F7530BB
E5EBE23F8B0259F079062EEBD8DC2D5FE775B30F1A393091C8B287A861996223
A872DBCF5FEF11E9905E3F45615207C9B04F38BA53A7F7F11FBA5E5B19AE8880
6A36A53A5D56C5C099522969EF443C427EBFE13AA1D6F2935CD180F604AD7D43
1AA87522293F17009E99565D4032EAD86E419E73DDC380BE0F7B5F5706441375
16BADBDA21A2C90E69671D7158DAD144D5DAE47E1D2C325A21E25DDC2BAE8D55
51F4B1AB2415D1E6D6AD2662E85360ED677F75EA1261E32C2190E85D0258BDAE
590855A73AE515F99A65285136A771A9B63716688AE52E360E95B30D8917BF33
723E111DFE2EA14235BC667F2790B8611E458131DC8462D80D37D0572517FBA4
FDF147B686A9E12DD5120029F7515E2A1330F0F597C08CD618BBB316CDBBD8D6
9329EB2453B0D4D1594DEECE1FC0E5A0B227AAEFD6E08E4C19769E6DA4DA9BAB
06E25AA8A32F971FDCE609ECFE36118BA06356A124244C8484D63119B1D39FE5
F33B06B54421C73F7CCF819C502A63D98876912FAD47D0D294ED235831708E0F
4F777364B3899EF009ABB1FF1D53F4AAF66539E194B0E13479D39AEA072206CB
DB652EC58EDB80FCB43A916BB98D17F47728271EAA2DF276A2139DA3FA9C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 39139632 55387786 1000 600 600 (phil.dvi)
@start /Fa 138[46 32 1[33 1[46 1[46 4[23 1[42 1[37 3[42
26[54 11[23 8[42 49[{}12 83.022 /CMR10 rf /Fb 139[22
1[22 1[31 1[31 8[25 2[31 28 39[28 28 28 28 28 28 28 28
28 28 4[43 43[{}18 41.511 /CMR5 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%PaperSize: A4
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
515 2672 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.97221 25.48645 12.74323
1.50693 } false /N@T-0 16 {InitRnode } NewNode end end
 515 2672 a Fb(pattern1)964 619 y
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 3.40283 1.70142 1.50693
} false /N@T-0-0 16 {InitRnode } NewNode end end
 964 619 a
Fb(3)978 606 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.8 SLW 0 
setgray 0 setlinecap stroke  grestore  grestore end
 978 606 a 1321 585 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 3.40283 1.70142 1.50693
} false /N@T-0-0-0 16 {InitRnode } NewNode end end
 1321 585 a Fb(9)1335
572 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0 /N@T-0-0-0 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 1335 572 a 1665 585 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-0-0-0 16 {InitRnode } NewNode end end
 1665 585 a Fb(18)1693 572
y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0 /N@T-0-0-0-0 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1693 572 a 1307 653 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-0-1 16 {InitRnode } NewNode end end
 1307 653 a Fb(14)1335 640 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0 /N@T-0-0-1 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 1335
640 a 1665 653 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-0-1-0 16 {InitRnode } NewNode end end
 1665 653 a Fb(24)1693 640 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1 /N@T-0-0-1-0 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1693 640
a 2022 653 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-0-1-0-0 16 {InitRnode } NewNode end end
 2022 653 a Fb(31)2050 640 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1-0 /N@T-0-0-1-0-0 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2050 640 a 964
687 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 3.40283 1.70142 1.50693
} false /N@T-0-1 16 {InitRnode } NewNode end end
 964 687 a Fb(3)978 606 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-1 InitNC { NCLine  } if end gsave 0.8 SLW 0 
setgray 0 setlinecap stroke  grestore  grestore end
 978 606 a 957 775 a
 tx@Dict begin tx@NodeDict begin {3.33336 0.83336 5.13898 2.56949 1.50693
} false /N@T-0-2 16 {InitRnode } NewNode end end
 957
775 a Fb(+)978 762 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-2 InitNC { NCLine  } if end gsave 0.8 SLW 0 
setgray 0 setlinecap stroke  grestore  grestore end
 978 762 a 1321 723 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 3.40283 1.70142 1.50693
} false /N@T-0-2-0 16 {InitRnode } NewNode end end
 1321 723 a
Fb(4)1335 711 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-2 /N@T-0-2-0 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 1335 711 a 1665 724 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-2-0-0 16 {InitRnode } NewNode end end
 1665 724 a Fb(15)1693
711 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-2-0 /N@T-0-2-0-0 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1693 711 a 1992 724 a
 tx@Dict begin tx@NodeDict begin {3.47221 0.0 13.95856 6.97928 1.50693
} false /N@T-0-2-0-0-0 16 {InitRnode } NewNode end end
 1992 724 a Fb(25ab)2050 711
y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-2-0-0 /N@T-0-2-0-0-0 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2050 711 a 1321 826 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 3.40283 1.70142 1.50693
} false /N@T-0-2-1 16 {InitRnode } NewNode end end
 1321 826 a Fb(5)1335 813 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-2 /N@T-0-2-1 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 1335
813 a 1679 792 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 3.40283 1.70142 1.50693
} false /N@T-0-2-1-0 16 {InitRnode } NewNode end end
 1679 792 a Fb(9)1693 779 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-2-1 /N@T-0-2-1-0 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1693 779
a 1665 860 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-2-1-1 16 {InitRnode } NewNode end end
 1665 860 a Fb(16)1693 847 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-2-1 /N@T-0-2-1-1 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1693 847 a 2022
860 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-2-1-1-0 16 {InitRnode } NewNode end end
 2022 860 a Fb(26)2050 847 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-2-1-1 /N@T-0-2-1-1-0 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2050 847 a 957 928
a
 tx@Dict begin tx@NodeDict begin {3.33336 0.83336 5.13898 2.56949 1.50693
} false /N@T-0-3 16 {InitRnode } NewNode end end
 957 928 a Fb(+)978 916 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-3 InitNC { NCLine  } if end gsave 0.8 SLW 0 
setgray 0 setlinecap stroke  grestore  grestore end
 978 916 a 1321 894 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 3.40283 1.70142 1.50693
} false /N@T-0-3-0 16 {InitRnode } NewNode end end
 1321
894 a Fb(6)1335 881 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-3 /N@T-0-3-0 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 1335 881 a 1321 962 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 3.40283 1.70142 1.50693
} false /N@T-0-3-1 16 {InitRnode } NewNode end end
 1321 962
a Fb(5)1335 881 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-3 /N@T-0-3-1 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 1335 881 a 957 1065 a
 tx@Dict begin tx@NodeDict begin {3.33336 0.83336 5.13898 2.56949 1.50693
} false /N@T-0-4 16 {InitRnode } NewNode end end
 957 1065 a Fb(+)978
1052 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-4 InitNC { NCLine  } if end gsave 0.8 SLW 0 
setgray 0 setlinecap stroke  grestore  grestore end
 978 1052 a 1321 1031 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 3.40283 1.70142 1.50693
} false /N@T-0-4-0 16 {InitRnode } NewNode end end
 1321 1031 a Fb(7)1335 1018
y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-4 /N@T-0-4-0 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 1335 1018 a 1321 1099 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 3.40283 1.70142 1.50693
} false /N@T-0-4-1 16 {InitRnode } NewNode end end
 1321 1099 a Fb(8)1335 1086
y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-4 /N@T-0-4-1 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 1335 1086 a 1679 1065 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 3.40283 1.70142 1.50693
} false /N@T-0-4-1-0 16 {InitRnode } NewNode end end
 1679 1065 a Fb(9)1693 1052
y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-4-1 /N@T-0-4-1-0 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1693 1052 a 1665 1133 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-4-1-1 16 {InitRnode } NewNode end end
 1665 1133 a Fb(17)1693 1120
y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-4-1 /N@T-0-4-1-1 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1693 1120 a 2022 1133 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-4-1-1-0 16 {InitRnode } NewNode end end
 2022 1133 a Fb(27)2050 1120
y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-4-1-1 /N@T-0-4-1-1-0 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2050 1120 a 2380 1133 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-4-1-1-0-0 16 {InitRnode } NewNode end end
 2380 1133 a Fb(33)2408 1120
y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-4-1-1-0 /N@T-0-4-1-1-0-0 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2408 1120 a 957 1201 a
 tx@Dict begin tx@NodeDict begin {3.33336 0.83336 5.13898 2.56949 1.50693
} false /N@T-0-5 16 {InitRnode } NewNode end end
 957 1201 a Fb(+)978 1189 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-5 InitNC { NCLine  } if end gsave 0.8 SLW 0 
setgray 0 setlinecap stroke  grestore  grestore end
 978
1189 a 1321 1167 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 3.40283 1.70142 1.50693
} false /N@T-0-5-0 16 {InitRnode } NewNode end end
 1321 1167 a Fb(9)1335 1155 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5 /N@T-0-5-0 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 1335
1155 a 1307 1235 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-5-1 16 {InitRnode } NewNode end end
 1307 1235 a Fb(10)1335 1223 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5 /N@T-0-5-1 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 1335
1223 a 1679 1201 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 3.40283 1.70142 1.50693
} false /N@T-0-5-1-0 16 {InitRnode } NewNode end end
 1679 1201 a Fb(9)1693 1189 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5-1 /N@T-0-5-1-0 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1693
1189 a 1665 1269 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-5-1-1 16 {InitRnode } NewNode end end
 1665 1269 a Fb(19)1693 1257 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5-1 /N@T-0-5-1-1 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1693
1257 a 2022 1270 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-5-1-1-0 16 {InitRnode } NewNode end end
 2022 1270 a Fb(28)2050 1257 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5-1-1 /N@T-0-5-1-1-0 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2050
1257 a 2380 1270 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-5-1-1-0-0 16 {InitRnode } NewNode end end
 2380 1270 a Fb(34)2408 1257 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5-1-1-0 /N@T-0-5-1-1-0-0 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2408
1257 a 950 2348 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6 16 {InitRnode } NewNode end end
 950 2348 a Fb(11)978 2335 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-6 InitNC { NCLine  } if end gsave 0.8 SLW 0 
setgray 0 setlinecap stroke  grestore  grestore end
 978 2335
a 1321 1304 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 3.40283 1.70142 1.50693
} false /N@T-0-6-0 16 {InitRnode } NewNode end end
 1321 1304 a Fb(5)1335 1291 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6 /N@T-0-6-0 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 1335 1291
a 1321 1372 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 3.40283 1.70142 1.50693
} false /N@T-0-6-1 16 {InitRnode } NewNode end end
 1321 1372 a Fb(5)1335 1291 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6 /N@T-0-6-1 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 1335 1291
a 1307 1440 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-2 16 {InitRnode } NewNode end end
 1307 1440 a Fb(14)1335 1291 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6 /N@T-0-6-2 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 1335 1291
a 1314 1509 a
 tx@Dict begin tx@NodeDict begin {3.33336 0.83336 5.13898 2.56949 1.50693
} false /N@T-0-6-3 16 {InitRnode } NewNode end end
 1314 1509 a Fb(+)1335 1497 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6 /N@T-0-6-3 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 1335 1497
a 1679 1475 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 3.40283 1.70142 1.50693
} false /N@T-0-6-3-0 16 {InitRnode } NewNode end end
 1679 1475 a Fb(4)1693 1463 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-3 /N@T-0-6-3-0 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1693 1463
a 1665 1543 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-3-1 16 {InitRnode } NewNode end end
 1665 1543 a Fb(16)1693 1463 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-3 /N@T-0-6-3-1 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1693 1463
a 1314 1646 a
 tx@Dict begin tx@NodeDict begin {3.33336 0.83336 5.13898 2.56949 1.50693
} false /N@T-0-6-4 16 {InitRnode } NewNode end end
 1314 1646 a Fb(+)1335 1633 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6 /N@T-0-6-4 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 1335 1633
a 1665 1612 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-4-0 16 {InitRnode } NewNode end end
 1665 1612 a Fb(17)1693 1599 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-4 /N@T-0-6-4-0 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1693 1599
a 1679 1680 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 3.40283 1.70142 1.50693
} false /N@T-0-6-4-1 16 {InitRnode } NewNode end end
 1679 1680 a Fb(7)1693 1599 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-4 /N@T-0-6-4-1 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1693 1599
a 1314 1782 a
 tx@Dict begin tx@NodeDict begin {3.33336 0.83336 5.13898 2.56949 1.50693
} false /N@T-0-6-5 16 {InitRnode } NewNode end end
 1314 1782 a Fb(+)1335 1770 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6 /N@T-0-6-5 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 1335 1770
a 1679 1748 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 3.40283 1.70142 1.50693
} false /N@T-0-6-5-0 16 {InitRnode } NewNode end end
 1679 1748 a Fb(9)1693 1736 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-5 /N@T-0-6-5-0 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1693 1736
a 1665 1816 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-5-1 16 {InitRnode } NewNode end end
 1665 1816 a Fb(19)1693 1736 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-5 /N@T-0-6-5-1 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1693 1736
a 1314 1919 a
 tx@Dict begin tx@NodeDict begin {3.33336 0.83336 5.13898 2.56949 1.50693
} false /N@T-0-6-6 16 {InitRnode } NewNode end end
 1314 1919 a Fb(+)1335 1906 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6 /N@T-0-6-6 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 1335 1906
a 1679 1885 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 3.40283 1.70142 1.50693
} false /N@T-0-6-6-0 16 {InitRnode } NewNode end end
 1679 1885 a Fb(6)1693 1872 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-6 /N@T-0-6-6-0 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1693 1872
a 1665 1953 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-6-1 16 {InitRnode } NewNode end end
 1665 1953 a Fb(16)1693 1872 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-6 /N@T-0-6-6-1 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1693 1872
a 1314 2055 a
 tx@Dict begin tx@NodeDict begin {3.33336 0.83336 5.13898 2.56949 1.50693
} false /N@T-0-6-7 16 {InitRnode } NewNode end end
 1314 2055 a Fb(+)1335 2043 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6 /N@T-0-6-7 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 1335 2043
a 1665 2021 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-7-0 16 {InitRnode } NewNode end end
 1665 2021 a Fb(16)1693 2009 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-7 /N@T-0-6-7-0 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1693 2009
a 1665 2090 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-7-1 16 {InitRnode } NewNode end end
 1665 2090 a Fb(16)1693 2009 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-7 /N@T-0-6-7-1 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1693 2009
a 1307 2410 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-8 16 {InitRnode } NewNode end end
 1307 2410 a Fb(20)1335 2397 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6 /N@T-0-6-8 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 1335 2397
a 1665 2158 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-8-0 16 {InitRnode } NewNode end end
 1665 2158 a Fb(14)1693 2145 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8 /N@T-0-6-8-0 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1693 2145
a 1665 2226 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-8-1 16 {InitRnode } NewNode end end
 1665 2226 a Fb(22)1693 2214 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8 /N@T-0-6-8-1 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1693 2214
a 1992 2192 a
 tx@Dict begin tx@NodeDict begin {3.47221 0.0 13.95856 6.97928 1.50693
} false /N@T-0-6-8-1-0 16 {InitRnode } NewNode end end
 1992 2192 a Fb(25ab)2050 2179 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-1 /N@T-0-6-8-1-0 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2050 2179
a 2022 2260 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-8-1-1 16 {InitRnode } NewNode end end
 2022 2260 a Fb(21)2050 2248 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-1 /N@T-0-6-8-1-1 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2050 2248
a 2380 2261 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-8-1-1-0 16 {InitRnode } NewNode end end
 2380 2261 a Fb(30)2408 2248 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-1-1 /N@T-0-6-8-1-1-0 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2408 2248
a 2707 2261 a
 tx@Dict begin tx@NodeDict begin {3.47221 0.0 13.95856 6.97928 1.50693
} false /N@T-0-6-8-1-1-0-0 16 {InitRnode } NewNode end end
 2707 2261 a Fb(25ab)2765 2248 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-1-1-0 /N@T-0-6-8-1-1-0-0 InitNC { NCLine  } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2765 2248
a 1672 2363 a
 tx@Dict begin tx@NodeDict begin {3.33336 0.83336 5.13898 2.56949 1.50693
} false /N@T-0-6-8-2 16 {InitRnode } NewNode end end
 1672 2363 a Fb(+)1693 2350 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8 /N@T-0-6-8-2 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1693 2350
a 2022 2328 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-8-2-0 16 {InitRnode } NewNode end end
 2022 2328 a Fb(23)2050 2316 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-2 /N@T-0-6-8-2-0 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2050 2316
a 2022 2397 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-8-2-1 16 {InitRnode } NewNode end end
 2022 2397 a Fb(14)2050 2316 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-2 /N@T-0-6-8-2-1 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2050 2316
a 1665 2662 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-8-3 16 {InitRnode } NewNode end end
 1665 2662 a Fb(29)1693 2649 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8 /N@T-0-6-8-3 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1693 2649
a 2022 2465 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-8-3-0 16 {InitRnode } NewNode end end
 2022 2465 a Fb(24)2050 2452 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-3 /N@T-0-6-8-3-0 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2050 2452
a 2022 2533 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-8-3-1 16 {InitRnode } NewNode end end
 2022 2533 a Fb(22)2050 2452 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-3 /N@T-0-6-8-3-1 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2050 2452
a 2029 2602 a
 tx@Dict begin tx@NodeDict begin {3.33336 0.83336 5.13898 2.56949 1.50693
} false /N@T-0-6-8-3-2 16 {InitRnode } NewNode end end
 2029 2602 a Fb(+)2050 2590 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-3 /N@T-0-6-8-3-2 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2050 2590
a 2380 2568 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-8-3-2-0 16 {InitRnode } NewNode end end
 2380 2568 a Fb(23)2408 2556 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-3-2 /N@T-0-6-8-3-2-0 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2408 2556
a 2380 2637 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-8-3-2-1 16 {InitRnode } NewNode end end
 2380 2637 a Fb(24)2408 2556 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-3-2 /N@T-0-6-8-3-2-1 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2408 2556
a 2022 2859 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-8-3-3 16 {InitRnode } NewNode end end
 2022 2859 a Fb(36)2050 2846 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-3 /N@T-0-6-8-3-3 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2050 2846
a 2380 2705 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-8-3-3-0 16 {InitRnode } NewNode end end
 2380 2705 a Fb(31)2408 2692 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-3-3 /N@T-0-6-8-3-3-0 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2408 2692
a 2380 2773 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-8-3-3-1 16 {InitRnode } NewNode end end
 2380 2773 a Fb(22)2408 2692 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-3-3 /N@T-0-6-8-3-3-1 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2408 2692
a 2387 2842 a
 tx@Dict begin tx@NodeDict begin {3.33336 0.83336 5.13898 2.56949 1.50693
} false /N@T-0-6-8-3-3-2 16 {InitRnode } NewNode end end
 2387 2842 a Fb(+)2408 2830 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-3-3 /N@T-0-6-8-3-3-2 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2408 2830
a 2737 2808 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-8-3-3-2-0 16 {InitRnode } NewNode end end
 2737 2808 a Fb(23)2765 2796 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-3-3-2 /N@T-0-6-8-3-3-2-0 InitNC { NCLine  } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2765 2796
a 2737 2876 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-8-3-3-2-1 16 {InitRnode } NewNode end end
 2737 2876 a Fb(31)2765 2796 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-3-3-2 /N@T-0-6-8-3-3-2-1 InitNC { NCLine  } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2765 2796
a 2380 3013 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-8-3-3-3 16 {InitRnode } NewNode end end
 2380 3013 a Fb(37)2408 3000 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-3-3 /N@T-0-6-8-3-3-3 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2408 3000
a 2737 2945 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-8-3-3-3-0 16 {InitRnode } NewNode end end
 2737 2945 a Fb(22)2765 2932 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-3-3-3 /N@T-0-6-8-3-3-3-0 InitNC { NCLine  } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2765 2932
a 2737 3013 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-8-3-3-3-1 16 {InitRnode } NewNode end end
 2737 3013 a Fb(23)2765 2932 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-3-3-3 /N@T-0-6-8-3-3-3-1 InitNC { NCLine  } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2765 2932
a 2737 3081 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-8-3-3-3-2 16 {InitRnode } NewNode end end
 2737 3081 a Fb(38)2765 3069 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-3-3-3 /N@T-0-6-8-3-3-3-2 InitNC { NCLine  } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2765 3069
a 3094 3082 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-8-3-3-3-2-0 16 {InitRnode } NewNode end end
 3094 3082 a Fb(39)3123 3069 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-3-3-3-2 /N@T-0-6-8-3-3-3-2-0 InitNC { NCLine  }
if end gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore
end
 3123 3069
a 3452 3082 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-8-3-3-3-2-0-0 16 {InitRnode } NewNode end end
 3452 3082 a Fb(26)3480 3069 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-3-3-3-2-0 /N@T-0-6-8-3-3-3-2-0-0 InitNC { NCLine
 } if end gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore
end
 3480 3069
a 1307 3392 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-9 16 {InitRnode } NewNode end end
 1307 3392 a Fb(35)1335 3379 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6 /N@T-0-6-9 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 1335 3379
a 1679 2824 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 3.40283 1.70142 1.50693
} false /N@T-0-6-9-0 16 {InitRnode } NewNode end end
 1679 2824 a Fb(5)1693 2811 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9 /N@T-0-6-9-0 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1693 2811
a 1665 2892 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-9-1 16 {InitRnode } NewNode end end
 1665 2892 a Fb(24)1693 2811 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9 /N@T-0-6-9-1 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1693 2811
a 1672 2961 a
 tx@Dict begin tx@NodeDict begin {3.33336 0.83336 5.13898 2.56949 1.50693
} false /N@T-0-6-9-2 16 {InitRnode } NewNode end end
 1672 2961 a Fb(+)1693 2949 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9 /N@T-0-6-9-2 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1693 2949
a 2022 2927 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-9-2-0 16 {InitRnode } NewNode end end
 2022 2927 a Fb(26)2050 2915 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-2 /N@T-0-6-9-2-0 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2050 2915
a 2036 2995 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 3.40283 1.70142 1.50693
} false /N@T-0-6-9-2-1 16 {InitRnode } NewNode end end
 2036 2995 a Fb(4)2050 2915 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-2 /N@T-0-6-9-2-1 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2050 2915
a 1672 3098 a
 tx@Dict begin tx@NodeDict begin {3.33336 0.83336 5.13898 2.56949 1.50693
} false /N@T-0-6-9-3 16 {InitRnode } NewNode end end
 1672 3098 a Fb(+)1693 3085 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9 /N@T-0-6-9-3 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1693 3085
a 2036 3064 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 3.40283 1.70142 1.50693
} false /N@T-0-6-9-3-0 16 {InitRnode } NewNode end end
 2036 3064 a Fb(7)2050 3051 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-3 /N@T-0-6-9-3-0 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2050 3051
a 2022 3132 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-9-3-1 16 {InitRnode } NewNode end end
 2022 3132 a Fb(27)2050 3051 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-3 /N@T-0-6-9-3-1 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2050 3051
a 1672 3234 a
 tx@Dict begin tx@NodeDict begin {3.33336 0.83336 5.13898 2.56949 1.50693
} false /N@T-0-6-9-4 16 {InitRnode } NewNode end end
 1672 3234 a Fb(+)1693 3222 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9 /N@T-0-6-9-4 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1693 3222
a 2036 3200 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 3.40283 1.70142 1.50693
} false /N@T-0-6-9-4-0 16 {InitRnode } NewNode end end
 2036 3200 a Fb(9)2050 3188 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-4 /N@T-0-6-9-4-0 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2050 3188
a 2022 3268 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-9-4-1 16 {InitRnode } NewNode end end
 2022 3268 a Fb(28)2050 3188 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-4 /N@T-0-6-9-4-1 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2050 3188
a 1672 3371 a
 tx@Dict begin tx@NodeDict begin {3.33336 0.83336 5.13898 2.56949 1.50693
} false /N@T-0-6-9-5 16 {InitRnode } NewNode end end
 1672 3371 a Fb(+)1693 3358 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9 /N@T-0-6-9-5 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1693 3358
a 2022 3337 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-9-5-0 16 {InitRnode } NewNode end end
 2022 3337 a Fb(26)2050 3324 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-5 /N@T-0-6-9-5-0 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2050 3324
a 2036 3405 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 3.40283 1.70142 1.50693
} false /N@T-0-6-9-5-1 16 {InitRnode } NewNode end end
 2036 3405 a Fb(6)2050 3324 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-5 /N@T-0-6-9-5-1 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2050 3324
a 1665 3446 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-9-6 16 {InitRnode } NewNode end end
 1665 3446 a Fb(29)1693 2811 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9 /N@T-0-6-9-6 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1693 2811
a 1672 3515 a
 tx@Dict begin tx@NodeDict begin {3.33336 0.83336 5.13898 2.56949 1.50693
} false /N@T-0-6-9-7 16 {InitRnode } NewNode end end
 1672 3515 a Fb(+)1693 3503 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9 /N@T-0-6-9-7 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1693 3503
a 2022 3481 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-9-7-0 16 {InitRnode } NewNode end end
 2022 3481 a Fb(26)2050 3469 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-7 /N@T-0-6-9-7-0 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2050 3469
a 2022 3549 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-9-7-1 16 {InitRnode } NewNode end end
 2022 3549 a Fb(16)2050 3469 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-7 /N@T-0-6-9-7-1 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2050 3469
a 1665 3959 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-9-8 16 {InitRnode } NewNode end end
 1665 3959 a Fb(40)1693 3947 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9 /N@T-0-6-9-8 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1693 3947
a 2036 3618 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 3.40283 1.70142 1.50693
} false /N@T-0-6-9-8-0 16 {InitRnode } NewNode end end
 2036 3618 a Fb(5)2050 3605 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8 /N@T-0-6-9-8-0 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2050 3605
a 2022 3686 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-9-8-1 16 {InitRnode } NewNode end end
 2022 3686 a Fb(31)2050 3605 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8 /N@T-0-6-9-8-1 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2050 3605
a 2036 3754 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 3.40283 1.70142 1.50693
} false /N@T-0-6-9-8-2 16 {InitRnode } NewNode end end
 2036 3754 a Fb(4)2050 3605 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8 /N@T-0-6-9-8-2 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2050 3605
a 2029 3823 a
 tx@Dict begin tx@NodeDict begin {3.33336 0.83336 5.13898 2.56949 1.50693
} false /N@T-0-6-9-8-3 16 {InitRnode } NewNode end end
 2029 3823 a Fb(+)2050 3811 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8 /N@T-0-6-9-8-3 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2050 3811
a 2394 3789 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 3.40283 1.70142 1.50693
} false /N@T-0-6-9-8-3-0 16 {InitRnode } NewNode end end
 2394 3789 a Fb(7)2408 3777 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8-3 /N@T-0-6-9-8-3-0 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2408 3777
a 2380 3857 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-9-8-3-1 16 {InitRnode } NewNode end end
 2380 3857 a Fb(33)2408 3777 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8-3 /N@T-0-6-9-8-3-1 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2408 3777
a 2029 3960 a
 tx@Dict begin tx@NodeDict begin {3.33336 0.83336 5.13898 2.56949 1.50693
} false /N@T-0-6-9-8-4 16 {InitRnode } NewNode end end
 2029 3960 a Fb(+)2050 3947 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8 /N@T-0-6-9-8-4 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2050 3947
a 2394 3926 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 3.40283 1.70142 1.50693
} false /N@T-0-6-9-8-4-0 16 {InitRnode } NewNode end end
 2394 3926 a Fb(9)2408 3913 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8-4 /N@T-0-6-9-8-4-0 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2408 3913
a 2380 3994 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-9-8-4-1 16 {InitRnode } NewNode end end
 2380 3994 a Fb(34)2408 3913 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8-4 /N@T-0-6-9-8-4-1 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2408 3913
a 2036 4035 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 3.40283 1.70142 1.50693
} false /N@T-0-6-9-8-5 16 {InitRnode } NewNode end end
 2036 4035 a Fb(6)2050 3605 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8 /N@T-0-6-9-8-5 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2050 3605
a 2022 4103 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-9-8-6 16 {InitRnode } NewNode end end
 2022 4103 a Fb(36)2050 3605 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8 /N@T-0-6-9-8-6 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2050 3605
a 2022 4172 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-9-8-7 16 {InitRnode } NewNode end end
 2022 4172 a Fb(16)2050 3605 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8 /N@T-0-6-9-8-7 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2050 3605
a 2022 4301 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-9-8-8 16 {InitRnode } NewNode end end
 2022 4301 a Fb(41)2050 4289 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8 /N@T-0-6-9-8-8 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2050 4289
a 2394 4062 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 3.40283 1.70142 1.50693
} false /N@T-0-6-9-8-8-0 16 {InitRnode } NewNode end end
 2394 4062 a Fb(5)2408 4050 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8-8 /N@T-0-6-9-8-8-0 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2408 4050
a 2394 4130 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 3.40283 1.70142 1.50693
} false /N@T-0-6-9-8-8-1 16 {InitRnode } NewNode end end
 2394 4130 a Fb(4)2408 4050 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8-8 /N@T-0-6-9-8-8-1 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2408 4050
a 2394 4199 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 3.40283 1.70142 1.50693
} false /N@T-0-6-9-8-8-2 16 {InitRnode } NewNode end end
 2394 4199 a Fb(7)2408 4050 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8-8 /N@T-0-6-9-8-8-2 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2408 4050
a 2394 4267 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 3.40283 1.70142 1.50693
} false /N@T-0-6-9-8-8-3 16 {InitRnode } NewNode end end
 2394 4267 a Fb(9)2408 4050 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8-8 /N@T-0-6-9-8-8-3 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2408 4050
a 2394 4335 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 3.40283 1.70142 1.50693
} false /N@T-0-6-9-8-8-4 16 {InitRnode } NewNode end end
 2394 4335 a Fb(6)2408 4050 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8-8 /N@T-0-6-9-8-8-4 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2408 4050
a 2380 4404 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-9-8-8-5 16 {InitRnode } NewNode end end
 2380 4404 a Fb(37)2408 4050 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8-8 /N@T-0-6-9-8-8-5 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2408 4050
a 2380 4472 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-9-8-8-6 16 {InitRnode } NewNode end end
 2380 4472 a Fb(16)2408 4050 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8-8 /N@T-0-6-9-8-8-6 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2408 4050
a 2380 4540 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-6-9-8-8-7 16 {InitRnode } NewNode end end
 2380 4540 a Fb(38)2408 4050 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8-8 /N@T-0-6-9-8-8-7 InitNC { NCLine  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 2408 4050
a 950 3925 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-7 16 {InitRnode } NewNode end end
 950 3925 a Fb(12)978 3912 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-7 InitNC { NCLine  } if end gsave 0.8 SLW 0 
setgray 0 setlinecap stroke  grestore  grestore end
 978 3912 a 1321
3788 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 3.40283 1.70142 1.50693
} false /N@T-0-7-0 16 {InitRnode } NewNode end end
 1321 3788 a Fb(3)1335 3775 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-7 /N@T-0-7-0 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 1335 3775 a 1321
3856 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 3.40283 1.70142 1.50693
} false /N@T-0-7-1 16 {InitRnode } NewNode end end
 1321 3856 a Fb(9)1335 3775 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-7 /N@T-0-7-1 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 1335 3775 a 1307
3924 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-7-2 16 {InitRnode } NewNode end end
 1307 3924 a Fb(20)1335 3775 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-7 /N@T-0-7-2 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 1335 3775 a 1307
3993 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-7-3 16 {InitRnode } NewNode end end
 1307 3993 a Fb(22)1335 3775 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-7 /N@T-0-7-3 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 1335 3775 a 1314
4062 a
 tx@Dict begin tx@NodeDict begin {3.33336 0.83336 5.13898 2.56949 1.50693
} false /N@T-0-7-4 16 {InitRnode } NewNode end end
 1314 4062 a Fb(+)1335 4049 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-7 /N@T-0-7-4 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 1335 4049 a 1665
4028 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-7-4-0 16 {InitRnode } NewNode end end
 1665 4028 a Fb(23)1693 4015 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-7-4 /N@T-0-7-4-0 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1693 4015 a 1679
4096 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 3.40283 1.70142 1.50693
} false /N@T-0-7-4-1 16 {InitRnode } NewNode end end
 1679 4096 a Fb(3)1693 4015 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-7-4 /N@T-0-7-4-1 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 1693 4015 a 964 3993
a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 3.40283 1.70142 1.50693
} false /N@T-0-8 16 {InitRnode } NewNode end end
 964 3993 a Fb(3)978 606 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-8 InitNC { NCLine  } if end gsave 0.8 SLW 0 
setgray 0 setlinecap stroke  grestore  grestore end
 978 606 a 964 4061 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 3.40283 1.70142 1.50693
} false /N@T-0-9 16 {InitRnode } NewNode end end
 964
4061 a Fb(3)978 606 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-9 InitNC { NCLine  } if end gsave 0.8 SLW 0 
setgray 0 setlinecap stroke  grestore  grestore end
 978 606 a 957 4171 a
 tx@Dict begin tx@NodeDict begin {3.33336 0.83336 5.13898 2.56949 1.50693
} false /N@T-0-10 16 {InitRnode } NewNode end end
 957 4171 a
Fb(+)978 4159 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-10 InitNC { NCLine  } if end gsave 0.8 SLW 0
 setgray 0 setlinecap stroke  grestore  grestore end
 978 4159 a 1321 4137 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 3.40283 1.70142 1.50693
} false /N@T-0-10-0 16 {InitRnode } NewNode end end
 1321 4137 a Fb(4)1335
4124 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-10 /N@T-0-10-0 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 1335 4124 a 1321 4205 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 3.40283 1.70142 1.50693
} false /N@T-0-10-1 16 {InitRnode } NewNode end end
 1321 4205 a Fb(5)1335
4124 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-10 /N@T-0-10-1 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 1335 4124 a 957 4308 a
 tx@Dict begin tx@NodeDict begin {3.33336 0.83336 5.13898 2.56949 1.50693
} false /N@T-0-11 16 {InitRnode } NewNode end end
 957 4308 a Fb(+)978 4295
y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-11 InitNC { NCLine  } if end gsave 0.8 SLW 0
 setgray 0 setlinecap stroke  grestore  grestore end
 978 4295 a 1321 4273 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 3.40283 1.70142 1.50693
} false /N@T-0-11-0 16 {InitRnode } NewNode end end
 1321 4273 a Fb(6)1335 4261 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-11 /N@T-0-11-0 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end

1335 4261 a 1321 4342 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 3.40283 1.70142 1.50693
} false /N@T-0-11-1 16 {InitRnode } NewNode end end
 1321 4342 a Fb(5)1335 4261 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-11 /N@T-0-11-1 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end

1335 4261 a 957 4444 a
 tx@Dict begin tx@NodeDict begin {3.33336 0.83336 5.13898 2.56949 1.50693
} false /N@T-0-12 16 {InitRnode } NewNode end end
 957 4444 a Fb(+)978 4432 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-12 InitNC { NCLine  } if end gsave 0.8 SLW 0
 setgray 0 setlinecap stroke  grestore  grestore end
 978
4432 a 1321 4410 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 3.40283 1.70142 1.50693
} false /N@T-0-12-0 16 {InitRnode } NewNode end end
 1321 4410 a Fb(7)1335 4397 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-12 /N@T-0-12-0 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 1335
4397 a 1321 4478 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 3.40283 1.70142 1.50693
} false /N@T-0-12-1 16 {InitRnode } NewNode end end
 1321 4478 a Fb(8)1335 4397 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-12 /N@T-0-12-1 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 1335
4397 a 957 4581 a
 tx@Dict begin tx@NodeDict begin {3.33336 0.83336 5.13898 2.56949 1.50693
} false /N@T-0-13 16 {InitRnode } NewNode end end
 957 4581 a Fb(+)978 4568 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-13 InitNC { NCLine  } if end gsave 0.8 SLW 0
 setgray 0 setlinecap stroke  grestore  grestore end
 978 4568
a 1321 4546 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 3.40283 1.70142 1.50693
} false /N@T-0-13-0 16 {InitRnode } NewNode end end
 1321 4546 a Fb(9)1335 4534 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-13 /N@T-0-13-0 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 1335 4534
a 1307 4615 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-13-1 16 {InitRnode } NewNode end end
 1307 4615 a Fb(10)1335 4534 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-13 /N@T-0-13-1 InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 1335 4534
a 950 4656 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-14 16 {InitRnode } NewNode end end
 950 4656 a Fb(11)978 606 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-14 InitNC { NCLine  } if end gsave 0.8 SLW 0
 setgray 0 setlinecap stroke  grestore  grestore end
 978 606 a 950
4724 a
 tx@Dict begin tx@NodeDict begin {3.22221 0.0 6.80566 3.40283 1.50693
} false /N@T-0-15 16 {InitRnode } NewNode end end
 950 4724 a Fb(12)978 606 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-15 InitNC { NCLine  } if end gsave 0.8 SLW 0
 setgray 0 setlinecap stroke  grestore  grestore end
 978 606 a 0 TeXcolorgray
1611 4872 a Fa(Figure)26 b(1:)37 b(pattern1)p 0 TeXcolorgray
Black 0 TeXcolorgray 1926 5255 a(1)p Black eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
