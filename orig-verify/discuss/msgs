From broderic@cs.ualberta.ca Thu Dec 15 20:21:22 2005

On Thu Dec 15, 2005 at 03:04:00PM -0700, Ryan Hayward wrote:
> Hi B,
> 
> because of the nature of Hex,
> proofs can be described very compactly;
> in particular, opponent moves can be ignored  :)
> 
> part of the verification is to confirm
> that regardless of the opponent's moves,
> there is always an available counterstrategy;
> 
> in its simplest form,
> the proof notation is simply a tree in which
> nodes are labelled with moves;
> 
> verification consists of checking
>   * each tree is legal 
>       (no move is repeated,
>        namely each node's label is distinct
>        from the labels of its proper ancestors)

This makes obvious sense. 

>   * each tree is elusive 
>     (this is the counterstrategy condition:
>        for each internal node,
>          no label occurs in all subtrees;
> 	   this happens if and only if each internal
> 	   node has at least two children,
> 	   and, for each associated subtree,
> 	   the combined intersection of the nodes of the subtrees
> 	   is empty set);

>   * each tree is satisfying 
>     (satisfies the winning condition:
>      for each leaf,
>        the player has a side-to-side connected component)

So the hexes comprising the root-to-leaf path in the tree form 
a path from one side to the other? 


About the second point: 

  So each internal node needs at least two children and
  the intersection of the nodes comprising each of the children
  should be empty. 
 
  If this is true then we win, if not, we can be blocked...

  This seems to make intuitive sense to me.  If one of our
  subtrees is simply a single chain of nodes, then our opponent can
  play any node of that chain and kill that strategy. 

  If any internal node has only one child, then playing at that
  node's child kills that solution. So if our proof has an 
  internal node with one child, our opponent
  can play moves to "steer" us toward that node and then block
  us by playing its child.  

  Actually, that's only true if each node has at most 2 children.
  If a node has 3 children, and one of those children is an
  interal node with only one child, isn't everything still ok
  assuming the other 2 subtrees meet the above conditions?
  I suppose here we could just drop that child and its subtree 
  and everything would be fine anyway.
  
  Sorry for rambling here, but I'm just trying to get a grasp
  of how this works.  :)

> for example,
> for the 3x3 board,
> 
>       1   2   3
> a     .   .   .
>   b     .   .   .
>     c     .   .   .
> 
> here's a winning 1st-player strategy for horizontal,
> where I'm drawing the tree using the usual "sideways" notation...
> (so c1 has three children, b2, c2, a3)
> 
> (c1
>    (b2
>       (a3)
>       (b3))
>    (c2
>       (b3)
>       (c3))
>    (a3
>       (b2)
>       (a2
>           (a1)
>           (b1))))


That tree without the first b2 subtree would also be winning, wouldn't it?

 
> once we get this implemented,
> the next step is to augment the notation
> to allow the "and" operation, namely the combinatorial
> sum of two games;
> this allows our tree representation to be much more compact...

Heh, I have no idea what this means. ;-)
 
> if we get that implemented,
> then there are some other extensions we should add too,
> (namely, a notation to hand point to point and/or connections)
> but I'm getting ahead of myself...


This looks interesting to me.  I'd definetly like to help in
getting it implemented. 


-- 
Broderick

From hayward@cs.ualberta.ca Fri Dec 16 10:44:42 2005
Received: (from localhost user: 'hayward' uid#16170 fake: STDIN
	(hayward@tees.cs.ualberta.ca)) by sunkay.cs.ualberta.ca
	id S568512AbVLPRof (ORCPT <rfc822;hayward@cs.ualberta.ca>);
	Fri, 16 Dec 2005 10:44:35 -0700
Date:	Fri, 16 Dec 2005 10:44:34 -0700
Sender:	Ryan Hayward <hayward@cs.ualberta.ca>
From:	Ryan Hayward <hayward@cs.ualberta.ca>
To:	Broderick Arneson <broderic@cs.ualberta.ca>
Cc:	Ryan Hayward <hayward@cs.ualberta.ca>
Subject: Re: automatic proof verification in Hex
Message-ID: <20051216104434.B18790@cs.ualberta.ca>
References: <20051215130308.A13136@cs.ualberta.ca> <20051215204254.GA1708@worsley.cs.ualberta.ca> <20051215150400.A13957@cs.ualberta.ca> <20051216032120.GA15061@worsley.cs.ualberta.ca>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
User-Agent: Mutt/1.2.5.1i
In-Reply-To: <20051216032120.GA15061@worsley.cs.ualberta.ca>; from broderic@cs.ualberta.ca on Thu, Dec 15, 2005 at 08:21:20PM -0700
Return-Path: <hayward@cs.ualberta.ca>
X-Envelope-To: <hayward@cs.ualberta.ca> (uid 16170)
X-Orcpt: rfc822;hayward@cs.ualberta.ca
Original-Recipient: rfc822;hayward@cs.ualberta.ca
Status: RO
Content-Length: 5202
Lines: 193

B,

will you be on campus any time today?
if not, do you want to get together on Monday?
or should we just do this via email...

> >   * each tree is elusive 
> >     (this is the counterstrategy condition:
> >        for each internal node,
> >          no label occurs in all subtrees;
> > 	   this happens if and only if each internal
> > 	   node has at least two children,
> > 	   and, for each associated subtree,
> > 	   the combined intersection of the nodes of the subtrees
> > 	   is empty set);
> 
> >   * each tree is satisfying 
> >     (satisfies the winning condition:
> >      for each leaf,
> >        the player has a side-to-side connected component)
> 
> So the hexes comprising the root-to-leaf path in the tree form 
> a path from one side to the other? 

they comprise all the player's stones,
which will contain a side-to-side path,
but also (in most cases) some extra stones

> About the second point: 
> 
>   So each internal node needs at least two children and
>   the intersection of the nodes comprising each of the children
>   should be empty. 
>  
>   If this is true then we win, if not, we can be blocked...

correct ...

>   This seems to make intuitive sense to me.  If one of our
>   subtrees is simply a single chain of nodes, then our opponent can
>   play any node of that chain and kill that strategy. 
> 
>   If any internal node has only one child, then playing at that
>   node's child kills that solution. So if our proof has an 
>   internal node with one child, our opponent
>   can play moves to "steer" us toward that node and then block
>   us by playing its child.  
> 
>   Actually, that's only true if each node has at most 2 children.
>   If a node has 3 children, and one of those children is an
>   interal node with only one child, isn't everything still ok
>   assuming the other 2 subtrees meet the above conditions?
>   I suppose here we could just drop that child and its subtree 
>   and everything would be fine anyway.

yes, we could drop the child and its subtree
(so I may have stated a stronger condition than we need)...

the only property we need:
the intersection, over all subtrees,
of the union of all descendants,
is empty

>   
>   Sorry for rambling here, but I'm just trying to get a grasp
>   of how this works.  :)
> 
> > for example,
> > for the 3x3 board,
> > 
> >       1   2   3
> > a     .   .   .
> >   b     .   .   .
> >     c     .   .   .
> > 
> > here's a winning 1st-player strategy for horizontal,
> > where I'm drawing the tree using the usual "sideways" notation...
> > (so c1 has three children, b2, c2, a3)
> > 
> > (c1
> >    (b2
> >       (a3)
> >       (b3))
> >    (c2
> >       (b3)
> >       (c3))
> >    (a3
> >       (b2)
> >       (a2
> >           (a1)
> >           (b1))))
> 
> 
> That tree without the first b2 subtree would also be winning, wouldn't it?

yes 

good spotting...  :)

it would still be winning;
(however, it would not be giving the shortest winning
substrategy in all cases;
one feature we could add later would be a "pruner",
which could determine whether the strategy was
"minimal" in the sense you have just described;
the above strategy is not minimal, in that 
the proper sub-strategy obtained by pruning the b2 subtree
is still winning)


> > once we get this implemented,
> > the next step is to augment the notation
> > to allow the "and" operation, namely the combinatorial
> > sum of two games;
> > this allows our tree representation to be much more compact...
> 
> Heh, I have no idea what this means. ;-)

right now the tree we have can be considered an
"or" tree; after playing the move indicated by a node's cell,
the player can then continue by playing
    the first substrategy
OR  the second substrategy
OR  ...
OR  the last substrategy

sometimes one encounters subgames that decompose
into two or more independent pieces;
in this case, we get a much more compact tree
if we add a new kind of node, an AND node

for example, we could replace the tree

(b2
    (b1
        (a3)
	(b3))
    (c1
        (a3)
	(b3))
    (a3
        (b1)
	(c1))
    (b3
        (b1)
	(c1)))

with the equivalent, but more compactly represented tree

(b2 +
    (  (b1)
       (c1))
    (  (a3)
       (b3)))

where + indicates that b2 is the label of an "AND" node,
and the two subtrees are second-player strategies
instead of first player strategies
(so 
  if the opponent plays in one of {b1,c1}
  the player responds with the other;
  if the opponent plays in one of {a3,c3}
  the player responds with the other)


> > if we get that implemented,
> > then there are some other extensions we should add too,
> > (namely, a notation to hand point to point and/or connections)
> > but I'm getting ahead of myself...
> 
> 
> This looks interesting to me.  I'd definetly like to help in
> getting it implemented. 

excellent :)

step 1:
write a parser for the simplest (or-nodes only) notation

step 2:
extend the parser to a verifier

step 3:
incorporate and nodes to the parser

step 4:
write a translator which takes an and/or tree
and replaces it with the equivalent (but possibly much longer)
or-nodes only tree

Ciao,
R
PS. if you want, we can get together to do the coding...

From broderic@cs.ualberta.ca Mon Dec 19 12:52:05 2005
Subject: Re: verifier

On Mon Dec 19, 2005 at 11:12:54AM -0700, Ryan Hayward wrote:
> B,
> 
> did you want to get together sometime this week?
> I'm a bit under the weather, I was thinking
> maybe Wednesday...

Sure, Wednesday sounds fine. 
 
> R
> 
> On Sun, Dec 18, 2005 at 02:25:44PM -0700, Broderick Arneson wrote:
> > On Sun Dec 18, 2005 at 12:42:48PM -0700, Ryan Hayward wrote:
> > > B,
> > > 
> > > here's another strategy in the new format...
> > > 
> > > it's interesting, because
> > > I've condensed it to the point
> > > that proving that it's a winning strategy
> > > will be more complicated than I originally described...
> > 
> > Heh, just when I got it working for the simpler version. :)
> > I agree though, the other format would be unwieldly to type out. 
> > 
> > Isn't the proof of correctness of this new format similar to the
> > old one?  I'm probably missing something obvious, though. 
> > 
> > Suppose we have a node P, such that (P [S1 S2] [T1 T2]), and
> > assume by induction that S1,S2,T1,T2 are valid p1 proofs.  
> > Also, the intersection between S1 and S2 is empty, same for T1,T2. 
> > 
> > If [T1,T2] wasn't there, we could just add S1,S2 as subtrees of P
> > and it would be valid if P didn't occur in S1 or S2.  Since the two
> > []'s are independent ,it doesn't matter which we do first. So
> > assume we do [S1,S2] first.  Thus we add S1,S2 as subtrees to P and
> > call this new tree Q.
> > Now consider (a1,...,ak) being the leaves of Q.  For each ai
> > we add T1 and T2 as subtrees.  These (ai (T1) (T2)) trees are
> > valid if ai does not appear in either of T1,T2.  Suppose for now
> > that this is the case.  Then the whole tree is valid...correct?
> > 
> > How do we ensure that each leaf does not occur in some Ti?  
> > Maybe ensure that (S1 \/ S2) /\ (T1 \/ T2) is empty?  Which is
> > nothing but our standard intersection property. 
> > 
> > Bah, I probably messed something up, but it doesn't look too bad. :)
> > 
> > 
> > If that's true then the only thing more complicated is the 
> > side-to-side path checking, which is all messed up now.  But I think
> > we just need to do all 2^n combinations on a [] node (basically doing
> > the expanding to an OR tree implicitly).
> > 
> > (heh, this sounds similar to something you were discussing on Friday)
> > 
> > I see more clearly now why we could introduce things like (p1-p2 paths)
> > as a type of node.
> > 
> > 
> > > Ciao,
> > > R
> > > 
> > > 1ps ::=  "("  cellLabel { 2ps }* ")"
> > > 2ps ::= "[" 1ps 1ps {1ps}* "]"
> > > 
> > > example: 1ps for 3x3
> > > 
> > > (b2 
> > >    [ (a3) (b3) ]
> > >    [ (b1) (c1) ] )
> > > 
> > > example: 1ps for 4x4
> > > 
> > > (d1 [
> > >      (c3 [(c2)(d2)]
> > >          [(b4)(c4)])
> > >      (b3 [(a4)(b4)]
> > >          [(c2)
> > > 	  (b2[(b1)(c1)])
> > > 	  (d2[(c3)
> > > 	      (d3[(d4)(c4)])
> > > 	     ])])
> > >      (d3 [(c4)(d4)]
> > >          [(d2)
> > > 	  (b3 [(a4)(c3)]
> > >               [(c2)
> > > 	       (b2 [(b1)(c1)])
> > > 	      ])])
> > >      ])
> > 
> > -- 
> > Broderick

-- 
Broderick

From broderic@cs.ualberta.ca Fri Jan  6 17:13:53 2006
Received: (from localhost user: 'broderic' uid#11458 fake: STDIN
	(broderic@worsley.cs.ualberta.ca)) by sunkay.cs.ualberta.ca
	id S557033AbWAGANv (ORCPT <rfc822;hayward@cs.ualberta.ca>);
	Fri, 6 Jan 2006 17:13:51 -0700
Date:	Fri, 6 Jan 2006 17:13:51 -0700
From:	Broderick Arneson <broderic@cs.ualberta.ca>
To:	Ryan Hayward <hayward@cs.ualberta.ca>
Subject: Re: Monday 1pm my office
Message-ID: <20060107001351.GA15036@worsley.cs.ualberta.ca>
References: <001501c6016d$46fe6ce0$9f199444@D4X57B81> <20051215094623.A12251@cs.ualberta.ca> <001a01c6109a$f48bf9e0$fc0b9444@D4X57B81> <20060103123143.A9911@cs.ualberta.ca> <000a01c6123c$b48aa280$fc0b9444@D4X57B81> <20060105142709.A24337@cs.ualberta.ca> <20060106034733.GA9119@worsley.cs.ualberta.ca> <20060106133905.B30768@cs.ualberta.ca> <20060106214747.GA14044@worsley.cs.ualberta.ca> <20060106145108.A31446@cs.ualberta.ca>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20060106145108.A31446@cs.ualberta.ca>
User-Agent: Mutt/1.4.1i
Return-Path: <broderic@cs.ualberta.ca>
X-Envelope-To: <hayward@cs.ualberta.ca> (uid 11458)
X-Orcpt: rfc822;hayward@cs.ualberta.ca
Original-Recipient: rfc822;hayward@cs.ualberta.ca
Status: RO
X-Status: A
Content-Length: 1695
Lines: 52

On Fri Jan 06, 2006 at 02:51:08PM -0700, Ryan Hayward wrote:
> BP,
> 
> great,
> see you guys Monday


I seem to have run into a problem doing the intersection.

Take a look at the 4x4 proof.  

The c2 node appears in the c3,b3, and d3 subtrees of the root. 
So do c3,c4 and d2.  This means the normal intersection test fails
at the root. 

We obviously need to do something different for the intersection
test then, don't we? 

1ps node: its children need to have an empty intersection because we
eventually need to play all of these sub strategies. 

2ps node: now what?  in the 4x4 proof, after player 1 plays d1 and
player 2 plays c2, player 1 can still win by going down the b3 subtree.
Same if player 2 players c3,c4 or d2 instead of c2.  So even though
the intersection fails, it's still a proof. 

..... 

(I postponed this email to think on it before sending)

Actually, we can remove the c2 node from the b3 subtree, can't we?

After player 1 has played d1 and b3, he's virtually connected
to the right side (unless player 2 played a4 or b4, but then p1
would play c3 instead of b3 as his second move).  But then we
can always play one of b2 or d2, so the c2 move is extra.  

I believe the proof can be re-structured for the c3,c4,and d2
cases as well.  Maybe we don't need to change how the verifier works,
maybe the proof can just be massaged into a slightly different
form?  :)  Ie, you gave me a bad proof.   ;-)

Actually, I'm pretty sure of this now.  If we explode the proof
into its OR form, wouldn't this new tree fail the elusive test?


Sorry this email is so sporadic, I've been writing it off and on
for the last 40min or so while I think about stuff. :)


-- 
Broderick

From ph@cs.ualberta.ca Sun Jan  8 05:19:29 2006
Received: from shawidc-mo1.cg.shawcable.net ([24.71.223.10]:62674 "EHLO
	pd2mo3so.prod.shaw.ca") by sunkay.cs.ualberta.ca with ESMTP
	id S557334AbWAHMT3 (ORCPT <rfc822;hayward@cs.ualberta.ca>);
	Sun, 8 Jan 2006 05:19:29 -0700
Received: from pd2mr2so.prod.shaw.ca
 (pd2mr2so-qfe3.prod.shaw.ca [10.0.141.109]) by l-daemon
 (Sun ONE Messaging Server 6.0 HotFix 1.01 (built Mar 15 2004))
 with ESMTP id <0ISR0029JWWGNT60@l-daemon>; Sun,
 08 Jan 2006 05:19:28 -0700 (MST)
Received: from pn2ml1so.prod.shaw.ca ([10.0.121.145])
 by pd2mr2so.prod.shaw.ca (Sun ONE Messaging Server 6.0 HotFix 1.01 (built Mar
 15 2004)) with ESMTP id <0ISR0009OWWGY110@pd2mr2so.prod.shaw.ca>; Sun,
 08 Jan 2006 05:19:28 -0700 (MST)
Received: from D4X57B81 ([68.148.11.252])
 by l-daemon (Sun ONE Messaging Server 6.0 HotFix 1.01 (built Mar 15 2004))
 with SMTP id <0ISR004UYWWFW1D0@l-daemon>; Sun, 08 Jan 2006 05:19:28 -0700 (MST)
Date:	Sun, 08 Jan 2006 05:19:42 -0700
From:	Philip Henderson <ph@cs.ualberta.ca>
Subject: Re: Monday 1pm my office
To:	Broderick Arneson <broderic@cs.ualberta.ca>,
	Ryan Hayward <hayward@cs.ualberta.ca>
Message-id: <002801c6144d$ce40d330$fc0b9444@D4X57B81>
MIME-version: 1.0
X-MIMEOLE: Produced By Microsoft MimeOLE V6.00.2900.2670
X-Mailer: Microsoft Outlook Express 6.00.2900.2670
Content-type: text/plain; format=flowed; charset=iso-8859-1; reply-type=original
Content-transfer-encoding: 7bit
X-Priority: 3
X-MSMail-priority: Normal
References: <001a01c6109a$f48bf9e0$fc0b9444@D4X57B81>
 <20060103123143.A9911@cs.ualberta.ca>
 <000a01c6123c$b48aa280$fc0b9444@D4X57B81>
 <20060105142709.A24337@cs.ualberta.ca>
 <20060106034733.GA9119@worsley.cs.ualberta.ca>
 <20060106133905.B30768@cs.ualberta.ca>
 <20060106214747.GA14044@worsley.cs.ualberta.ca>
 <20060106145108.A31446@cs.ualberta.ca>
 <20060107001351.GA15036@worsley.cs.ualberta.ca>
 <20060106224048.A947@cs.ualberta.ca>
 <20060107080517.GA17796@worsley.cs.ualberta.ca>
Return-Path: <ph@cs.ualberta.ca>
X-Envelope-To: <hayward@cs.ualberta.ca> (uid 60001)
X-Orcpt: rfc822;hayward@cs.ualberta.ca
Original-Recipient: rfc822;hayward@cs.ualberta.ca
Status: RO
X-Status: A
Content-Length: 4694
Lines: 131

The new proof is correct for a first move of b3. However, the problem is 
whether there are valid proofs that our current method will not accept.

Let's look at the old proof starting at d1 (sorry for the new notation - I 
just find this easier to mentally parse):
d1 -> | c3 -> | c2
                     | d2
                -> | b4
                     | c4
         | b3 -> | a4
                     | b4
                -> | c2
                     | b2 -> | b1
                                | c1
                     | d2 -> | c3
                           -> | d3 -> | c4
                                           | d4
        | d3 -> | c4
                   | d4
              -> | d2
                   | b3 -> | a4
                              | c3
                         -> | c2
                              | b2 -> | b1
                                         | c1

- The c3 branch obviously defeats all first opponent moves except for c3, 
c2, d2, b4, and c4.
- Of these moves, the b3 branch easily defeats d2, c3, and c4 via c2 or b2. 
Thus, the only problematic opponent moves remaining are c2 and b4. b3 cannot 
handle b4 because it must have one of a4/b4 and it's the opponent's turn 
next (so they can grab a4). If c2 was the opponent's first move, then any of 
b2, b1, and c1 cancel the b2 branch, leaving the d2 branch. The b3 -> d2 
branch works in this scenario, so the only problematic first move for the 
opponent is b4.
- Looking at the d1 -> d3 branch (recalling that opponent must have played 
b4 first), then d2 is forced, and so a4/c3 connects to one side. Hence c2 is 
forced for the opponent, and b2 completes the win.

So I agree this is a valid winning strategy, even though the intersection 
rule fails.

However, I am skeptical about the ability to `fix' this proof. For instance, 
d2 appears in the b3 branch in order to defeat c2. Meanwhile, d2 is easily 
defeated by the b3 -> c2/b2 branches. Thus, although it seems like the b3 
branch is susceptible to c2 and d2, it is not (there is kind of a 
circularity here...).

I think fixing proofs is highly problematic - as the proofs get more 
complicated, this will take longer (and may not always be possible..?) 
Essentially our problem is that our verifier is sound, but not complete.

The reason for this trouble, I think, is that by not specifying the 
opponent's moves, we've made the opponent's plays appear more variable than 
they really are. For instance, after d1, if the c3 branch does not work, 
then when we consider b3 we actually know that the opponent has played one 
of 5 moves. And if we need to consider b3 -> d4 (and I assume the branches 
are considered in vertical order), then we know that the opponent's first 
move had to be b4 (otherwise some other branch would have already 
succeeded).

Thus, I'm thinking we need to carry around a list of where the opponent 
could possibly be (for each of the moves they've made), based on the 
mustplay of previous branches. This certainly slows down and complicates our 
verifier (or requires additional information in our proof), but I do not 
think that fixing proofs is a reasonable option on larger boards.

I'll keep thinking though and see if I can come up with a better way for 
Monday...

Phil

----- Original Message ----- 
From: "Broderick Arneson" <broderic@cs.ualberta.ca>
To: "Ryan Hayward" <hayward@cs.ualberta.ca>
Cc: "Broderick Arneson" <broderic@cs.ualberta.ca>; "Philip Henderson" 
<ph@cs.ualberta.ca>
Sent: Saturday, January 07, 2006 1:05 AM
Subject: Re: Monday 1pm my office


>I think I have a much shorter proof for the 4x4.
>
> It is simply this:
>
> (b3 [(a4) (b4)]
>    [(b2 [(b1) (c1)])
>     (c2 [(c1) (d1)])
>     (a2 [(a1) (b1)]
>         [(b2) (a3)])
>    ]
> )
>
>
> Basically, play to b3.  Then the [(a4) (b4)] substragey is
> the virtual connection to the right side.  If player 2 doesn't
> play to c1, then play to either b2 or c2 that will give us a
> virtual connection to the left side.
>
> If player 2 plays to c1, play a2.  Again, we are now v.c.'d to
> the left and must connect to b3.  But we have two ways of going,
> through either b2 or a3.
>
> I'm pretty sure this is correct.
>
> It also works with my code.  :)
>
> Btw, I'll get the cvs stuff up and running tomorrow.
>
>
>
> On Fri Jan 06, 2006 at 10:40:48PM -0700, Ryan Hayward wrote:
>> B,
>>
>> excellent!
>>
>> it will make the paper much more interesting
>> if we actually have to *think* about things...
>>
>> I'm in the middle of something for the next
>> day or so, but I'll try to sort it out before Monday.
>>
>> In the meantime,
>> I'll let you and Phil puzzle over this nice small problem :)
>>
>> RBH
>
> -- 
> Broderick
> 


B,
I didn't get very far towards writing out proofs
in the most basic notation, because it seems
counter-intuitive not to use "and"...

I think the following might be 
a better syntax to use...

1ps ::=  "("  cellLabel { 2ps }* ")"

first player strategy is 
  left-paren, followed by
  cellLabel, followed by
  0 or more instances of a second-player-strategy, followed by
  right-paren

  semantics: the player executes the "and" these 2ps's,
  namely all of them independently

2ps ::= "[" 1ps 1ps {1ps}* "]"

second-player strategy is
  left bracket, followed by
  two or more instances of a first-player-strategy, followed by
  right bracket

  semantics: 
  the player executes the "or" of these 1ps's


example: 1ps for 3x3

(b2 
   [ (a3) (b3) ]
   [ (b1) (c1) ] )

example: 1ps for 4x4

(d1 [
     (c3 [(c2)(d2)]
         [(b4)(c4)])
     (b3 [(a4)(b4)]
         [(c2)
	  (b2[(b1)(c1)])
	  (d2[(c3)
	      (d3[(d4)(c4)])
	     ])])
     (d3 [(c4)(d4)]
         [(d2)
	  (b3 [(a4)(c3)]
              [(c2)
	       (b2 [(b1)(c1)])
	      ])])
     ])
