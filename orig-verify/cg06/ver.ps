%!PS-Adobe-2.0
%%Creator: dvips(k) 5.86 Copyright 1999 Radical Eye Software
%%Title: ver.dvi
%%Pages: 10
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -t letter -o ver.ps ver.dvi
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2006.03.16:1050
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro
%!
% PostScript prologue for pstricks.tex.
% Version 97 patch 3, 98/06/01
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
/pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
0 } ifelse setdash stroke } def
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
% DG/SR modification end
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
% def
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
pop pop } def
% DG/SR modification end
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { /mtrx CM def T rotate /h ED /w ED dup 0 eq { pop } { CLW mul
neg /d ED /a w h Atan def /h d a sin Div h add def /w d a cos Div w add
def } ifelse mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2
div /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro
%!PS-Adobe-2.0
%%Title: Dot Font for PSTricks 97 - Version 97, 93/05/07.
%%Creator: Timothy Van Zandt <tvz@Princeton.EDU>
%%Creation Date: May 7, 1993
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    (P) 0 get /BoldPentagon put
  /Metrics 13 dict def
  Metrics begin
    /Bullet 1000 def
    /Circle 1000 def
    /BoldCircle 1000 def
    /SolidTriangle 1344 def
    /Triangle 1344 def
    /BoldTriangle 1344 def
    /SolidSquare 886 def
    /Square 886 def
    /BoldSquare 886 def
    /SolidPentagon 1093.2 def
    /Pentagon 1093.2 def
    /BoldPentagon 1093.2 def
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle { -550 -550 550 550 } def
    /BoldCircle /Circle load def
    /Bullet /Circle load def
    /Triangle { -571.5 -330 571.5 660 } def
    /BoldTriangle /Triangle load def
    /SolidTriangle /Triangle load def
    /Square { -450 -450 450 450 } def
    /BoldSquare /Square load def
    /SolidSquare /Square load def
    /Pentagon { -546.6 -465 546.6 574.7 } def
    /BoldPentagon /Pentagon load def
    /SolidPentagon /Pentagon load def
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath { 0 0 500 0 360 arc closepath } def
    /Bullet { 500 500 Adjust CirclePath fill } def
    /Circle { 500 500 Adjust CirclePath .9 .9 scale CirclePath eofill } def
    /BoldCircle { 500 500 Adjust CirclePath .8 .8 scale CirclePath eofill } def
    /BoldCircle { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath {
      0  660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath
    } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath {
      -450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto
      closepath
    } def
    /SolidSquare { SquarePath fill } def
    /Square { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon { PentagonPath .78 .78 scale PentagonPath eofill } def
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop
% END pst-dots.pro

%%EndProcSet
%%BeginProcSet: pst-node.pro
%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For distribution, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
TeXDict begin 40258431 52099146 1000 600 600 (ver.dvi)
@start
%DVIPSBitmapFont: Fa cmtt10 10.95 52
/Fa 52 127 df<141E147F14FF5BEB03FEEB07FCEB0FF0EB1FE0EB3FC0EB7F80EBFF0048
5A5B12035B485A120F5BA2485AA2123F5BA2127F90C7FCA412FEAD127FA47F123FA27F12
1FA26C7EA27F12076C7E7F12017F6C7EEB7F80EB3FC0EB1FE0EB0FF0EB07FCEB03FEEB01
FF7F147F141E184771BE30>40 D<127812FE7E7F6C7E6C7EEA0FF06C7E6C7E6C7E6C7EEB
7F80133F14C0131FEB0FE014F01307A2EB03F8A214FC1301A214FE1300A4147FAD14FEA4
130114FCA2130314F8A2EB07F0A2130F14E0EB1FC0133F1480137FEBFF00485A485A485A
485AEA3FE0485A485A90C7FC5A1278184778BE30>I<EA03E0EA0FF0EA1FF813FCEA3FFE
A213FFA27EA27E1203EA007FA2137E13FEEA01FC1203EA07F8EA3FF0127FEAFFE0EA7F80
1300123C1019708B30>44 D<120FEA3FC0EA7FE0A2EAFFF0A4EA7FE0A2EA3FC0EA0F000C
0C6E8B30>46 D<16F01501ED03F8A21507A2ED0FF0A2ED1FE0A2ED3FC0A2ED7F80A2EDFF
00A24A5AA25D1403A24A5AA24A5AA24A5AA24A5AA24A5AA24AC7FCA2495AA25C1303A249
5AA2495AA2495AA2495AA2495AA249C8FCA2485AA25B1203A2485AA2485AA2485AA2485A
A2485AA248C9FCA25AA2127CA225477BBE30>I<14FE903807FFC0497F013F13F8497F90
B57E48EB83FF4848C6138049137F4848EB3FC04848EB1FE049130F001F15F0491307A248
48EB03F8A290C712014815FCA400FEEC00FEAD6C14016C15FCA36D1303003F15F8A26D13
07001F15F0A26D130F6C6CEB1FE0A26C6CEB3FC06C6CEB7F806D13FF2601FF8313006CEB
FFFE6D5B6D5B010F13E06D5BD900FEC7FC273A7CB830>I<EB03C0497EA2130FA2131FA2
133F137F13FF1203123FB5FCA213EF138FEA7E0F1200B3B0003FB512F84814FCB612FEA2
6C14FC6C14F81F3977B830>I<EB07FC90383FFFC090B512F00003804814FE4880261FF8
0F1380263FE00113C09038C0007F4848EB3FE090C7121FED0FF04814075A6C15F81503A3
127E1218C8FCA2150716F0150F16E0151F16C0153FED7F8015FF4A13005DEC07FC4A5A4A
5A4A5A4A5A4A5A4990C7FC495A495AEB0FF0EB3FE0495A495A4890C8FC4848EB01F04848
EB03F8485AEA1FE048B6FCB7FCA37E6C15F025397BB830>I<EB03FF013F13E090B512F8
4814FE4880481580260FFE0113C09038F0007F4848EB1FE0150F16F01507A26C5A6C5AC8
FC150F16E0A2151FED3FC0157FEDFF8002071300903807FFFE495B5D8115FF6D1480D900
0113C09138003FE0ED1FF0ED07F8150316FC150116FE1500A21218127EB4FCA2150116FC
4814036C15F86C6C13076DEB1FF0D83FF0133F3A1FFE01FFE06CB612C06C15806CECFE00
C65C013F13F001031380273A7CB830>I<EC03FC4A7E140F141FA2143F147F157E14FEA2
EB01FCEB03F8A2EB07F0A2EB0FE0EB1FC0A2EB3F80A2EB7F0013FEA2485A485AA2485AA2
485A485AA2485AA248C7FC12FEB8FC1780A46C1600C8007EC7FCAA91387FFFFE91B6FCA4
6E5B29397DB830>I<000FB612804815C05AA316800180C8FCAEEB83FF019F13C090B512
F015FC8181D9FE0313809039F0007FC049133F0180EB1FE06CC7120F000E15F0C81207A2
16F81503A31218127EA2B4FC150716F048140F6C15E06C141F6DEB3FC06D137F3A3FE001
FF80261FFC0F13006CB55A6C5C6C5C6C14E06C6C1380D90FFCC7FC25397BB730>I<EC0F
F8EC7FFF49B51280010714E0131F4914F090387FF80F9039FFC007F84813803803FE005B
485A4848EB03F0ED01E0484890C7FC5B123F5BA2127FEB000C903803FFE0010F13F8D8FF
3F13FE48B6FCB7128016C09039FE007FE001F8EB1FF001E0130F49EB07F849EB03FCA290
C7120116FE1500A37EA46C7E15016D14FC121F6D1303000FEC07F86D130F6C6CEB1FF06D
EB3FE03A03FF81FFC06C90B512806C15006D5B011F13F8010713E001011380273A7CB830
>I<127CB712FC16FEA416FC48C7EA0FF816F0ED1FE0007CEC3FC0C8EA7F80EDFF00A24A
5A4A5A5D14075D140F5D4A5AA24A5AA24AC7FCA25C5C13015CA213035CA213075CA4495A
A6131F5CA96D5A6DC8FC273A7CB830>I<49B4FC011F13F0017F13FC90B57E0003ECFF80
4815C048010113E03A1FF8003FF049131FD83FC0EB07F8A24848EB03FC90C71201A56D13
03003F15F86D13076C6CEB0FF06C6CEB1FE0D807FCEB7FC03A03FF83FF806C90B512006C
6C13FC011F13F0497F90B512FE48802607FE0013C0D80FF8EB3FE0D81FE0EB0FF04848EB
07F8491303007F15FC90C712014815FE481400A66C14016C15FC6D1303003F15F86D1307
D81FF0EB1FF06D133F3A0FFF01FFE06C90B512C06C1580C6ECFE006D5B011F13F0010190
C7FC273A7CB830>I<49B4FC010F13E0013F13F890B57E4880488048010113803A0FFC00
7FC0D81FF0EB3FE04848131F49EB0FF048481307A290C7EA03F85A4815FC1501A416FEA3
7E7E6D1303A26C6C13076C6C130F6D133FD80FFC13FF6CB6FC7E6C14FE6C14F9013FEBE1
FC010F138190380060011400ED03F8A2150716F0150F000F15E0486C131F486CEB3FC015
7FEDFF804A1300EC07FE391FF01FFC90B55A6C5C6C5C6C1480C649C7FCEB3FF0273A7CB8
30>I<120FEA3FC0EA7FE0A2EAFFF0A4EA7FE0A2EA3FC0EA0F00C7FCAF120FEA3FC0EA7F
E0A2EAFFF0A4EA7FE0A2EA3FC0EA0F000C276EA630>I<007FB7FCA2B81280A36C16006C
5DCBFCA7003FB612FE4881B81280A36C1600A229157DA530>61 D<147F4A7EA2497FA449
7F14F7A401077F14E3A3010F7FA314C1A2011F7FA490383F80FEA590387F007FA4498049
133F90B6FCA34881A39038FC001F00038149130FA4000781491307A2D87FFFEB7FFFB56C
B51280A46C496C130029397DB830>65 D<007FB512F0B612FE6F7E82826C813A03F8001F
F815076F7E1501A26F7EA615015EA24B5A1507ED1FF0ED7FE090B65A5E4BC7FC6F7E16E0
829039F8000FF8ED03FC6F7E1500167FA3EE3F80A6167F1700A25E4B5A1503ED1FFC007F
B6FCB75A5E16C05E6C02FCC7FC29387EB730>I<003FB512E04814FCB67E6F7E6C816C81
3A03F8007FF0ED1FF8150F6F7E6F7E15016F7EA2EE7F80A2163F17C0161FA4EE0FE0AC16
1F17C0A3163F1780A2167F17005E4B5A15034B5A150F4B5AED7FF0003FB65A485DB75A93
C7FC6C14FC6C14E02B387FB730>68 D<007FB6FCB71280A46C1500260007F0C7FCB3B3A8
007FB6FCB71280A46C1500213879B730>73 D<383FFFF8487FB57EA26C5B6C5BD801FCC9
FCB3B0EE0F80EE1FC0A9003FB7FC5AB8FCA27E6C16802A387EB730>76
D<D83FFC90381FFF80486C4913C0B54913E0A26C6D6C13C06C6E13800003913801F800EB
F7C0A3EBF3E0A314F013F1A214F8A213F014FCA2147C147EA2143E143FA2141FA21581A2
140F15C1A2140715E1A2140315F1A21401A215F91400A3157DA3153FEA3FFF481380B5EA
C01FA26CEB800F6C496C5A2B387EB730>78 D<90383FFFE048B512FC000714FF48158048
15C04815E0EBF80001E0133FD87F80EB0FF0A290C71207A44815F8481403B3A96C1407A2
6C15F0A36D130FA26D131F6C6CEB3FE001F813FF90B6FC6C15C06C15806C1500000114FC
D8003F13E0253A7BB830>I<003FB57E4814F0B612FC15FF6C816C812603F8017F913800
3FF0151F6F7E15071503821501A515035E1507150F4B5A153F4AB45A90B65A5E93C7FC5D
8182D9F8007FED3FE0151F150F821507A817F8EEF1FCA53A3FFF8003FB4801C0EBFFF8B5
6C7E17F06C496C13E06C49EB7FC0C9EA1F002E397FB730>82 D<003FB712C04816E0B8FC
A43AFE003F800FA8007CED07C0C791C7FCB3B1011FB5FC4980A46D91C7FC2B387EB730>
84 D<D87FFE90380FFFC0B54913E06E5AA24A7E6C486D13C0D807F0903801FC00A26D13
0300035DA46C6C495AA46C6C495AA46D131F6D5CA3EC803F013F5CA46D6C48C7FCA49038
0FE0FEA401075B14F1A301035BA314FB01015BA314FFA26D5BA46E5A6E5A2B397EB730>
86 D<007FB5FCB61280A4150048C8FCB3B3B3A5B6FC1580A46C140019476DBE30>91
D<007FB5FCB61280A47EC7123FB3B3B3A5007FB5FCB6FCA46C140019477DBE30>93
D<EB7FF80003B5FC4814C04880488048809038E01FFC9038C003FE14016E7E6C487F6CC7
7FC8123FA491B5FC130F137F48B6FC12075A48EB803F383FF800EA7FE0138048C7FC5AA4
157F7E6C6C13FFEBC003263FF01FEBFF8090B712C07E6C14EF000314876CD9FE01138026
003FE0C8FC2A2A7BA830>97 D<EA3FFC487E12FFA2127F123F1200AAEC03FE91381FFF80
027F13E091B57E90B612FC82ECFE079138F001FF4A6C13804A137F4AEB3FC091C7121F17
E049140FA217F01607A8160FA217E07F161F6EEB3FC0A26EEB7F806E13FFDAF003130091
38FC0FFE91B55A5E495CD97E7F13C0D93C1F90C7FC90380003FC2C3980B730>I<ECFFE0
010713FC011F7F017F7F90B612804815C048EB807F3907FC003F485A485A49EB1F804848
EB0F004990C7FC127F90C9FCA25A5AA87E7EA27F003FEC07C06DEB0FE06C7E6D131F6C6C
14C0D807FE133F9039FFC0FF806C90B5FCC615006D5B011F13F801075B01011380232A7A
A830>I<913801FFE04A7F5CA28080EC0007AAEB03FE90381FFF874913E790B6FC5A5A48
1303380FFC00D81FF0133F49131F485A150F4848130790C7FCA25AA25AA87E6C140FA27F
003F141F6D133F6C7E6D137F390FF801FF2607FE07EBFFC06CB712E06C16F06C14F76D01
C713E0011F010313C0D907FCC8FC2C397DB730>I<49B4FC010713E0011F13F8017F7F90
B57E488048018113803A07FC007FC04848133FD81FE0EB1FE0150F484814F0491307127F
90C7FCED03F85A5AB7FCA516F048C9FC7E7EA27F003FEC01F06DEB03F86C7E6C7E6D1307
D807FEEB1FF03A03FFC07FE06C90B5FC6C15C0013F14806DEBFE00010713F8010013C025
2A7CA830>I<EDFF80020713E0021F13F05C4A13F891B5FC491387903803FE079138FC03
F0903907F800C04A1300A8003FB612C04815E0B7FCA36C15C0260007F0C7FCB3A9003FB5
12FE4880B71280A26C15006C5C25397DB830>I<D903FC13FF90261FFF8713C04913DF90
B712E05A5A2607FE07138F903AF801FE07C048486C6CC7FCA2497F001F8149133FA56D13
7F000F92C7FC6D5BA26C6C485AEBFE0790B55A5D485C15C001DF5BD9C3FCC8FC01C0C9FC
A37F7F6CB512F015FF6C15C04815F0488148813A3FE0001FFE0180130148C8127F007E81
00FE168048151FA56C153F007FED7F006D5C6C6C495A01F013076CB4EB7FFC6C90B55A6C
5D000115C06C6C91C7FC011F13FC010113C02B3E7DA730>I<EA3FFC487E12FFA2127F12
3F1200AAEC01FE91380FFF80023F13E091B57E90B67EA29138FE07FCECF8039138E001FE
14C0EC8000A291C7FCA25BB3A23B3FFFF81FFFF8486D4813FCB500FE14FEA26C01FC14FC
6C496C13F82F3880B730>I<14E0EB03F8A2497EA36D5AA2EB00E091C8FCA9381FFFF848
7F5AA27E7EEA0001B3A9003FB612C04815E0B7FCA27E6C15C023397AB830>I<EC01C0EC
07F0A2EC0FF8A3EC07F0A2EC01C091C7FCA990B512F04814F8A47EEB0003B3B3A5EC07F0
A2123C007EEB0FE0B4131FEC3FC0147F90B512806C14005C6C5B000F13F0000313C01D4E
7CB830>I<387FFFF8B57EA47EEA0001B3B3A8007FB612F0B712F8A46C15F025387BB730>
108 D<02FC137E3B7FC3FF01FF80D8FFEF01877F90B500CF7F15DF92B57E6C010F138726
07FE07EB03F801FC13FE9039F803FC01A201F013F8A301E013F0B3A23C7FFE0FFF07FF80
B548018F13C0A46C486C01071380322881A730>I<EC01FE3A3FFC0FFF80267FFE3F13E0
00FF90B57E90B67E7E6C9038FE07FCC6EBF8039138E001FE14C0EC8000A291C7FCA25BB3
A23B3FFFF81FFFF8486D4813FCB500FE14FEA26C01FC14FC6C496C13F82F2880A730>I<
49B4FC010F13E0013F13F8497F90B57E0003ECFF8014013A07FC007FC04848EB3FE0D81F
E0EB0FF0A24848EB07F8491303007F15FC90C71201A300FEEC00FEA86C14016C15FCA26D
1303003F15F86D13076D130F6C6CEB1FF06C6CEB3FE06D137F3A07FF01FFC06C90B51280
6C15006C6C13FC6D5B010F13E0010190C7FC272A7CA830>I<EC03FE3A3FFC1FFF80267F
FE7F13E000FF90B57E90B612FC6C816CEBFE07C69038F001FF4A6C13804A137F4AEB3FC0
91C7121F17E049140FA217F01607A8160FA217E07F161F6EEB3FC0A26EEB7F806E13FFDA
F00313009138FC0FFE91B55A5E495C6E13C0021F90C7FCEC03FC91C9FCAD383FFFF8487F
B57EA26C5B6C5B2C3C80A730>I<ED07F83A3FFF803FFF486DB51280B512C302CF14C06C
13DF6C9038FFFC3FD8001F13E09238801F809238000F004A90C7FC5C5C5CA25CA45CAF00
3FB512FC4880B7FCA26C5C6C5C2A287EA730>114 D<90381FFC1E48B5129F000714FF5A
5A5A387FF007EB800100FEC7FC4880A46C143E007F91C7FC13E06CB4FC6C13FC6CEBFF80
6C14E0000114F86C6C7F01037F9038000FFF02001380007C147F00FEEC1FC0A2150F7EA2
7F151F6DEB3F806D137F9039FC03FF0090B6FC5D5D00FC14F0D8F83F13C026780FFEC7FC
222A79A830>I<EB0780497E131FA9003FB612E04815F0B7FCA36C15E026001FC0C7FCB2
16F8ED01FCA5ECE003010FEB07F814F09138FC1FF06DB512E06D14C016806D1400903800
7FFCEC1FF026337EB130>I<D83FFCEB3FFC486C497E00FF14FFA2007F147F003F143F00
001400B3A41501A2150315076D130F903A7FC07FFFF891B612FC6D15FE7F6D4913FC6D90
38F87FF8010001C0C7FC2F2880A630>I<3B3FFFC01FFFE0486D4813F0B515F8A26C16F0
6C496C13E0D807E0C7EA3F00A26D5C0003157EA56D14FE00015DEC0F80EC1FC0EC3FE0A3
3A00FC7FF1F8A2147DA2ECFDF9017C5C14F8A3017E13FBA290393FF07FE0A3ECE03FA201
1F5C90390F800F802D277FA630>119 D<3A3FFF81FFFC4801C37FB580A26C5D6C01815B
C648C66CC7FC137FEC80FE90383F81FC90381FC3F8EB0FE3ECE7F06DB45A6D5B7F6D5B92
C8FC147E147F5C497F81903803F7E0EB07E790380FE3F0ECC1F890381F81FC90383F80FE
90387F007E017E137F01FE6D7E48486D7E267FFF80B5FCB500C1148014E3A214C16C0180
140029277DA630>I<3B3FFFC07FFF80486DB512C0B515E0A26C16C06C496C13803B01FC
0003F000A2000014076D5C137E150F017F5C7F151FD91F805BA214C0010F49C7FCA214E0
0107137EA2EB03F0157C15FCEB01F85DA2EB00F9ECFDF0147D147FA26E5AA36E5AA35DA2
143F92C8FCA25C147EA2000F13FE486C5AEA3FC1EBC3F81387EB8FF0EBFFE06C5B5C6C90
C9FC6C5AEA01F02B3C7EA630>I<017C133848B4137C48EB80FE4813C14813C348EBEFFC
397FEFFFF0D8FF8713E0010713C0486C1380D87C0113003838007C1F0C78B730>126
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fb cmtt12 12 5
/Fb 5 115 df<EB1FFC90B57E000314E048804814FC48809038F007FFEBE0016E7F153F
6C48806C48131FC87F150FA5EC0FFF49B5FC131F137F48B6FC0007140F4813C0381FFC00
EA3FF0EA7FC05B48C7FC5AA56C141F7E6D137FD83FE0497ED9F807EBFFF06CB712F87E6C
14F36C14C1C69138003FF0D91FF090C7FC2D2E7BAC33>97 D<ED7FF84B7E5CA280157F15
01ABEB01FF010713C1011F13F1017F13F990B6FC5A4813813907FE003FD80FF8131F4913
0F48481307491303123F491301127F90C7FCA25A5AA97E7E15037F123F6D1307A26C6C13
0F6D131F6C6C133F6C6C137F2603FF81B512F091B612F8C602FD13FC6D13F96D01E113F8
010F018013F0D901FEC8FC2E3E7DBC33>100 D<4AB4FC263FFC0713C0267FFE1F13F000
FF017F7F91B5FC6CB67E6CEC07FEC6EBF801ECF0004A7F4A7F5CA291C7FCA35BB3A43B3F
FFF80FFFFC486D4813FEB56C4813FFA26C496C13FE6C496C13FC302C7FAB33>110
D<EB01FE90380FFFC0013F13F0497F90B57E488048EB03FF2607FC0013804848EB7FC049
133F4848EB1FE049130F4848EB07F0A2007F15F890C71203A300FEEC01FCAA6C14036C15
F8A26D1307003F15F06D130FA26C6CEB1FE06D133F6C6CEB7FC06C6CEBFF802603FF0313
006CEBFFFE6C5C6D5B6D5B010F13C0D901FEC7FC262E7AAC33>I<ED03FE3B7FFF801FFF
80B5D8C07F13E002C1B5FC02C314F014C76C9038CFFE0F39001FDFF09139FFC007E09238
8003C092C8FC5C5C5CA25CA25CA35CB2007FB512FEB7FCA46C5C2C2C7DAB33>114
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fc lasy10 12 1
/Fc 1 51 df<003FB9FCBA1280A300F0CA1207B3B3ADBAFCA4393977BE4A>50
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fd cmmi8 8 3
/Fd 3 117 df<15E0EC01F01403A3EC01C091C7FCA9147CEB03FE9038078F80EB0E0713
1C013813C01330EB700F0160138013E013C0EB801F13001500A25CA2143EA2147EA2147C
A214FCA25CA21301A25CA21303A25CA2130700385BEAFC0F5C49C7FCEAF83EEAF0F8EA7F
F0EA1F801C3B81AC1D>106 D<131FEA03FFA2EA003FA2133EA2137EA2137CA213FCA25B
A2120115F89038F003FCEC0F0E0003EB1C1EEC387EEBE07014E03807E1C09038E3803849
C7FC13CEEA0FDC13F8A2EBFF80381F9FE0EB83F0EB01F81300481404150C123EA2007E14
1C1518007CEBF038ECF83000FC1470EC78E048EB3FC00070EB0F801F2F7DAD25>I<130E
131FA25BA2133EA2137EA2137CA213FCA2B512F8A23801F800A25BA21203A25BA21207A2
5BA2120FA25BA2001F1310143013001470146014E0381E01C0EB0380381F0700EA0F0EEA
07FCEA01F0152B7EA919>116 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fe cmsy8 8 3
/Fe 3 49 df<130C131EA50060EB01800078130739FC0C0FC0007FEB3F80393F8C7F0038
07CCF83801FFE038007F80011EC7FCEB7F803801FFE03807CCF8383F8C7F397F0C3F8000
FCEB0FC039781E078000601301000090C7FCA5130C1A1D7C9E23>3
D<EB7F803801FFE0000713F8487F487F487FA2481480A2B612C0A86C1480A26C1400A26C
5B6C5B6C5B000113E038007F801A1A7C9D23>15 D<137813FE1201A3120313FCA3EA07F8
A313F0A2EA0FE0A313C0121F1380A3EA3F00A3123E127E127CA35AA35A0F227EA413>48
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Ff cmr6 6 6
/Ff 6 100 df<13E01201120712FF12F91201B3A7487EB512C0A212217AA01E>49
D<EA01FC3807FF80381C0FC0383003E0386001F0EB00F812F86C13FCA2147C1278003013
FCC7FC14F8A2EB01F0EB03E014C0EB0780EB0F00131E13385B5B3801C00CEA0380380600
185A5A383FFFF85AB512F0A216217CA01E>I<13FF000313C0380F03E0381C00F014F800
3E13FC147CA2001E13FC120CC712F8A2EB01F0EB03E0EB0FC03801FF00A2380003E0EB00
F01478147C143E143F1230127812FCA2143E48137E0060137C003813F8381E03F0380FFF
C00001130018227DA01E>I<EA01FCEA0FFF381E0780486C7E383E01E0130080121CC7FC
130113FF1207EA1FC0EA3F00127CA24814C0A31301387C0370393E0E7980391FFC3F0038
07F01E1A187D961E>97 D<120FB4FCA2121F7EA9EB07F0EB3FFCEB703F9038C00F809038
8007C0EB000315E0140115F0A715E0140315C09038800780390EC00F00EB703E380C3FFC
380007E01C247DA222>I<137F3803FFE03807C0F0380F0078001E13F85AA2007C137000
78130012F8A7127C1418123C6C13306C13603807C0E03803FF8038007E0015187D961B>
I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fg cmsl10 10.95 25
/Fg 25 119 df<EC07F8EC3FFF9138FC0FC0903903F003E0903907C001F0D90F8013F849
C7FC013E14FC017E147C017C147E13FC485AA20003157F5B1207A2120F5BA2121F16FF5B
A2123FA44848EB01FEA648C7EA03FCA5ED07F8A25A16F0A2150F16E0A3ED1FC0A2168000
7E143F1600157E123E003F5C4A5AD81F805B000FEB07E06C6C485A2603F03FC7FC3800FF
FCEB1FE0283F79BC2D>48 D<157015F014011407143F903803FFE0137FEBFFCFEBF80F13
00141F15C0A5143F1580A5147F1500A55C5CA513015CA513035CA513075CA5130F5CA313
1F497EB612F8A31D3D78BC2D>I<EC01FE91380FFFE0023F13F89138FC07FC903901E001
FE903907C000FF49C7EA7F80011E15C0163F4915E05B0170141F13FF80A35A163FA26C90
C7FC137E0118EC7FC090C8FCEEFF80A24B1300A24B5A5E4B5A4B5A4B5A5E4B5A4BC7FC15
FEEC01F84A5A4A5A4A5A4AC8FC143E5C5CEB01E04948130E49485B49C7FC131E495C1370
5B48485C484814F0000FB6FC5A485D5AB7FC5EA22B3D7CBC2D>I<ED7F80913803FFE091
380FC0F091383E003802FC131C495A494813FE903807E003EB0FC090381F8007133FD97F
0013FC01FE1303ED01F0484890C7FC1203A2485AA2120F5BA2001FEB3F809038E0FFE039
3FE3C0F89038E7007C01EE7F01FC133F4848EB1F80A24914C05B16E0A2485AA216F05BA2
ED3FE0A290C7FCA4157F16C0A316804814FF007E1500007F5C14016C5C4A5A6C6C485A4A
5A6C6C485A2607E07FC7FC3803FFFEC613F8EB3FC0273F78BC2D>54
D<013FB812F8A39026007FF0C7127F6E48140F18034B14011800A31978147F4B1570A502
FF147092C7FCA3190017F0495D4A1301A21607161F91B6FC495DA29138FC003F160F1607
160301075D5CA219E0180119C0010FEC07004A90C712031980A218071900011F5E5C181E
A2183E183C013F167C4A15FC4D5A1707017F151F01FF4AB45AB9FCA2603D3E7DBD3E>69
D<90263FFFF093381FFFF85013F0629026007FF8EFF000023F4D5AA2023B933801DFC0A2
DA39FCED039FA2F1073F14790271040E5BEC70FE191C19381A7F02F01670DAE07F94C7FC
19E0A2F001C06201016D6C495A02C05FF00700A2180E6F6C14010103161C028003385BA2
18706F7EF0E00313070200DA01C05BA2923907F00380A294380700075B010E902603F80E
5C5FA25F190F011E6D6C5A011C605FA2EEFDC0DB00FF141F013C5D013860013C92C7FC01
7C5C01FE027E143F2607FF80017C4A7EB500FC037FB512E004785E4A1338553E7CBD53>
77 D<013FB612FEEFFFE018F8903B007FF0000FFC6E48EB01FF7113804BEC7FC0183F19
E0F01FF0A2147F5D19F8A402FFED3FF092C8FCA219E0A2F07FC05B4AEDFF8019004D5A4D
5AEF0FF80103ED3FE04A903801FF8091B648C7FC17F002FCCAFCA213075CA5130F5CA513
1F5CA5133F5CA3137F497EB612E0A25D3D3E7DBD3E>80 D<9238FF80070207EBE00F021F
EBF81E91387F00FE02FCEB1F3ED903F0EB0FFE49481307494813034AEB01FC49C7FC4914
00133E137E177C491578A57F1770A26D1500808080EB7FFEECFFE06D13FEEDFFC06D14F0
6D14FC010380010080143F02031480DA003F13C015031500EE7FE0163F161FA2160F121C
A31607160F003C16C0A31780003E151F1700007E5D007F153E6D5C16FC01E0495AD87DF0
495AD8FCFCEB0FC03AF87F803F8027F01FFFFEC7FCD8E00713F839C0007FC030427BBF33
>83 D<EC7FC0903803FFF890380FC07E90383E003F496D7E01FF6D7E82A248140782A26C
5A137890C7120FA25EA2EC03FF147F903807FF1FEB1FE0D97F805B3801FE00EA03F8485A
4848133F485A003F5D49EC81C048C7FCA2157F48ED03804814FFA2007F5B913903BF0700
903880073F3A3FC00E1F8E260FE03C13FC3A03FFF00FF83A007FC003E02A2A7CA82D>97
D<EB3F80EA1FFFA3C6FC137FA291C9FCA55B5BA512015BA4EC07F80003EB3FFF9039F8F8
0FC09039FBE003E09039FF8001F891C77E5B4848147E49147F5B821780A2120F5B17C0A3
167F001F16805BA4EEFF00123F5B4B5AA24B5A5E007F4A5AA24B5A6D495A4BC7FCD87CE0
137E39F87001F839F03C07E039E00FFF80260003FCC8FC2A4077BE33>I<EC1FF0ECFFFE
903903F01F8090390FC003C0D93F0013E0017E130F49131F000115F04848EB3FE0485AA2
4848EB1FC0001FEC0F004990C7FC123FA2485AA412FF90C9FCA96CEC0380150716006C6C
5B151E001F5C6C6C5B6C6C5B6C6C485A3901F80F8026007FFEC7FCEB0FF0242A7AA828>
I<EE03F8ED01FFA3ED000F1607A217F0A4160FA217E0A4161FA217C0A491380FF03FECFF
FC902603F81F138090390FC007BF90391F8003FF90387E0001497F0001157F4848150048
5A120F5B001F5D485A5E5B127FA2150112FF90C75BA41503A25EA37E1507A26C4A5A7F00
1F141F6C6C133F6C6CEBFFF83B03F001EFFFC03900F80F8F90383FFE0FD90FF0EBE0002D
407ABE33>I<EC3FE0903801FFF8903807E07E90380F801F90393F000F80017E14C049EB
07E0485A12034848EB03F0485AA2121F5B123FA248481307A290B6FCA2D8FF80C8FC90C9
FCA87EED01C015036C15806D1307001FEC0F006D131E000F5C6C6C5B6C6C485A3900FC07
C0D93FFFC7FCEB07F8242A7BA828>I<147FEB3FFFA313017FA25CA513015CA513035CA4
ED07F80107EB1FFF9139F0781FC09138F1E00F9139F38007E0ECF70002FE14F0495A5CA2
5CA24A130F131F4A14E0A4161F133F4A14C0A4163F137F91C71380A4167F5B491500A300
015D486C491380B5D8F87F13FCA32E3F7DBE33>104 D<1478EB01FE130314FFA25B14FE
130314FCEB00F01400ACEB03F8EA01FF14F0A2EA001F130FA314E0A5131F14C0A5133F14
80A5137F1400A55B5BA4EA03FF007F13F0A2B5FC183E7DBD1A>I<143FEB1FFF5BA21301
7FA214FEA5130114FCA5130314F8A5130714F0A5130F14E0A5131F14C0A5133F1480A513
7F1400A55B5BA4EA03FF007F13F8A2B5FC183F7DBE1A>108 D<902707F007F8EB03FCD8
03FFD91FFF90380FFF80913CE0781FC03C0FE09126E1E00FEBF0073E001FE38007E1C003
F090260FE700EBE38002EEDAF70013F802FC14FE02D85C14F84A5CA24A5C011F020F1407
4A4A14F0A5013F021F140F4A4A14E0A5017F023F141F91C74914C0A549027F143F4992C7
1380A300014B147F486C496DEBFFC0B5D8F87FD9FC3F13FEA347287DA74C>I<903907F0
07F8D803FFEB1FFF9139E0781FC09138E1E00F3B001FE38007E090380FE70002EE14F014
FC14D814F85CA24A130F131F4A14E0A4161F133F4A14C0A4163F137F91C71380A4167F5B
491500A300015D486C491380B5D8F87F13FCA32E287DA733>I<EC0FF0ECFFFE903903F0
1F8090390FC007C049C66C7E013E6D7E01FC6D7E48488049147C0003157E485A000F157F
5B121FA2485AA2007F1680A2170048C85AA54B5AA25E5A6C4A5A7E4B5A5E6C140F6C6C5C
4B5A6C6C013EC7FC6C6C5B6C6C485A3900FC0FE090383FFF80D90FF8C8FC292A7BA82D>
I<91387F01FE903A7FFF0FFFC09139FE3E03F09238F801F8903A03FFE000FE6D49137F4B
7F92C713804A15C04A141FA218E0A20103150F5C18F0A3171F010716E05CA3173F18C013
0F4A147F1880A2EFFF004C5A011F5D16034C5A6E495AEE1FC06E495AD93FDC017EC7FC91
388F01F8913883FFE0028090C8FC92C9FC137FA291CAFCA45BA25BA31201487EB512F8A3
343A81A733>I<903907F01F80D803FFEB7FE09138E1E1F09138E387F839001FE707EB0F
E614EE02FC13F002D813E09138F801804AC7FCA25C131FA25CA4133F5CA5137F91C8FCA5
5B5BA31201487EB512FEA325287EA724>114 D<9138FF81C0010713E390381F807F9039
7C003F8049131F4848130F5B00031407A248481400A27FA27F6D90C7FCEBFF8014FC6C13
FF6C14C015F06C6C7F011F7F13079038007FFE1403140100381300157EA2123C153E157E
007C147CA2007E147815F8007F495A4A5A486C485A26F9E01FC7FC38E0FFFC38C01FE022
2A7DA824>I<EB0380A4130791C7FCA25BA25BA2133EA2137E13FE12011207001FB512C0
B6FCA2D801FCC7FCA312035BA512075BA5120F5BA41407001F130E13C0A4141E141C1380
A26D5AA2000F5B14F03807E1E03801FF80D8007EC7FC1A3978B723>I<01FE147F00FFEC
7FFF4914FEA20007140300031401A34914FCA4150312074914F8A41507120F4914F0A415
0F121F4914E0A2151FA3153F4914C0157F15FFEC01DF3A0FC003BFE09138073FFF3803F0
1E3801FFF826003FE01380282977A733>I<B539E007FFF05D17E02707FE000313006C48
EB01FC6F5A5E00014A5A5EA24B5A6D1307000092C7FC5D150E6D5B7F5DA25D1480013F5B
14815D14C3011F5B02C7C8FCA214CE14EEEB0FFCA25CA26D5A5CA25CA26D5A2C2878A630
>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fh cmmi10 10.95 4
/Fh 4 111 df<1403A44A7EA84A7EA400F0163CD8FF80EC07FCD83FFE9038C1FFF0000F
B712C000031600C615FC011F14E001071480010149C7FC9038007FF8A24A7EA2497FA290
3803FCFF4A7E49486C7EECE01F49486C7EEC800749486C7E013E6D7E013C130049147801
7014384980014014082E2C81AC2D>63 D<EB01FC13FF5CA21303A25CA21307A25CA2130F
A25CA2131FA25CA2133FA291C9FC16FC49EB03FE92380F0780017EEB3C0FED703F01FE13
E0913801C07F9038FC0380EC07000001010E14004A131C494890C7FC5C00035BEBF9C049
5A01FFC9FC5A14F0EBE3FE9038E07F80000FEB1FC06E7EEBC00781001F1303160E1380A2
003F151E0207131C010013E0A2485DA2007E01031378167000FE01015B15F1489038007F
800038023EC7FC29407CBE2F>107 D<01F8D907F0EB07F8D803FED93FFEEB1FFE28078F
80F81FEB781F3E0F0F81C00F81E00F803E0E07C78007C3C007C0001CD9CF00EBC78002FE
DAEF007F003C4914FE0038495C49485C12780070495CA200F0494948130F011F60000049
5CA2041F141F013F6091C75B193F043F92C7FC5B017E92C75A197E5E01FE9438FE01C049
027E14FCA204FE01011303000106F81380495CF20700030115F00003190E494A151E1A1C
03035E0007943800F8F0494AEC7FE0D801C0D900E0EC1F804A297EA750>109
D<01F8EB0FF0D803FEEB3FFC3A078F80F03E3A0F0F83C01F3B0E07C7800F80001CEBCF00
02FE80003C5B00385B495A127800705BA200F049131F011F5D00005BA2163F013F92C7FC
91C7FC5E167E5B017E14FE5EA201FE0101EB03804914F8A203031307000103F013005B17
0E16E000035E49153C17385F0007913801F1E0496DB45AD801C0023FC7FC31297EA737>
I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fi cmsy10 12 6
/Fi 6 104 df<0060160600F8160F6C161F007E163F6C167E6C6C15FC6C6CEC01F86C6C
EC03F06C6CEC07E06C6CEC0FC06C6CEC1F80017EEC3F006D147E6D6C5B6D6C485A6D6C48
5A6D6C485A6D6C485A6D6C485ADA7E3FC7FCEC3F7E6E5A6E5A6E5AA24A7E4A7EEC3F7EEC
7E3F4A6C7E49486C7E49486C7E49486C7E49486C7E49486C7E49C7127E017E8049EC1F80
4848EC0FC04848EC07E04848EC03F04848EC01F84848EC00FC48C9127E007E163F48161F
48160F00601606303072B04D>2 D<49B4FC010F13E0013F13F8497F48B6FC4815804815
C04815E04815F0A24815F8A24815FCA3B712FEA96C15FCA36C15F8A26C15F0A26C15E06C
15C06C15806C15006C6C13FC6D5B010F13E0010190C7FC27277BAB32>15
D<EF7FF0933807FFFE043FEBFF8093B612E0030315F0030F15F892381F800F92267E0001
13FC03F8EB007F4A48141F0203150F4A481407020F16F8141F4B15F0023F16E0F00FC019
00027F150895C7FCA281A281816E7E816E6C7E16E06E13F86E13FE6EEBFFC06E14F06E6C
13FC031F7F03076D7E030180DB003F7F040F7F04037F82706C7E173F010E151F017C6F7E
48481507485A485A48481503121F485A60127FA200FF5F4D5AA26D5E4D5A6D4B5A6D93C7
FC6C6C153E6D5D6CB44A5A02C0EB07E06C01FCEB7FC06C90B6C8FC6C15FC6C15F0C61580
013F01FCC9FC010313803E487EC53C>83 D<913807FFC0027F13FC0103B67E010F15E090
3A3FFC007FF8D97FC0EB07FCD801FEC8B4FCD803F8ED3F80D807E0ED0FC04848ED07E048
48ED03F090C91201003EEE00F8007E17FC007C177C0078173C00F8173EA248171EB3B3A6
0060170C373D7BBA42>92 D<ED0FE015FF913803FC00EC0FE0EC3FC04A5A4AC7FC5C495A
A2495AB3AD495AA2495A131F495A495A01FEC8FCEA07F8EAFFE0A2EA07F8EA00FEEB7F80
6D7E6D7E130F6D7EA26D7EB3AD6D7EA26D7E806E7E6E7EEC0FE0EC03FC913800FFE0150F
236479CA32>102 D<12FEEAFFE0EA07F8EA00FEEB7F806D7E6D7E130F6D7EA26D7EB3AD
6D7EA26D7E806E7E6E7EEC0FE0EC03FC913800FFE0A2913803FC00EC0FE0EC3FC04A5A4A
C7FC5C495AA2495AB3AD495AA2495A131F495A495A01FEC8FCEA07F8EAFFE048C9FC2364
79CA32>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fj cmmi12 12 16
/Fj 16 115 df<010FB712E0013F16F05B48B812E04817C02807E0060030C7FCEB800EEA
0F00001E010C13705A0038011C13605A0060011813E000E013381240C7FC5C4B5AA214F0
14E01301150314C01303A3EB078082130FA2EB1F00A34980133E137EA24980A200011401
5BA26C48EB00E0342C7EAA37>25 D<121EEA7F80A2EAFFC0A4EA7F80A2EA1E000A0A7889
1B>58 D<121EEA7F8012FF13C0A213E0A3127FEA1E601200A413E013C0A3120113801203
13005A1206120E5A5A5A12600B1D78891B>I<4CB46C1318043F01F013384BB512FC0307
D9007E1378DB1FF090380F80F0DB7F80EB03C1DA01FEC7EA01C34A48EC00E7DA0FF0ED7F
E04A48153F4A5A02FFC9121F494817C04948160F495A130F4A178049481607495A137F49
48170091CAFC5A485A1906485AA2485A96C7FC121F5BA2123F5BA3127F5BA4485AA419C0
A2180161127F180396C7FC6018066C6C160E601818001F17386D5E000F5F6D4B5A6C6C4B
5A00034CC8FC6C6C150E6C6C153C017F5DD93FC0EB01E0D91FF0EB0FC0D907FE017FC9FC
0101B512FCD9003F13E0020790CAFC45487CC546>67 D<91B912FCA3020001C0C7123F6F
48EC03F803FF1501190093C91278A21A385C5DA3020317305DA314074B1460A218E0020F
4B13005DA21701021F5D4B13031707170F023F027FC8FC92B6FCA391397FC0007E4B131E
A2170E02FF140C92C7FCA2171C49031813035C611906010392C7FC4A160E190C191C0107
17184A163819301970130F4A5E180161011F16034A15074E5A013F163F4EC7FC4AEC03FF
01FFED3FFEB9FCA26046447CC348>69 D<027FB512F8A217F09139007FF000ED3FC0157F
A25EA315FF93C7FCA35C5DA314035DA314075DA3140F5DA3141F5DA3143F5DA3147F5DA3
14FF92C8FCA35B5CA313035CA313075CA3130F5CA2131FA25CEB7FF0007FB512F0B6FCA2
2D447DC32B>73 D<91B712FEF0FFE019F802009039C0000FFE6F48EB01FF03FF9138007F
80F13FC093C8EA1FE0A24AEE0FF0A25D1AF81403A25DA21407F11FF05DA2020FEE3FE0A2
4B16C0197F021F1780F1FF004B4A5A4E5A023F4B5A4E5A4BEC3FC006FFC7FC027FEC07FC
92B612F018800380CAFC14FFA292CBFCA25BA25CA21303A25CA21307A25CA2130FA25CA2
131FA25CA2133FA25CEBFFE0B612E0A345447CC33F>80 D<9339FF8001800307EBF00303
3F13FC9239FF007E07DA01F8EB0F0FDA07E09038079F004A486DB4FC4AC77E023E804A5D
187E5C495A183C495AA213074A1538A3130F183080A295C7FC806D7E8014FF6D13E015FC
6DEBFFC06D14FC6E13FF6E14C0020F80020314F8EC003F03077F9238007FFE160F160370
7E8283A283A21206A4000E163EA2120C177E001E167CA25F5F003F15014C5A6D4A5A4C5A
486C4AC8FC6D143ED87CF85CD8787E495A3AF01FC00FE0D8E007B51280010149C9FC39C0
003FF039487BC53C>83 D<EC0FC0EC7FF0903901F8381C903907E01C7E90380FC00E9039
3F0007FE496D5A13FE485A49130100035D485A120F491303001F5DA2485A1507007F5D5B
A2150F00FF5D90C7FCA2151F5E5AA2033F1330EE00701760A24B13E017C015FE007E1301
02031301003ED9073E1380003F010E13036C011C14006C6C486C5A3A07C0F00F0E3A01FF
C007FC3A007F0001F02C2D7CAB33>97 D<EB0FE0EA07FFA338001FC0130F131FA25CA313
3F91C8FCA35B137EA313FE5BA312015BEC0FC0EC3FF00003EBF07C9038F3C03E9038F700
1F01FE14804848130F4914C05B16E0485A5BA3121F5BA2151F123F90C7FCA2153F4815C0
127EA2157F16805A16005DA24A5A007C5CA24A5A4A5A5D003C130F003E495A001E495A00
1F017EC7FC6C5B3807C1F03801FFC06C6CC8FC23467CC429>I<EC07F8EC3FFF9138FC07
C0903903F000E049481370D91F80133049C71270017EEB03F801FE1307485A4848EB0FF0
12075B000FEC07C0484890C7FCA2485AA2127F5BA312FF90C9FCA45AA516181638167000
7E15E0ED01C06CEC0380ED07006C6C131E000F14383907C001F03903F00FC02600FFFEC7
FCEB1FF0252D7CAB2A>I<EE01FC16FFA3EE03F816011603A217F0A21607A217E0A2160F
A217C0A2161FA21780A2163FA21700EC0FC091387FF07F903801F838903907E01C7E9038
0FC00E90393F0007FE49130301FE5C485A491301120348485C120F491303121F5E485A15
07127F495CA2150F12FF90C75BA2151FA2485DA2033F13301770EE0060A24B13E017C015
FE007E130102031301003ED9073E1380003F010E13036C011C14006C6C486C5A3A07C0F0
0F0E3A01FFC007FC3A007F0001F02E467CC433>I<01F8D903FCEC7F80D803FED91FFF90
3803FFE0D8071F903B7C0FC00F81F83E0E0F80E007E01C00FC001C9026C3C0030178137C
271807C700D9F0E0137E02CE902601F1C0133E003801DCDAFB80133F003001D892C7FCD9
0FF814FF0070495C0060495CA200E04949485CD8C01F187E4A5C1200040715FE013F6091
C75BA2040F14014960017E5D1903041F5D13FE494B130762043F160E0001060F130C4992
C713C0191F4CED801C00031A1849027E1638F2003004FE167000071A60494A16E0F201C0
030192380F0380000FF18700494AEC03FED80380D90070EC00F84F2D7DAB55>109
D<01F8EB03FCD803FEEB1FFFD8071F90387C0FC03B0E0F80E007E03A0C07C3C003001CD9
C7007F001801CE1301003801DC80003013D8EB0FF800705B00605BA200E0491303D8C01F
5D5C12001607013F5D91C7FCA2160F495D137E161F5F13FE49143F94C7FC187000014B13
6049147E16FE4C13E0000317C049150104F81380170300071700495D170EEE781C000FED
7C3849EC1FF0D80380EC07C0342D7DAB3A>I<D903E0EB3F80D90FF8EBFFE0903A1C7C03
C0F8903A383E07007C9026703F1E137E9026601F387F5D01E00160EB1F8001C013E04A5A
00014A14C0018090C7FCA200035B1300147EC7FC02FE143FA25CA20101157F18805CA201
0315FF18005C5F010714015F4A13035F010F14075F4C5A5F496C495A4CC7FC02B8137E02
985B90393F9C01F891388F07E0913803FF80DA00FCC8FC4990C9FCA2137EA213FEA25BA2
1201A25BA21203A21207B512F0A25C323F83AB31>112 D<01F8EB0FC0D803FEEB7FF0D8
070FEBF038000E903883C07C3A0C07C701FC001C13CE0018EBDC03003813D8003013F8D9
0FF013F800709038E000E0006015005C12E0EAC01F5C1200A2133F91C8FCA35B137EA313
FE5BA312015BA312035BA312075BA3120F5BEA0380262D7DAB2C>114
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fk cmr12 12 74
/Fk 74 123 df<9239FFC001FC020F9038F80FFF913B3F803E3F03C0913BFC00077E07E0
D903F890390FFC0FF0494890383FF81F4948EB7FF0495A494814E049C7FCF00FE0499139
3FC0038049021F90C7FCAFB912F0A3C648C7D81FC0C7FCB3B2486CEC3FF0007FD9FC0FB5
12E0A33C467EC539>11 D<4AB4FC020F13E091387F80F8903901FC001C49487FD907E013
0F4948137F011FECFF80495A49C7FCA25B49EC7F00163E93C7FCACEE3F80B8FCA3C648C7
FC167F163FB3B0486CEC7FC0007FD9FC1FB5FCA330467EC536>I<DBFF80EB3FE0020F90
39F001FFFC913B3F807C0FF01F913CFC000E3F800380D903F86D48486C7E4948D90FFC80
4948D93FF8130F4948017F4A7E49485C49C75BA25B494B6D5A041F6E5A96C8FCACF107F0
BBFCA3C648C7391FC0001F190F1907B3B0486C4A6C497E007FD9FC0FB50083B512E0A34B
467EC551>14 D<001EEB03C0397F800FF000FF131F01C013F8A201E013FCA3007F130F39
1E6003CC0000EB000CA401E0131C491318A3000114384913300003147090C712604814E0
000614C0000E130148EB038048EB070048130E0060130C1E1D7DC431>34
D<121EEA7F8012FF13C0A213E0A3127FEA1E601200A413E013C0A312011380120313005A
1206120E5A5A5A12600B1D78C41B>39 D<140C141C1438147014E0EB01C01303EB0780EB
0F00A2131E5BA25B13F85B12015B1203A2485AA3485AA348C7FCA35AA2123EA2127EA412
7CA312FCB3A2127CA3127EA4123EA2123FA27EA36C7EA36C7EA36C7EA212017F12007F13
787FA27F7FA2EB0780EB03C01301EB00E014701438141C140C166476CA26>I<12C07E12
707E7E7E120F6C7E6C7EA26C7E6C7EA21378137C133C133E131E131FA2EB0F80A3EB07C0
A3EB03E0A314F0A21301A214F8A41300A314FCB3A214F8A31301A414F0A21303A214E0A3
EB07C0A3EB0F80A3EB1F00A2131E133E133C137C13785BA2485A485AA2485A48C7FC120E
5A5A5A5A5A16647BCA26>I<16C04B7EB3AB007FBAFCBB1280A26C1900C8D801E0C9FCB3
AB6F5A41407BB84C>43 D<121EEA7F8012FF13C0A213E0A3127FEA1E601200A413E013C0
A312011380120313005A1206120E5A5A5A12600B1D78891B>I<B612C0A61A067F9721>I<
121EEA7F80A2EAFFC0A4EA7F80A2EA1E000A0A78891B>I<1618163C167CA2167816F8A2
16F01501A216E01503A216C01507A21680150FA2ED1F00A2151E153EA2153C157CA21578
15F8A25D1401A24A5AA25D1407A25D140FA292C7FC5CA2141E143EA2143C147CA25CA25C
1301A25C1303A25C1307A25C130FA291C8FC5BA2133EA2133C137CA2137813F8A25B1201
A25B1203A2485AA25B120FA290C9FC5AA2121E123EA2123C127CA2127812F8A25A126026
647BCA31>I<14FF010713E090381F81F890383E007C01FC133F4848EB1F8049130F4848
EB07C04848EB03E0A2000F15F0491301001F15F8A2003F15FCA390C8FC4815FEA54815FF
B3A46C15FEA56D1301003F15FCA3001F15F8A26C6CEB03F0A36C6CEB07E0000315C06D13
0F6C6CEB1F806C6CEB3F00013E137C90381F81F8903807FFE0010090C7FC28447CC131>
I<143014F013011303131F13FFB5FC13E713071200B3B3B0497E497E007FB6FCA3204278
C131>I<EB03FE90381FFFC0017F13F03901F80FFC3903C001FE48486C7E000EC7EA7F80
48EC3FC0ED1FE04815F00030140F007015F800601407126CB415FC7F7F1503A46C481307
6CC7FCC8FC16F8A2150F16F0151F16E0A2ED3FC0ED7F8016005D5D4A5A4A5A4A5A5D4A5A
4A5A4AC7FC147C5C5C495A495A495A49C7120C131E5B013814185B5B485A4848143848C8
1230000E1570001FB612F0A25A5AB712E0A326427BC131>I<49B4FC010F13E0013F13FC
9038FE01FE3A01F0007F80D803C0EB3FC048C7EA1FE0120EED0FF0EA0FE0486C14F8A215
077F5BA26C48130FEA03C0C813F0A3ED1FE0A2ED3FC01680ED7F0015FE4A5AEC03F0EC1F
C0D90FFFC7FC15F090380001FCEC007FED3F80ED1FC0ED0FE016F0ED07F816FC150316FE
A2150116FFA3121EEA7F80487EA416FE491303A2007EC713FC00701407003015F8003814
0F6C15F06CEC1FE06C6CEB3FC0D803E0EB7F803A01FE01FE0039007FFFF8010F13E00101
90C7FC28447CC131>I<ED0380A21507150FA2151F153FA2157F15FFA25CEC03BF153F14
071406140C141C141814301470146014C013011480EB03005B13065B131C13185B137013
6013E0485A5B120390C7FC1206120E120C5A123812305A12E0B812C0A3C8383F8000ADED
FFE0027FEBFFC0A32A437DC231>I<000615C0D807C0130701FCEB7F8090B612005D5D5D
15E0158026063FFCC7FC90C9FCAE14FF010713C090381F01F090383800FC01F0137ED807
C07F49EB1F8016C090C7120F000615E0C8EA07F0A316F81503A216FCA5123E127F487EA4
16F890C712075A006015F0A20070140F003015E00038EC1FC07E001EEC3F806CEC7F006C
6C13FE6C6C485A3901F807F039007FFFE0011F90C7FCEB07F826447BC131>I<EC07FCEC
3FFF91B512C0903903FC03E0903907E000F0D91FC0133849C71258017EEB01FC01FE1303
491307485A485AA24848EB03F8000FEC01F092C7FC485AA3485AA3127FA29038007F8090
3801FFF090380780FC39FF0E003E49EB1F8049EB0FC049EB07E0136001E0EB03F04914F8
150116FC5BED00FEA390C812FFA47EA57F123FA216FE121F15016D14FC120FED03F86C7E
ED07F06C6C14E06C6CEB0FC06C6CEB1F80017EEB3F0090383F80FE90380FFFF8010313E0
0100138028447CC131>I<121CA2EA1F8090B712C0A3481680A217005E0038C8120C0030
151C00705D0060153016705E5E4814014B5A4BC7FCC81206150E5D151815385D156015E0
4A5AA24A5A140792C8FC5CA25C141E143EA2147E147CA214FCA21301A3495AA41307A613
0FAA6D5AEB01C02A457BC231>I<14FF010713E0011F13F890387F00FE01FC133FD801F0
EB1F804848EB0FC049EB07E00007EC03F048481301A290C713F8481400A47FA26D130116
F07F6C6CEB03E013FC6C6CEB07C09039FF800F806C9038C01F006CEBF03EECF87839007F
FEF090383FFFC07F01077F6D13F8497F90381E7FFFD97C1F1380496C13C02601E00313E0
48486C13F000079038007FF84848EB3FFC48C7120F003EEC07FE150148140016FF167F48
153FA2161FA56C151E007C153EA2007E153C003E157C6C15F86DEB01F06C6CEB03E06C6C
EB07C0D803F8EB1F80C6B4EBFF0090383FFFFC010F13F00101138028447CC131>I<14FF
010713E0011F13F890387F80FC9038FC007E48487F4848EB1F804848EB0FC0000FEC07E0
485AED03F0485A16F8007F140190C713FCA25AA216FE1500A516FFA46C5CA36C7E5D121F
7F000F5C6C6C130E150C6C6C131C6C6C5BD8007C5B90383F01E090390FFF80FE903801FE
0090C8FC150116FCA4ED03F8A216F0D80F801307486C14E0486C130F16C0ED1F80A249EB
3F0049137E001EC75A001C495A000F495A3907E01FE06CB51280C649C7FCEB1FF028447C
C131>I<121EEA7F80A2EAFFC0A4EA7F80A2EA1E00C7FCB3A5121EEA7F80A2EAFFC0A4EA
7F80A2EA1E000A2B78AA1B>I<121EEA7F80A2EAFFC0A4EA7F80A2EA1E00C7FCB3A5121E
127FEAFF80A213C0A4127F121E1200A512011380A3120313005A1206120E120C121C5A5A
12600A3E78AA1B>I<007FBAFCBB1280A26C1900CEFCB0007FBAFCBB1280A26C19004118
7BA44C>61 D<16C04B7EA34B7EA34B7EA34B7EA3ED19FEA3ED30FFA203707FED607FA203
E07FEDC03FA2020180ED801FA2DA03007F160FA20206801607A24A6D7EA34A6D7EA34A6D
7EA20270810260147FA202E08191B7FCA249820280C7121FA249C87F170FA20106821707
A2496F7EA3496F7EA3496F7EA201788313F8486C83D80FFF03037FB500E0027FEBFFC0A3
42477DC649>65 D<B8FC17E017FC00019039C00003FF6C6C4801007FEF3FC0717E717E71
7E84170384170184A760A21703601707604D5A4D5AEF7FC04DC7FCEE03FEEE3FF091B65A
17FC0280C7B47EEF1FC0EF0FF0717E717E717E717E1980187F19C0A2183F19E0A8F07FC0
A2198018FF4D1300A24D5AEF0FFC4D5AEF7FE048486C903803FFC0B9C7FC17FC17C03B44
7CC345>I<DB0FFE146092B500C013E0020314F0913A0FFC01FC0191393FC0003E02FFC7
EA0F83D903FCEC03C74948EC01E74948EC00FF4948157F4948153F4948151F49C9120F48
5A491607120348481603A248481601A248481600A2123FA2491760127FA31900485AAE6C
7EA21960A2123F7FA2001F18E07F000F18C0A26C6C160119806C6C160312016DEE07006C
6C16066D6C150E6D6C5D6D6C5D6D6C15786D6C5D6D6C4A5AD900FFEC0780DA3FC0011FC7
FCDA0FFC13FC0203B512F0020014C0DB0FFEC8FC3B487BC546>I<B912F8A3000101C0C7
127F6C6C48EC07FC17011700187C183C181CA284A31806A4180704067FA395C7FCA4160E
A2161E163E16FE91B5FCA3EC8000163E161E160EA21606A319C0A3F0018093C7FCA41803
A21900A260A260A2181EA2183E187EEF01FE170748486C147FB95AA33A447CC342>69
D<B912F0A3000101C0C7127F6C6C48EC0FF817031701170018781838A2181CA3180CA418
0E1806160CA21800A5161CA2163C167CED01FC91B5FCA3EC8001ED007C163C161CA2160C
A793C8FCB08048487EB612F8A337447CC340>I<DB0FFE146092B500C013E0020314F091
3A0FFC01FC0191393FC0003E02FFC7EA0F83D903FCEC03C74948EC01E74948EC00FF4948
157F4948153F4948151F49C9120F485A491607120348481603A248481601A248481600A2
123FA2491760127FA396C7FC485AAD4CB612C06C7EA293C7387FF000725A003F171F7FA2
121F7F120FA26C7EA26C7E6C7EA26C7E6D7E6D6C153F6D7E6D6C157F6D6C15E7D903FEEC
01C7D900FFEC0383DA3FE0EB0F01DA0FFCEBFE000203B500F81360020002E090C7FCDB0F
FEC9FC42487BC54D>I<B6D8C003B6FCA3000101E0C70007138026007F80913801FE00B3
A991B7FCA30280C71201B3AC2601FFE0913807FF80B6D8C003B6FCA340447CC349>I<B6
12F0A3C6EBF0006D5A6D5AB3B3B3A4497E497EB612F0A31C447DC323>I<010FB512FEA3
D9000313806E130080B3B3AB123F487E487EA44A5A13801300006C495A00705C6C13076C
5C6C495A6CEB1F802603E07FC7FC3800FFFCEB1FE027467BC332>I<B612F8A3000101E0
C9FC6C6C5A5CB3B31830A418701860A518E0A3EF01C0A217031707A2170F173F177FEE01
FF48486C011F1380B9FCA334447CC33D>76 D<B56C933807FFFC6E5EA20001F1FE002600
6FE0EE1BF8A3D967F01633A2D963F81663A3D961FC16C3A3D960FEED0183A2027FED0303
A36E6C1406A36E6C140CA26E6C1418A36E6C1430A36E6C1460A26E6C14C0A36E6CEB0180
A3037FEB0300A292383F8006A36F6C5AA36F6C5AA26F6C5AA36F6C5AA36F6C5AA26FB45A
A370C7FC13F0A2486C143ED80FFFEF0FFEB500F0011C0107B512FCA34E447BC359>I<B5
6C020FB5FC8080C6040013F06D6CED1F80D96FF8ED0F00A2D967FC1506EB63FEA2EB61FF
01607FA26E7E6E7EA26E7E6E7EA26E7E6E7EA26E7E6E7FA26F7E6F7EA26F7E6F7EA26F7E
6F7EA26F7E6F1380A2EE7FC0EE3FE0A2EE1FF0EE0FF8A2EE07FCEE03FEA2EE01FF701386
A2EF7FC6EF3FE6A2EF1FF6EF0FFEA217071703A217011700A201F0167E183E487ED80FFF
161EB500F0150EA2180640447CC349>I<ED1FFC4AB512C0913907F007F091391F8000FC
027EC7123FD901F8EC0FC049486E7E49486E7E49486E7E49486E7E49C9127E017E8201FE
834848707E4848707EA24848707EA2000F84491603001F84A24848707EA3007F84A24982
A300FF1980AD6C6C4C1300A4003F606D1603A2001F60A26C6C4C5AA26C6C4C5AA2000360
6D161F6C6C4C5A000060017F4CC7FC6E5D013F5E6D6C4A5AD907E0EC03F06D6C4A5AD901
FCEC1FC0D9007E4AC8FCDA1F8013FC913907F007F00201B512C09126001FFCC9FC41487B
C54C>I<B712FCEEFFC017F800019039C0000FFC6C6C48EB01FF9338007F80EF1FE0170F
EF07F018F8EF03FCA218FE1701A218FFA718FEA2170318FCA2EF07F818F0EF0FE0EF1FC0
EF7F80933801FE00EE0FFC91B612F017800280C9FCB3AA3801FFE0B612C0A338447CC342
>I<B712E016FF17C000019039C0003FF86C6C48EB03FCEE00FF717E717E717E717E717E
A284170384A760A21707604D5AA24D5A4D5A4DC8FCEE01FEEE07F8EE3FE091B6C9FC16FC
913980007F80EE0FE0707EEE03FC707E160083717EA2717EA784A71A6084171FA21AE071
6C13C02601FFE002071301B600C01680943801FC03943900FE0700CBEA3FFEF007F84346
7CC348>82 D<49B41303010FEBE007013F13F89039FE00FE0FD801F8131FD807E0EB079F
49EB03DF48486DB4FC48C8FC4881003E81127E82127C00FC81A282A37E82A27EA26C6C91
C7FC7F7FEA3FF813FE381FFFE06C13FE6CEBFFE06C14FC6C14FF6C15C0013F14F0010F80
010180D9001F7F14019138001FFF03031380816F13C0167F163F161F17E000C0150FA316
07A37EA36C16C0160F7E17806C151F6C16006C5D6D147ED8FBC05CD8F9F0495AD8F07C49
5A90393FC00FE0D8E00FB51280010149C7FC39C0003FF02B487BC536>I<003FB912F8A3
903BF0001FF8001F01806D481303003EC7150048187C0078183CA20070181CA30060180C
A5481806A5C81600B3B3A54B7EED7FFE49B77EA33F447DC346>I<B600C0010FB5FCA300
0101E0C813F026007F80ED1F80F00F00A21806B3B3A7180E6D6C150CA2181C131F6E1518
010F163818306D6C1570606D6C14016D6C5D6D6CEC0780027F4AC7FC6E6C131EDA1FE013
7C913907FC03F00201B55A6E6C1380DB07FCC8FC40467CC349>I<B60107B500F890380F
FFFEA3000301E0D9001F90C813F06C0180DA0FFCED3FC091C86C48ED1F006C871C0E6D6C
6E7E1C0CA26D6C6F5DA36EDA06FF1538011F1A30A26E020E6D1470010FDB0C7F1560A26E
021C7F0107DB183F5DA2856D6CDA301F4A5AA36D6C4A6C6C49C7FCA36D6C4A6C6C1306A3
DB80016E130E027FDA8003140CA2DBC00380023FDA00015CA203E081021F01066D5CA36E
6C486E6C5AA36E6C486E6C5AA36F48EC1FE1020360A2DBFE7015F302010160020F90C8FC
A2DBFFE015FB6E49EC07FEA36F486E5AA36FC86C5AA3031E6F5AA4030C16605F467EC364
>87 D<B66C91380FFFFCA3000101F8C8000313C026007FE0923800FE0061013F17F06D6C
5E80010F5F6D6C4B5A18036D6C93C7FC6E15066D160E6D6D140C181C6E6C14186E6C5C18
706E6C146018E06E6C5C6E6C495A17036E6C91C8FC5F6E6C13066E6D5A171C92387FC018
5FED3FE06F6C5A17E06F6C5AEEF980ED07FF6F90C9FCA26F5AB3A6923807FF800203B6FC
A346447FC349>89 D<EAFFFCA4EAF000B3B3B3B3B3A2EAFFFCA40E6476CA1B>91
D<01C01318000114384848137048C712E0000EEB01C0000C1480001C1303001814000038
5B003013060070130E0060130CA300E0131C481318A400CFEB19E039FFC01FF801E013FC
A3007F130FA2003F130701C013F8390F0001E01E1D71C431>I<EAFFFCA4EA003CB3B3B3
B3B3A2EAFFFCA40E647ECA1B>I<EB07FC90383FFF809038F80FE03903C003F048C66C7E
000E6D7ED80FC0137E486C137F6D6D7EA36F7EA26C5AEA0380C8FCA4EC0FFF49B5FC9038
0FFE1FEB3FC0EBFF00EA03FC485A485A485A485A127F5B176048C7FCA3153FA36D137F00
7F14EF6D9038C7E0C0003F13013A1FE00783F13B07F81E03FF802701FFFC0113003A001F
E0007C2B2E7CAC31>97 D<EA01FC12FFA3120712031201B3EC03FC91380FFF8091383C07
E091387001F89039FDE0007E02807F01FFEC1F8091C713C049EC0FE049140717F0A2EE03
F8A217FCA2160117FEAB17FC1603A217F8A2EE07F0A26DEC0FE017C06D141F01FBEC3F80
D9F380EB7E00D9E1C05B9039E0F001F89039C03C07E09039801FFF80C7D803FCC7FC2F46
7DC436>I<EC7F80903803FFF090380FC07C90383F000F01FCEB03804848EB01C0000314
0F4848EB1FE049133F120F485AA2485AED1FC0007FEC070092C7FCA290C9FC5AAB7E7FA2
123F16307F001F15706C6C146016E06C6C14C06C6C13010001EC03806C6CEB0700013F13
1E90381FC078903807FFF001001380242E7DAC2B>I<167FED3FFFA315018182B3EC7F80
903803FFF090380FC07C90383F000E017E1307496D5AD803F87F48487F5B000F81485AA2
485AA2127FA290C8FC5AAB7E7FA2123FA26C7EA2000F5D7F6C6C5B00035C6C6C9038077F
806C6C010E13C0013F011C13FE90380FC0F8903803FFE09026007F0013002F467DC436>
I<EB01FE903807FFC090381F03F090387E00FC49137E48487F485A4848EB1F80000F15C0
49130F121F484814E01507A2007F15F090C7FCA25AA390B6FCA290C9FCA67EA27FA2123F
16306C7E1670000F15606D14E06C6C14C0000314016C6CEB03806C6CEB0700013E131E90
381F80F8903803FFE0010090C7FC242E7DAC2B>I<EC0FE0EC7FF8903801F81E903803F0
3F90390FE07F8090381FC0FF5C133F495AA2ED7F0001FE131C92C7FCAFB67EA3C648C8FC
B3B2486C7E007F13FFA321467EC51E>I<EE0F80D901FCEB7FE0903A0FFF81F0F090393F
07E3819039FC01FF033A01F800FE014848017E13E00007027FC7FC497F000F8149131F00
1F81A9000F5D6D133F000792C7FC6D5B0003147E6C6C5B6D485A3903BF07E090380FFF80
260701FCC8FC90CAFCA25AA37F6C7E7F90B512F86C14FF16E06C15F86C6C8048B67E3A07
C0000FFF48481300003FC8EA3F80003E151F48ED0FC0A2481507A56C150F007C1680007E
151F003E16006C153E6C6C5CD807E0495AD801F8EB07E0D8007FEB3F8090261FFFFEC7FC
010113E02C427DAC31>I<EA01FC12FFA3120712031201B3EC01FE913807FFC091381E07
F091383801F802707FECE000D9FDC07F5C01FF147F91C7FCA25BA35BB3A8486CECFF80B5
D8F83F13FEA32F457DC436>I<EA01E0EA07F8A2487EA46C5AA2EA01E0C8FCADEA01FC12
FFA3120712031201B3B0487EB512F8A315437DC21C>I<143C14FFA2491380A46D1300A2
143C91C7FCADEC7F80EB3FFFA31300147F143FB3B3AA123E127F39FF807F00A2147EA25C
6C485A383C01F06C485A3807FF80D801FEC7FC195785C21E>I<EA01FC12FFA312071203
1201B3A292381FFFE0A36F1300ED07F816E05E5E030EC7FC5D5D5D5D4A5A4A5A4AC8FC5C
EC3F804A7E14FF9038FDCFE09038FF8FF01407496C7E01FC7F14016E7E81816F7E82151F
6F7E821507826F7E8282486C491380B5D8F81F13F8A32D457DC433>I<EA01FC12FFA312
0712031201B3B3B3A5487EB512F8A315457DC41C>I<D801FC01FFEC1FE000FF010701E0
EBFFFC913B0F03F801E07F913C3C01FC07803F800007903C7000FE0E001FC0000349D97E
1C130F2601FDC0D97F38804A143001FFDA3FF06D7E91C75BA2495DA3495DB3A8486C4A6C
497EB5D8F81FB50003B512E0A34B2C7DAB52>I<3901FC01FE00FF903807FFC091381E07
F091383801F8000701707F0003EBE0002601FDC07F5C01FF147F91C7FCA25BA35BB3A848
6CECFF80B5D8F83F13FEA32F2C7DAB36>I<EC7F80903803FFF090380FC0FC90383E001F
496D7E496D7E48486D7E48486D7E48486D7E000F81A24848147E003F157FA290C87E4816
80A44816C0AA6C1680A26D147F003F1600A2001F157E6D14FE000F5D6D130100075D6C6C
495A6C6C495A6C6C495A013E49C7FC90381FC0FE903807FFF89038007F802A2E7DAC31>
I<3901FC03FC00FF90380FFF8091383C07E091387001F83A07FDE000FE00030180137FD8
01FFEC3F8091C7EA1FC04915E049140F17F0160717F8160317FCA3EE01FEABEE03FCA3EE
07F8A217F0160F6D15E0EE1FC06D143F17806EEB7E00D9FDC05B9039FCF003F891383C0F
E091381FFF80DA03FCC7FC91C9FCAE487EB512F8A32F3F7DAB36>I<91387F8003903903
FFE00790380FE07890393F801C0F90387E000E496D5AD803F8EB039F0007EC01BF4914FF
48487F121F5B003F81A2485AA348C8FCAB6C7EA3123F7F121F6D5C120F6D5B12076C6C5B
6C6C497E6C6C130E013F131C90380FC0F8903803FFE09038007F0091C7FCAEEEFF80033F
13FEA32F3F7DAB33>I<3903F803F000FFEB1FFCEC3C3EEC707F0007EBE0FF3803F9C000
015B13FBEC007E153C01FF13005BA45BB3A748B4FCB512FEA3202C7DAB26>I<90383FE0
183901FFFC383907E01F78390F0003F8001E1301481300007C1478127800F81438A21518
A27EA27E6C6C13006C7E13FC383FFFE06C13FC6C13FF6C14C06C14E0C614F0011F13F813
00EC0FFC140300C0EB01FE1400157E7E153EA27EA36C143C6C147C15786C14F86CEB01F0
39F38003E039F1F00F8039E07FFE0038C00FF01F2E7DAC26>I<1306A5130EA4131EA313
3E137EA213FE12011207001FB512F0B6FCA2C648C7FCB3A4150CAA017E131C017F1318A2
6D133890381F8030ECC070903807E0E0903801FFC09038007F001E3E7EBC26>I<D801FC
147F00FFEC3FFFA300071401000380000181B3A85EA35DA212006D5B017E9038077F8001
7F010E13C06D011C13FE90380FC078903803FFF09026007F8013002F2D7DAB36>I<B539
F001FFFCA3000790C7EA7FE06C48EC1F8000011600160E1200160C017F5CA280013F5CA2
6E1370011F146080010F5CA2ECF00101075CA26D6C48C7FCA26E5A01011306A26D6C5AA2
14FF6E5AA215B8EC3FB015F06E5AA36E5AA26E5AA36EC8FC2E2C7EAA33>I<B500E0B539
E03FFF80A30007903C000FFE000FFC00D803FCD903F8EB03F8F001E0120103015D6D8000
0060A26D6E13036DD9037E91C7FCA20280017F5B013FD9063F1306A2D91FC06E5AED0C1F
A2D90FE06E5AED180FA2D907F06E5AED3007A2D903F86E5AED6003A2902601FCE06D5AED
C00117FCD900FFECFD80ED800017FF027F92C8FC92C77EA26E147E023E143EA2021E143C
021C141CA2412C7EAA46>I<B539F007FFFCA30003D9C00113C0C6496C1300017F14FC01
3F5C6E13E06D7E010F495A6D6C485A02F890C7FC903803FC060101130E6E5A903800FF18
6E5AEC3FF05D141F140F6E7E81140FEC0DFCEC19FEEC38FF4A7E9138603F8002C07F0101
131F49486C7E02007F01066D7E010E1303496D7E013C80017C80D801FC1580D80FFE4913
C0B5D8800F13FFA3302B7FAA33>I<B539F001FFFCA3000790C7EA7FE06C48EC1F800001
1600160E0000150C6D141C6D1418A26E1338013F1430A26D6C5BA26E13E0010F5CA26D6C
485AA2ECF803010391C7FCA2903801FC06A2ECFE0E0100130CA2EC7F18A215B8EC3FB0A2
EC1FE0A36E5AA26E5AA36EC8FCA21406A35CA25CA2123C007E5BB4FC5CA25CEAFE01387C
0380D87007C9FCEA3C1EEA0FFCEA03F02E3F7EAA33>I<003FB612E0A29038C0003F90C7
13C0003CEC7F800038ECFF00A20030495A0070495AA24A5A0060495AA24A5A4A5AA2C748
5A4AC7FC5B5C495A13075C495A131F4A1360495A495AA249C712C0485AA2485A485A1501
485A48481303A24848EB07804848131F00FF14FF90B6FCA2232B7DAA2B>I
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fl cmbx12 12 37
/Fl 37 122 df<EA07C0EA1FF0487E487E487E7FA31480A37E7EEA1FF7EA07C7EA000713
0FA21400A25B131E133EA25B13FC5B485A485A1207485A485A90C7FC120C112278C41F>
39 D<EE01C0EE03E01607A2160F17C0161F1780A2163F17005E167EA216FE5E15015EA2
15035EA215075E150F5EA2151F5E153F93C7FCA25D157E15FE5DA214015D14035DA21407
5D140F5DA2141F5D143F92C8FCA25C147EA214FE5C13015CA213035C13075CA2130F5C13
1F5CA2133F91C9FC5B137EA213FE5B12015BA212035BA212075B120F5BA2121F5B123F90
CAFCA25A127E12FE5AA25A12782B647ACA38>47 D<EC03C01407141F147FEB03FF133FB6
FCA413C3EA0003B3B3ADB712FCA5264177C038>49 D<ECFFE0010F13FE013F6D7E90B612
E0000315F82607FC0313FE3A0FE0007FFFD81F806D138048C7000F13C0488001C015E001
F07F00FF6E13F07F17F881A46C5A6C5A6C5AC9FC17F05DA217E05D17C04B13804B1300A2
ED1FFC4B5A5E4B5A4B5A4A90C7FC4A5A4A5AEC0FF04A5AEC3F804AC7127814FE495A4948
14F8D907E014F0495A495A49C8FC017C140149140348B7FC4816E05A5A5A5A5AB8FC17C0
A42D417BC038>I<ECFFF0010713FF011F14C0017F14F049C66C7ED803F8EB3FFED807E0
6D7E81D80FF86D138013FE001F16C07FA66C5A6C4815806C485BC814005D5E4B5A4B5A4B
5A4A5B020F1380902607FFFEC7FC15F815FF16C090C713F0ED3FFCED0FFEEEFF80816F13
C017E0A26F13F0A217F8A3EA0FC0EA3FF0487EA2487EA217F0A25D17E06C5A494913C05B
D83F80491380D81FF0491300D80FFEEBFFFE6CB612F800015D6C6C14C0011F49C7FC0101
13E02D427BC038>I<163FA25E5E5D5DA25D5D5D5DA25D92B5FCEC01F7EC03E7140715C7
EC0F87EC1F07143E147E147C14F8EB01F0EB03E0130714C0EB0F80EB1F00133E5BA25B48
5A485A485A120F5B48C7FC123E5A12FCB91280A5C8000F90C7FCAC027FB61280A531417D
C038>I<EE1F80A24C7EA24C7EA34C7EA24B7FA34B7FA24B7FA34B7F169F031F80161F82
033F80ED3E07037E80157C8203FC804B7E02018115F0820203814B137F0207815D173F02
0F814B7F021F8292C77EA24A82023E80027E82027FB7FCA291B87EA2498302F0C8FCA201
03834A157F0107834A153FA249488284011F8491C97E4984133E017E82B6020FB612F0A5
4C457CC455>65 D<BA12F8A485D8001F90C71201EF003F180F180318011800A2197E193E
A3191EA21778A285A405F890C7FCA316011603161F92B5FCA5ED001F160316011600A2F1
01E01778A2F103C0A494C7FC1907A21A80A2190FA2191FA2193FF17F0061601807181F4D
B5FCBBFC61A443447DC34A>69 D<B712E0A5D8001F90C7FCB3B3B3A4B712E0A523447DC3
2A>73 D<923807FFC092B512FE0207ECFFC0021F15F091267FFE0013FC902601FFF0EB1F
FF01070180010313C04990C76C7FD91FFC6E6C7E49486F7E49486F7E01FF8348496F7E48
496F1380A248496F13C0A24890C96C13E0A24819F04982003F19F8A3007F19FC49177FA4
00FF19FEAD007F19FC6D17FFA3003F19F8A26D5E6C19F0A26E5D6C19E0A26C6D4B13C06C
19806E5D6C6D4B13006C6D4B5A6D6C4B5A6D6C4B5A6D6C4A5B6D01C001075B6D01F0011F
5B010101FE90B5C7FC6D90B65A023F15F8020715C002004AC8FC030713C047467AC454>
79 D<B812F8EFFFC018F818FE727ED8001F90C7003F13E005037F05007F727E727E727E
A28684A286A762A24E90C7FCA24E5A61187F943801FFF005075B053F138092B7C8FC18F8
18E018F892C77FEF3FFF050F7F717F717FA2717FA2717FA785A61B0F85A2187F73131F72
141EB700E06DEB803E72EBE0FC72EBFFF8060114F0726C13E0CC0007138050457DC354>
82 D<003FBA12E0A59026FE000FEB8003D87FE09338003FF049171F90C71607A2007E18
03007C1801A300781800A400F819F8481978A5C81700B3B3A20107B8FCA545437CC24E>
84 D<B792B6FCA526003FFECAEAFC00806D606F15016D608119036D606F15076D606F15
0F6D6081191F6D6D93C7FC61027F163E6F157E023F167C8119FC6E6D5C18016E5E701303
6E5E8218076E6D5C180F6E5E70131F6E93C8FC705B037F143E82187E033F147C7013FC6F
5C17816F5C17C117C36F5C17E76F5C17FF6F5CA36F91C9FCA2705AA2705AA3705AA2705A
A2705AA250457EC355>86 D<B76C027FB5FCA5D8003F0180C9EAFC006D6D4B5AA26D6D4B
5A6D6D4B5A816D4D5A6D6D4B5A816D4DC7FC6E6C157E826E5E6E6D495A826E4B5A6E6D49
5A6E7F4E5A6E6D495A6E7F4EC8FC6F6C137E6F1380606FEBC1F86F13E1EFF3F06FEBF7E0
6F13FF606F5C8195C9FC705A163FB3A592B77EA550447EC355>89
D<903801FFE0011F13FE017F6D7E48B612E03A03FE007FF84848EB1FFC6D6D7E486C6D7E
A26F7FA36F7F6C5A6C5AEA00F090C7FCA40203B5FC91B6FC1307013F13F19038FFFC0100
0313E0000F1380381FFE00485A5B127F5B12FF5BA35DA26D5B6C6C5B4B13F0D83FFE013E
EBFFC03A1FFF80FC7F0007EBFFF86CECE01FC66CEB8007D90FFCC9FC322F7DAD36>97
D<EB7FC0B5FCA512037EB1ED0FF892B57E02C314E002CF14F89139DFC03FFC9139FF000F
FE02FCEB03FF4A6D13804A15C04A6D13E05CEF7FF0A218F8173FA318FCAC18F8A2177F18
F0A3EFFFE06E15C06E5B6E491380027C491300496C495A903AFC1FC07FFC496CB512F0D9
F00314C049C691C7FCC8EA1FF036467DC43E>I<EC3FFC49B512C0010F14F0013F14FC90
397FF003FE9039FFC001FF0003495A48494813805B120F485AA2485A6F1300007F6E5AED
00784991C7FCA212FFAC6C7EA3123F6DEC03C0A26C6C1407000F16806D140F6C6DEB1F00
6C6D133E6C01F05B3A007FFC03F86DB55A010F14C0010391C7FC9038003FF82A2F7CAD32
>I<EE03FEED07FFA5ED001F160FB1EC3FE0903803FFFC010FEBFF8F013F14CF9039FFF8
07FF48EBC00148903880007F4890C7123F4848141F49140F121F485AA3127F5BA212FFAC
127FA37F123FA26C6C141FA26C6C143F0007157F6C6C91B5FC6CD9C00314FC6C9038F01F
EF6DB5128F011FEBFE0F010713F89026007FC0EBF80036467CC43E>I<EC3FF80103B57E
010F14E0013F8090397FF83FF89039FFC007FC48496C7E48496C7E48486D1380485A001F
ED7FC05B003FED3FE0A2127F5B17F0161F12FFA290B7FCA401F0C9FCA5127FA27FA2123F
17F06C7E16016C6C15E06C6C14036C6DEB07C06C6DEB0F806C01F0EB3F0090397FFE01FE
011FB55A010714F0010114C09026001FFEC7FC2C2F7DAD33>I<EDFF80020F13E0027F13
F049B512F849EB8FFC90390FFE0FFE90381FFC1F14F8133FEB7FF0A2ED0FFCEBFFE0ED03
F0ED00C01600ABB612F8A5C601E0C7FCB3B0007FEBFFE0A527467DC522>I<DAFFE0137E
010F9039FE03FF80013FEBFF8F90B812C048D9C07F133F489038001FF84848EB0FFC4848
903907FE1F80001F9238FF0F00496D90C7FCA2003F82A8001F93C7FCA26D5B000F5D6C6C
495A6C6C495A6C9038C07FF04890B55A1680D8078F49C8FC018013E0000F90CAFCA47F7F
7F90B612C016FC6CEDFF8017E06C826C16FC7E000382000F82D81FF0C77ED83FC0140748
48020113808248C9FC177FA46D15FF007F17006D5C6C6C4A5A6C6C4A5AD80FFEEC3FF83B
07FFC001FFF0000190B612C06C6C92C7FC010F14F8D9007F90C8FC32427DAC38>I<EB7F
C0B5FCA512037EB1ED07FE92383FFF8092B512E002C114F89139C7F03FFC9138CF801F91
39DF000FFE14DE14FC4A6D7E5CA25CA35CB3A7B60083B512FEA537457CC43E>I<137C48
B4FC4813804813C0A24813E0A56C13C0A26C13806C1300EA007C90C7FCAAEB7FC0EA7FFF
A512037EB3AFB6FCA518467CC520>I<EB7FC0B5FCA512037EB293387FFFE0A593380FE0
004C5A4CC7FC167E5EED03F8ED07E04B5A4B5A037FC8FC15FEECC1FCECC3FE14C7ECDFFF
91B57E82A202F97F02E17F02C07FEC807F6F7E826F7E816F7F836F7F816F7F83707E163F
B60003B512F8A535457DC43B>107 D<EB7FC0B5FCA512037EB3B3B3A3B61280A519457C
C420>I<90277F8007FEEC0FFCB590263FFFC090387FFF8092B5D8F001B512E002816E48
80913D87F01FFC0FE03FF8913D8FC00FFE1F801FFC0003D99F009026FF3E007F6C019E6D
013C130F02BC5D02F86D496D7EA24A5D4A5DA34A5DB3A7B60081B60003B512FEA5572D7C
AC5E>I<90397F8007FEB590383FFF8092B512E0028114F8913987F03FFC91388F801F00
0390399F000FFE6C139E14BC02F86D7E5CA25CA35CB3A7B60083B512FEA5372D7CAC3E>
I<EC1FFC49B512C0010714F0011F14FC90397FF80FFF9026FFC0017F48496C7F4848C7EA
3FE000078248486E7E49140F001F82A2003F82491407007F82A400FF1780AA007F1700A4
6C6C4A5AA2001F5E6D141F000F5E6C6C4A5AA26C6C6CEBFFE06C6D485B27007FF80F90C7
FC6DB55A010F14F8010114C09026001FFCC8FC312F7DAD38>I<90397FC00FF8B590B57E
02C314E002CF14F89139DFC03FFC9139FF001FFE000301FCEB07FF6C496D13804A15C04A
6D13E05C7013F0A2EF7FF8A4EF3FFCACEF7FF8A318F017FFA24C13E06E15C06E5B6E4913
806E4913006E495A9139DFC07FFC02CFB512F002C314C002C091C7FCED1FF092C9FCADB6
7EA536407DAC3E>I<90387F807FB53881FFE0028313F0028F13F8ED8FFC91389F1FFE00
0313BE6C13BC14F8A214F0ED0FFC9138E007F8ED01E092C7FCA35CB3A5B612E0A5272D7D
AC2E>114 D<90391FFC038090B51287000314FF120F381FF003383FC00049133F48C712
1F127E00FE140FA215077EA27F01E090C7FC13FE387FFFF014FF6C14C015F06C14FC6C80
0003806C15806C7E010F14C0EB003F020313E0140000F0143FA26C141F150FA27EA26C15
C06C141FA26DEB3F8001E0EB7F009038F803FE90B55A00FC5CD8F03F13E026E007FEC7FC
232F7CAD2C>I<EB01E0A51303A41307A2130FA2131FA2133F137F13FF1203000F90B512
80B7FCA4C601E0C7FCB3A3ED01E0A9150302F013C0137F150790393FF80F8090391FFC1F
006DB5FC6D13FC01015B9038003FE023407EBE2C>I<D97FC049B4FCB50103B5FCA50003
EC000F6C81B3A85EA25EA25E7E6E491380017FD901F713FE9138F807E76DB512C7010F14
07010313FE9026007FF0EBFC00372E7CAC3E>I<B6903803FFFCA5000101E09038003E00
6C163C80017F5D8017F8013F5D6E1301011F5D6E1303010F5D6E13076D5DED800F6D92C7
FC15C05E6DEBE01E163E6D143CEDF07C027F1378EDF8F8023F5B15FD021F5B15FF6E5BA3
6E5BA26E90C8FCA26E5AA26E5AA21578362C7EAB3B>I<B5D8FE1FB539801FFFF0A50001
9027C0003FE0C7EA7C007114786E17F86C6F6C5C6E1601017F6E6C5CA26E011F1403013F
6F5C6E013F1407011F6F5CA26E0179140F010F048090C7FC6E01F95C6D02F0EBC01E1580
6D902681E07F5B18E003C3157C6D9139C03FF07815E76DDA801F5B18F803FF14F96E9039
000FFDE018FF6E486D5BA36E486D5BA26E486D90C8FCA24B7F02075DA26E48147C4B143C
4C2C7EAB51>I<B500FE90383FFFF0A5C601F0903803E0006D6C495A013F4A5A6D6C49C7
FC6E5B6D6C137E6DEB807C6D6D5A6DEBC1F0EDE3E06DEBF7C06EB45A806E90C8FC5D6E7E
6E7F6E7FA24A7F4A7F8291381F3FFCEC3E1F027C7F4A6C7E49486C7F01036D7F49487E02
C08049486C7F49C76C7E013E6E7E017E141FB500E090B512FCA5362C7EAB3B>I<B69038
03FFFCA5000101E09038003E006C163C80017F5D8017F8013F5D6E1301011F5D6E130301
0F5D6E13076D5DED800F6D92C7FC15C05E6DEBE01E163E6D143CEDF07C027F1378EDF8F8
023F5B15FD021F5B15FF6E5BA36E5BA26E90C8FCA26E5AA26E5AA21578A215F85D14015D
001F1303D83F805B387FC007D8FFE05B140F92C9FC5C143E495A387FC1F8EB07F06CB45A
6C5B000790CAFCEA01FC36407EAB3B>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fm cmti12 12 40
/Fm 40 122 df<13F0EA03F8EA07FC120FA6EA03CCEA001C1318A213381330A2137013E0
13C0120113801203EA0700120E5A5A5A5A5A0E1D6BC41E>39 D<13F0EA03FC1207A2EA0F
FEA4EA07FCEA03CCEA000C131C1318A2133813301370136013E0EA01C013801203EA0700
120E5A5A5A5A5A0F1D7A891E>44 D<007FB5FCB6FCA214FEA21805789723>I<120FEA3F
C0127FA212FFA31380EA7F00123C0A0A76891E>I<F001C018031807A2F00F80A2F01F00
A2183E187E187C60A24D5AA24D5AA24D5A170F604DC7FCA2173EA25F17FC5F4C5AA24C5A
A24C5AA24C5A161F94C8FC163EA25EA25E15015E4B5AA24B5AA24B5AA24BC9FC5D153E5D
A25DA24A5A14035D4A5AA24A5AA24ACAFCA2143E147E147C5CA2495AA2495A13075C495A
A249CBFCA2133EA25B13FC5B485AA2485AA2485A120F5B48CCFCA2123EA25AA25AA21270
3A647FCA32>I<ED3F80913801FFE0913807C0F891381F007C023C7F4A131E4A131F4948
7F01031580495A5C130F49C713C0A25B137EA213FE5B161F12014915801203A249143F12
07A2170048485CA4484814FEA44848495AA448C7485AA35E1507127E5E00FE140F5EA248
141F5EA24BC7FC153E157E007C147C15FC5D4A5A003C495A003E5C4A5A6C011FC8FC380F
803E3807C0F83801FFE06C6CC9FC2A4475C132>I<ED3FC0913801FFF0913807C07C4AC6
7E021CEB1F800278130F4AEB07C0494814E04A1303494814F0130749C7FCEB0E06D91E07
14F8EB1C03133C1338137813704A1307D9F00614F013E0140E020C130F0001011C14E0EB
C0180238131F4A14C06C6C48EB3F80D9E1C0137FD97F801400013EC712FE90C7485A4B5A
4B5A4B5AED1F804BC7FC15FC4A5AEC03E0EC0FC0023FC8FC147CEB01F0495AEB0780011F
C9FC133E49EC03805B49140748481500485A48485C90C8121E5A001E5D001C157CD83FFC
5C9038FFC0013A7C0FFC07F0D87803B55AEA700126F0007F5B486D90C7FCEC0FFEEC03F8
2D4478C132>50 D<ED03FCED1FFF037F13C0913801FE07913903F001E091380FE0009138
1F800391383F000F027E131F5C495A495A010715C04948EB07004A90C7FC131F495AA249
C9FCA213FE1201A2485AEC07F09038F83FFC0007EB781F9039F9E00F803A0FFB8007C0EB
F70001FE80491303001F815B5B82485AA3491307127F5BA2150F5E90C7FCA2151F485DA2
5A4B5AA2007E5D157F93C7FC5D5D4A5A003E495A003F5C4A5A6C6C485A000FEB3F80D9C0
FEC8FC3803FFFC6C13F038007F802B4475C132>54 D<EF03801707A24D7EA2171FA2173F
177FA217FFA25EA2EE03BF1607173F160F160E161C841638171F167016F016E0ED01C0A2
ED0380A2ED0700A2150E151E151C5D845D170F5D14015D14035D4AC7FC92B6FC5CA2021C
C7120F143C14385CA24A81A249481407A2495A130791C8FC130E131EA25B137C13FC0001
4C7ED807FE151FB500E00107B512F8A219F03D477BC648>65 D<DC0FF8130393B5130703
07ECC00F923A1FF803E01F923A7FC000F81E4BC7EA7C3EDA03FCEC3C7EDA0FF0EC1EFE4A
48EC0FFC4A4814074AC8FC02FE1503494816F8130349481501495A494816F0495A137F5C
01FF17E04890C9FCA2485A19C0485AA2485A95C7FC121F5BA2123F5BA3127F5BA4485AA4
1838A218781870A218F0007F5F1701601703003F5F17076D4BC7FC001F160E171E6C6C5D
6D5D00075E6C6C4A5A6DEC07C06C6C4A5AD8007F023EC8FCD93FC013FC90391FF807F001
07B512C0010191C9FC9038001FF0404872C546>67 D<91B91280A3020190268000071300
6E90C8FC4A163FA24B81A30203160E5DA314074B151E191CA2140F5D17075F021F020E90
C7FC5DA2171E023F141C4B133CA2177C027F5CED800392B5FCA291B65AED00071601A249
6E5A5CA2160101035D5CA2160301075D4A90CAFCA3130F5CA3131F5CA3133F5CA2137FA3
13FFB612E0A341447AC340>70 D<DC0FF81306DCFFFE130E03079038FF801E923A1FF807
E03E923A7F8001F03CDA01FEC7EA787CDA03F8EC3CFCDA0FF0141D4A48EC1FF8DA3F8014
0F4AC8FCD901FE1507494816F05C01071603495A494816E0495A137F5C01FF17C04890C9
FC5B12031980485AA2485A95C7FC121F5BA2123F5BA3127F5BA4485A043FB512E0A39339
001FF80060A360A2007F163F60A3177F003F5F7F121F17FF6D93C7FC000F5D6C6C5C7F6C
6C4A5A6C6CEC1F3E6C6C143ED93FC0EBF81E903A1FF007F01C0107B5EAC00C010149C9FC
9038003FF03F4872C54B>I<91B6D8803FB512E0A302010180C7387FE0006E90C86C5A4A
167FA24B5EA219FF14034B93C7FCA26014074B5DA21803140F4B5DA21807141F4B5DA218
0F143F4B5DA2181F147F92B75AA3DAFF80C7123F92C85BA2187F5B4A5EA218FF13034A93
C8FCA25F13074A5DA21703130F4A5DA21707131F4A5DA2170F133F4A5DA2017F151FA24A
5D496C4A7EB6D8803FB512E0A34B447AC348>I<027FB512E091B6FCA20200EBE000ED7F
8015FFA293C7FCA35C5DA314035DA314075DA3140F5DA3141F5DA3143F5DA3147F5DA314
FF92C8FCA35B5CA313035CA313075CA3130F5CA3131F5CA2133FA25CEBFFE0B612E0A25D
2B447BC326>I<031FB512F05DA29239000FFC005FA35FA2161FA25FA2163FA25FA2167F
A25FA216FFA294C7FCA25DA25EA21503A25EA21507A25EA2150FA25EA2151FA25EA2153F
A25EA2157FA25EEA0F80D83FE013FF93C8FC127FA24A5AEAFFC04A5A1300007C495A0070
495A4A5A6C5C003C495A6C01FEC9FC380F81F83803FFE0C690CAFC344679C333>I<91B7
12F018FEF0FF800201903980007FE06E90C7EA1FF04AED07F818034B15FCF001FE1403A2
4B15FFA21407A25DA2140FF003FE5DA2021F16FC18074B15F8180F023F16F0F01FE04B15
C0F03F80027FED7F0018FE4BEB03FCEF0FF002FFEC7FC092B6C7FC17F892CAFC5BA25CA2
1303A25CA21307A25CA2130FA25CA2131FA25CA2133FA25CA2137FA25C497EB67EA34044
7AC342>80 D<48B912F85AA2913B0007FC001FF0D807F84A130701E0010F140349160148
485C90C71500A2001E021F15E05E121C123C0038143F4C1301007818C0127000F0147F48
5DA3C800FF91C7FC93C9FCA35C5DA314035DA314075DA3140F5DA3141F5DA3143F5DA314
7F5DA314FF92CAFCA35B5CA21303A21307497E007FB612C0A25E3D446FC346>84
D<EC1F80EC7FE0903901F07070903907C039F890380F801D90381F001F013E6D5A137E5B
484813075E485A120749130F000F5DA2485A151F003F5D5BA2153F007F92C7FC90C7FCA2
5D157E12FEA29238FE0380EDFC071700A2007E13015E913803F80E1407003E010F131E16
1C6C131C02385B3A0F80F078783A07C3E07C703A01FF801FE03A007E000780292D76AB32
>97 D<EB0FE0EA07FFA338001FC0130F131FA25CA3133F91C8FCA35B137EA313FE5BA312
015BEC1F80EC7FE03903F9E0F89038F3C07C9038F7003E13FE48487F5BA2491480485AA2
5BA2121F5BA2153F123F90C7FCA2157F481500127EA25D5D5AA24A5AA24A5AA2007C5C4A
5A140F5D4A5A003C49C7FC003E137E001E5B6C485A380783E03803FF80C648C8FC214676
C42D>I<EC0FE0EC7FF8903801F81E903807E00F90390F80078090381F0003017E14C049
131F0001143F5B4848EB7F801207485AED3E00484890C7FCA2485AA2127F90C9FCA35A5A
A45AA5ED0180ED03C0ED0780A2007CEC0F00007E141E003E147C15F06CEB03E0390F800F
802607C07EC7FC3801FFF838007FC0222D75AB2D>I<EE07F0ED03FFA39238000FE01607
160FA217C0A2161FA21780A2163FA21700A25EA2167EA216FEA25EEC1F80EC7FE1903801
F071903907C039F890380F801D90381F001F013E130F017E5C5B48481307A248485C1207
49130F120F5E485A151F123F495CA2153F127F90C790C7FCA25DA200FE147EA29238FE03
80160703FC1300A2007E13015E913803F80E1407003E010F131E161C6C131C02385B3A0F
80F078783A07C3E07C703A01FF801FE03A007E0007802C4676C432>I<EC0FE0EC7FF890
3801F83E903807C00F90391F800780EB3F00017E14C0491303485A48481307000715805B
000F140F484814005D4848133E15FCEC07F0007FEBFFC0D9FFFEC7FC14C090C9FC5A5AA5
5AA4ED0180ED03C0007CEC0780A2007EEC0F00003E141E157C6C14F06CEB03E03907800F
802603C07EC7FC3801FFF838003FC0222D75AB2D>I<EE0F80EE3FE0EEF870923801F038
923803E0F8923807E1FC16C3ED0FC7A2EE87F892381F83F0EE81E0EE8000153F93C7FCA4
5D157EA415FE5DA349B512FEA390260001F8C7FCA314035DA414075DA4140F5DA4141F5D
A4143F92C8FCA55C147EA314FE5CA413015CA4495AA35C1307121C007F5B12FF495AA291
C9FC485AEAF81E485AEA7878EA1FF0EA07C02E5A83C51E>I<15FCEC03FF91390F838380
91393E01CFC091387C00EF4A13FF4948137F010315804948133F495A131F4A1400133F91
C75A5B167E13FE16FE1201495CA215011203495CA21503A2495CA21507A25EA2150F151F
5E0001143F157F6C6C13FF913801DF8090387C039F90383E0F3FEB0FFCD903F090C7FC90
C7FC5DA2157EA215FEA25DA2001C495A127F48495A14074A5A485C023FC8FC00F8137E38
7C01F8381FFFE0000390C9FC2A407BAB2D>I<14FE137FA3EB01FC13001301A25CA21303
A25CA21307A25CA2130FA25CA2131FA25C157F90393F83FFC091388F81F091381E00F802
387F4948137C5C4A137EA2495A91C7FCA25B484814FE5E5BA2000314015E5BA200071403
5E5B1507000F5DA249130F5E001F1678031F1370491480A2003F023F13F0EE00E090C7FC
160148023E13C01603007E1680EE070000FEEC1E0FED1F1E48EC0FF80038EC03E02D467A
C432>I<143C147E14FE1301A3EB00FC14701400AE137C48B4FC3803C780380703C0000F
13E0120E121C13071238A21278EA700F14C0131F00F0138012E0EA003F1400A25B137EA2
13FE5B12015BA212035B141E0007131C13E0A2000F133CEBC038A21478EB807014F014E0
EB81C0EA0783EBC7803803FE00EA00F8174378C11E>I<EB03F8EA01FFA3380007F01303
1307A214E0A2130FA214C0A2131FA21480A2133FA21400A25BA2137EA213FEA25BA21201
A25BA21203A25BA21207A25BA2120FA25BA2121FA25BA2123FA290C7FCA2387F01C01303
007E1380A2130700FE130012FCA25B130EEA7C1E131CEA3C3CEA3E786C5AEA07C0154678
C419>108 D<D801F0D90FE0EB07F0D803FCD97FF8EB3FFC28071E01F03EEBF81F3E0E1F
03C01F01E00F80271E0F8700D983807F001C018E90390F870007003C019C148E003801B8
02DC8002F814FC26781FF05C0070495CA24A5C00F0494948130FD8E03F6091C75B120004
3F141F4960017E92C7FCA24C143F01FE95C7FC49147E6104FE147E1201494A14FE610301
EE0780000305011400494A14F8A2030302035B0007F0F00E495C1A1E0307EDE01C000F19
3C494A153862030F020113F0001FF0F1E0494A903800FF800007C7D80380023EC7FC492D
78AB50>I<D801F0EB0FE0D803FCEB7FF83A071E01F03E3A0E0F03C01F001ED987001380
001C018E130F003C139C003801B814C014F838781FF000705BA25C00F049131FD8E03F15
8091C7FC1200163F491500137EA25E01FE147E5B16FE5E12014913015E170F0003020313
0E4914F0A20307131E0007EDE01C5B173CEEC038000F167849157017E0ED03C1001FEDE3
C049903801FF000007C8127C302D78AB37>I<EC0FE0EC7FFC903801F83E903907E00F80
90390F8007C0EB1F00017EEB03E04914F0A248481301484814F81207485AA2485AA2485A
1503127F90C7FCA215074815F05AA2150F16E05AED1FC0A21680153F16005D157E5D007C
495A007E495A003E5C4A5A6CEB1F80260F803EC7FC3807C0FC3801FFF038003F80252D75
AB32>I<D903E0137E903A07F801FF80903A0E3C0783E0903A1C1E0F01F0903A3C1F1C00
F801385B017849137C01705BA24A48137E01E05BA292C7FC00015B13C0147EC7FC02FE14
FEA25CA20101140117FC5CA20103140317F85CA20107EC07F0A24AEB0FE0A2010F15C0EE
1F80163F1700496C137E5E4B5A9138B803F090393F9C07E091389E0F80DA07FEC7FCEC01
F849C9FCA2137EA213FEA25BA21201A25BA21203A21207B512F0A25C2F3F7FAB32>I<91
381F800C91387FE01C903901F0703C903907C0387890390F801CF890381F001D013E130F
017E14F05B48481307A2484814E012075B000F140F16C0485AA2003F141F491480A3007F
143F90C71300A35D00FE147EA315FE5DA2007E1301A24A5A1407003E130FA26C495A143B
380F80F33807C3E73901FF87E038007E071300140F5DA3141F5DA3143F92C7FCA25CA25C
017F13FEA25D263F76AB2D>I<D801F0EB3F803A03FC01FFF03A071E03C0F83A0E0F0F00
7C001E90389E01FC001C139CECB803003813F0A2D91FE013F80078EC00E00070491300A2
00F05BEAE03F91C8FC1200A25B137EA313FE5BA312015BA312035BA312075BA3120F5BA3
121F5B0007C9FC262D78AB29>I<EC0FE0EC7FF8903801F01E903803C00F903907800780
90380F0003011E14C0150749131FA2017CEB3F801378137CED0E0092C7FC137E137F14F0
14FF6D13C06D13F06D7F6D7F1300EC0FFE14011400157F81120E003F141E487EA2153E48
C7123CA200FC5C12705D0078495A6C495A6CEB0F80260F803EC7FC3803FFF838007FC022
2D7AAB28>I<1470EB01F8A313035CA313075CA3130F5CA3131F5CA2007FB512E0B6FC15
C0D8003FC7FCA25B137EA313FE5BA312015BA312035BA312075BA3120F5BA2EC0780001F
140013805C140E003F131EEB001C143C14385C6C13F0495A6C485AEB8780D807FEC7FCEA
01F81B3F78BD20>I<137C48B414072603C780EB1F80380703C0000F7F000E153F121C01
07150012385E1278D8700F147E5C011F14FE00F05B00E05DEA003FEC0001A2495C137E15
0313FE495CA215071201495CA2030F13380003167849ECC070A3031F13F0EE80E0153F00
011581037F13C06DEBEF8300000101148090397C03C787903A3E0F07C70090391FFE01FE
903903F000782D2D78AB34>I<017C143848B414FC3A03C78001FE380703C0000F13E012
0E001C14000107147E1238163E1278D8700F141E5C131F00F049131C12E0EA003F91C712
3C16385B137E167801FE14705BA216F0000115E05B150116C0A24848EB0380A2ED0700A2
150E12015D6D5B000014786D5B90387C01E090383F0780D90FFFC7FCEB03F8272D78AB2D
>I<017CEE038048B4020EEB0FC02603C780013FEB1FE0380703C0000E7F5E001C037E13
0F01071607123804FE130300785DEA700F4A1501011F130100F001804914C012E0EA003F
DA000314034C14805B137E0307140701FE1700495CA2030F5C0001170E495CA260A24848
495A60A2601201033F5C7F4B6C485A000002F713036D9039E7E0078090267E01C349C7FC
903A1F0781F81E903A0FFF007FF8D901FCEB0FE03B2D78AB41>I<02F8133FD907FEEBFF
E0903A0F0F83C0F0903A1C07C780F890393803CF03017013EE01E0EBFC07120101C013F8
000316F00180EC01C000074AC7FC13001407485C120EC7FC140F5DA3141F5DA3143F92C8
FCA34AEB03C01780147EA202FEEB0700121E003F5D267F81FC130E6E5BD8FF83143CD903
BE5B26FE079E5B3A7C0F1F01E03A3C1E0F83C0271FF803FFC7FC3907E000FC2D2D7CAB2D
>I<137C48B414072603C780EB1F80380703C0000F7F000E153F001C1600130712385E00
78157EEA700F5C011F14FE00F0495B12E0EA003FEC00015E5B137E150301FE5C5BA21507
00015D5BA2150F00035D5BA2151F5EA2153F12014BC7FC6D5B00005BEB7C0390383E0F7E
EB1FFEEB03F090C712FE5DA214015D121F397F8003F0A24A5A4848485A5D48131F00F049
C8FC0070137E007813F8383801F0381E07C06CB4C9FCEA01FC294078AB2F>I
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fn cmr10 10.95 76
/Fn 76 128 df<EC03FE91383FFF809138FE03E0903903F800F0D90FE013384948137C90
393F8001FE90387F00035B5BA2485A6F5AED007093C7FCAA16FEB7FCA33901FC00031501
1500B3AC486C497EB5D8F87F13FCA32E407EBF33>12 D<001E130F397F803FC000FF137F
01C013E0A201E013F0A3007F133F391E600F3000001300A401E01370491360A3000114E0
4913C00003130101001380481303000EEB070048130E0018130C0038131C003013181C1C
7DBE2D>34 D<121EEA7F8012FF13C0A213E0A3127FEA1E601200A413E013C0A312011380
120313005A120E5A1218123812300B1C79BE19>39 D<1430147014E0EB01C0EB03801307
EB0F00131E133E133C5B13F85B12015B1203A2485AA2120F5BA2121F90C7FCA25AA3123E
127EA6127C12FCB2127C127EA6123E123FA37EA27F120FA27F1207A26C7EA212017F1200
7F13787F133E131E7FEB07801303EB01C0EB00E014701430145A77C323>I<12C07E1270
7E7E121E7E6C7E7F12036C7E7F12007F1378137CA27FA2133F7FA21480130FA214C0A313
0714E0A6130314F0B214E01307A614C0130FA31480A2131F1400A25B133EA25BA2137813
F85B12015B485A12075B48C7FC121E121C5A5A5A5A145A7BC323>I<1506150FB3A9007F
B912E0BA12F0A26C18E0C8000FC9FCB3A915063C3C7BB447>43 D<121EEA7F8012FF13C0
A213E0A3127FEA1E601200A413E013C0A312011380120313005A120E5A1218123812300B
1C798919>I<B512FEA617067F961E>I<121EEA7F80A2EAFFC0A4EA7F80A2EA1E000A0A79
8919>I<ED0180ED03C01507A21680150FA216005DA2151E153EA2153C157CA2157815F8
A25D1401A25D1403A25D1407A25D140FA24AC7FCA2141E143EA2143C147CA2147814F8A2
5C1301A25C1303A25C1307A25C130FA291C8FC5BA2131E133EA25BA2137813F8A25B1201
A25B1203A25B1207A25B120FA290C9FC5AA2121E123EA2123C127CA2127812F8A25A1260
225B7BC32D>I<EB01FE90380FFFC090383F03F090387C00F849137C48487F48487F4848
EB0F80A2000F15C04848EB07E0A3003F15F0A290C712034815F8A64815FCB3A26C15F8A5
6C6CEB07F0A3001F15E0A36C6CEB0FC0A26C6CEB1F80000315006C6C133E6C6C5B017C5B
90383F03F090380FFFC0D901FEC7FC263F7DBC2D>I<EB01C013031307131F137FEA07FF
B5FC139FEAF81F1200B3B3ACEB7FF0B612F8A31D3D78BC2D>I<EB07FC90383FFF8090B5
12E03903F01FF83907C007FC390F0001FE001E6D7E001C1580003CEC7FC05AED3FE01270
B4FC6DEB1FF07FA56C5A6CC7FC120CC813E0153FA216C0157F168015FF16004A5A5D4A5A
4A5A5D4A5A4A5A4AC7FC147E147C5C495A495A495A495A49C71270133E133C5B4914E048
5A485A485A48C7120148B6FCA25A4815C0B7FCA3243D7CBC2D>I<EB07FC90383FFF8090
38F80FE03901E003F839078001FCD80F007F000E6D7E001E1580D81F80137F486C14C07F
A27F5BA2121F6C5AC8138015FF1600A24A5AA24A5A5DEC07E04A5A023FC7FCEB1FFCECFF
809038000FE0EC07F86E7E6E7E6E7E1680ED7FC0A216E0153FA216F0A2120C123F487E48
7EA316E0A249137F6CC713C01278EDFF807E6C4913006C495A3907C007FC3903F80FF0C6
B55A013F1380D907F8C7FC243F7CBC2D>I<150E151E153EA2157EA215FE1401A21403EC
077E1406140E141CA214381470A214E0EB01C0A2EB0380EB0700A2130E5BA25B5BA25B5B
1201485A90C7FC5A120E120C121C5AA25A5AB8FCA3C8EAFE00AC4A7E49B6FCA3283E7EBD
2D>I<00061403D80780131F01F813FE90B5FC5D5D5D15C092C7FC14FCEB3FE090C9FCAC
EB01FE90380FFF8090383E03E090387001F8496C7E49137E497F90C713800006141FC813
C0A216E0150FA316F0A3120C127F7F12FFA416E090C7121F12FC007015C012780038EC3F
80123C6CEC7F00001F14FE6C6C485A6C6C485A3903F80FE0C6B55A013F90C7FCEB07F824
3F7CBC2D>I<EC1FE0ECFFF8903803F03E90380FC00F90391F000780133E017EEB1FC049
133F4848137F12035B12074848EB3F80ED1F00001F91C7FC5BA2123FA3485AA214FE9038
87FF8039FF8F07E090389C01F09038B800FC01B0137E13F0497F16804914C0A2ED1FE0A3
4914F0A5127FA6123F6D14E0A2121FED3FC0A26C6C1480A20007EC7F006C6C137E6C6C5B
6C6C485A90387E07F06DB45A010F1380D903FCC7FC243F7CBC2D>I<1238123C123F90B6
12FCA316F85A16F016E00078C712010070EC03C0ED078016005D48141E151C153C5DC812
7015F04A5A5D14034A5A92C7FC5C141EA25CA2147C147814F8A213015C1303A31307A313
0F5CA2131FA6133FAA6D5A0107C8FC26407BBD2D>I<EB03FC90381FFF8090387C07E090
38F001F83901E0007C48487F48487F48C7FCED0F80121E16C0003E1407A4123FA26DEB0F
807F6C6C131F6D140001FC133E6C6C5B9038FF80786C6D5A6CEBF3E06CEBFF806C91C7FC
133F6D13C06D7F013F13F801787F48486C7E3903E01FFF48486C1380260F800313C04848
7E489038007FE0003E143F007E141F007CEC0FF01507481403A31501A46C15E0007C1403
A2007E15C06C14076CEC0F806DEB1F006C6C133ED807F05B3901FC03F86CB512E0011F13
80D903FCC7FC243F7CBC2D>I<EB03FCEB1FFF90387E07C09038FC03F048486C7E48486C
7E4848137C000F147E4848137F81003F15805B007F15C0A2151F12FF16E0A516F0A5127F
153FA36C7EA2001F147F120F6C6C13FF6D13DF000313013900F8039F90387E0F1FD91FFE
13E0EB07F090C7FCA2ED3FC0A41680157FD80F801400487E486C13FEA24A5A5D49485AEB
8007391E000FE0001F495A260FC07FC7FC3803FFFE6C13F838003FC0243F7CBC2D>I<12
1EEA7F80A2EAFFC0A4EA7F80A2EA1E00C7FCB3121EEA7F80A2EAFFC0A4EA7F80A2EA1E00
0A2779A619>I<121EEA7F80A2EAFFC0A4EA7F80A2EA1E00C7FCB3121E127FEAFF80A213
C0A4127F121E1200A412011380A3120313005A1206120E120C121C5A1230A20A3979A619
>I<15074B7EA34B7EA34B7EA34B7EA34B7E15E7A2913801C7FC15C3A291380381FEA34A
C67EA3020E6D7EA34A6D7EA34A6D7EA34A6D7EA34A6D7EA349486D7E91B6FCA249819138
800001A249C87EA24982010E157FA2011E82011C153FA2013C820138151FA2017882170F
13FC00034C7ED80FFF4B7EB500F0010FB512F8A33D417DC044>65
D<B712FCEEFF8017F00001903980000FF86C6CC7EA03FE707E701380EF7FC0EF3FE0A2EF
1FF0A218F8A3170F171FA318F0A2EF3FE0177F18C0EFFF804C1300EE03FCEE0FF8EE7FE0
91B6C7FC17E091C7EA07FCEE01FE933800FF80EF7FC0EF3FE0EF1FF018F8170F18FC1707
A218FEA718FC170FA2EF1FF818F0173FEF7FE0EFFFC00403138048486C90380FFE00B85A
17E094C7FC373E7DBD40>I<DB3FF01306912603FFFE130E020F9038FF801E913A3FF007
E03E9139FF8000F8D903FEC7EA7C7ED907F8EC1EFE4948140FD93FE0140749481403495A
91C812014848150012034848167E5B000F173EA24848161EA2123F5B180E127FA3491600
12FFAC127F7F180EA2123FA27F001F171E181C6C7EA20007173C6D16386C6C1678000117
706C6C16F06EEC01E06D6C15C06D6C1403D90FF0EC07806D6CEC1F00D903FE143E902600
FF8013F891393FF007F0020FB512C0020391C7FC9138003FF037427BBF42>I<B712FCEE
FF8017E000019039C0001FF86C6C48EB03FEEE00FF717E717EEF0FE084717E717E170184
717EA21980187F19C0A3F03FE0A519F0AB19E0A5F07FC0A21980A218FF19004D5AA24D5A
6017074D5A4D5AEF7FC04DC7FCEE03FE48486CEB1FF8B85A178004FCC8FC3C3E7DBD45>
I<B912E0A300019038C000016C6C48EB001FEF0FF01703A217011700A31870A418381638
A41800A21678A216F81501150791B5FCA3EC8007150115001678A21638A2180EA3181C93
C7FCA4183C1838A21878A318F8EF01F0A21707170F173F48486CEB03FFB912E0A3373E7D
BD3E>I<B91280A300019038C000036C6C48EB007FEF1FC0170F1707A21703A31701A4EF
00E0A21638A31800A31678A216F81501150791B5FCA3EC8007150115001678A21638A693
C8FCAF3801FFE0B612F0A3333E7DBD3B>I<DB3FE0130C912603FFFE131C021F9038FF80
3C913A7FF00FC07C9139FF0001F0D903FC90380078FC4948143DD91FE0141F4948140F49
48140701FF15034890C8FC491501485A000716005B000F177C5B001F173CA2485AA2181C
127FA25B95C7FC12FFAB041FB512F0127FA26D9139000FFE00EF03FC123FA27F121FA26C
7EA212077F12036C7E7F6C7F6D6C14076D7E6D6C140FD907F8141ED903FEEC3C7C902600
FF80EBF83C913A7FF007F01C021FB5EAC00C020391C8FC9138003FF03C427BBF47>I<B6
D8C01FB512F8A3000101E0C7383FFC0026007F80EC0FF0B3A691B7FCA30280C7120FB3A9
2601FFE0EC3FFCB6D8C01FB512F8A33D3E7DBD44>I<B612F0A3C6EBF000EB3FC0B3B3B2
EBFFF0B612F0A31C3E7EBD21>I<011FB512FCA3D9000713006E5A1401B3B3A6123FEA7F
80EAFFC0A44A5A1380D87F005B007C130700385C003C495A6C495A6C495A2603E07EC7FC
3800FFF8EB3FC026407CBD2F>I<B600C090387FFFFCA3000101E0C7000F138026007F80
913807FE0018F818E0604D5A4DC7FC173E5F5F4C5A4C5A4C5A4C5A4CC8FC163E5E5E4B5A
4B5AED07804B7E151F4B7E4B7E15FF913881EFF8913883C7FCEC878791388F03FE91389E
01FF14BCDAF8007F4A6D7E5C4A6D7E4A6D7EA2707E707EA2707E707EA2707F717E84173F
717E717EA2717E848419802601FFE04A13C0B600C090B6FCA3403E7DBD47>I<B612F8A3
000101E0C9FC38007F80B3B0EF0380A517071800A45FA35FA25F5F5F4C5A160748486C13
3FB8FCA3313E7DBD39>I<B500C093B512C0A300016D4BEBE000D8007F1880D977F0ED03
BFA3D973F8ED073FA3D971FC150EA2D970FE151CA3027F1538A36E6C1470A36E6C14E0A2
6E6CEB01C0A36E6CEB0380A36E6CEB0700A26E6C130EA36E6C5BA3037F5BA26F6C5AA36F
6C5AA392380FE1C0A3923807F380A26FB4C7FCA36F5AA213F8486C6D5AD807FFEFFFE0B5
00F80178017FEBFFC0A34A3E7CBD53>I<B56C91B512F88080D8007F030713006EEC01FC
6E6E5A1870EB77FCEB73FEA2EB71FF01707FA26E7E6E7EA26E7E6E7EA26E7E6E7EA26E7E
6E7FA26F7E6F7EA26F7E6F7EA26F7E6F7EA26F7E6F1380A2EE7FC0EE3FE0A2EE1FF0EE0F
F8A2EE07FCEE03FEA2EE01FF7013F0A2177F173FA2171F170FA2170701F81503487ED807
FF1501B500F81400A218703D3E7DBD44>I<ED7FE0913807FFFE91391FC03F8091397E00
07E04948EB03F8D907F0EB00FE4948147F49486E7E49486E7E49C86C7E01FE6F7E000183
49150300038348486F7EA248486F7EA2001F188049167F003F18C0A3007F18E049163FA3
00FF18F0AC007F18E06D167FA4003F18C0A26C6CEEFF80A36C6C4B1300A26C6C4B5A0003
5F6D150700015F6C6C4B5A6D5E6D6C4A5A6D6C4A5A6D6C4AC7FC6D6C14FED901FCEB03F8
D9007FEB0FE091391FC03F80912607FFFEC8FC9138007FE03C427BBF47>I<B712F8EEFF
8017E000019039C0003FF86C6C48EB07FCEE01FE707EEF7F80EF3FC018E0A2EF1FF0A218
F8A818F0A2EF3FE0A218C0EF7F80EFFF004C5AEE07FCEE3FF091B612C04CC7FC0280C9FC
B3A73801FFE0B612C0A3353E7DBD3E>I<B712C016FCEEFF800001D9C00013E06C6C48EB
1FF0EE07FCEE01FE707E84717EA2717EA284A760177F606017FF95C7FCEE01FCEE07F8EE
1FE0EEFF8091B500FCC8FC16F091388001FCED003FEE1FC0707E707E83160383160183A3
83A484A4F0C004190EA28218E0057F131E2601FFE0161CB600C0EB3FF094381FF8380507
1370CA3801FFE09438003F803F407DBD43>82 D<D907FC131890391FFF8038017FEBE078
3901FC03F83A03F0007CF8D807C0133F4848130F001F140748C7FC003E1403007E1401A2
007C140012FC1678A46C1538A27EA26C6C14007F7FEA3FF8EBFF806C13F86CEBFF806C14
F06C14FC6C14FF6C15C0013F14E0010714F0EB007F020713F89138007FFC150FED07FE15
031501ED00FFA200E0157FA3163FA27EA3163E7E167E6C157C6C15FC6C15F86D13016DEB
03F06DEB07E0D8F9FCEB0FC03AF07F803F8090391FFFFE00D8E00713F839C0007FC02842
7BBF33>I<003FB91280A3903AF0007FE001018090393FC0003F48C7ED1FC0007E170712
7C00781703A300701701A548EF00E0A5C81600B3B14B7E4B7E0107B612FEA33B3D7DBC42
>I<B600C090B512F8A3000101E0C70007130026007F80EC01FC715A1870B3B3A4013F16
F06E5DA21701011F5E80010F15036E4A5A010793C7FC6D6C5C6D6C141E6D6C5C027F14F8
6E6C485A91390FF00FE00203B51280020049C8FCED1FF03D407DBD44>I<B691380FFFFE
A3000301E0020113E06C01809138007F806CEF3F00017F163E181C6E153C013F1638A26E
1578011F1670A26D6C5DA26E140101075EA26E140301035EA26D6C4AC7FCA2806D150EA2
6F131E027F141CA26F133C023F1438A26E6C5BA26F13F0020F5CA2EDF80102075CA26E6C
485AA2EDFE07020191C8FCA26F5A6E130EA2ED7F9CA216DCED3FF8A36F5AA36F5AA26F5A
A36F5A3F407EBD44>I<B500FE017FB5D88007B5FCA3000301C0010101E0C713F86C90C8
49EC3FE07148EC0F807E7215006E143F017F190E84A26D6C60A24D7E6D6C60A2EFE7F86D
6C60A2933801C3FC6E18F001076104037F6E0281140101036104077F17006D6C4D5AA204
0EEB7F806D6C4DC7FCA24CEB3FC0DA7F80160EA24CEB1FE003C0161E023F171C047814F0
DBE070010F133C021F173804F014F84C1307DA0FF05EA2DBF1C0EB03FCDA07F95EA2DBFB
80EB01FEDA03FF6F5AA293C8FCA26E5FA24B157F020094C8FCA24B81037C153EA2037815
1E0338151C58407EBD5D>I<B66C0103B51280A3000101F0C8EBF8006C6C48ED3FC0725A
013F041EC7FC6D7E606D6C15386D6C1578606D6C5D6E14016D5E6D6D1303606E6C49C8FC
6E6C5B170E6E6C131E171C6E6C5B6E6C137817706E6C13F06F5B6E13016EEB83C05FED7F
C7DB3FE7C9FC16EFED1FFE5E150F6F5AB3A4ED1FFC020FB512FCA3413E7FBD44>89
D<EAFFFCA4EAF000B3B3B3B3ABEAFFFCA40E5B77C319>91 D<486C13C000031301010013
80481303000EEB070048130E0018130C0038131C003013180070133800601330A300E013
70481360A400CFEB678039FFC07FE001E013F0A3007F133FA2003F131F01C013E0390F00
07801C1C73BE2D>I<EAFFFCA4EA003CB3B3B3B3ABEAFFFCA40E5B7FC319>I<EB0FF8EBFF
FE3903F01F8039078007E0000F6D7E9038E001F8D81FF07F6E7EA3157F6C5AEA0380C8FC
A4EC1FFF0103B5FC90381FF87FEB7F803801FC00EA07F8EA0FE0485A485AA248C7FCEE03
8012FEA315FFA3007F5BEC03BF3B3F80071F8700261FC00E13CF3A07F03C0FFE3A01FFF8
07FC3A003FC001F0292A7DA82D>97 D<EA01FC12FFA3120712031201B1EC03FC91381FFF
8091387C07E09039FDE001F09039FFC000FC4A137E91C77E49158049141F17C0EE0FE0A2
17F0A2160717F8AA17F0A2160FA217E0161F17C06D1580EE3F006D5C6E13FE9039F3C001
F89039F1E003F09039E0780FC09026C03FFFC7FCC7EA07F82D407EBE33>I<49B4FC010F
13E090383F00F8017C131E4848131F4848137F0007ECFF80485A5B121FA24848EB7F0015
1C007F91C7FCA290C9FC5AAB6C7EA3003FEC01C07F001F140316806C6C13076C6C140000
03140E6C6C131E6C6C137890383F01F090380FFFC0D901FEC7FC222A7DA828>I<ED01FC
15FFA3150715031501B114FF010713E190381F80F990387E003D49131FD803F81307485A
49130348481301121F123F5B127FA290C7FCA25AAA7E7FA2123FA26C7E000F14037F0007
14076C6C497E6C6C497ED8007C017913F890383F01F190380FFFC1903A01FE01FC002D40
7DBE33>I<EB01FE90380FFFC090383F03F09038FC01F848486C7E4848137E48487F000F
158049131F001F15C04848130FA2127F16E090C7FCA25AA290B6FCA290C9FCA67EA27F12
3F16E06C7E1501000F15C06C6C13036DEB07806C6C1400C66C131E017E5B90381F80F890
3807FFE0010090C7FC232A7EA828>I<EC1FC0EC7FF8903801F83C903807E07E90380FC0
FFEB1FC1EB3F811401137FEC00FE01FE137C1500AEB6FCA3C648C7FCB3AE487E007F13FF
A320407EBF1C>I<167C903903F801FF903A1FFF078F8090397E0FDE1F9038F803F83803
F001A23B07E000FC0600000F6EC7FC49137E001F147FA8000F147E6D13FE00075C6C6C48
5AA23901F803E03903FE0FC026071FFFC8FCEB03F80006CAFC120EA3120FA27F7F6CB512
E015FE6C6E7E6C15E06C810003813A0FC0001FFC48C7EA01FE003E140048157E825A82A4
6C5D007C153E007E157E6C5D6C6C495A6C6C495AD803F0EB0FC0D800FE017FC7FC90383F
FFFC010313C0293D7EA82D>I<EA01FC12FFA3120712031201B1EC01FE913807FFC09138
1E07E091387803F09138E001F8D9FDC07F148001FF6D7E91C7FCA25BA25BB3A6486C497E
B5D8F87F13FCA32E3F7DBE33>I<EA01E0EA07F8A2487EA46C5AA2EA01E0C8FCACEA01FC
127FA3120712031201B3AC487EB512F0A3143E7DBD1A>I<1478EB01FEA2EB03FFA4EB01
FEA2EB00781400AC147FEB7FFFA313017F147FB3B3A5123E127F38FF807E14FEA214FCEB
81F8EA7F01387C03F0381E07C0380FFF803801FC00185185BD1C>I<EA01FC12FFA31207
12031201B292B51280A392383FFC0016E0168093C7FC153C5D5D4A5AEC07C04A5A4AC8FC
143E147F4A7E13FD9038FFDFC0EC9FE0140F496C7E01FC7F496C7E1401816E7E81826F7E
151F826F7EA282486C14FEB539F07FFFE0A32B3F7EBE30>I<EA01FC12FFA31207120312
01B3B3B1487EB512F8A3153F7DBE1A>I<2701F801FE14FF00FF902707FFC00313E0913B
1E07E00F03F0913B7803F03C01F80007903BE001F87000FC2603F9C06D487F000101805C
01FBD900FF147F91C75B13FF4992C7FCA2495CB3A6486C496CECFF80B5D8F87FD9FC3F13
FEA347287DA74C>I<3901F801FE00FF903807FFC091381E07E091387803F000079038E0
01F82603F9C07F0001138001FB6D7E91C7FC13FF5BA25BB3A6486C497EB5D8F87F13FCA3
2E287DA733>I<14FF010713E090381F81F890387E007E01F8131F4848EB0F804848EB07
C04848EB03E0000F15F04848EB01F8A2003F15FCA248C812FEA44815FFA96C15FEA36C6C
EB01FCA3001F15F86C6CEB03F0A26C6CEB07E06C6CEB0FC06C6CEB1F80D8007EEB7E0090
383F81FC90380FFFF0010090C7FC282A7EA82D>I<3901FC03FC00FF90381FFF8091387C
0FE09039FDE003F03A07FFC001FC6C496C7E6C90C7127F49EC3F805BEE1FC017E0A2EE0F
F0A3EE07F8AAEE0FF0A4EE1FE0A2EE3FC06D1580EE7F007F6E13FE9138C001F89039FDE0
07F09039FC780FC0DA3FFFC7FCEC07F891C9FCAD487EB512F8A32D3A7EA733>I<02FF13
1C0107EBC03C90381F80F090397F00387C01FC131CD803F8130E4848EB0FFC1507484813
03121F485A1501485AA448C7FCAA6C7EA36C7EA2001F14036C7E15076C6C130F6C7E6C6C
133DD8007E137990383F81F190380FFFC1903801FE0190C7FCAD4B7E92B512F8A32D3A7D
A730>I<3901F807E000FFEB1FF8EC787CECE1FE3807F9C100031381EA01FB1401EC00FC
01FF1330491300A35BB3A5487EB512FEA31F287EA724>I<90383FC0603901FFF8E03807
C03F381F000F003E1307003C1303127C0078130112F81400A27E7E7E6D1300EA7FF8EBFF
C06C13F86C13FE6C7F6C1480000114C0D8003F13E0010313F0EB001FEC0FF800E01303A2
14017E1400A27E15F07E14016C14E06CEB03C0903880078039F3E01F0038E0FFFC38C01F
E01D2A7DA824>I<131CA6133CA4137CA213FCA2120112031207001FB512C0B6FCA2D801
FCC7FCB3A215E0A912009038FE01C0A2EB7F03013F138090381F8700EB07FEEB01F81B39
7EB723>I<D801FC14FE00FF147FA3000714030003140100011400B3A51501A315031200
15076DEB06FF017E010E13806D4913FC90381FC078903807FFE00100903880FE002E297D
A733>I<B539E00FFFE0A32707FE000313006C48EB00FC5E00015D7F00005DA26D13016D
5CA26D6C485AA2ECC007011F91C7FCA290380FE00EA2ECF01E0107131CA26D6C5AA2ECFC
7801011370A2ECFEF001005BA2EC7FC0A36E5AA26EC8FCA3140E2B287EA630>I<B53BC3
FFFE03FFF8A3290FFE003FE00013C06C486D48EB3F806C4817006D010F141E00016F131C
15076D163C00004A6C1338A2017F5E4B7E151DD93F805DED3DFC1538D91FC04A5AED78FE
9238707E03D90FE0017F5BEDE03F02F0140701070387C7FC9138F1C01F02F9148F010315
CE9138FB800F02FF14DE6D15FCED00076D5DA24A1303027E5CA2027C1301023C5C023813
003D287EA642>I<B539F01FFFE0A30003D9C00F1300C690388007F8D97F0013E002805B
D93FC05B011F49C7FC90380FE00EECF01E6D6C5A01035B6D6C5A6E5AEB00FF6E5A6E5A81
141F814A7E81147BECF1FC903801E1FEECC0FF01037F49486C7ED90F007F011E6D7E013E
130F496D7E01FC80486C80000F4A7EB539803FFFF8A32D277FA630>I<B539E00FFFE0A3
2707FE000313006C48EB01FC6F5A00015D7F00005DA2017F495AA2EC8003013F5CA26D6C
48C7FCA26E5A010F130EA26D6C5AA2ECF83C01031338A26D6C5AA2ECFEF001005BA2EC7F
C0A36E5AA36EC8FCA2140EA2141E141C143C1438A2147800181370127EB45BA2495AA248
485AD87E07C9FCEA780EEA3C3CEA1FF8EA07E02B3A7EA630>I<001FB61280A2EBE00001
80140049485A001E495A121C4A5A003C495A141F00385C4A5A147F5D4AC7FCC6485AA249
5A495A130F5C495A90393FC00380A2EB7F80EBFF005A5B484813071207491400485A4848
5BA248485B4848137F00FF495A90B6FCA221277EA628>I<B812F0A22C0280982D>I<001C
130E007FEB3F8039FF807FC0A5397F003F80001CEB0E001A0977BD2D>127
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fo cmbx10 10.95 7
/Fo 7 117 df<16FCA24B7EA24B7EA34B7FA24B7FA34B7FA24B7FA34B7F157C03FC7FED
F87FA2020180EDF03F0203804B7E02078115C082020F814B7E021F811500824A81023E7F
027E81027C7FA202FC814A147F49B77EA34982A2D907E0C7001F7F4A80010F835C83011F
8391C87E4983133E83017E83017C81B500FC91B612FCA5463F7CBE4F>65
D<903807FFC0013F13F848B6FC48812607FE037F260FF8007F6DEB3FF0486C806F7EA36F
7EA26C5A6C5AEA01E0C8FC153F91B5FC130F137F3901FFFE0F4813E0000F1380381FFE00
485A5B485A12FF5BA4151F7F007F143F6D90387BFF806C6C01FB13FE391FFF07F36CEBFF
E100031480C6EC003FD91FF890C7FC2F2B7DA933>97 D<13FFB5FCA512077EAFEDFFE002
0713FC021FEBFF80027F80DAFF8113F09139FC003FF802F06D7E4A6D7E4A13074A807013
80A218C082A318E0AA18C0A25E1880A218005E6E5C6E495A6E495A02FCEB7FF0903AFCFF
01FFE0496CB55AD9F01F91C7FCD9E00713FCC7000113C033407DBE3A>I<EC7FF00107B5
FC011F14C0017F14E09039FFF01FF0489038800FF848EB001F4848EB3FFC120F485AA248
5AA2007FEC1FF849EB0FF0ED03C000FF91C7FCAB127F7FA3003F153E7F001F157E6C6C14
7C6C6C14FC91388001F86C9038C003F0C69038F81FE06DB512C0011F14800107EBFE0090
38007FF0272B7DA92E>I<3901FE01FE00FF903807FF804A13E04A13F0EC3F1F91387C3F
F8000713F8000313F0EBFFE0A29138C01FF0ED0FE091388007C092C7FCA391C8FCB3A2B6
FCA525297DA82B>114 D<90383FFC1E48B512BE000714FE5A381FF00F383F800148C7FC
007E147EA200FE143EA27E7F6D90C7FC13F8EBFFE06C13FF15C06C14F06C806C806C806C
80C61580131F1300020713C014000078147F00F8143F151F7EA27E16806C143F6D140001
E013FF9038F803FE90B55A15F0D8F87F13C026E00FFEC7FC222B7DA929>I<EB07C0A513
0FA4131FA3133F137FA213FF5A1207001FEBFFFEB6FCA40001EBC000B3151FA96CEBE03E
A2017F137EECF8FC90383FFFF86D13F0010713E001001380203B7EB929>I
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fp cmsy10 10.95 5
/Fp 5 104 df<0060166000F816F06C1501007E15036CED07E06C6CEC0FC06C6CEC1F80
6C6CEC3F006C6C147E6C6C5C6C6C495A017E495A6D495A6D6C485A6D6C485A6D6C48C7FC
903803F07E6D6C5A903800FDF8EC7FF06E5A6E5AA24A7E4A7EECFDF8903801F8FC903803
F07E49487E49486C7E49486C7E49486C7E017E6D7E496D7E48486D7E4848147E48488048
48EC1F804848EC0FC048C8EA07E0007EED03F0481501481500006016602C2C73AC47>2
D<EB0FFCEB3FFF90B512C0000314F04880488048804880A2481580A3B712C0AA6C1580A3
6C1500A26C5C6C5C6C5C6C5CC614C0013F90C7FCEB0FFC22227BA72D>15
D<D91FE01620D97FF816703801FFFE486D7E48804814F09038E01FF8271F8007FC15F027
3E0001FE15E0003CD9007F1401007CDA3FC013030078DA0FE014C00070DA07F8130700F0
DA03FEEB1F8048913A01FF807F006F90B5FC043F5B705B04075B040113E000409238007F
803C157BA047>24 D<153FEC03FFEC0FE0EC3F80EC7E00495A5C495AA2495AB3AA130F5C
131F495A91C7FC13FEEA03F8EA7FE048C8FCEA7FE0EA03F8EA00FE133F806D7E130F8013
07B3AA6D7EA26D7E80EB007EEC3F80EC0FE0EC03FFEC003F205B7AC32D>102
D<12FCEAFFC0EA07F0EA01FCEA007E6D7E131F6D7EA26D7EB3AA801303806D7E1300147F
EC1FC0EC07FEEC00FFEC07FEEC1FC0EC7F0014FC1301495A5C13075CB3AA495AA2495A13
3F017EC7FC485AEA07F0EAFFC000FCC8FC205B7AC32D>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fq cmti10 10.95 47
/Fq 47 123 df<933807FF80043F13E09338FE00F8DB01F0133EDB07E0130E4B48131F4C
137F031F14FF4BC7FCA218FE157E1878180015FE5DA31401A25DA414030103B712F0A218
E0903A0003F000070207140F4B14C0A3171F020F15805DA2173F1800141F5D5F177EA214
3F92C712FE5FA34A1301027EECF81CA3160302FEECF03C4A1538A21878187013014A0101
13F018E0933800F1C0EF7F804948EC1F0094C7FCA35C1307A2001E5B127F130F00FF5BA2
49CAFC12FEEAF81EEA703CEA7878EA1FF0EA07C0385383BF33>12
D<EA01E0EA07F8120FA2EA1FFCA4EA0FF8EA0798EA001813381330A21370136013E013C0
1201EA0380EA07001206120E5A5A5A5A5A0E1C7A891C>44 D<120FEA3FC0127FA212FFA3
1380EA7F00123C0A0A77891C>46 D<15031507150F151F151E153E157EEC01FEEC03FC14
07141FEB01FF90380FFBF8EB1FC3EB0E07130015F0A2140FA215E0A2141FA215C0A2143F
A21580A2147FA21500A25CA25CA21301A25CA21303A25CA21307A25CA2130FA25CA2131F
A25CEB7FE0B612F0A215E0203D77BC2E>49 D<15FE913803FFC091380F01F091383C00F8
4A137C4A7F4948133F49487F4A148049C7FC5BEB0E0C011E15C0EB1C0EEB3C0613381378
1370020E133FD9F00C148013E0141C0218137F00011600EBC0384A13FEEC600102E05B3A
00E3C003F89039FF0007F0013C495A90C7485A5E037FC7FC15FC4A5A4A5AEC0FC04AC8FC
147E14F8EB03E0495A011FC9FC133E49141801F0143C48481438485A1678485A48C85A12
0E001E4A5AD83FE0130301FF495A397C3FF01FD8780FB55AD8700391C7FCD8F0015B486C
6C5A6E5AEC07C02A3F79BC2E>I<131EEB3F80137FEBFFC05AA214806C13005B133C90C7
FCB3120FEA3FC0127FA212FFA35B6CC7FC123C122777A61C>58 D<4BB4FC031F13E09238
7E00F8DA01F0131EDA07801307021FC7EA03C0023CEC01E04A1400D901E0157049481578
4948153849C9121C131E49D907E0131E0138D93FFC130E49EBFC1E9039F001F0073C01E0
07E00380079038C00FC0000390391F8001C09026803F0013FC2607007EEB00FE484914FC
120E381E01F8D81C0314014A14F8EA3C0700385B0403130FD8780FEDF00E00705BA20407
131ED8F01FEDE01C00E05BA2040F133CEFC038A3041F1370010F1580043F13F06E017F13
E00107ECFF814B14C0903B03E003DF0380903A01F00F1F073C7000F83E0F8F0091393FF8
07FC91390FC001F06C90CAFCA2123C121C7E000FEE1F806C6C157F6C6C913801FC006C6C
EC0FF0D80078ECFF80013FD91FFCC7FC010FB512C0010001F0C8FC384172BF46>64
D<171C173C177CA217FCA216011603A21607A24C7EA2161DA216391679167116E1A2ED01
C1A2ED038115071601150EA2031C7FA24B7EA25D15F05D4A5AA24A5AA24AC7FC5C140E5C
021FB6FC4A81A20270C7127FA25C13015C495AA249C8FCA2130E131E131C133C5B01F882
487ED807FEEC01FFB500E0017FEBFF80A25C39417BC044>I<49B712C018F818FE903B00
03FC0001FF9438007F804BEC3FC0A2F01FE014074B15F0180FA2140F5D181FA2021F16E0
5D183F19C0023FED7F804B14FF19004D5A027F4A5A92C7EA07F0EF1FE0EF7F804AD903FE
C7FC92B512F017FE4AC7EA3F800101ED1FE04A6E7E17078401036F7E5CA30107825CA301
0F5E4A1407A260011F150F5C4D5A60013F153F4A4A5A4D5A017F4A90C7FC4C5A91C7EA0F
F849EC3FF0B812C094C8FC16F83C3E7BBD40>I<9339FF8001C0030F13E0033F9038F803
809239FF807E07913A03FC001F0FDA0FF0EB071FDA1FC0ECBF00DA7F806DB4FC4AC77E49
5AD903F86E5A495A130F4948157E4948157C495A13FF91C9FC4848167812035B12074916
70120FA2485A95C7FC485AA3127F5BA312FF5BA490CCFCA2170FA2170EA2171E171C173C
173817786C16706D15F04C5A003F5E6D1403001F4B5A6D4AC8FC000F151E6C6C5C6C6C14
F86C6C495A6C6CEB07C090397FC03F8090261FFFFEC9FC010713F0010013803A4272BF41
>I<49B712C018F818FE903B0003FE0003FF9438007F804BEC1FC0F00FE0F007F014074B
EC03F8F001FCA2140F4BEC00FEA3141F4B15FFA3143F5DA3027F5D5DA219FE14FF92C812
03A34917FC4A1507A219F813034A150F19F0A20107EE1FE05CF03FC0A2010FEE7F804A16
006060011F4B5A4A4A5A4D5AA2013F4B5A4AEC3FC04DC7FC017F15FEEE03FC4AEB0FF001
FFEC7FE0B8128004FCC8FC16E0403E7BBD45>I<49B812F8A390260003FEC7121F18074B
14031801F000F014075DA3140F5D19E0A2141F4B1338A2EF7801023F027013C04B91C7FC
A217F0027F5CED80011603160F91B65AA3ED001F49EC07805CA3010392C8FC5CF003804C
13070107020E14005C93C75A180E010F161E4A151C183CA2011F5E5C60A2013F15014A4A
5A1707017F150F4D5A4A147F01FF913807FF80B9FCA295C7FC3D3E7BBD3E>I<49B812F0
A390260003FEC7123F180F4B1403A2F001E014075DA3140F5D19C0A2141F5D1770EFF003
023F02E013804B91C7FCA21601027F5CED8003A2160702FFEB1F8092B5FCA349D9003FC8
FC4A7F82A20103140E5CA2161E0107141C5CA293C9FC130F5CA3131F5CA3133F5CA2137F
A25C497EB612E0A33C3E7BBD3B>I<9339FF8001C0030F13E0033F9038F803809239FF80
7E07913A03FC001F0FDA0FF0EB071FDA1FC0ECBF00DA7F806DB4FC4AC77E495AD903F86E
5A495A130F4948157E4948157C495A13FF91C9FC4848167812035B1207491670120FA248
5A95C7FC485AA3127F5BA312FF5BA30303B512FC90C7FCA2DB000190C7FCA25FA216035F
A316076C5E7FA2003F150F6D5D121F6D141F000F153F6C6C4A5A6C6C14F76C6CEB01E36C
B4EB07C1903A7FC03F81C090391FFFFE00010701F890C8FC010013803A4272BF46>I<49
B6FC5BA2D9000313005D5DA314075DA3140F5DA3141F5DA3143F5DA3147F5DA314FF92C7
FCA35B5CA313035CA313075CA3130F5CA3131F5CA3133F5CA2137FA25C497EB67EA3283E
7BBD23>73 D<4AB61280A2180091C713C0167F5FA216FF94C7FCA35D5EA315035EA31507
5EA3150F5EA3151F5EA3153F5EA3157FA25EA215FFA293C8FCA25CA25DA2380F8003EA3F
C0D87FE05BA21407D8FFC05B140F01805B49485A12FC0070495A4A5A6C01FEC9FC383C01
FC380F07F03807FFC0C648CAFC314079BD30>I<49B6903807FFFE605ED9000390C70001
13E04B6E13004B15FC4E5A19E002074B5A4BEC0F804EC7FC183C020F5D4B5C4D5AEF07C0
021F4AC8FC4B131E5F5F023F5C9238C003E0EE07804CC9FC027F5B4B5AEEFF801581ECFF
834B7FED0F7FED1E3F49017C7FECFEF89138FFE01F03C07F491380ED000F4A805C010714
074A80A21603010F815C160183131F4A6D7FA2177F013F825C173F017F82A24A81496C4A
7EB6D8800FB512C0A261473E7BBD46>I<49B612C0A25FD9000390C8FC5D5DA314075DA3
140F5DA3141F5DA3143F5DA3147F5DA314FF92C9FCA35B5CA313035C18C0EF01E0010716
C05C17031880130F4A140718005F131F4A141EA2173E013F5D4A14FC1601017F4A5A1607
4A131F01FFECFFF0B8FCA25F333E7BBD39>I<49B5933807FFFC496062D90003F0FC0050
5ADBBF805E1A771AEF1407033F923801CFE0A2F1039F020FEE071F020E606F6C140E1A3F
021E161C021C04385BA2F1707F143C023804E090C7FCF001C0629126780FE0495A02705F
F00700F00E0114F002E0031C5BA2F03803010116704A6C6C5D18E019070103ED01C00280
DA03805BA2943807000F13070200020E5C5FDB03F8141F495D010E4B5CA24D133F131E01
1CDAF9C05CEEFB80197F013C6DB4C7FC013895C8FC5E01784A5C13F8486C4A5CD807FE4C
7EB500F04948B512FE16E01500563E7BBD52>I<902601FFFE020FB5FC496D5CA2D90001
6D010013C04AEE3F00193E70141C193CEC07BFDB3FE01438151F1978020F7FDA0E0F1570
8219F0EC1E07021C6D5CA203031401023C7FDA38015DA2701303EC7800027002805BA204
7F130702F014C04A013F91C7FCA2715A0101141F4AECF00EA2040F131E010315F84A151C
1607EFFC3C0107140391C7143817FE040113784915FF010E16708218F0131E011C6F5AA2
173F133C01385E171F137813F8486C6F5AEA07FEB500F01407A295C8FC483E7BBD44>I<
49B77E18F018FC903B0003FE0003FEEF00FF4BEC7F80F03FC00207151F19E05DA2020F16
F0A25DA2141FF03FE05DA2023F16C0187F4B1580A2027FEDFF00604B495A4D5A02FF4A5A
4D5A92C7EA3FC04CB4C7FC4990B512FC17E04ACAFCA21303A25CA21307A25CA2130FA25C
A2131FA25CA2133FA25CA2137FA25C497EB67EA33C3E7BBD3E>80
D<92391FE00380ED7FFC913A01FFFE0700913907F01F8F91390FC007DF4AC66CB4FC023E
6D5A4A130014FC495A4948147CA2495AA2010F15785CA3011F1570A46E91C7FCA2808014
FE90380FFFE015FC6DEBFF8016E06D806D806D6C7F141F02037FEC003FED07FF1501A281
A282A212075A167E120EA2001E15FE5EA25E003E14015E003F14034B5A486C5C150F6D49
5A6D49C8FCD8F9F0137C39F8FE01F839F03FFFF0D8E00F13C026C001FEC9FC314279BF33
>83 D<48B9FCA25A903AFE001FF00101F89138E0007FD807E0163E49013F141E5B48C75B
A2001E147FA2001C4B131C123C003814FFA2007892C7FC12704A153C00F01738485CC716
001403A25DA21407A25DA2140FA25DA2141FA25DA2143FA25DA2147FA25DA214FFA292C9
FCA25BA25CA21303A25CEB0FFE003FB67E5AA2383D71BC41>I<001FB500F090B512F048
5DA226003FF0C7380FFC004AEC03F04A5D715A017F1503A24A5DA201FF150795C7FC91C8
FCA2485E170E5BA20003161E171C5BA20007163C17385BA2000F167817705BA2001F16F0
5F5BA2003F1501A2495DA2007F1503A2495DA2160794C8FC48C8FC5E160E161E6C151C16
3C5E5E5E6C6C13014B5A001F4A5A6C6C011FC9FC6D133E6C6C13F83903FC07F0C6B512C0
013F90CAFCEB07F83C406FBD44>I<147E49B47E903907C1C38090391F80EFC090383F00
FF017E137F4914804848133F485AA248481400120F5B001F5C157E485AA215FE007F5C90
C7FCA21401485C5AA21403EDF0385AA21407EDE078020F1370127C021F13F0007E013F13
E0003E137FECF3E1261F01E313C03A0F8781E3803A03FF00FF00D800FC133E252977A72E
>97 D<EB1FC0EA0FFF5CA2EA003FA291C7FCA25BA2137EA213FEA25BA21201A25BA21203
A25B147E3907F1FF809038F783E09038EF01F013FE390FF800F8A24913FC49137C485A15
7E5B15FE123FA290C7FCA248130115FC127EA2140300FE14F85AA2EC07F0A215E048130F
15C0141F15800078EB3F00127C147E003C5B383E01F8381E03E06C485A6CB4C7FCEA01F8
1F4076BE2A>I<EC1FC0ECFFF0903803F03C903807C01E90381F800E90383F000F017E13
3F4913FF485A485A000714FE5B000F14FC48481300A2485AA3127F90C8FCA35A5AA64814
03007E1407150F151E003E143C15786C14F0EC03E0390F800F803903E07E003801FFF838
003FC0202977A72A>I<EE3F80ED1FFF1700A2ED007FA2167EA216FEA25EA21501A25EA2
1503A25EA21507A25E147E903801FF8F903807C1CF90391F80EFC090383F00FF017E137F
5B48486D5A485AA2485A000F92C7FC5B001F5CA24848137EA215FE127F90C75AA214015A
485CA2140316384814F0A21407167891380FE070127C021F13F0007E013F5B003E137FEC
F3E1261F01E35B3A0F8781E3802703FF00FFC7FCD800FC133E294077BE2E>I<EC3F8090
3801FFE0903807E0F890381F803CEB3E0001FC131E485A485A12074848133E49133C121F
4848137C15F8EC03F0397F000FE0ECFF809038FFFC00B512C048C8FCA45AA61506150E15
1E007C143C15786C14F0EC01E06CEB07C0390F801F003807C0FC3801FFF038007F801F29
76A72A>I<167C4BB4FC923807C78092380F83C0ED1F87161FED3F3FA2157EA21780EE0E
004BC7FCA414015DA414035DA30103B512F8A390260007E0C7FCA3140F5DA5141F5DA414
3F92C8FCA45C147EA414FE5CA413015CA4495AA4495AA4495A121E127F5C12FF49C9FCA2
EAFE1EEAF83C1270EA7878EA3FE0EA0F802A5383BF1C>I<EC03F0EC0FFC91383E0E1C91
38FC077E903901F003FE1303903807E001D90FC013FCEB1F80A2EB3F004914F8137E01FE
1303A2484814F0A2150712034914E0A2150F12074914C0A2151FA216805B153F1203ED7F
006D5BA200015B0000495A9038F80F7E90387C1EFEEB1FF8903807E0FC90C7FC1401A25D
A21403A25D001C1307007F5C48130F5D4A5A4AC7FC48137E00F85B387C03F0381FFFC0D8
03FEC8FC273B7CA72A>I<EB01FC13FF5CA21303A25CA21307A25CA2130FA25CA2131FA2
5CA2133FA291C8FCEC03F890387F0FFE91383E0F80D97E7813C0ECE007D9FFC013E01480
1400A2485A5BA25B0003140F16C05BA20007141F16805BA2000F143F16005B5D001F147E
EDFE074913FCA2003F0101130FEDF80E1300161E48ECF01CA2007E1538A200FE15700200
13E048EC7FC00038EC1F0028407ABE2E>I<1478EB01FCA21303A314F8EB00E01400AD13
7C48B4FC38038F80EA0707000E13C0121E121CEA3C0F1238A2EA781F00701380A2EAF03F
140012005B137E13FE5BA212015BA212035B1438120713E0000F1378EBC070A214F0EB80
E0A2EB81C01383148038078700EA03FEEA00F8163E79BC1C>I<EB01FC13FF5CA21303A2
5CA21307A25CA2130FA25CA2131FA25CA2133FA291C8FCED03E049EB0FF8ED3C3C017EEB
707CEDE1FC9038FE01C1EC03839038FC0703140E0001011C13F891383800E04948130014
60000313E0EBF9C0EBF78001FEC8FC1207EBFFE0EBE7F8EBE0FE000F137F6E7EEBC01F81
001F130F16701380A2003F15F0021F13E001001380A248148116C0007EEB0F83168000FE
14879138078F0048EB03FE0038EB00F826407ABE2A>107 D<EB07F0EA03FF14E0A2EA00
0FA214C0A2131FA21480A2133FA21400A25BA2137EA213FEA25BA21201A25BA21203A25B
A21207A25BA2120FA25BA2121FA25BA2123FA290C7FCA25A1307127EA2EAFE0F130E12FC
A2131E131CA2EA7C381378EA3C70EA1FE0EA0780144079BE17>I<D801F0D93F80137F3D
07FC01FFE003FFC03D0F3E07C1F80F83F03D0E1F0F00FC1E01F8001E011C90387C380000
1C49D97E707F003C01F05C0038157F4A5C26783FC05C12704A91C7FC91C7127E00F003FE
1301494A5CEA007EA20301140301FE5F495CA203031407000160495C180F03075D000305
1F13E0494A1480A2030FEC3F810007F001C0495CA2031F91383E0380120F494AEC0700A2
033F150E001FEF1E1C4991C7EA0FF80007C7000EEC03E0432979A74A>I<D801F0EB3F80
3A07FC01FFE03A0F3E07C1F83A0E1F0F00FC001E011C137C001C49137E003C13F012385C
38783FC012705C91C7FC00F015FE495CEA007EA2150101FE5C5BA2150300015D5B15075E
0003020F13704914C0A2031F13F00007ED80E05B1681EE01C0120F49EC0380A2EE070000
1FEC0F0E49EB07FC0007C7EA01F02C2979A733>I<EC1FC0ECFFF8903803F07C90380FC0
1FEB1F8090393F000F80017E14C0491307484814E0485A12075B000F15F0485AA2485AA2
ED0FE0127F90C7FCA2151F4815C05AA2ED3F80A2ED7F00A248147E007C5C007E13015D4A
5A003E495A6C495A4A5A260F803EC7FC3807C0FC3801FFF038003F80242977A72E>I<90
3903E001F890390FF807FE903A1E7C1E0F80903A1C3E3C07C0013C137801389038E003E0
EB783F017001C013F0ED80019038F07F0001E015F8147E1603000113FEA2C75AA2010114
0717F05CA20103140F17E05CA20107EC1FC0A24A1480163F010F15005E167E5E131F4B5A
6E485A4B5A90393FB80F80DA9C1FC7FCEC0FFCEC03E049C9FCA2137EA213FEA25BA21201
A25BA21203A2387FFFE0B5FCA22D3A80A72E>I<D801F013FC3A07FC07FF803A0F3E0F03
C0260E1F1C13E0001EEB380F001C1370003CEBE01F123814C0D8783F14C0007090388007
0092C7FC91C8FC12F05BEA007EA313FE5BA312015BA312035BA312075BA3120F5BA3121F
5B0007C9FC232979A726>114 D<EC7F80903801FFE0903807C0F890381F003C013E131C
013C131E017C133E49137E15FEA2000114FCA215706D13007FEBFFC014FC6C13FF15806D
13C06D13E0010F13F01300140F14071403120C123F387F80011403D8FF0013E0A300FCEB
07C000F0EB0F8012700078EB1F006C133C381F01F83807FFE0C690C7FC1F297AA725>I<
EB01C0EB03F01307A25CA2130FA25CA2131FA25CA2133FA291C7FCA2007FB51280B6FC15
00D8007EC7FC13FEA25BA21201A25BA21203A25BA21207A25BA2120FA25BA2121F141C13
80A2003F133C1438EB0078147014F05C495AEA1F03495A6C48C7FCEA07FCEA01F0193A78
B81E>I<137C48B4141C26038F80137EEA0707000E7F001E15FE121CD83C0F5C12381501
EA781F007001805BA2D8F03F1303140000005D5B017E1307A201FE5C5B150F1201495CA2
151F0003EDC1C0491481A2153F1683EE0380A2ED7F07000102FF13005C01F8EBDF0F0000
9038079F0E90397C0F0F1C90391FFC07F8903907F001F02A2979A731>I<017CEB01C048
B4EB07F038038F80EA0707000E01C013F8121E001C1403EA3C0F0038EC01F0A2D8781F13
0000705BA2EAF03F91C712E012005B017E130116C013FE5B1503000115805BA2ED070012
03495B150EA25DA25D1578000114706D5B0000495A6D485AD97E0FC7FCEB1FFEEB03F025
2979A72A>I<017C167048B491387001FC3A038F8001F8EA0707000E01C015FE001E1403
001CEDF000EA3C0F0038177C1507D8781F4A133C00701380A2D8F03F130F020049133812
005B017E011F14784C137013FE5B033F14F0000192C712E05BA2170100034A14C049137E
17031880A2EF070015FE170E00010101141E01F86D131C0000D9039F5BD9FC076D5A903A
3E0F07C1E0903A1FFC03FFC0902703F0007FC7FC372979A73C>I<137C48B4143826038F
8013FCEA0707000E7F001E1401001C15F8EA3C0F12381503D8781F14F000701380A2D8F0
3F1307020013E012005B017E130F16C013FE5B151F1201491480A2153F000315005BA25D
157EA315FE5D00011301EBF8030000130790387C1FF8EB3FF9EB07E1EB00035DA2140700
0E5CEA3F80007F495AA24A5AD8FF0090C7FC143E007C137E00705B387801F0383803E038
1E0FC06CB4C8FCEA03F8263B79A72C>121 D<D901F01370D907FC13F0010F14E090381F
FE0190393FFF03C049EB838090387C0FCF9039F803FF009038F0007E49133C000114386C
48137890C75A4A5A4A5A4A5A4AC7FC141E5C5C5C495A495A495A49C8FC131E4913075B5B
48485B4848131E485A01F05BD80FFE137C391F1F81F8383E0FFFD83C075B486C5B00705C
D8F00190C7FC38E0007C24297BA725>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fr cmr8 8 22
/Fr 22 117 df<EC0380B3A4B812FCA3C7D80380C7FCB3A42E2F7CA737>43
D<EB3FC0EBFFF03803E07C48487E48487E497E001EEB0780A2003E14C0A248EB03E0A500
FC14F0B0007C14E0A3007E1307003E14C0A36CEB0F806C14006D5A3807C03E3803F0FC38
00FFF0EB3FC01C2D7DAB23>48 D<130C133C137CEA03FC12FFEAFC7C1200B3B113FE387F
FFFEA2172C7AAB23>I<EB7F803801FFF0380780FC380E003F48EB1F8048EB0FC05A0060
EB07E012F000FC14F07E1403A3007C1307C7FCA215E0140F15C0141F1580EC3F00147E14
7C5C495A495A495A495A011EC7FC5B5B4913305B485A4848136048C7FC000E14E0001FB5
FC5A4814C0B6FCA21C2C7DAB23>I<EB3FC03801FFF03807C0FC380E007E487FEC1F8000
3F14C0A2EB800F1300A2000C131FC7FC1580A2EC3F00143E5C5CEB03F0EBFFC014F0EB00
FC143FEC1F8015C0140F15E0A2EC07F0A21238127C12FEA3EC0FE012F8006014C0007013
1F6C1480001EEB3F00380780FC3801FFF038007FC01C2D7DAB23>I<140EA2141E143EA2
147E14FEA2EB01BE1303143E1306130E130C131813381330136013E013C0EA0180120313
001206120E120C5A123812305A12E0B612FCA2C7EA3E00A9147F90381FFFFCA21E2D7EAC
23>I<000CEB0180380FC01F90B512005C5C14F014C0D80C7EC7FC90C8FCA8EB1FC0EB7F
F8380DE07C380F801F01001380000E130F000CEB07C0C713E0A2140315F0A4127812FCA4
48EB07E012E0006014C00070130F6C14806CEB1F006C133E380780F83801FFE038007F80
1C2D7DAB23>I<EB03F8EB0FFE90383E0780EBF8013901F007C03803E00FEA07C0EA0F80
A2391F00078091C7FC123EA2127EA2127CEB0FC038FC3FF0EBF07C38FDC01EB4487E0100
1380EC07C04814E0A214034814F0A4127CA3127EA2003E14E01407121E001F14C06CEB0F
803907801F003803C03E6C6C5A38007FF0EB1FC01C2D7DAB23>I<1230123C003FB512F8
A215F05A15E039700001C000601480140348EB0700140E140CC7121C5C143014705C495A
A2495AA249C7FCA25B130E131EA2133EA3133C137CA413FCA913781D2E7CAC23>I<EB1F
C0EBFFF03803E07C3807801E48487E001EEB0780A248EB03C0A4123E1407003F1480381F
C00F01E01300EBF81E6C6C5A3807FFF86C13E0C6FCEB3FF8EBFFFC3803C7FFD807831380
D81F0013C0001E133F48EB1FE0007C13070078EB03F012F84813011400A46C14E0007813
01007C14C0003C13036CEB0780390F800F003807E03C3801FFF038003FC01C2D7DAB23>
I<EB3F80EBFFF03803E0783807C03E48487E48487E003E14801407007E14C0127C00FC14
E01403A315F0A5007C1307127EA2003E130F7E6C131F3807803B3803E0F33800FFC39038
3F03E013001407A215C0A2140F001E1480003F14005C143E143C003E5B001C5B380E03E0
3807FF80D801FEC7FC1C2D7DAB23>I<4A7E4A7EA34A7EA24A7EA3EC1BF81419A2EC30FC
A2EC70FEEC607EA24A7EA349486C7EA2010380EC000FA201066D7EA3496D7EA2011FB57E
A29038180001496D7EA349147EA201E0147F4980A20001ED1F801203000716C0D80FF0EC
3FE0D8FFFC0103B5FCA2302F7EAE35>65 D<B612FCEDFF803A03F8000FC00001EC03F06F
7E6F7E82167E167FA6167E16FE5E4B5A4B5AED0FE0ED7F8090B6C7FC16E09039F80003F0
ED01FC6F7E167F821780161F17C0A61780163F17005E16FEED03FC0003EC0FF0B712C04B
C7FC2A2D7DAC32>I<13FF000713C0380F01F0381C00F8003F137C80A2143F001E7FC7FC
A4EB07FF137F3801FE1FEA07F0EA1FC0EA3F80EA7F00127E00FE14065AA3143F7E007E13
7F007FEBEF8C391F83C7FC390FFF03F83901FC01E01F207D9E23>97
D<EA07C012FFA2120F1207AC14FE9038C7FF809038CF03E09038DC01F09038F8007C4913
7E49133E497F1680A2150F16C0A9ED1F80A216005D6D133E6D5B01B05B9038BC01F09038
0E07E0390607FF80260001FCC7FC222F7EAD27>I<EB1FE0EB7FFC3801F01E3803E00739
07C01F80EA0F80EA1F005A003EEB0F00007E90C7FCA2127C12FCA9127EA215C07E6C1301
01801380380FC0033907E007003801F03E38007FF8EB1FC01A207E9E1F>I<15F8141FA2
14011400ACEB0FE0EB7FF83801F81E3803E0073807C003380F8001EA1F00481300123E12
7EA25AA9127C127EA2003E13017EEB8003000F13073903E00EFC3A01F03CFFC038007FF0
90391FC0F800222F7EAD27>I<EB1F80EBFFF03803E0783807C03E380F801E381F001FEC
0F80123E007E130715C0127C12FCA3B6FCA200FCC8FCA5127EA2003E14C0123F6C130139
0F80038001C013003803E00F3801F03C38007FF8EB1FC01A207E9E1F>I<3807C0FE39FF
C3FF809038C703E0390FDE01F0EA07F8496C7EA25BA25BB2486C487E3AFFFE1FFFC0A222
1E7E9D27>110 D<3807C0FE39FFC7FF809038CF03E0390FDC01F03907F800FC49137E49
133E49133FED1F80A3ED0FC0A8151F1680A2ED3F00A26D137E6D137C5D9038FC01F09038
CE07E09038C7FF80D9C1FCC7FC01C0C8FCA9487EEAFFFEA2222B7E9D27>112
D<380781F838FF87FEEB8E3FEA0F9CEA07B813B0EBF01EEBE000A45BB0487EB5FCA2181E
7E9D1C>114 D<1360A413E0A312011203A21207121FB512F0A23803E000AF1418A71438
3801F03014703800F860EB3FE0EB0F80152A7FA81B>116 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fs cmr10 10 1
/Fs 1 98 df<EB1FE0EBFFFC3803E03F3907000F80390F8007E0486C6C7E13E06E7EA26E
7E6C5A6C5AC8FCA4147FEB07FFEB3FE0EBFE00EA03F8EA0FF0EA1FC0123F485A90C7FC16
0C12FEA31401A26C13036CEB077C903980063E18383FC01E3A0FE0781FF03A03FFF00FE0
3A007F8007C026277DA52A>97 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Ft cmr12 14.4 20
/Ft 20 122 df<EE03804C7EA34C7EA34C7EA34C7EA34C7EA24C7E16E7A203017F16C3A2
0303801681A2DB07017F82A2030E80177FA24B80173FA24B6D7EA20378800370130FA203
F0804B1307A20201814B7FA24A488183A24AC78083A2020E82187FA24A6F7E021FB7FC4A
82A30278C8EA1FFC0270150FA202F0824A1507A249488284A249488384A249CA7FA24984
010E177FA2011E84193F133E017F8448486C4C7E000F01E04B487EB500FE037FEBFFFEA4
4F557CD458>65 D<B812FEEFFFC018F818FE26007FF8C73807FF806D4802017F011F6F6C
7E727E727E727E727EA2727EA2721380A21AC0A384A360A21A80A2601A00A24E5A180F61
4E5A4E5AF0FFE04D1380050790C7FCEF7FFC91B712E08418FE02F0C73801FF809438007F
E0F01FF8727EF003FE857213807213C0F17FE0A2F13FF0A21AF8191FA21AFCA81AF8193F
A21AF0197FF1FFE0A24E13C04E1380604E1300F03FFC013FEEFFF8496C02075BBA12C096
C7FC18FC18C046527AD153>I<B70107B612F8A4C66C48C80003EBF0006D486F5B6D486F
5BB3AD91B9FCA402F8C9FCB3B1496C4B7F496C4B7FB70107B612F8A44D527BD158>72
D<B812FCEFFFC018F818FE26007FFCC7381FFF806D4802017F011F9238007FF0F01FF872
7E727E727E841A807213C0A21AE0197FA21AF0A91AE0A219FF1AC0A24E13801A00604E5A
4E5A4E5AF07FE04D485A051F90C7FC91B712FC18F0188002F8CBFCB3AE497E497EB7FCA4
44527BD150>80 D<B812C017FEEFFFC018F026007FFCC713FC6D48EC0FFF011F03017F94
38007FE0727E727E727E180785727EA28684A286A762A26097C7FCA24E5A614E5A4E5A4E
5AF0FFC04D90C8FCEF0FFEEFFFF891B712C04DC9FC839126F8000113C09338003FF0EF0F
FC717EEF01FF85717F727EA2727EA2727EA985A81B0785180FA21B0F0607140E496C8249
6C6F141EB76EEB801C72EBC03C96387FE0F896381FFFF0CC000713E09638007F8050547B
D156>82 D<ECFFC0010F13F8013F13FE9039FF00FF80D801F0EB3FE0D803C0EB0FF0486C
6D7E01F86D7E000F816D13016F7EA3707E6C5AEA01E0C9FCA6ED3FFF020FB5FC9138FFFC
7F01071300EB1FF0EB7FC04848C7FCEA03FC485A485A485A123F5B485A187012FF90C8FC
A216FFA35D6D14BF007F14036DEB073F6C6C90390F1FC0E06C6C131E6C6C90393C0FE1C0
2707FE01F013FF0001B5486C13806C6C90398003FE00D907FCC712F834367BB43B>97
D<EC0FFE91387FFFE049B512F8903907F801FE90391FE0001FD93F80EB078049C7EA0FC0
01FE143F484815E00003157F485A485AA2485AEE3FC0003FED0F004991C7FCA2127FA35B
12FFAB127F7FA3123F6D1570121F6D15F0000F16E06D140112076C6CEC03C06D15806C6C
14076C6DEB0F00D93FC0131E6D6C137C903907FC03F06DB55AD9007F1380DA0FF8C7FC2C
367CB434>99 D<17FF4BB5FCA4ED0007160182B3A6EC0FF8EC7FFF49B512E0903907FC03
F090391FE0007C49487F49C7120F01FE80484880485A000781484880A2485AA2485AA212
7FA35B12FFAB127FA27FA2123FA27F121FA26C6C5C00075D7F6C6C5C6C6C5C6C6C021E7F
6D6C017C13E0D91FC049EBFF8090390FF807E00103B512800100495ADA1FF091C7FC3954
7CD241>I<EC0FF891B5FC010314C090390FF80FF090391FC003FC90397F8001FE49C77E
4848EC7F804848143F49EC1FC0485A000FED0FE05B001F16F01607485AA2007F16F8A25B
160312FF90B7FCA30180C9FCA8127F7FA2123FA26D1538121F17786C6C1570000716F06D
15E06C6C14016C6CEC03C06C6C15806D6C130F6D6CEB1F00D90FF0133C903907FE01F801
01B512E06D6C1380DA07FCC7FC2D367DB434>I<EB7F80B5FCA41203C6FC137FB3A6ED07
FC92383FFF8092B512E0913981F00FF8913983C007FC9139870003FE028E1301029C6D7E
14B814B002F06E7E5CA25CA35CB3AD2601FFE0903801FFE0B600C0B612C0A43A537CD241
>104 D<1378EA01FE487E487FA66C90C7FC6C5AEA007890C8FCB0EB7F80B5FCA41203C6
FC137FB3B3A43801FFE0B61280A419507CCF21>I<EBFF80B5FCA41203C6FC137FB3A793
B512F8A4043F138093381FFC0017F017C094C7FC163E5E5E4B5A4B5AED07804BC8FC151E
5D15FC1481EC83FEEC87FF148F029E7F9138BC7FC0ECF83F02F07F4A6C7EECC00F02807F
4A6C7E6F7EA26F7E6F7F167F83707E161F83707E160783707E8318802601FFC04913E0B6
D8803F13FFA438537DD23E>107 D<EB7F80B5FCA41203C6FC137FB3B3B3B13801FFE0B6
12C0A41A537CD221>I<01FFEB07FCB590383FFF8092B512E0913901F00FF8913903C007
FC000349C66C7EC6010E13016D486D7E5C143002706E7E146014E05CA35CB3AD2601FFE0
903801FFE0B600C0B612C0A43A347CB341>110 D<EC0FFC91387FFF8049B512E0903907
F807F890391FE001FE90393F80007F017EC7EA1F80496E7E48486E7E00038248486E7EA2
48486E7EA248486E7EA2003F82A24848ED7F80A400FF17C0AB007F1780A26D15FFA2003F
1700A2001F5E6D1401000F5E6D140300075E6C6C4A5A6C6C4A5AA2D8007FEC3F806D6C49
C7FC90391FE001FE903907F807F86DB55AD9007F1380DA0FFCC8FC32367CB43B>I<9039
7F8007FCB590387FFF800281B512E0913987F00FF891398F8003FC000390399E0001FFC6
01BC6D7FD97FF86E7E4A6E7E4A6E7E4A140F844A6E7EA2717EA3717EA4711380AB4D1300
A44D5AA24D5AA2606E140F4D5A6E5D6E4A5A6E4A5A02BC4AC7FC029E495A028FEB07FC91
3987E01FF00281B512C0DA807F90C8FCED0FF892CAFCB13801FFE0B612C0A4394B7DB341
>I<01FFEB1F80B5EB7FF0913801FFF8913803E1FC91380783FE0003EB0F07C6131EEB7F
1C1438143091387003FC91386000F0160014E05CA45CB3AA8048487EB612F0A427347DB3
2E>114 D<D907FE13C090387FFF8148B512E33907F803FF390FC0007F4848133F48C712
1F003E140F007E1407127C00FC1403A315017EA27E7F6C6C90C7FC13F013FF6C13F86CEB
FF806C14E06C14F86C14FEC680013F1480010714C0D9003F13E014039138007FF0151F00
E0140FED07F8A26C1403A215017EA36C15F0A26C14036C15E015076DEB0FC06DEB1F80D8
FDF0EB3F0039F8FC01FE39F07FFFF8D8E01F13E0D8C00390C7FC25367CB42E>I<B60007
B5D8F007B5FCA400039027E0001FFEC713F06C0180D90FF8EC7FC06C0307ED3F80F21F00
017F0203151EA26D6C801A1CA26D6C496C5CA26E6E1478010FDA0E7F1470A26E6F13F001
07DA1C3F5CA26EEDC0010103DA381F5CA26E0178EBE0030101DA700F5CA26E01F0EBF007
6DDAE00791C7FCA2DA7F81ECF80EEEC003A2DA3FC36E5AEE8001A2DA1FE76E5A93C7FCA2
DA0FFEEC7F70A219F06E486E5AA36E486E5AA36E486E5AA36E486EC8FC50347EB255>
119 D<B60103B51280A4000301F09039007FF800C601C0EC3FE0017FED1F8095C7FC133F
6E141E131F171C6E143C010F15388001075DA26E14F001035D8001014A5AA26E13036D5D
1580027F49C8FCA26F5A023F130E15E0021F5BA2EDF03C020F133815F802075BA2EDFCF0
02035B15FE6E6C5AA36E5BA26FC9FCA3153EA2151CA2153C153815781570A215F05D1401
5DA2003E495A127F486C48CAFCA2140E141E495A6C5B007C5B383F03E06CB45A00075BD8
01FCCBFC394B7EB23E>121 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fu cmbx12 17.28 13
/Fu 13 122 df<B96C90B91280A6D8000102C0C9000102C0C7FCB3B3A293BBFCA604C0C9
1201B3B3A6B96C90B91280A671627AE17E>72 D<B800FC047FB612E0A6D800070280CB6C
EB80006D6EDE07FCC7FC666D6E611D0F6D6E611D1FA26E6D611D3F6E6D611D7F6E6D96C8
FC65A26E6D4D5AA26E6E5F1C036E6E5F1C076E6E5F1C0FA26E6E5F1C1F6F6D5F1C3F6F6D
5F1C7FA26F6D4CC9FCA26F6D5E1B016F6E5D1B03A26F6E4A5AA26F6E5D1B0F6F6E5D1B1F
706D5D1B3FA2706D5D1B7F706D92CAFC63706D5C1A01A2706E485AA27002C05B1A077002
E05B1A0F7002F05B1A1FA27101F85B1A3F7101FC5B1A7F7101FE90CBFC62A2716D5AA271
5CA2715CA3715CA2715CA2725BA2725BA37290CCFCA2725AA2725AA2725A73637DE17A>
86 D<913803FFFE027FEBFFF00103B612FE010F6F7E4916E090273FFE001F7FD97FE001
077FD9FFF801017F486D6D7F717E486D6E7F85717FA2717FA36C496E7FA26C5B6D5AEB1F
C090C9FCA74BB6FC157F0207B7FC147F49B61207010F14C0013FEBFE004913F048B512C0
4891C7FC485B4813F85A5C485B5A5CA2B55AA45FA25F806C5E806C047D7F6EEB01F96C6D
D903F1EBFF806C01FED90FE114FF6C9027FFC07FC01580000191B5487E6C6C4B7E011F02
FC130F010302F001011400D9001F90CBFC49437CC14E>97 D<92380FFFC04AB512FC020F
ECFF80023F15E091B712F80103D9FE037F499039F0007FFF011F01C0011F7F49496D7F49
90C76C7F49486E7F48498048844A804884485B727E5A5C48717EA35A5C721380A2B5FCA3
91B9FCA41A0002C0CBFCA67EA380A27EA27E6E160FF11F806C183F6C7FF17F006C7F6C6D
16FE6C17016D6C4B5A6D6D4A5A6D01E04A5A6D6DEC3FE0010301FC49B45A6D9026FFC01F
90C7FC6D6C90B55A021F15F8020715E0020092C8FC030713F041437CC14A>101
D<EE3FFC0307B51280033F14C04AB612F0020715F84A9038F03FFC4AEB807F913A7FFE00
FFFE4A5A4B4813FF4913F05B4913E0A24913C0A27013FE4949EB7FFCEF3FF8EF1FF0EF07
C094C7FCB0B812C0A6D8001F01C0C8FCB3B3B0007FB612FCA638657CE431>I<F107F8DB
7FFEEC3FFE020FB5D8F001B5FC027FDAFE03148049B7128F49DCDFFD13C0010FD9F00FEB
FFC149D9800114014990C7EBFC0349486E6C7E4948EC3FFF48496E018113800780130048
F0C03E97C7FC48496E7FA34884A96C60A36C6D4A5BA26C60A26C6D4A90C8FC6D6C4A5A6D
6C4A5A6D6D485BDBF00F5B4990B612C060D97C7F4AC9FCD9FC0F14F09126007FFECAFC92
CCFC1201A47FA27F8014F091B77E18FE6CEFFFC019F06D17FC19FF6D846D846D846D8401
3F8490BAFC0003854801E0C712014890C9000F7F484816014848EE007F4848717E8512FF
5B85A56D5F007F616D173F003F616D177F6C6C4D5A6C01C003035B6C6D4B5B6C01F8031F
5BC601FF92B5C7FC6D01F8011F5B011F90B712F8010717E0010094C8FC020F15F0DA003F
01FCC9FC4A607CC151>I<EB0FE0EB3FF8497E48B5FCA24880A24880A76C5CA26C91C7FC
A238007FFC6D5AEB0FE090C9FCAF903807FF80007FB5FCA6C6FC7F7FB3B3AEB712C0A622
657BE42C>105 D<902607FF80EB1FFFB691B512F0040714FC041F14FF4C8193267FE07F
7F922781FE001F7FC6DA83F86D7F6DD987F07F6DD98FC0814C7F039FC78015BE03BC8003
FC825DA25DA25DA45DB3B2B7D8F007B71280A651417BC05A>110
D<D90FFFEB0FFCB690383FFF8093B512E04B14F04B14F8923907FC7FFC92390FE0FFFEC6
EC1F806DD93F0113FF6D133E157E157C15F8A215F07013FEA24BEB7FFCEF3FF8EF0FE04B
90C7FCA55DB3B0B712F8A638417BC042>114 D<913A3FFF8007800107B5EAF81F011FEC
FE7F017F91B5FC48B8FC48EBE0014890C7121FD80FFC1407D81FF0801600485A007F167F
49153FA212FF171FA27F7F7F6D92C7FC13FF14E014FF6C14F8EDFFC06C15FC16FF6C16C0
6C16F06C826C826C826C82013F1680010F16C01303D9007F15E0020315F0EC001F150004
1F13F81607007C150100FC81177F6C163FA2171F7EA26D16F0A27F173F6D16E06D157F6D
16C001FEEDFF806D0203130002C0EB0FFE02FCEB7FFC01DFB65A010F5DD8FE0315C026F8
007F49C7FC48010F13E035437BC140>I<EC07E0A6140FA5141FA3143FA2147FA214FF5B
A25B5B5B5B137F48B5FC000F91B512FEB8FCA5D8001F01E0C8FCB3AFEF0FC0AC171F6D6D
1480A2173F6D16006F5B6D6D137E6D6D5B6DEBFF836EEBFFF86E5C020F14C002035C9126
003FFCC7FC325C7DDA3F>I<007FB600C0017FB512F8A6D8001F01F8C70007EBF0006D04
0190C7FC6D6D5D6D6D4A5A6D6D4A5A70495A6D4C5A6E7F6E6D495A6E6D495A7049C8FC6E
4A5A6E6D485A6E6D485A6E13FFEF8FF06EEC9FE06FEBFFC06F5C6F91C9FC5F6F5B816F7F
6F7F8481707F8493B57E4B805D4B80DB0FF37FDB1FE17F04C080153F4B486C7F4B486C7F
4A486D7F4A486D7F4A5A4B6D7F020F6E7F4A486D7F4A486D804A5A4AC86C7F49486F7F4A
6F7F0107707FEB3FFFB600F049B7FCA650407EBF55>120 D<B700C00103B512FCA6D800
3F01C0C8381FFE006FED07F0A26D6D5E190F6D6D5E191F6D6D5E193F6D95C7FC6F5D6D17
7E6F15FEA26D6E495AA26E6D5C18036E6D5C18076E5E70130F6E5E70131FA26E6D495AA2
6E6D91C8FC606E6D137E18FE6E5D17816F5C17C3A26FEBE7F0A26FEBF7E017FF6F5CA26F
5CA26F91C9FCA36F5BA26F5BA2705AA2705AA2705AA35FA25F163F94CAFC5E167E16FED8
07E05CD81FF81301487E486C495AA2B5495AA24B5A5E151F4B5A6C4849CBFC15FEEBFC01
393FF807FC391FF03FF06CB55A6C5C6C91CCFCC613FCEB1FE04E5D7DBF55>I
E
%EndDVIPSBitmapFont
end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
letter
%%EndPaperSize

%%EndSetup
%%Page: 1 1
1 0 bop 942 555 a Fu(V)-13 b(erifying)54 b(Hex)g(strategies)373
1001 y Ft(Ry)m(an)38 b(Ha)m(yw)m(ard)1158 958 y Fs(a)1239
1001 y Ft(Bro)s(deric)m(k)f(Arneson)2215 958 y Fs(a)2298
1001 y Ft(Philip)h(Henderson)3203 958 y Fs(a)245 1162
y Fr(a)284 1195 y Fq(Dep)-5 b(artment)35 b(of)d(Computing)i(Scienc)-5
b(e,)32 b(University)h(of)f(A)n(lb)-5 b(erta,)33 b(Edmonton,)i(A)n(lb)
-5 b(erta,)880 1308 y(Canada,)34 b Fp(f)p Fq(haywar)-5
b(d,br)g(o)g(deric,ph)p Fp(g)q Fq(@cs.ualb)g(erta)q(.c)g(a)p
166 1578 3288 4 v 166 1708 a Fo(Abstract)166 1914 y Fn(W)d(e)41
b(presen)m(t)e(a)h(concise)g(and/or-tree)g(notation)g(for)g(describing)
d(Hex)j(strategies)g(together)166 2027 y(with)20 b(an)h(easily)f
(implemen)m(ted)g(algorithm)g(for)h(v)m(erifying)e(strategy)k
(correctness.)f(T)-8 b(o)21 b(illustrate)166 2140 y(our)30
b(algorithm,)g(w)m(e)g(use)g(it)g(to)h(v)m(erify)f(Jing)g(Y)-8
b(ang's)31 b(7)p Fp(\002)p Fn(7)g(cen)m(tre-op)s(ening)f(strategy)-8
b(.)166 2401 y Fq(Key)32 b(wor)-5 b(ds:)68 b Fn(Hex,)31
b(strategy)g(v)m(eri\014cation)p 166 2505 V 166 -227
a Fm(submitte)-5 b(d)35 b(22)f(Jan)h(2006)f(to)h(CG)g(2006)868
3195 y @beginspecial 0 @llx 0 @lly 68 @urx 43 @ury 680
@rwi @setspecial
%%BeginDocument: B3.eps
%!PS-Adobe-3.0
%%Creator: Jack van Rijswijck, thanks to Cameron Browne
%%BoundingBox: 0 0 68 43
%%Pages: 0
%%EndComments

/OriginX -2 def
/OriginY 21 def
%---------------- Variables -------------------

/DimX 3 def
/DimY 3 def
/Scale 1.2 def


%---------------- Constants -------------------

/Root2 1.414213562 def
/Root3 1.732050808 def

/Chars {[(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)(n)]} def
/Digits {[(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)(12)(13)(14)]} def

/HexRadius 5 Scale mul def
/HexLineWidth 0.014 def
/CircleRadius 3.3 Scale mul def
/CircleLineWidth 0.346 def
/BoardOutlineWidth 0.5 def
%/TextHeight 4.5 def
/TextHeight 6 def
/TextWidth TextHeight 0.45 mul def
/BoardShade 0.8 def
/FadedBoardShade 0.9 def
/CoordinatesShade 0.5 def
/DeadPieceShade 0.6 def
/DeadCellShade 0.6 def
/EarLength 0.5 def
/GraphVertexSize 1.5 def
/GraphLineWidth 0.5 def
/MoveEvalSize 0.9 def
/FatLineWidth 1.0 def
/MarkerSize 1.2 def

%----------- Functions -------------

/HexCenterX { % X coordinate of center of cell: i j HexX
    /j exch def
    /i exch def
    OriginX i j add HexRadius mul 1.5 mul add
} def

/HexCenterY { % Y coordinate of center of cell: i j HexY
    /j exch def
    /i exch def
    OriginY i j sub HexRadius mul Root3 mul 2 div sub
} def

/HexCenterVertex {
    /j exch def
    /i exch def
    i j HexCenterX
    i j HexCenterY
} def

/HexTopLeftVertex {
    /j exch def
    /i exch def
    i j HexCenterX HexRadius 2 div sub
    i j HexCenterY HexRadius Root3 mul 2 div add
} def

/HexTopRightVertex {
    /j exch def
    /i exch def
    i j HexCenterX HexRadius 2 div add
    i j HexCenterY HexRadius Root3 mul 2 div add
} def

/HexRightVertex {
    /j exch def
    /i exch def
    i j HexCenterX HexRadius add
    i j HexCenterY 
} def

/HexBottomRightVertex {
    /j exch def
    /i exch def
    i j HexCenterX HexRadius 2 div add
    i j HexCenterY HexRadius Root3 mul 2 div sub
} def

/HexBottomLeftVertex {
    /j exch def
    /i exch def
    i j HexCenterX HexRadius 2 div sub
    i j HexCenterY HexRadius Root3 mul 2 div sub
} def

/HexLeftVertex {
    /j exch def
    /i exch def
    i j HexCenterX HexRadius sub
    i j HexCenterY 
} def

/HexUpRightEdge {
    /size exch def
    
    HexRadius 2 div size mul
    HexRadius Root3 mul 2 div size mul
} def

/HexRightEdge {
    /size exch def
    
    HexRadius size mul
    0
} def

/HexDownRightEdge {
    /size exch def

    HexRadius 2 div size mul
    HexRadius Root3 mul 2 div neg size mul
} def

/HexDownLeftEdge {
    /size exch def

    HexRadius 2 div neg size mul
    HexRadius Root3 mul 2 div neg size mul
} def

/HexLeftEdge {
    /size exch def

    HexRadius neg size mul
    0 size mul
} def

/HexUpLeftEdge {
    /size exch def

    HexRadius 2 div neg size mul
    HexRadius Root3 mul 2 div size mul
} def

/HexagonPath{
    /j exch def
    /i exch def

    newpath
    i j HexLeftVertex moveto

    1.0 HexUpRightEdge rlineto
    1.0 HexRightEdge rlineto
    1.0 HexDownRightEdge rlineto
    1.0 HexDownLeftEdge rlineto
    1.0 HexLeftEdge rlineto
    1.0 HexUpLeftEdge rlineto

    closepath
} def

/HexTopLeftEar {
    /j exch def
    /i exch def

    newpath
    i j HexTopLeftVertex moveto
    EarLength HexUpLeftEdge rlineto
    stroke
} def

/HexTopRightEar {
    /j exch def
    /i exch def

    newpath
    i j HexTopRightVertex moveto
    EarLength HexUpRightEdge rlineto
    stroke
} def

/HexRightEar {
    /j exch def
    /i exch def

    newpath
    i j HexRightVertex moveto
    EarLength HexRightEdge rlineto
    stroke
} def

/HexBottomRightEar {
    /j exch def
    /i exch def

    newpath
    i j HexBottomRightVertex moveto
    EarLength HexDownRightEdge rlineto
    stroke
} def

/HexBottomLeftEar {
    /j exch def
    /i exch def

    newpath
    i j HexBottomLeftVertex moveto
    EarLength HexDownLeftEdge rlineto
    stroke
} def

/HexLeftEar {
    /j exch def
    /i exch def

    newpath
    i j HexLeftVertex moveto
    EarLength HexLeftEdge rlineto
    stroke
} def

/HexagonEars {
    /j exch def
    /i exch def

    HexLineWidth setlinewidth
    
    i j HexTopLeftEar
    i j HexTopRightEar
    i j HexRightEar
    i j HexBottomRightEar
    i j HexBottomLeftEar
    i j HexLeftEar
} def

/HexDeadCell {
    /j exch def
    /i exch def

    i j DeadCellShade ShadedHexagon
} def

/HexDeadMarkedCell {
    /j exch def
    /i exch def

    i j DeadCellShade ShadedHexagon
    i j HexBlackMarker
} def
    
    
/ShadedHexagonWithEars {
    /shade exch def
    /j exch def
    /i exch def

    i j shade ShadedHexagon
    i j HexagonEars
} def
    
/BoundedShadedHexagonWithEars {
    /shade exch def
    /j exch def
    /i exch def

    i j shade BoundedShadedHexagon
    i j BoundedHexagonWithEars
} def

/BoundedHexagonWithEars {
    /j exch def
    /i exch def

    i j BoundedHexagon

    i 1 gt {
	j 1 gt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexLeftVertex moveto
	EarLength HexLeftEdge rlineto
	stroke

	j DimY lt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexTopLeftVertex moveto
	EarLength HexUpLeftEdge rlineto
	stroke
    }
    if

    i DimX lt {
	j DimY lt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexRightVertex moveto
	EarLength HexRightEdge rlineto
	stroke

	j 1 gt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexBottomRightVertex moveto
	EarLength HexDownRightEdge rlineto
	stroke
    }
    if

    j DimY lt {
	i 1 gt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexTopRightVertex moveto
	EarLength HexUpRightEdge rlineto
	stroke

	i DimX lt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexRightVertex moveto
	EarLength HexRightEdge rlineto
	stroke
    }
    if

    j 1 gt {
	i DimX lt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexBottomLeftVertex moveto
	EarLength HexDownLeftEdge rlineto
	stroke

	i 1 gt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexLeftVertex moveto
	EarLength HexLeftEdge rlineto
	stroke
    }
    if
} def

/BoundedShadedHexagon {
    /shade exch def
    /j exch def
    /i exch def

    i j shade FillHexagon
    i j BoundedHexagon
} def

/BoundedHexagon {
    /j exch def
    /i exch def

    0 setgray
    HexLineWidth setlinewidth
    i j HexagonPath
    stroke

    BoardOutlineWidth setlinewidth

    i 1 eq {
	newpath
	i j HexLeftVertex moveto
	1.0 HexUpRightEdge rlineto
	1.0 HexRightEdge rlineto
	stroke
    }
    if

    j DimY eq {
	newpath
	i j HexTopLeftVertex moveto
	1.0 HexRightEdge rlineto
	1.0 HexDownRightEdge rlineto
	stroke
    }
    if

    i DimX eq {
	newpath
	i j HexRightVertex moveto
	1.0 HexDownLeftEdge rlineto
	1.0 HexLeftEdge rlineto
	stroke
    }
    if

    j 1 eq {
	newpath
	i j HexBottomRightVertex moveto
	1.0 HexLeftEdge rlineto
	1.0 HexUpLeftEdge rlineto
	stroke
    }
    if
} def

/ShadedHexagon {
    /shade exch def
    /j exch def
    /i exch def

    i j shade FillHexagon
    i j Hexagon
} def

/Hexagon { % call: i j Hexagon
    /j exch def
    /i exch def

    i j HexagonPath
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

/FillHexagon {   % call: i j shade FillHexagon
    /shade exch def
    /j exch def
    /i exch def

    i j HexagonPath
    0 setlinewidth
    shade setgray
    fill
    i j Hexagon
} def

/HexBoardOutlinePath {
    newpath
    1 1 HexLeftVertex moveto

    1 1 DimY {
	1.0 HexUpRightEdge rlineto
	1.0 HexRightEdge rlineto
    } for

    1 1 DimX 1 sub {
	1.0 HexDownRightEdge rlineto
	1.0 HexRightEdge rlineto
    } for
    1.0 HexDownRightEdge rlineto

    1 1 DimY {
	1.0 HexDownLeftEdge rlineto
	1.0 HexLeftEdge rlineto
    } for

    1 1 DimX 1 sub {
	1.0 HexUpLeftEdge rlineto
	1.0 HexLeftEdge rlineto
    } for
    1.0 HexUpLeftEdge rlineto

    closepath
} def

/HexBoardOutline {
    HexBoardOutlinePath
    BoardOutlineWidth setlinewidth
    0 setgray
    stroke
} def

/HexBoardFillNoOutline {
    /shade exch def
    HexBoardOutlinePath
    0 setlinewidth
    shade setgray
    fill
} def

/HexBoardFill {
    /shade exch def
    shade HexBoardFillNoOutline
    HexBoardOutline
} def

/HexShannonGrid {
    1 1 DimY {
	/j exch def
	1 1 DimX {
	    /i exch def
	    i j HexVertex
	} for
    } for

    1 1 DimY {
	/j exch def
	1 j DimX j HexLine
    } for

    1 1 DimX {
	/i exch def
	i 1 i DimY HexLine
    } for

    2 1 DimX DimY add 2 sub {
	/i exch def
	i DimY lt {1 i} {i DimY sub 1 add DimY} ifelse
	i DimX lt {i 1} {DimX i DimX sub 1 add} ifelse
	HexLine
    } for
} def

/HexBoardGrid {
    1 1 DimY {
	/j exch def
	1 1 DimX {
	    /i exch def
	    i j Hexagon
	} for
    } for
} def

/DrawHexBoard {
    BoardShade HexBoardFill
    HexBoardGrid
} def

/DrawHexBoardNoOutline {
    1 1 DimY {
	/j exch def
	1 1 DimX {
	    /i exch def
	    i j BoardShade FillHexagon
	    i j Hexagon
	} for
    } for
} def

/YBoardOutlinePath {
    newpath
    0 0 HexLeftVertex moveto

    1 1 DimX {
	1.0 HexUpRightEdge rlineto
	1.0 HexRightEdge rlineto
    } for

    1 1 DimX {
	1.0 HexDownRightEdge rlineto
	1.0 HexDownLeftEdge rlineto
    } for

    1 1 DimX {
	1.0 HexLeftEdge rlineto
	1.0 HexUpLeftEdge rlineto
    } for

    closepath
} def

/YBoardOutline {
    YBoardOutlinePath
    BoardOutlineWidth setlinewidth
    0 setgray
    stroke
} def

/YBoardFill {
    /shade exch def
    YBoardOutlinePath
    0 setlinewidth
    shade setgray
    fill
    YBoardOutline
} def

/YBoardGrid {
    0 1 DimX 1 sub {
	/j exch def
	0 1 DimX 1 sub j sub {
	    /i exch def
	    i j Hexagon
	} for
    } for
} def

/DrawYBoard {
    BoardShade YBoardFill
    YBoardGrid
} def

/FontSelect { % bold italic FontSelect
    /italic exch def
    /bold exch def

    bold {
	italic {
	    /Times-BoldItalic findfont TextHeight scalefont setfont
	} {
	    /Times-Bold findfont TextHeight scalefont setfont
	}
	ifelse
    } {
	italic {
	    /Times-Italic findfont TextHeight scalefont setfont
	} {
	    /Times findfont TextHeight scalefont setfont
	}
	ifelse
    }
    ifelse
} def
	    
/LabelString {   % call: i j (str) strlen LabelString
    /strlen exch def
    /str exch def
    /j exch def
    /i exch def

    newpath
    i j HexCenterX TextWidth strlen mul 0.5 mul sub
    i j HexCenterY TextHeight 0.225 mul sub
    moveto
    str
    show
} def

/AbsLabelString {
    /strlen exch def
    /str exch def
    /y exch def
    /x exch def

    newpath
    x AbsCoordX TextWidth strlen mul 0.5 mul sub
    y AbsCoordY TextHeight 0.225 mul sub
    moveto
    str
    show
} def

/LabelStringVerb { % i j (str) strlen shade bold italic LabelStringVerb
    /italic exch def
    /bold exch def
    /shade exch def
    /strlen exch def
    /str exch def
    /j exch def
    /i exch def
    bold italic FontSelect
    shade setgray
    i j str strlen LabelString
} def

/HexBoardCoordinates {
    false true FontSelect
    CoordinatesShade setgray
    
    1 1 DimX {
	/i exch def
	i 0 Chars i 1 sub get 1 LabelString
	i DimY 1 add Chars i 1 sub get 1 LabelString
    } for

    1 1 DimY {
	/j exch def
	0 j Digits j 1 sub get
	DimY 9 gt {2} {1} ifelse
	LabelString
	DimX 1 add j Digits j 1 sub get
	DimY 9 gt {2} {1} ifelse
	LabelString
    } for
} def

/HexEdgePieceLocationBottomLeft {
    /dist exch def
    /midx DimX 1 add 2 div def
    /midy DimY 1 add 2 div def

    midx
    2 midx sub dist sub
} def

/HexEdgePieceLocationTopRight {
    /dist exch def
    /midx DimX 1 add 2 div def
    /midy DimY 1 add 2 div def

    midx
    DimX DimY add midx sub dist add
} def

/HexEdgePieceLocationTopLeft {
    /dist exch def
    /midx DimX 1 add 2 div def
    /midy DimY 1 add 2 div def
    
    2 midy sub dist sub
    midy
} def

/HexEdgePieceLocationBottomRight {
    /dist exch def
    /midx DimX 1 add 2 div def
    /midy DimY 1 add 2 div def
    
    DimX DimY add midy sub dist add
    midy
} def

/HexWhiteTerminal {
    (T) 1 HexWhiteLabelledPiece
} def

/HexBlackTerminal {
    (T) 1 HexBlackLabelledPiece
} def
    
/HexShannonTerminalBottomLeft {
    /dist exch def

    dist HexEdgePieceLocationBottomLeft
    HexWhiteTerminal
} def

/HexShannonTerminalTopRight {
    /dist exch def

    dist HexEdgePieceLocationTopRight
    HexWhiteTerminal
} def

/HexShannonTerminalConnectionsWhite {
    /dist exch def
    /midx DimX 1 add 2 div def
    /midy DimY 1 add 2 div def

    1 1 DimX {
	/i exch def
	dist HexEdgePieceLocationBottomLeft i 1 HexLine
	dist HexEdgePieceLocationTopRight i DimY HexLine
    } for

    dist HexShannonTerminalBottomLeft
    dist HexShannonTerminalTopRight
} def

/HexShannonTerminalTopLeft {
    /dist exch def

    dist HexEdgePieceLocationTopLeft
    HexBlackTerminal
} def

/HexShannonTerminalBottomRight {
    /dist exch def

    dist HexEdgePieceLocationBottomRight
    HexBlackTerminal
} def

/HexShannonTerminalConnectionsBlack {
    /dist exch def
    /midx DimX 1 add 2 div def
    /midy DimY 1 add 2 div def

    1 1 DimY {
	/j exch def
	dist HexEdgePieceLocationTopLeft 1 j HexLine
	dist HexEdgePieceLocationBottomRight DimX j HexLine
    } for

    dist HexShannonTerminalTopLeft
    dist HexShannonTerminalBottomRight
} def

/HexBoardEdgePieceTopLeft {
    /dist exch def
    dist HexEdgePieceLocationTopLeft HexBlackPiece
} def
/HexBoardEdgePieceBottomLeft {
    /dist exch def
    dist HexEdgePieceLocationBottomLeft HexWhitePiece
} def
/HexBoardEdgePieceTopRight {
    /dist exch def
    dist HexEdgePieceLocationTopRight HexWhitePiece
} def
/HexBoardEdgePieceBottomRight {
    /dist exch def
    dist HexEdgePieceLocationBottomRight HexBlackPiece
} def

/HexBoardEdgePieces { % extradist
    /dist exch def

    dist HexBoardEdgePieceTopLeft
    dist HexBoardEdgePieceBottomLeft
    dist HexBoardEdgePieceTopRight
    dist HexBoardEdgePieceBottomRight
} def

/HexDot { % i j size
    /size exch def
    /j exch def
    /i exch def

    0 setlinewidth
    0 setgray
    newpath
    i j HexCenterVertex size 0 360 arc
    fill
} def


/HexWhiteMarkedPiece {
    /j exch def
    /i exch def

    i j HexWhitePiece
    
    0 setgray
    0 setlinewidth
    newpath
    i j HexCenterVertex MarkerSize 0 360 arc
    fill
} def

/HexBlackMarkedPiece {
    /j exch def
    /i exch def

    i j HexBlackPiece
    
    1 setgray
    0 setlinewidth
    newpath
    i j HexCenterVertex MarkerSize 0 360 arc
    fill
} def


/HexDoubleMarker {
    /shaderight exch def
    /shadeleft exch def
    /j exch def
    /i exch def

    shadeleft setgray
    0 setlinewidth
    newpath
    i j HexCenterX MarkerSize sub i j HexCenterY MarkerSize 0 360 arc
    fill

    0 setgray
    CircleLineWidth setlinewidth
    newpath
    i j HexCenterX MarkerSize sub i j HexCenterY MarkerSize 0 360 arc
    stroke

    shaderight setgray
    0 setlinewidth
    newpath
    i j HexCenterX MarkerSize add i j HexCenterY MarkerSize 0 360 arc
    fill

    0 setgray
    CircleLineWidth setlinewidth
    newpath
    i j HexCenterX MarkerSize add i j HexCenterY MarkerSize 0 360 arc
    stroke
} def

/HexBlackWhiteMarker {
    /j exch def
    /i exch def
    i j 0.0 1.0 HexDoubleMarker
} def

/HexWhiteBlackMarker {
    /j exch def
    /i exch def
    i j 1.0 0.0 HexDoubleMarker
} def
        
/HexMarker {
    /j exch def
    /i exch def

    0 setlinewidth
    newpath
    i j HexCenterVertex MarkerSize 0 360 arc
    fill

    0 setgray
    CircleLineWidth setlinewidth
    newpath
    i j HexCenterVertex MarkerSize 0 360 arc
    stroke  
} def

/HexBlackMarker {
    /j exch def
    /i exch def

    0 setgray
    i j HexMarker
} def

/HexWhiteMarker {
    /j exch def
    /i exch def

    1 setgray
    i j HexMarker
} def
    
/HexVertex {
    /j exch def
    /i exch def

    i j GraphVertexSize HexDot
} def

/HexLine {
    /j2 exch def
    /i2 exch def
    /j1 exch def
    /i1 exch def

    GraphLineWidth setlinewidth
    0 setgray
    newpath
    i1 j1 HexCenterVertex moveto
    i2 j2 HexCenterVertex lineto
    stroke
} def

/HexPiece { % i j shade
    /shade exch def
    /j exch def
    /i exch def

    0 setlinewidth
    shade setgray
    newpath
    i j HexCenterVertex CircleRadius 0 360 arc
    fill

    0 setgray
    CircleLineWidth setlinewidth
    newpath
    i j HexCenterVertex CircleRadius 0 360 arc
    stroke
} def

/HexWhitePiece {
    /j exch def
    /i exch def

    i j 1.0 HexPiece
} def

/HexBlackPiece {
    /j exch def
    /i exch def

    i j 0.0 HexPiece
} def

/HexWhiteLabelledPiece { % i j (str) strlen
    /strlen exch def
    /str exch def
    /j exch def
    /i exch def

    i j HexWhitePiece
    i j str strlen 0.0 true true LabelStringVerb
} def

/HexBlackLabelledPiece { % i j (str) strlen
    /strlen exch def
    /str exch def
    /j exch def
    /i exch def

    i j HexBlackPiece
    i j str strlen 1.0 true true LabelStringVerb
} def

/DrawBox { % minx miny maxx maxy
    /maxy exch def
    /maxx exch def
    /miny exch def
    /minx exch def

    newpath
    minx miny moveto
    maxx minx sub 0 rlineto
    0 maxy miny sub rlineto
    minx maxx sub 0 rlineto
    0 miny maxy sub rlineto
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

/HexMoveEval {
    /eval exch def
    /j exch def
    /i exch def

%    i j 1.0 eval sub FadedBoardShade mul BoundedShadedHexagon
    newpath
    i j HexCenterVertex moveto
    MoveEvalSize HexLeftEdge rlineto
    MoveEvalSize HexUpRightEdge rlineto
    MoveEvalSize HexRightEdge rlineto
    MoveEvalSize HexDownRightEdge rlineto
    MoveEvalSize HexDownLeftEdge rlineto
    MoveEvalSize HexLeftEdge rlineto
    MoveEvalSize HexUpLeftEdge rlineto
%    eval MoveEvalSize mul HexLeftEdge rlineto
%    eval MoveEvalSize mul HexUpRightEdge rlineto
%    eval MoveEvalSize mul HexRightEdge rlineto
%    eval MoveEvalSize mul HexDownRightEdge rlineto
%    eval MoveEvalSize mul HexDownLeftEdge rlineto
%    eval MoveEvalSize mul HexLeftEdge rlineto
%    eval MoveEvalSize mul HexUpLeftEdge rlineto

    closepath

    0 setlinewidth
    1.0 eval sub BoardShade mul setgray
    fill
} def

/HexSymmetricalMoveEval {
    /eval exch def
    /j exch def
    /i exch def

    i j eval HexMoveEval
    DimX 1 add i sub DimY 1 add j sub eval HexMoveEval
} def

/AbsCoordX {
    /x exch def

    OriginX x Scale mul add
} def

/AbsCoordY {
    /y exch def

    OriginY y Scale mul add
} def

/AbsCoords {
    /y exch def
    /x exch def

    x AbsCoordX
    y AbsCoordY
} def

/AbsLine {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def

    newpath
    x1 y1 AbsCoords moveto
    x2 y2 AbsCoords lineto
    stroke
} def

/AbsDot {
    /size exch def
    /y exch def
    /x exch def

    0 setlinewidth
    0 setgray
    newpath
    x y AbsCoords size 0 360 arc
    fill
} def

/AbsVertex {
    /y exch def
    /x exch def

    x y GraphVertexSize AbsDot
} def

/HexUpArrow {
   /size exch def
   /j exch def
   /i exch def

   GraphLineWidth setlinewidth
   0 setgray
   newpath
   i j HexCenterVertex moveto
   0 CircleRadius size mul neg rmoveto
   0 CircleRadius size mul 2 mul rlineto
   CircleRadius size mul 4 div neg CircleRadius size mul 2 div neg rmoveto
   CircleRadius size mul 4 div CircleRadius size mul 2 div rlineto
   CircleRadius size mul 4 div CircleRadius size mul 2 div neg rlineto
   stroke
} def

/HexRightArrow {
   /size exch def
   /j exch def
   /i exch def

   GraphLineWidth setlinewidth
   0 setgray
   newpath
   i j HexCenterVertex moveto
   CircleRadius size mul neg 0 rmoveto
   CircleRadius size mul 2 mul 0 rlineto
   CircleRadius size mul 2 div neg CircleRadius size mul 4 div neg rmoveto
   CircleRadius size mul 2 div CircleRadius size mul 4 div rlineto
   CircleRadius size mul 2 div neg CircleRadius size mul 4 div rlineto
   stroke
} def

/HexLeftArrow {
   /size exch def
   /j exch def
   /i exch def

   GraphLineWidth setlinewidth
   0 setgray
   newpath
   i j HexCenterVertex moveto
   CircleRadius size mul 0 rmoveto
   CircleRadius size mul 2 mul neg 0 rlineto
   CircleRadius size mul 2 div CircleRadius size mul 4 div neg rmoveto
   CircleRadius size mul 2 div neg CircleRadius size mul 4 div rlineto
   CircleRadius size mul 2 div CircleRadius size mul 4 div rlineto
   stroke
} def

/HexBlackCapturedPiece {
    /j exch def
    /i exch def

    i j HexBlackMarkedPiece
} def

/HexWhiteCapturedPiece {
    /j exch def
    /i exch def

    i j HexWhiteMarkedPiece
} def

/HexDeadPiece {
    /j exch def
    /i exch def

    i j DeadPieceShade HexPiece
    
   GraphLineWidth setlinewidth
   0 setgray
   newpath
   i j HexCenterVertex moveto
   MarkerSize neg 0 rmoveto
   MarkerSize 2 mul 0 rlineto
   MarkerSize neg MarkerSize neg rmoveto
   0 MarkerSize 2 mul rlineto
   stroke
} def

/HexDominatedCell {
    /j exch def
    /i exch def

   GraphLineWidth setlinewidth
   0 setgray
   newpath
   i j HexCenterVertex moveto
   MarkerSize Root2 div neg MarkerSize Root2 div neg rmoveto
   MarkerSize Root2 mul MarkerSize Root2 mul rlineto
   MarkerSize Root2 mul neg 0 rmoveto
   MarkerSize Root2 mul MarkerSize Root2 mul neg rlineto
   stroke
} def


%%---------------- Program -------------------


DrawHexBoard
1 HexBoardEdgePieces
HexBoardCoordinates

3 1 (1) 1 HexWhiteLabelledPiece


%------------ Trailer --------------

showpage

%%EndDocument
 @endspecial 1293 w @beginspecial 0 @llx 0 @lly 68 @urx
43 @ury 680 @rwi @setspecial
%%BeginDocument: B3full.eps
%!PS-Adobe-3.0
%%Creator: Jack van Rijswijck, thanks to Cameron Browne
%%BoundingBox: 0 0 68 43
%%Pages: 0
%%EndComments

/OriginX -2 def
/OriginY 21 def
%---------------- Variables -------------------

/DimX 3 def
/DimY 3 def
/Scale 1.2 def


%---------------- Constants -------------------

/Root2 1.414213562 def
/Root3 1.732050808 def

/Chars {[(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)(n)]} def
/Digits {[(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)(12)(13)(14)]} def

/HexRadius 5 Scale mul def
/HexLineWidth 0.014 def
/CircleRadius 3.3 Scale mul def
/CircleLineWidth 0.346 def
/BoardOutlineWidth 0.5 def
%/TextHeight 4.5 def
/TextHeight 6 def
/TextWidth TextHeight 0.45 mul def
/BoardShade 0.8 def
/FadedBoardShade 0.9 def
/CoordinatesShade 0.5 def
/DeadPieceShade 0.6 def
/DeadCellShade 0.6 def
/EarLength 0.5 def
/GraphVertexSize 1.5 def
/GraphLineWidth 0.5 def
/MoveEvalSize 0.9 def
/FatLineWidth 1.0 def
/MarkerSize 1.2 def

%----------- Functions -------------

/HexCenterX { % X coordinate of center of cell: i j HexX
    /j exch def
    /i exch def
    OriginX i j add HexRadius mul 1.5 mul add
} def

/HexCenterY { % Y coordinate of center of cell: i j HexY
    /j exch def
    /i exch def
    OriginY i j sub HexRadius mul Root3 mul 2 div sub
} def

/HexCenterVertex {
    /j exch def
    /i exch def
    i j HexCenterX
    i j HexCenterY
} def

/HexTopLeftVertex {
    /j exch def
    /i exch def
    i j HexCenterX HexRadius 2 div sub
    i j HexCenterY HexRadius Root3 mul 2 div add
} def

/HexTopRightVertex {
    /j exch def
    /i exch def
    i j HexCenterX HexRadius 2 div add
    i j HexCenterY HexRadius Root3 mul 2 div add
} def

/HexRightVertex {
    /j exch def
    /i exch def
    i j HexCenterX HexRadius add
    i j HexCenterY 
} def

/HexBottomRightVertex {
    /j exch def
    /i exch def
    i j HexCenterX HexRadius 2 div add
    i j HexCenterY HexRadius Root3 mul 2 div sub
} def

/HexBottomLeftVertex {
    /j exch def
    /i exch def
    i j HexCenterX HexRadius 2 div sub
    i j HexCenterY HexRadius Root3 mul 2 div sub
} def

/HexLeftVertex {
    /j exch def
    /i exch def
    i j HexCenterX HexRadius sub
    i j HexCenterY 
} def

/HexUpRightEdge {
    /size exch def
    
    HexRadius 2 div size mul
    HexRadius Root3 mul 2 div size mul
} def

/HexRightEdge {
    /size exch def
    
    HexRadius size mul
    0
} def

/HexDownRightEdge {
    /size exch def

    HexRadius 2 div size mul
    HexRadius Root3 mul 2 div neg size mul
} def

/HexDownLeftEdge {
    /size exch def

    HexRadius 2 div neg size mul
    HexRadius Root3 mul 2 div neg size mul
} def

/HexLeftEdge {
    /size exch def

    HexRadius neg size mul
    0 size mul
} def

/HexUpLeftEdge {
    /size exch def

    HexRadius 2 div neg size mul
    HexRadius Root3 mul 2 div size mul
} def

/HexagonPath{
    /j exch def
    /i exch def

    newpath
    i j HexLeftVertex moveto

    1.0 HexUpRightEdge rlineto
    1.0 HexRightEdge rlineto
    1.0 HexDownRightEdge rlineto
    1.0 HexDownLeftEdge rlineto
    1.0 HexLeftEdge rlineto
    1.0 HexUpLeftEdge rlineto

    closepath
} def

/HexTopLeftEar {
    /j exch def
    /i exch def

    newpath
    i j HexTopLeftVertex moveto
    EarLength HexUpLeftEdge rlineto
    stroke
} def

/HexTopRightEar {
    /j exch def
    /i exch def

    newpath
    i j HexTopRightVertex moveto
    EarLength HexUpRightEdge rlineto
    stroke
} def

/HexRightEar {
    /j exch def
    /i exch def

    newpath
    i j HexRightVertex moveto
    EarLength HexRightEdge rlineto
    stroke
} def

/HexBottomRightEar {
    /j exch def
    /i exch def

    newpath
    i j HexBottomRightVertex moveto
    EarLength HexDownRightEdge rlineto
    stroke
} def

/HexBottomLeftEar {
    /j exch def
    /i exch def

    newpath
    i j HexBottomLeftVertex moveto
    EarLength HexDownLeftEdge rlineto
    stroke
} def

/HexLeftEar {
    /j exch def
    /i exch def

    newpath
    i j HexLeftVertex moveto
    EarLength HexLeftEdge rlineto
    stroke
} def

/HexagonEars {
    /j exch def
    /i exch def

    HexLineWidth setlinewidth
    
    i j HexTopLeftEar
    i j HexTopRightEar
    i j HexRightEar
    i j HexBottomRightEar
    i j HexBottomLeftEar
    i j HexLeftEar
} def

/HexDeadCell {
    /j exch def
    /i exch def

    i j DeadCellShade ShadedHexagon
} def

/HexDeadMarkedCell {
    /j exch def
    /i exch def

    i j DeadCellShade ShadedHexagon
    i j HexBlackMarker
} def
    
    
/ShadedHexagonWithEars {
    /shade exch def
    /j exch def
    /i exch def

    i j shade ShadedHexagon
    i j HexagonEars
} def
    
/BoundedShadedHexagonWithEars {
    /shade exch def
    /j exch def
    /i exch def

    i j shade BoundedShadedHexagon
    i j BoundedHexagonWithEars
} def

/BoundedHexagonWithEars {
    /j exch def
    /i exch def

    i j BoundedHexagon

    i 1 gt {
	j 1 gt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexLeftVertex moveto
	EarLength HexLeftEdge rlineto
	stroke

	j DimY lt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexTopLeftVertex moveto
	EarLength HexUpLeftEdge rlineto
	stroke
    }
    if

    i DimX lt {
	j DimY lt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexRightVertex moveto
	EarLength HexRightEdge rlineto
	stroke

	j 1 gt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexBottomRightVertex moveto
	EarLength HexDownRightEdge rlineto
	stroke
    }
    if

    j DimY lt {
	i 1 gt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexTopRightVertex moveto
	EarLength HexUpRightEdge rlineto
	stroke

	i DimX lt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexRightVertex moveto
	EarLength HexRightEdge rlineto
	stroke
    }
    if

    j 1 gt {
	i DimX lt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexBottomLeftVertex moveto
	EarLength HexDownLeftEdge rlineto
	stroke

	i 1 gt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexLeftVertex moveto
	EarLength HexLeftEdge rlineto
	stroke
    }
    if
} def

/BoundedShadedHexagon {
    /shade exch def
    /j exch def
    /i exch def

    i j shade FillHexagon
    i j BoundedHexagon
} def

/BoundedHexagon {
    /j exch def
    /i exch def

    0 setgray
    HexLineWidth setlinewidth
    i j HexagonPath
    stroke

    BoardOutlineWidth setlinewidth

    i 1 eq {
	newpath
	i j HexLeftVertex moveto
	1.0 HexUpRightEdge rlineto
	1.0 HexRightEdge rlineto
	stroke
    }
    if

    j DimY eq {
	newpath
	i j HexTopLeftVertex moveto
	1.0 HexRightEdge rlineto
	1.0 HexDownRightEdge rlineto
	stroke
    }
    if

    i DimX eq {
	newpath
	i j HexRightVertex moveto
	1.0 HexDownLeftEdge rlineto
	1.0 HexLeftEdge rlineto
	stroke
    }
    if

    j 1 eq {
	newpath
	i j HexBottomRightVertex moveto
	1.0 HexLeftEdge rlineto
	1.0 HexUpLeftEdge rlineto
	stroke
    }
    if
} def

/ShadedHexagon {
    /shade exch def
    /j exch def
    /i exch def

    i j shade FillHexagon
    i j Hexagon
} def

/Hexagon { % call: i j Hexagon
    /j exch def
    /i exch def

    i j HexagonPath
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

/FillHexagon {   % call: i j shade FillHexagon
    /shade exch def
    /j exch def
    /i exch def

    i j HexagonPath
    0 setlinewidth
    shade setgray
    fill
    i j Hexagon
} def

/HexBoardOutlinePath {
    newpath
    1 1 HexLeftVertex moveto

    1 1 DimY {
	1.0 HexUpRightEdge rlineto
	1.0 HexRightEdge rlineto
    } for

    1 1 DimX 1 sub {
	1.0 HexDownRightEdge rlineto
	1.0 HexRightEdge rlineto
    } for
    1.0 HexDownRightEdge rlineto

    1 1 DimY {
	1.0 HexDownLeftEdge rlineto
	1.0 HexLeftEdge rlineto
    } for

    1 1 DimX 1 sub {
	1.0 HexUpLeftEdge rlineto
	1.0 HexLeftEdge rlineto
    } for
    1.0 HexUpLeftEdge rlineto

    closepath
} def

/HexBoardOutline {
    HexBoardOutlinePath
    BoardOutlineWidth setlinewidth
    0 setgray
    stroke
} def

/HexBoardFillNoOutline {
    /shade exch def
    HexBoardOutlinePath
    0 setlinewidth
    shade setgray
    fill
} def

/HexBoardFill {
    /shade exch def
    shade HexBoardFillNoOutline
    HexBoardOutline
} def

/HexShannonGrid {
    1 1 DimY {
	/j exch def
	1 1 DimX {
	    /i exch def
	    i j HexVertex
	} for
    } for

    1 1 DimY {
	/j exch def
	1 j DimX j HexLine
    } for

    1 1 DimX {
	/i exch def
	i 1 i DimY HexLine
    } for

    2 1 DimX DimY add 2 sub {
	/i exch def
	i DimY lt {1 i} {i DimY sub 1 add DimY} ifelse
	i DimX lt {i 1} {DimX i DimX sub 1 add} ifelse
	HexLine
    } for
} def

/HexBoardGrid {
    1 1 DimY {
	/j exch def
	1 1 DimX {
	    /i exch def
	    i j Hexagon
	} for
    } for
} def

/DrawHexBoard {
    BoardShade HexBoardFill
    HexBoardGrid
} def

/DrawHexBoardNoOutline {
    1 1 DimY {
	/j exch def
	1 1 DimX {
	    /i exch def
	    i j BoardShade FillHexagon
	    i j Hexagon
	} for
    } for
} def

/YBoardOutlinePath {
    newpath
    0 0 HexLeftVertex moveto

    1 1 DimX {
	1.0 HexUpRightEdge rlineto
	1.0 HexRightEdge rlineto
    } for

    1 1 DimX {
	1.0 HexDownRightEdge rlineto
	1.0 HexDownLeftEdge rlineto
    } for

    1 1 DimX {
	1.0 HexLeftEdge rlineto
	1.0 HexUpLeftEdge rlineto
    } for

    closepath
} def

/YBoardOutline {
    YBoardOutlinePath
    BoardOutlineWidth setlinewidth
    0 setgray
    stroke
} def

/YBoardFill {
    /shade exch def
    YBoardOutlinePath
    0 setlinewidth
    shade setgray
    fill
    YBoardOutline
} def

/YBoardGrid {
    0 1 DimX 1 sub {
	/j exch def
	0 1 DimX 1 sub j sub {
	    /i exch def
	    i j Hexagon
	} for
    } for
} def

/DrawYBoard {
    BoardShade YBoardFill
    YBoardGrid
} def

/FontSelect { % bold italic FontSelect
    /italic exch def
    /bold exch def

    bold {
	italic {
	    /Times-BoldItalic findfont TextHeight scalefont setfont
	} {
	    /Times-Bold findfont TextHeight scalefont setfont
	}
	ifelse
    } {
	italic {
	    /Times-Italic findfont TextHeight scalefont setfont
	} {
	    /Times findfont TextHeight scalefont setfont
	}
	ifelse
    }
    ifelse
} def
	    
/LabelString {   % call: i j (str) strlen LabelString
    /strlen exch def
    /str exch def
    /j exch def
    /i exch def

    newpath
    i j HexCenterX TextWidth strlen mul 0.5 mul sub
    i j HexCenterY TextHeight 0.225 mul sub
    moveto
    str
    show
} def

/AbsLabelString {
    /strlen exch def
    /str exch def
    /y exch def
    /x exch def

    newpath
    x AbsCoordX TextWidth strlen mul 0.5 mul sub
    y AbsCoordY TextHeight 0.225 mul sub
    moveto
    str
    show
} def

/LabelStringVerb { % i j (str) strlen shade bold italic LabelStringVerb
    /italic exch def
    /bold exch def
    /shade exch def
    /strlen exch def
    /str exch def
    /j exch def
    /i exch def
    bold italic FontSelect
    shade setgray
    i j str strlen LabelString
} def

/HexBoardCoordinates {
    false true FontSelect
    CoordinatesShade setgray
    
    1 1 DimX {
	/i exch def
	i 0 Chars i 1 sub get 1 LabelString
	i DimY 1 add Chars i 1 sub get 1 LabelString
    } for

    1 1 DimY {
	/j exch def
	0 j Digits j 1 sub get
	DimY 9 gt {2} {1} ifelse
	LabelString
	DimX 1 add j Digits j 1 sub get
	DimY 9 gt {2} {1} ifelse
	LabelString
    } for
} def

/HexEdgePieceLocationBottomLeft {
    /dist exch def
    /midx DimX 1 add 2 div def
    /midy DimY 1 add 2 div def

    midx
    2 midx sub dist sub
} def

/HexEdgePieceLocationTopRight {
    /dist exch def
    /midx DimX 1 add 2 div def
    /midy DimY 1 add 2 div def

    midx
    DimX DimY add midx sub dist add
} def

/HexEdgePieceLocationTopLeft {
    /dist exch def
    /midx DimX 1 add 2 div def
    /midy DimY 1 add 2 div def
    
    2 midy sub dist sub
    midy
} def

/HexEdgePieceLocationBottomRight {
    /dist exch def
    /midx DimX 1 add 2 div def
    /midy DimY 1 add 2 div def
    
    DimX DimY add midy sub dist add
    midy
} def

/HexWhiteTerminal {
    (T) 1 HexWhiteLabelledPiece
} def

/HexBlackTerminal {
    (T) 1 HexBlackLabelledPiece
} def
    
/HexShannonTerminalBottomLeft {
    /dist exch def

    dist HexEdgePieceLocationBottomLeft
    HexWhiteTerminal
} def

/HexShannonTerminalTopRight {
    /dist exch def

    dist HexEdgePieceLocationTopRight
    HexWhiteTerminal
} def

/HexShannonTerminalConnectionsWhite {
    /dist exch def
    /midx DimX 1 add 2 div def
    /midy DimY 1 add 2 div def

    1 1 DimX {
	/i exch def
	dist HexEdgePieceLocationBottomLeft i 1 HexLine
	dist HexEdgePieceLocationTopRight i DimY HexLine
    } for

    dist HexShannonTerminalBottomLeft
    dist HexShannonTerminalTopRight
} def

/HexShannonTerminalTopLeft {
    /dist exch def

    dist HexEdgePieceLocationTopLeft
    HexBlackTerminal
} def

/HexShannonTerminalBottomRight {
    /dist exch def

    dist HexEdgePieceLocationBottomRight
    HexBlackTerminal
} def

/HexShannonTerminalConnectionsBlack {
    /dist exch def
    /midx DimX 1 add 2 div def
    /midy DimY 1 add 2 div def

    1 1 DimY {
	/j exch def
	dist HexEdgePieceLocationTopLeft 1 j HexLine
	dist HexEdgePieceLocationBottomRight DimX j HexLine
    } for

    dist HexShannonTerminalTopLeft
    dist HexShannonTerminalBottomRight
} def

/HexBoardEdgePieceTopLeft {
    /dist exch def
    dist HexEdgePieceLocationTopLeft HexBlackPiece
} def
/HexBoardEdgePieceBottomLeft {
    /dist exch def
    dist HexEdgePieceLocationBottomLeft HexWhitePiece
} def
/HexBoardEdgePieceTopRight {
    /dist exch def
    dist HexEdgePieceLocationTopRight HexWhitePiece
} def
/HexBoardEdgePieceBottomRight {
    /dist exch def
    dist HexEdgePieceLocationBottomRight HexBlackPiece
} def

/HexBoardEdgePieces { % extradist
    /dist exch def

    dist HexBoardEdgePieceTopLeft
    dist HexBoardEdgePieceBottomLeft
    dist HexBoardEdgePieceTopRight
    dist HexBoardEdgePieceBottomRight
} def

/HexDot { % i j size
    /size exch def
    /j exch def
    /i exch def

    0 setlinewidth
    0 setgray
    newpath
    i j HexCenterVertex size 0 360 arc
    fill
} def


/HexWhiteMarkedPiece {
    /j exch def
    /i exch def

    i j HexWhitePiece
    
    0 setgray
    0 setlinewidth
    newpath
    i j HexCenterVertex MarkerSize 0 360 arc
    fill
} def

/HexBlackMarkedPiece {
    /j exch def
    /i exch def

    i j HexBlackPiece
    
    1 setgray
    0 setlinewidth
    newpath
    i j HexCenterVertex MarkerSize 0 360 arc
    fill
} def


/HexDoubleMarker {
    /shaderight exch def
    /shadeleft exch def
    /j exch def
    /i exch def

    shadeleft setgray
    0 setlinewidth
    newpath
    i j HexCenterX MarkerSize sub i j HexCenterY MarkerSize 0 360 arc
    fill

    0 setgray
    CircleLineWidth setlinewidth
    newpath
    i j HexCenterX MarkerSize sub i j HexCenterY MarkerSize 0 360 arc
    stroke

    shaderight setgray
    0 setlinewidth
    newpath
    i j HexCenterX MarkerSize add i j HexCenterY MarkerSize 0 360 arc
    fill

    0 setgray
    CircleLineWidth setlinewidth
    newpath
    i j HexCenterX MarkerSize add i j HexCenterY MarkerSize 0 360 arc
    stroke
} def

/HexBlackWhiteMarker {
    /j exch def
    /i exch def
    i j 0.0 1.0 HexDoubleMarker
} def

/HexWhiteBlackMarker {
    /j exch def
    /i exch def
    i j 1.0 0.0 HexDoubleMarker
} def
        
/HexMarker {
    /j exch def
    /i exch def

    0 setlinewidth
    newpath
    i j HexCenterVertex MarkerSize 0 360 arc
    fill

    0 setgray
    CircleLineWidth setlinewidth
    newpath
    i j HexCenterVertex MarkerSize 0 360 arc
    stroke  
} def

/HexBlackMarker {
    /j exch def
    /i exch def

    0 setgray
    i j HexMarker
} def

/HexWhiteMarker {
    /j exch def
    /i exch def

    1 setgray
    i j HexMarker
} def
    
/HexVertex {
    /j exch def
    /i exch def

    i j GraphVertexSize HexDot
} def

/HexLine {
    /j2 exch def
    /i2 exch def
    /j1 exch def
    /i1 exch def

    GraphLineWidth setlinewidth
    0 setgray
    newpath
    i1 j1 HexCenterVertex moveto
    i2 j2 HexCenterVertex lineto
    stroke
} def

/HexPiece { % i j shade
    /shade exch def
    /j exch def
    /i exch def

    0 setlinewidth
    shade setgray
    newpath
    i j HexCenterVertex CircleRadius 0 360 arc
    fill

    0 setgray
    CircleLineWidth setlinewidth
    newpath
    i j HexCenterVertex CircleRadius 0 360 arc
    stroke
} def

/HexWhitePiece {
    /j exch def
    /i exch def

    i j 1.0 HexPiece
} def

/HexBlackPiece {
    /j exch def
    /i exch def

    i j 0.0 HexPiece
} def

/HexWhiteLabelledPiece { % i j (str) strlen
    /strlen exch def
    /str exch def
    /j exch def
    /i exch def

    i j HexWhitePiece
    i j str strlen 0.0 true true LabelStringVerb
} def

/HexBlackLabelledPiece { % i j (str) strlen
    /strlen exch def
    /str exch def
    /j exch def
    /i exch def

    i j HexBlackPiece
    i j str strlen 1.0 true true LabelStringVerb
} def

/DrawBox { % minx miny maxx maxy
    /maxy exch def
    /maxx exch def
    /miny exch def
    /minx exch def

    newpath
    minx miny moveto
    maxx minx sub 0 rlineto
    0 maxy miny sub rlineto
    minx maxx sub 0 rlineto
    0 miny maxy sub rlineto
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

/HexMoveEval {
    /eval exch def
    /j exch def
    /i exch def

%    i j 1.0 eval sub FadedBoardShade mul BoundedShadedHexagon
    newpath
    i j HexCenterVertex moveto
    MoveEvalSize HexLeftEdge rlineto
    MoveEvalSize HexUpRightEdge rlineto
    MoveEvalSize HexRightEdge rlineto
    MoveEvalSize HexDownRightEdge rlineto
    MoveEvalSize HexDownLeftEdge rlineto
    MoveEvalSize HexLeftEdge rlineto
    MoveEvalSize HexUpLeftEdge rlineto
%    eval MoveEvalSize mul HexLeftEdge rlineto
%    eval MoveEvalSize mul HexUpRightEdge rlineto
%    eval MoveEvalSize mul HexRightEdge rlineto
%    eval MoveEvalSize mul HexDownRightEdge rlineto
%    eval MoveEvalSize mul HexDownLeftEdge rlineto
%    eval MoveEvalSize mul HexLeftEdge rlineto
%    eval MoveEvalSize mul HexUpLeftEdge rlineto

    closepath

    0 setlinewidth
    1.0 eval sub BoardShade mul setgray
    fill
} def

/HexSymmetricalMoveEval {
    /eval exch def
    /j exch def
    /i exch def

    i j eval HexMoveEval
    DimX 1 add i sub DimY 1 add j sub eval HexMoveEval
} def

/AbsCoordX {
    /x exch def

    OriginX x Scale mul add
} def

/AbsCoordY {
    /y exch def

    OriginY y Scale mul add
} def

/AbsCoords {
    /y exch def
    /x exch def

    x AbsCoordX
    y AbsCoordY
} def

/AbsLine {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def

    newpath
    x1 y1 AbsCoords moveto
    x2 y2 AbsCoords lineto
    stroke
} def

/AbsDot {
    /size exch def
    /y exch def
    /x exch def

    0 setlinewidth
    0 setgray
    newpath
    x y AbsCoords size 0 360 arc
    fill
} def

/AbsVertex {
    /y exch def
    /x exch def

    x y GraphVertexSize AbsDot
} def

/HexUpArrow {
   /size exch def
   /j exch def
   /i exch def

   GraphLineWidth setlinewidth
   0 setgray
   newpath
   i j HexCenterVertex moveto
   0 CircleRadius size mul neg rmoveto
   0 CircleRadius size mul 2 mul rlineto
   CircleRadius size mul 4 div neg CircleRadius size mul 2 div neg rmoveto
   CircleRadius size mul 4 div CircleRadius size mul 2 div rlineto
   CircleRadius size mul 4 div CircleRadius size mul 2 div neg rlineto
   stroke
} def

/HexRightArrow {
   /size exch def
   /j exch def
   /i exch def

   GraphLineWidth setlinewidth
   0 setgray
   newpath
   i j HexCenterVertex moveto
   CircleRadius size mul neg 0 rmoveto
   CircleRadius size mul 2 mul 0 rlineto
   CircleRadius size mul 2 div neg CircleRadius size mul 4 div neg rmoveto
   CircleRadius size mul 2 div CircleRadius size mul 4 div rlineto
   CircleRadius size mul 2 div neg CircleRadius size mul 4 div rlineto
   stroke
} def

/HexLeftArrow {
   /size exch def
   /j exch def
   /i exch def

   GraphLineWidth setlinewidth
   0 setgray
   newpath
   i j HexCenterVertex moveto
   CircleRadius size mul 0 rmoveto
   CircleRadius size mul 2 mul neg 0 rlineto
   CircleRadius size mul 2 div CircleRadius size mul 4 div neg rmoveto
   CircleRadius size mul 2 div neg CircleRadius size mul 4 div rlineto
   CircleRadius size mul 2 div CircleRadius size mul 4 div rlineto
   stroke
} def

/HexBlackCapturedPiece {
    /j exch def
    /i exch def

    i j HexBlackMarkedPiece
} def

/HexWhiteCapturedPiece {
    /j exch def
    /i exch def

    i j HexWhiteMarkedPiece
} def

/HexDeadPiece {
    /j exch def
    /i exch def

    i j DeadPieceShade HexPiece
    
   GraphLineWidth setlinewidth
   0 setgray
   newpath
   i j HexCenterVertex moveto
   MarkerSize neg 0 rmoveto
   MarkerSize 2 mul 0 rlineto
   MarkerSize neg MarkerSize neg rmoveto
   0 MarkerSize 2 mul rlineto
   stroke
} def

/HexDominatedCell {
    /j exch def
    /i exch def

   GraphLineWidth setlinewidth
   0 setgray
   newpath
   i j HexCenterVertex moveto
   MarkerSize Root2 div neg MarkerSize Root2 div neg rmoveto
   MarkerSize Root2 mul MarkerSize Root2 mul rlineto
   MarkerSize Root2 mul neg 0 rmoveto
   MarkerSize Root2 mul MarkerSize Root2 mul neg rlineto
   stroke
} def


%%---------------- Program -------------------


DrawHexBoard
1 HexBoardEdgePieces
HexBoardCoordinates

3 1 (1) 1 HexWhiteLabelledPiece
2 3 (2) 1 HexBlackLabelledPiece
1 3 (3) 1 HexWhiteLabelledPiece
2 2 (4) 1 HexBlackLabelledPiece
1 2 (5) 1 HexWhiteLabelledPiece
1 1 (6) 1 HexBlackLabelledPiece
2 1 (7) 1 HexWhiteLabelledPiece


%------------ Trailer --------------

showpage

%%EndDocument
 @endspecial 368 3375 a Fn(Fig.)30 b(1.)h(The)f(start)h(\(left\))g(and)
f(\014nish)e(\(righ)m(t\))i(of)h(a)g(Hex)f(game)i(on)e(a)h(3)p
Fp(\002)p Fn(3)g(b)s(oard.)166 3760 y Fl(1)112 b(In)m(tro)s(duction)166
4051 y Fk(An)27 b(in)m(triguing)e(asp)s(ect)j(of)e(the)i(game)e(of)h
(Hex)1864 4015 y Fr(1)1948 4051 y Fk(is)f(that)h(for)g(all)e
Fj(n)p Fi(\002)p Fj(n)j Fk(b)s(oards,)f(although)166
4171 y(a)f(winning)f(\014rst-pla)m(y)m(er)i(strategy)g(is)f(kno)m(wn)i
(to)e(exist)h([9,1,2],)f(explicit)f(suc)m(h)j(strategies)166
4292 y(ha)m(v)m(e)g(b)s(een)g(found)e(only)h(for)f(small)e(b)s(oards.)j
(While)f(\014nding)g(suc)m(h)i(strategies)f(is)f(routine)166
4412 y(on)49 b(v)m(ery)h(small)d(b)s(oards,)i(the)g(task)g(quic)m(kly)h
(b)s(ecomes)f(c)m(hallenging)e(as)i(b)s(oard)f(size)p
166 4509 299 4 v 166 4573 a Fh(?)257 4606 y Fn(The)30
b(supp)s(ort)e(of)j(NSER)m(C)f(is)f(gratefully)h(ac)m(kno)m(wledged.)
166 4683 y Fr(1)257 4716 y Fn(Hex)45 b(is)e(the)i(classic)e(t)m(w)m
(o-pla)m(y)m(er)j(b)s(oard)e(game)h(in)m(v)m(en)m(ted)f(b)m(y)h(Piet)f
(Hein)f(in)g(1942)j(and)166 4829 y(indep)s(enden)m(tly)27
b(b)m(y)j(John)f(Nash)h(around)f(1948)i([9,1,2,6{8].)j(The)c(game)h(is)
e(named)g(after)h(the)166 4942 y(b)s(oard,)25 b(whic)m(h)f(consists)h
(of)h(a)g(parallelogram-shap)s(ed)d Fh(m)p Fp(\002)p
Fh(n)i Fn(arra)m(y)h(of)g(hexagons,)g(also)f(called)166
5055 y(cells.)31 b(Eac)m(h)h(pla)m(y)m(er)f(is)f(assigned)h(a)g(set)h
(of)g(stones)f(and)g(t)m(w)m(o)h(opp)s(osing)e(b)s(oard)g(sides;)h(pla)
m(y)m(ers)166 5168 y(alternately)42 b(place)h(a)g(stone)g(on)f(an)g
(uno)s(ccupied)f(cell;)h(the)h(\014rst)e(pla)m(y)m(er)i(to)g(form)f(a)h
(path)166 5280 y(connecting)28 b(her)f(t)m(w)m(o)i(sides)d(with)g(her)h
(stones)h(wins)e(the)h(game.)i(F)-8 b(or)29 b(example,)e(Fig.)h(1,)g
(sho)m(ws)166 5393 y(the)38 b(start)h(and)f(end)f(of)h(a)h(game)g(on)f
(a)g(3)p Fp(\002)p Fn(3)h(b)s(oard.)e(White)h(succeeds)h(in)e(joining)f
(her)h(t)m(w)m(o)166 5506 y(sides,)26 b(so)g(White)g(wins)f(this)g
(game.)j(F)-8 b(or)27 b(more)g(on)f(Hex,)h(see)g(the)g(recen)m(t)g
(surv)m(ey)g(b)m(y)f(Ha)m(yw)m(ard)166 5619 y(and)k(V)-8
b(an)31 b(Rijswijc)m(k)d([3])k(or)e(the)h(w)m(eb)f(page)h(b)m(y)f
(Thomas)g(Maarup)g([7].)196 5952 y Fg(Preprin)m(t)f(submitted)g(to)i
(Elsevier)e(Science)1129 b(16)32 b(Marc)m(h)f(2006)p
eop
%%Page: 2 2
2 1 bop 1849 272 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 6.94435 3.47217 1.8083
} false /N@T-0 16 {InitRnode } NewNode end end
 1849 272 a Ff(c1)365 444 y
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 7.33322 3.66661 1.8083
} false /N@T-0-0 16 {InitRnode } NewNode end end
 365 444
a Ff(a1)395 429 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 395 429 a 366 615 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 6.94435 3.47217 1.8083
} false /N@T-0-0-0 16 {InitRnode } NewNode end end
 366 615 a Ff(c2)395
600 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0 /N@T-0-0-0 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 395 600 a 188 787 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 7.33322 3.66661 1.8083
} false /N@T-0-0-0-0 16 {InitRnode } NewNode end end
 188 787 a Ff(a2)218 772 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0 /N@T-0-0-0-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 218
772 a 189 958 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 6.94435 3.47217 1.8083
} false /N@T-0-0-0-0-0 16 {InitRnode } NewNode end end
 189 958 a Ff(c3)218 943 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0-0 /N@T-0-0-0-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 218 943 a 257
787 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 7.33322 3.66661 1.8083
} false /N@T-0-0-0-1 16 {InitRnode } NewNode end end
 257 787 a Ff(a3)287 772 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0 /N@T-0-0-0-1 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 287 772 a 258 958 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 6.94435 3.47217 1.8083
} false /N@T-0-0-0-1-0 16 {InitRnode } NewNode end end
 258
958 a Ff(c3)287 943 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0-1 /N@T-0-0-0-1-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 287 943 a 326 787 a
 tx@Dict begin tx@NodeDict begin {4.16667 0.0 7.72212 3.86105 1.8083
} false /N@T-0-0-0-2 16 {InitRnode } NewNode end end
 326 787 a Ff(b1)358
772 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0 /N@T-0-0-0-2 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 358 772 a 329 958 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 6.94435 3.47217 1.8083
} false /N@T-0-0-0-2-0 16 {InitRnode } NewNode end end
 329 958 a Ff(c3)358 943 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0-2 /N@T-0-0-0-2-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 358
943 a 398 787 a
 tx@Dict begin tx@NodeDict begin {4.16667 0.0 7.72212 3.86105 1.8083
} false /N@T-0-0-0-3 16 {InitRnode } NewNode end end
 398 787 a Ff(b2)431 772 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0 /N@T-0-0-0-3 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 431 772 a 402
958 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 6.94435 3.47217 1.8083
} false /N@T-0-0-0-3-0 16 {InitRnode } NewNode end end
 402 958 a Ff(c3)431 943 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0-3 /N@T-0-0-0-3-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 431 943 a 471 787 a
 tx@Dict begin tx@NodeDict begin {4.16667 0.0 7.72212 3.86105 1.8083
} false /N@T-0-0-0-4 16 {InitRnode } NewNode end end
 471
787 a Ff(b3)503 772 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0 /N@T-0-0-0-4 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 503 772 a 474 958 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 6.94435 3.47217 1.8083
} false /N@T-0-0-0-4-0 16 {InitRnode } NewNode end end
 474 958 a Ff(c3)503
943 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0-4 /N@T-0-0-0-4-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 503 943 a 543 787 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 6.94435 3.47217 1.8083
} false /N@T-0-0-0-5 16 {InitRnode } NewNode end end
 543 787 a Ff(c3)572 772 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0 /N@T-0-0-0-5 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 572
772 a 540 958 a
 tx@Dict begin tx@NodeDict begin {4.16667 0.0 7.72212 3.86105 1.8083
} false /N@T-0-0-0-5-0 16 {InitRnode } NewNode end end
 540 958 a Ff(b3)572 943 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0-5 /N@T-0-0-0-5-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 572 943 a 788
444 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 7.33322 3.66661 1.8083
} false /N@T-0-1 16 {InitRnode } NewNode end end
 788 444 a Ff(a2)818 429 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-1 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 818 429 a 789 615 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 6.94435 3.47217 1.8083
} false /N@T-0-1-0 16 {InitRnode } NewNode end end
 789
615 a Ff(c2)818 600 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-1 /N@T-0-1-0 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 818 600 a 611 787 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 7.33322 3.66661 1.8083
} false /N@T-0-1-0-0 16 {InitRnode } NewNode end end
 611 787 a Ff(a1)641
772 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-1-0 /N@T-0-1-0-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 641 772 a 612 958 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 6.94435 3.47217 1.8083
} false /N@T-0-1-0-0-0 16 {InitRnode } NewNode end end
 612 958 a Ff(c3)641 943 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-1-0-0 /N@T-0-1-0-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 641
943 a 680 787 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 7.33322 3.66661 1.8083
} false /N@T-0-1-0-1 16 {InitRnode } NewNode end end
 680 787 a Ff(a3)711 772 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-1-0 /N@T-0-1-0-1 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 711 772 a 682
958 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 6.94435 3.47217 1.8083
} false /N@T-0-1-0-1-0 16 {InitRnode } NewNode end end
 682 958 a Ff(c3)711 943 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-1-0-1 /N@T-0-1-0-1-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 711 943 a 749 787 a
 tx@Dict begin tx@NodeDict begin {4.16667 0.0 7.72212 3.86105 1.8083
} false /N@T-0-1-0-2 16 {InitRnode } NewNode end end
 749
787 a Ff(b1)781 772 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-1-0 /N@T-0-1-0-2 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 781 772 a 752 958 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 6.94435 3.47217 1.8083
} false /N@T-0-1-0-2-0 16 {InitRnode } NewNode end end
 752 958 a Ff(c3)781
943 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-1-0-2 /N@T-0-1-0-2-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 781 943 a 821 787 a
 tx@Dict begin tx@NodeDict begin {4.16667 0.0 7.72212 3.86105 1.8083
} false /N@T-0-1-0-3 16 {InitRnode } NewNode end end
 821 787 a Ff(b2)854 772 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-1-0 /N@T-0-1-0-3 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 854
772 a 825 958 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 6.94435 3.47217 1.8083
} false /N@T-0-1-0-3-0 16 {InitRnode } NewNode end end
 825 958 a Ff(c3)854 943 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-1-0-3 /N@T-0-1-0-3-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 854 943 a 894
787 a
 tx@Dict begin tx@NodeDict begin {4.16667 0.0 7.72212 3.86105 1.8083
} false /N@T-0-1-0-4 16 {InitRnode } NewNode end end
 894 787 a Ff(b3)926 772 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-1-0 /N@T-0-1-0-4 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 926 772 a 897 958 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 6.94435 3.47217 1.8083
} false /N@T-0-1-0-4-0 16 {InitRnode } NewNode end end
 897
958 a Ff(c3)926 943 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-1-0-4 /N@T-0-1-0-4-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 926 943 a 967 787 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 6.94435 3.47217 1.8083
} false /N@T-0-1-0-5 16 {InitRnode } NewNode end end
 967 787 a Ff(c3)995
772 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-1-0 /N@T-0-1-0-5 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 995 772 a 963 958 a
 tx@Dict begin tx@NodeDict begin {4.16667 0.0 7.72212 3.86105 1.8083
} false /N@T-0-1-0-5-0 16 {InitRnode } NewNode end end
 963 958 a Ff(b3)995 943 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-1-0-5 /N@T-0-1-0-5-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 995
943 a 1211 444 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 7.33322 3.66661 1.8083
} false /N@T-0-2 16 {InitRnode } NewNode end end
 1211 444 a Ff(a3)1242 429 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-2 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 1242 429
a 1213 615 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 6.94435 3.47217 1.8083
} false /N@T-0-2-0 16 {InitRnode } NewNode end end
 1213 615 a Ff(c2)1242 600 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-2 /N@T-0-2-0 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1242 600 a 1034
787 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 7.33322 3.66661 1.8083
} false /N@T-0-2-0-0 16 {InitRnode } NewNode end end
 1034 787 a Ff(a1)1065 772 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-2-0 /N@T-0-2-0-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1065 772 a 1036 958
a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 6.94435 3.47217 1.8083
} false /N@T-0-2-0-0-0 16 {InitRnode } NewNode end end
 1036 958 a Ff(c3)1065 943 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-2-0-0 /N@T-0-2-0-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1065 943 a 1103 787 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 7.33322 3.66661 1.8083
} false /N@T-0-2-0-1 16 {InitRnode } NewNode end end
 1103
787 a Ff(a2)1134 772 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-2-0 /N@T-0-2-0-1 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1134 772 a 1105 958 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 6.94435 3.47217 1.8083
} false /N@T-0-2-0-1-0 16 {InitRnode } NewNode end end
 1105 958
a Ff(c3)1134 943 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-2-0-1 /N@T-0-2-0-1-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1134 943 a 1172 787 a
 tx@Dict begin tx@NodeDict begin {4.16667 0.0 7.72212 3.86105 1.8083
} false /N@T-0-2-0-2 16 {InitRnode } NewNode end end
 1172 787 a Ff(b1)1205
772 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-2-0 /N@T-0-2-0-2 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1205 772 a 1176 958 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 6.94435 3.47217 1.8083
} false /N@T-0-2-0-2-0 16 {InitRnode } NewNode end end
 1176 958 a Ff(c3)1205 943
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-2-0-2 /N@T-0-2-0-2-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1205 943 a 1245 787 a
 tx@Dict begin tx@NodeDict begin {4.16667 0.0 7.72212 3.86105 1.8083
} false /N@T-0-2-0-3 16 {InitRnode } NewNode end end
 1245 787 a Ff(b2)1277 772 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-2-0 /N@T-0-2-0-3 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1277
772 a 1248 958 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 6.94435 3.47217 1.8083
} false /N@T-0-2-0-3-0 16 {InitRnode } NewNode end end
 1248 958 a Ff(c3)1277 943 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-2-0-3 /N@T-0-2-0-3-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1277 943
a 1317 787 a
 tx@Dict begin tx@NodeDict begin {4.16667 0.0 7.72212 3.86105 1.8083
} false /N@T-0-2-0-4 16 {InitRnode } NewNode end end
 1317 787 a Ff(b3)1349 772 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-2-0 /N@T-0-2-0-4 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1349 772 a 1320
958 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 6.94435 3.47217 1.8083
} false /N@T-0-2-0-4-0 16 {InitRnode } NewNode end end
 1320 958 a Ff(c3)1349 943 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-2-0-4 /N@T-0-2-0-4-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1349 943 a 1390 787
a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 6.94435 3.47217 1.8083
} false /N@T-0-2-0-5 16 {InitRnode } NewNode end end
 1390 787 a Ff(c3)1419 772 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-2-0 /N@T-0-2-0-5 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1419 772 a 1387 958 a
 tx@Dict begin tx@NodeDict begin {4.16667 0.0 7.72212 3.86105 1.8083
} false /N@T-0-2-0-5-0 16 {InitRnode } NewNode end end
 1387
958 a Ff(b3)1419 943 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-2-0-5 /N@T-0-2-0-5-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1419 943 a 1631 444 a
 tx@Dict begin tx@NodeDict begin {4.16667 0.0 7.72212 3.86105 1.8083
} false /N@T-0-3 16 {InitRnode } NewNode end end
 1631 444
a Ff(b1)1663 429 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-3 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 1663 429 a 1634 615 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 6.94435 3.47217 1.8083
} false /N@T-0-3-0 16 {InitRnode } NewNode end end
 1634 615 a Ff(c2)1663
600 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-3 /N@T-0-3-0 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1663 600 a 1457 787 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 7.33322 3.66661 1.8083
} false /N@T-0-3-0-0 16 {InitRnode } NewNode end end
 1457 787 a Ff(a1)1488 772
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-3-0 /N@T-0-3-0-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1488 772 a 1459 958 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 6.94435 3.47217 1.8083
} false /N@T-0-3-0-0-0 16 {InitRnode } NewNode end end
 1459 958 a Ff(c3)1488 943 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-3-0-0 /N@T-0-3-0-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1488
943 a 1526 787 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 7.33322 3.66661 1.8083
} false /N@T-0-3-0-1 16 {InitRnode } NewNode end end
 1526 787 a Ff(a2)1557 772 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-3-0 /N@T-0-3-0-1 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1557 772
a 1528 958 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 6.94435 3.47217 1.8083
} false /N@T-0-3-0-1-0 16 {InitRnode } NewNode end end
 1528 958 a Ff(c3)1557 943 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-3-0-1 /N@T-0-3-0-1-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1557 943 a 1596
787 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 7.33322 3.66661 1.8083
} false /N@T-0-3-0-2 16 {InitRnode } NewNode end end
 1596 787 a Ff(a3)1626 772 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-3-0 /N@T-0-3-0-2 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1626 772 a 1597 958
a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 6.94435 3.47217 1.8083
} false /N@T-0-3-0-2-0 16 {InitRnode } NewNode end end
 1597 958 a Ff(c3)1626 943 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-3-0-2 /N@T-0-3-0-2-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1626 943 a 1665 787 a
 tx@Dict begin tx@NodeDict begin {4.16667 0.0 7.72212 3.86105 1.8083
} false /N@T-0-3-0-3 16 {InitRnode } NewNode end end
 1665
787 a Ff(b2)1697 772 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-3-0 /N@T-0-3-0-3 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1697 772 a 1668 958 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 6.94435 3.47217 1.8083
} false /N@T-0-3-0-3-0 16 {InitRnode } NewNode end end
 1668 958
a Ff(c3)1697 943 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-3-0-3 /N@T-0-3-0-3-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1697 943 a 1737 787 a
 tx@Dict begin tx@NodeDict begin {4.16667 0.0 7.72212 3.86105 1.8083
} false /N@T-0-3-0-4 16 {InitRnode } NewNode end end
 1737 787 a Ff(b3)1769
772 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-3-0 /N@T-0-3-0-4 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1769 772 a 1740 958 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 6.94435 3.47217 1.8083
} false /N@T-0-3-0-4-0 16 {InitRnode } NewNode end end
 1740 958 a Ff(c3)1769 943
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-3-0-4 /N@T-0-3-0-4-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1769 943 a 1810 787 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 6.94435 3.47217 1.8083
} false /N@T-0-3-0-5 16 {InitRnode } NewNode end end
 1810 787 a Ff(c3)1838 772 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-3-0 /N@T-0-3-0-5 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1838
772 a 1806 958 a
 tx@Dict begin tx@NodeDict begin {4.16667 0.0 7.72212 3.86105 1.8083
} false /N@T-0-3-0-5-0 16 {InitRnode } NewNode end end
 1806 958 a Ff(b3)1838 943 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-3-0-5 /N@T-0-3-0-5-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1838 943
a 2051 444 a
 tx@Dict begin tx@NodeDict begin {4.16667 0.0 7.72212 3.86105 1.8083
} false /N@T-0-4 16 {InitRnode } NewNode end end
 2051 444 a Ff(b2)2083 429 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-4 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 2083 429 a 2054
615 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 6.94435 3.47217 1.8083
} false /N@T-0-4-0 16 {InitRnode } NewNode end end
 2054 615 a Ff(c2)2083 600 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-4 /N@T-0-4-0 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 2083 600 a 1877 787
a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 7.33322 3.66661 1.8083
} false /N@T-0-4-0-0 16 {InitRnode } NewNode end end
 1877 787 a Ff(a1)1908 772 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-4-0 /N@T-0-4-0-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1908 772 a 1879 958 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 6.94435 3.47217 1.8083
} false /N@T-0-4-0-0-0 16 {InitRnode } NewNode end end
 1879
958 a Ff(c3)1908 943 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-4-0-0 /N@T-0-4-0-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1908 943 a 1946 787 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 7.33322 3.66661 1.8083
} false /N@T-0-4-0-1 16 {InitRnode } NewNode end end
 1946 787
a Ff(a2)1977 772 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-4-0 /N@T-0-4-0-1 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1977 772 a 1948 958 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 6.94435 3.47217 1.8083
} false /N@T-0-4-0-1-0 16 {InitRnode } NewNode end end
 1948 958 a Ff(c3)1977
943 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-4-0-1 /N@T-0-4-0-1-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1977 943 a 2016 787 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 7.33322 3.66661 1.8083
} false /N@T-0-4-0-2 16 {InitRnode } NewNode end end
 2016 787 a Ff(a3)2046 772
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-4-0 /N@T-0-4-0-2 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2046 772 a 2017 958 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 6.94435 3.47217 1.8083
} false /N@T-0-4-0-2-0 16 {InitRnode } NewNode end end
 2017 958 a Ff(c3)2046 943 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-4-0-2 /N@T-0-4-0-2-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2046
943 a 2085 787 a
 tx@Dict begin tx@NodeDict begin {4.16667 0.0 7.72212 3.86105 1.8083
} false /N@T-0-4-0-3 16 {InitRnode } NewNode end end
 2085 787 a Ff(b1)2117 772 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-4-0 /N@T-0-4-0-3 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2117 772
a 2088 958 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 6.94435 3.47217 1.8083
} false /N@T-0-4-0-3-0 16 {InitRnode } NewNode end end
 2088 958 a Ff(c3)2117 943 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-4-0-3 /N@T-0-4-0-3-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2117 943 a 2157
787 a
 tx@Dict begin tx@NodeDict begin {4.16667 0.0 7.72212 3.86105 1.8083
} false /N@T-0-4-0-4 16 {InitRnode } NewNode end end
 2157 787 a Ff(b3)2189 772 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-4-0 /N@T-0-4-0-4 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2189 772 a 2160 958
a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 6.94435 3.47217 1.8083
} false /N@T-0-4-0-4-0 16 {InitRnode } NewNode end end
 2160 958 a Ff(c3)2189 943 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-4-0-4 /N@T-0-4-0-4-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2189 943 a 2230 787 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 6.94435 3.47217 1.8083
} false /N@T-0-4-0-5 16 {InitRnode } NewNode end end
 2230
787 a Ff(c3)2258 772 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-4-0 /N@T-0-4-0-5 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2258 772 a 2226 958 a
 tx@Dict begin tx@NodeDict begin {4.16667 0.0 7.72212 3.86105 1.8083
} false /N@T-0-4-0-5-0 16 {InitRnode } NewNode end end
 2226 958
a Ff(b3)2258 943 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-4-0-5 /N@T-0-4-0-5-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2258 943 a 2479 444 a
 tx@Dict begin tx@NodeDict begin {4.16667 0.0 7.72212 3.86105 1.8083
} false /N@T-0-5 16 {InitRnode } NewNode end end
 2479 444 a Ff(b3)2511
429 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-5 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 2511 429 a 2481 615 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 7.33322 3.66661 1.8083
} false /N@T-0-5-0 16 {InitRnode } NewNode end end
 2481 615 a Ff(a3)2511 600
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5 /N@T-0-5-0 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 2511 600 a 2300 787 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 7.33322 3.66661 1.8083
} false /N@T-0-5-0-0 16 {InitRnode } NewNode end end
 2300 787 a Ff(a1)2331 772 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5-0 /N@T-0-5-0-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2331
772 a 2299 958 a
 tx@Dict begin tx@NodeDict begin {4.16667 0.0 7.72212 3.86105 1.8083
} false /N@T-0-5-0-0-0 16 {InitRnode } NewNode end end
 2299 958 a Ff(b2)2331 943 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5-0-0 /N@T-0-5-0-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2331 943
a 2373 787 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 7.33322 3.66661 1.8083
} false /N@T-0-5-0-1 16 {InitRnode } NewNode end end
 2373 787 a Ff(a2)2403 772 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5-0 /N@T-0-5-0-1 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2403 772 a 2371
958 a
 tx@Dict begin tx@NodeDict begin {4.16667 0.0 7.72212 3.86105 1.8083
} false /N@T-0-5-0-1-0 16 {InitRnode } NewNode end end
 2371 958 a Ff(b2)2403 943 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5-0-1 /N@T-0-5-0-1-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2403 943 a 2444 787
a
 tx@Dict begin tx@NodeDict begin {4.16667 0.0 7.72212 3.86105 1.8083
} false /N@T-0-5-0-2 16 {InitRnode } NewNode end end
 2444 787 a Ff(b1)2476 772 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5-0 /N@T-0-5-0-2 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2476 772 a 2444 958 a
 tx@Dict begin tx@NodeDict begin {4.16667 0.0 7.72212 3.86105 1.8083
} false /N@T-0-5-0-2-0 16 {InitRnode } NewNode end end
 2444
958 a Ff(b2)2476 943 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5-0-2 /N@T-0-5-0-2-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2476 943 a 2516 787 a
 tx@Dict begin tx@NodeDict begin {4.16667 0.0 7.72212 3.86105 1.8083
} false /N@T-0-5-0-3 16 {InitRnode } NewNode end end
 2516 787
a Ff(b2)2548 772 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5-0 /N@T-0-5-0-3 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2548 772 a 2518 958 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 7.33322 3.66661 1.8083
} false /N@T-0-5-0-3-0 16 {InitRnode } NewNode end end
 2518 958 a Ff(a2)2548
943 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5-0-3 /N@T-0-5-0-3-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2548 943 a 2413 1130 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 7.33322 3.66661 1.8083
} false /N@T-0-5-0-3-0-0 16 {InitRnode } NewNode end end
 2413 1130 a Ff(a1)2443 1115
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5-0-3-0 /N@T-0-5-0-3-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2443 1115 a 2411 1302 a
 tx@Dict begin tx@NodeDict begin {4.16667 0.0 7.72212 3.86105 1.8083
} false /N@T-0-5-0-3-0-0-0 16 {InitRnode } NewNode end end
 2411 1302 a Ff(b1)2443 1287
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5-0-3-0-0 /N@T-0-5-0-3-0-0-0 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2443 1287 a 2482 1130 a
 tx@Dict begin tx@NodeDict begin {4.16667 0.0 7.72212 3.86105 1.8083
} false /N@T-0-5-0-3-0-1 16 {InitRnode } NewNode end end
 2482 1130 a Ff(b1)2514 1115
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5-0-3-0 /N@T-0-5-0-3-0-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2514 1115 a 2484 1302 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 7.33322 3.66661 1.8083
} false /N@T-0-5-0-3-0-1-0 16 {InitRnode } NewNode end end
 2484 1302 a Ff(a1)2514 1287
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5-0-3-0-1 /N@T-0-5-0-3-0-1-0 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2514 1287 a 2555 1130 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 6.94435 3.47217 1.8083
} false /N@T-0-5-0-3-0-2 16 {InitRnode } NewNode end end
 2555 1130 a Ff(c2)2583 1115
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5-0-3-0 /N@T-0-5-0-3-0-2 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2583 1115 a 2553 1302 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 7.33322 3.66661 1.8083
} false /N@T-0-5-0-3-0-2-0 16 {InitRnode } NewNode end end
 2553 1302 a Ff(a1)2583 1287
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5-0-3-0-2 /N@T-0-5-0-3-0-2-0 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2583 1287 a 2624 1130 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 6.94435 3.47217 1.8083
} false /N@T-0-5-0-3-0-3 16 {InitRnode } NewNode end end
 2624 1130 a Ff(c3)2653 1115
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5-0-3-0 /N@T-0-5-0-3-0-3 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2653 1115 a 2623 1302 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 7.33322 3.66661 1.8083
} false /N@T-0-5-0-3-0-3-0 16 {InitRnode } NewNode end end
 2623 1302 a Ff(a1)2653 1287
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5-0-3-0-3 /N@T-0-5-0-3-0-3-0 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2653 1287 a 2590 787 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 6.94435 3.47217 1.8083
} false /N@T-0-5-0-4 16 {InitRnode } NewNode end end
 2590 787 a Ff(c2)2619 772 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5-0 /N@T-0-5-0-4 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end

2619 772 a 2587 958 a
 tx@Dict begin tx@NodeDict begin {4.16667 0.0 7.72212 3.86105 1.8083
} false /N@T-0-5-0-4-0 16 {InitRnode } NewNode end end
 2587 958 a Ff(b2)2619 943 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5-0-4 /N@T-0-5-0-4-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2619
943 a 2662 787 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 6.94435 3.47217 1.8083
} false /N@T-0-5-0-5 16 {InitRnode } NewNode end end
 2662 787 a Ff(c3)2691 772 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5-0 /N@T-0-5-0-5 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2691 772
a 2659 958 a
 tx@Dict begin tx@NodeDict begin {4.16667 0.0 7.72212 3.86105 1.8083
} false /N@T-0-5-0-5-0 16 {InitRnode } NewNode end end
 2659 958 a Ff(b2)2691 943 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5-0-5 /N@T-0-5-0-5-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2691 943 a 2909
444 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 6.94435 3.47217 1.8083
} false /N@T-0-6 16 {InitRnode } NewNode end end
 2909 444 a Ff(c2)2938 429 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-6 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 2938 429 a 2906 615
a
 tx@Dict begin tx@NodeDict begin {4.16667 0.0 7.72212 3.86105 1.8083
} false /N@T-0-6-0 16 {InitRnode } NewNode end end
 2906 615 a Ff(b2)2938 600 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6 /N@T-0-6-0 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 2938 600 a 2732 787 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 7.33322 3.66661 1.8083
} false /N@T-0-6-0-0 16 {InitRnode } NewNode end end
 2732
787 a Ff(a1)2762 772 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-0 /N@T-0-6-0-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2762 772 a 2732 958 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 7.33322 3.66661 1.8083
} false /N@T-0-6-0-0-0 16 {InitRnode } NewNode end end
 2732 958
a Ff(a3)2762 943 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-0-0 /N@T-0-6-0-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2762 943 a 2801 787 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 7.33322 3.66661 1.8083
} false /N@T-0-6-0-1 16 {InitRnode } NewNode end end
 2801 787 a Ff(a2)2831
772 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-0 /N@T-0-6-0-1 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2831 772 a 2801 958 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 7.33322 3.66661 1.8083
} false /N@T-0-6-0-1-0 16 {InitRnode } NewNode end end
 2801 958 a Ff(a3)2831 943
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-0-1 /N@T-0-6-0-1-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2831 943 a 2872 787 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 7.33322 3.66661 1.8083
} false /N@T-0-6-0-2 16 {InitRnode } NewNode end end
 2872 787 a Ff(a3)2902 772 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-0 /N@T-0-6-0-2 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2902
772 a 2870 958 a
 tx@Dict begin tx@NodeDict begin {4.16667 0.0 7.72212 3.86105 1.8083
} false /N@T-0-6-0-2-0 16 {InitRnode } NewNode end end
 2870 958 a Ff(b3)2902 943 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-0-2 /N@T-0-6-0-2-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2902 943
a 2941 787 a
 tx@Dict begin tx@NodeDict begin {4.16667 0.0 7.72212 3.86105 1.8083
} false /N@T-0-6-0-3 16 {InitRnode } NewNode end end
 2941 787 a Ff(b1)2973 772 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-0 /N@T-0-6-0-3 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2973 772 a 2943
958 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 7.33322 3.66661 1.8083
} false /N@T-0-6-0-3-0 16 {InitRnode } NewNode end end
 2943 958 a Ff(a3)2973 943 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-0-3 /N@T-0-6-0-3-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2973 943 a 3013 787
a
 tx@Dict begin tx@NodeDict begin {4.16667 0.0 7.72212 3.86105 1.8083
} false /N@T-0-6-0-4 16 {InitRnode } NewNode end end
 3013 787 a Ff(b3)3045 772 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-0 /N@T-0-6-0-4 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3045 772 a 3015 958 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 7.33322 3.66661 1.8083
} false /N@T-0-6-0-4-0 16 {InitRnode } NewNode end end
 3015
958 a Ff(a3)3045 943 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-0-4 /N@T-0-6-0-4-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3045 943 a 3086 787 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 6.94435 3.47217 1.8083
} false /N@T-0-6-0-5 16 {InitRnode } NewNode end end
 3086 787
a Ff(c3)3114 772 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-0 /N@T-0-6-0-5 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3114 772 a 3084 958 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 7.33322 3.66661 1.8083
} false /N@T-0-6-0-5-0 16 {InitRnode } NewNode end end
 3084 958 a Ff(a3)3114
943 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-0-5 /N@T-0-6-0-5-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3114 943 a 3331 444 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 6.94435 3.47217 1.8083
} false /N@T-0-7 16 {InitRnode } NewNode end end
 3331 444 a Ff(c3)3360 429
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-7 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 3360 429 a 3328 615 a
 tx@Dict begin tx@NodeDict begin {4.16667 0.0 7.72212 3.86105 1.8083
} false /N@T-0-7-0 16 {InitRnode } NewNode end end
 3328 615 a Ff(b2)3360 600 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-7 /N@T-0-7-0 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 3360
600 a 3153 787 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 7.33322 3.66661 1.8083
} false /N@T-0-7-0-0 16 {InitRnode } NewNode end end
 3153 787 a Ff(a1)3184 772 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-7-0 /N@T-0-7-0-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3184 772
a 3154 958 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 7.33322 3.66661 1.8083
} false /N@T-0-7-0-0-0 16 {InitRnode } NewNode end end
 3154 958 a Ff(a3)3184 943 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-7-0-0 /N@T-0-7-0-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3184 943 a 3222
787 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 7.33322 3.66661 1.8083
} false /N@T-0-7-0-1 16 {InitRnode } NewNode end end
 3222 787 a Ff(a2)3253 772 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-7-0 /N@T-0-7-0-1 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3253 772 a 3223 958
a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 7.33322 3.66661 1.8083
} false /N@T-0-7-0-1-0 16 {InitRnode } NewNode end end
 3223 958 a Ff(a3)3253 943 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-7-0-1 /N@T-0-7-0-1-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3253 943 a 3293 787 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 7.33322 3.66661 1.8083
} false /N@T-0-7-0-2 16 {InitRnode } NewNode end end
 3293
787 a Ff(a3)3324 772 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-7-0 /N@T-0-7-0-2 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3324 772 a 3292 958 a
 tx@Dict begin tx@NodeDict begin {4.16667 0.0 7.72212 3.86105 1.8083
} false /N@T-0-7-0-2-0 16 {InitRnode } NewNode end end
 3292 958
a Ff(b3)3324 943 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-7-0-2 /N@T-0-7-0-2-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3324 943 a 3363 787 a
 tx@Dict begin tx@NodeDict begin {4.16667 0.0 7.72212 3.86105 1.8083
} false /N@T-0-7-0-3 16 {InitRnode } NewNode end end
 3363 787 a Ff(b1)3394
772 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-7-0 /N@T-0-7-0-3 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3394 772 a 3364 958 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 7.33322 3.66661 1.8083
} false /N@T-0-7-0-3-0 16 {InitRnode } NewNode end end
 3364 958 a Ff(a3)3394 943
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-7-0-3 /N@T-0-7-0-3-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3394 943 a 3435 787 a
 tx@Dict begin tx@NodeDict begin {4.16667 0.0 7.72212 3.86105 1.8083
} false /N@T-0-7-0-4 16 {InitRnode } NewNode end end
 3435 787 a Ff(b3)3467 772 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-7-0 /N@T-0-7-0-4 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3467
772 a 3437 958 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 7.33322 3.66661 1.8083
} false /N@T-0-7-0-4-0 16 {InitRnode } NewNode end end
 3437 958 a Ff(a3)3467 943 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-7-0-4 /N@T-0-7-0-4-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3467 943
a 3507 787 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 6.94435 3.47217 1.8083
} false /N@T-0-7-0-5 16 {InitRnode } NewNode end end
 3507 787 a Ff(c2)3536 772 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-7-0 /N@T-0-7-0-5 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3536 772 a 3506
958 a
 tx@Dict begin tx@NodeDict begin {3.86665 0.0 7.33322 3.66661 1.8083
} false /N@T-0-7-0-5-0 16 {InitRnode } NewNode end end
 3506 958 a Ff(a3)3536 943 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-7-0-5 /N@T-0-7-0-5-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3536 943 a 166 1489
a Fn(Fig.)22 b(2.)h(A)f(winning)c(\014rst-pla)m(y)m(er)k(3)p
Fp(\002)p Fn(3)g(Hex)h(strategy)-8 b(.)24 b(Fig.)e(1)g(sho)m(ws)g(one)g
(line)e(of)i(this)f(strategy)-8 b(.)166 1667 y Fk(increases.)25
b(This)f(is)g(not)g(surprising)f(since,)i(as)f(Stefan)h(Reisc)m(h)f
(has)h(sho)m(wn,)g(determining)166 1787 y(the)33 b(winner)g(of)f
(arbitrary)f(Hex)j(p)s(ositions)d(is)h(PSP)-8 b(A)m(CE-complete)34
b([11].)166 1957 y(F)-8 b(or)21 b(7)p Fi(\002)p Fk(7,)h(8)p
Fi(\002)p Fk(8,)g(and)f(9)p Fi(\002)p Fk(9)h(b)s(oards,)g(Jing)f(Y)-8
b(ang)21 b(found)h(strategies)g(b)m(y)h(hand)f([13,15,16,12].)166
2078 y(Later,)45 b(Ha)m(yw)m(ard)h(et)g(al.)e(found)h(other)g(7)p
Fi(\002)p Fk(7)g(strategies)g(b)m(y)h(computer)g([4,5],)f(while)166
2198 y(Noshita)28 b(found)h(7)p Fi(\002)p Fk(7)g(strategies)g(and)g
(one)h(8)p Fi(\002)p Fk(8)e(strategy)i(similar)c(to)i(Y)-8
b(ang's)30 b(b)m(y)f(hand)166 2318 y([10].)j(F)-8 b(or)32
b(b)s(oards)h(10)p Fi(\002)p Fk(10)f(or)g(larger,)g(no)g(winning)g
(strategies)g(are)h(kno)m(wn.)166 2489 y(As)h(the)f(searc)m(h)h(for)f
(winning)f(strategies)h(on)g(larger)e(b)s(oards)i(con)m(tin)m(ues,)h
(it)e(is)h(of)f(in)m(ter-)166 2609 y(est)f(to)g(pro)m(vide)g
(algorithms)d(for)i(v)m(erifying)g(strategy)h(correctness.)i(Recen)m
(tly)-8 b(,)31 b(Noshita)166 2729 y(describ)s(ed)36 b(strategies)f(in)g
(a)f(manner)h(that)g(arguably)f(facilitates)f(h)m(uman)i(v)m
(eri\014cation)166 2850 y([10].)e(By)g(con)m(trast,)g(in)f(this)g(pap)s
(er)h(w)m(e)h(presen)m(t)g(a)f(system)g(that)g(allo)m(ws)f(for)g
(computer)166 2970 y(v)m(eri\014cation.)c(T)-8 b(o)28
b(demonstrate)g(the)h(utilit)m(y)d(of)h(our)h(system,)h(w)m(e)h(use)f
(it)e(to)g(con\014rm)h(the)166 3090 y(correctness)35
b(of)d(Y)-8 b(ang's)33 b(original)c(7)p Fi(\002)p Fk(7)j(strategy)i
([13].)166 3456 y Fl(2)112 b(Excised)37 b(trees)g(and)h(autotrees)166
3747 y Fk(The)29 b(k)m(ey)h(feature)e(of)g(our)g(v)m(eri\014cation)g
(system)h(is)f(the)h(tree)f(notation)f(w)m(e)i(use)h(to)d(repre-)166
3867 y(sen)m(t)k(strategies.)812 3831 y Fr(2)899 3867
y Fk(Our)f(notation)f(allo)m(ws)g(the)h(standard)h(tree)g(description)f
(of)f(a)h(strat-)166 3987 y(egy)h(to)g(b)s(e)g(condensed)h(in)e(three)i
(w)m(a)m(ys.)g(Firstly)-8 b(,)30 b(it)f(p)s(ermits)h(the)h(use)h(of)e
(an)h(\\and")f(op-)166 4108 y(eration)f(corresp)s(onding)i(to)f(the)g
(com)m(binatorial)d(sum)j(of)g(indep)s(enden)m(t)i(substrategies.)166
4228 y(Secondly)-8 b(,)32 b(it)e(p)s(ermits)g(the)i(use)g(of)f(a)g
(macro)f(descriptor)h(for)g(represen)m(ting)h(rep)s(eatedly)166
4349 y(o)s(ccurring)40 b(substrategies.)h(Thirdly)-8
b(,)40 b(it)g(allo)m(ws)f(all)f(opp)s(onen)m(t)j(mo)m(v)m(es)h(to)e(b)s
(e)g(excised)166 4469 y(from)c(the)i(notation)f(b)m(y)h(replacing)f
(eac)m(h)h(set)g(of)f(opp)s(onen)m(t)i(resp)s(onses)g(with)e(a)h
(single)166 4589 y(anon)m(ymous)33 b(meta-resp)s(onse.)166
4760 y(The)e(\014rst)f(t)m(w)m(o)g(of)f(these)i(three)f(ideas)g(are)f
(w)m(ell)g(kno)m(wn;)i(for)e(example,)g(they)i(w)m(ere)f(used)166
4880 y(b)m(y)35 b(Y)-8 b(ang)33 b(in)g(his)g(description)g(of)g(his)h
(pro)s(ofs)f([13,15,16,12].)f(The)j(third)d(idea,)i(namely)166
5000 y(using)29 b(excised)h(trees,)f(is)g(new.)h(In)f(the)g(rest)g(of)g
(this)f(section)h(w)m(e)h(illustrate)d(the)i(excision)166
5121 y(pro)s(cess)34 b(and)f(sho)m(w)g(that)g(it)e(do)s(es)i(not)g
(hamp)s(er)f(v)m(eri\014cation.)166 5291 y(T)-8 b(o)36
b(b)s(egin,)e(consider)i(the)g(\014rst-pla)m(y)m(er)g(strategy)g(tree)g
(in)f(Fig.)f(2.)h(The)i(no)s(des)f(at)f(ev)m(en)p 166
5409 299 4 v 166 5473 a Fr(2)257 5506 y Fn(This)24 b(notation)j(could)e
(also)h(b)s(e)f(used)g(for)h(other)g(t)m(w)m(o-pla)m(y)m(er)i(b)s(oard)
d(games)i(in)e(whic)m(h)g(game)166 5619 y(pieces)30 b(do)g(not)h(mo)m
(v)m(e)h(once)f(they)g(ha)m(v)m(e)g(b)s(een)f(placed.)1769
5952 y Fk(2)p eop
%%Page: 3 3
3 2 bop 1817 283 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.0279 4.01395 2.41109
} false /N@T-0 16 {InitRnode } NewNode end end
 1817 283 a Fr(c1)1832 454 y
 tx@Dict begin tx@NodeDict begin {3.6528 0.0 4.25006 2.12503 2.41109
} false /N@T-0-0 16 {InitRnode } NewNode end end
 1832 454
a Fe(\017)1850 434 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 1850 434 a 356 626 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.0279 4.01395 2.41109
} false /N@T-0-0-0 16 {InitRnode } NewNode end end
 356 626 a Fr(c2)390
606 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0 /N@T-0-0-0 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 390 606 a 372 798 a
 tx@Dict begin tx@NodeDict begin {3.6528 0.0 4.25006 2.12503 2.41109
} false /N@T-0-0-0-0 16 {InitRnode } NewNode end end
 372 798 a Fe(\017)390 778 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0 /N@T-0-0-0-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end

390 778 a 188 969 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.0279 4.01395 2.41109
} false /N@T-0-0-0-0-0 16 {InitRnode } NewNode end end
 188 969 a Fr(c3)221 949 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0-0 /N@T-0-0-0-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 221 949
a 254 969 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.0279 4.01395 2.41109
} false /N@T-0-0-0-0-1 16 {InitRnode } NewNode end end
 254 969 a Fr(c3)288 949 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0-0 /N@T-0-0-0-0-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 288 949 a 321 969
a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.0279 4.01395 2.41109
} false /N@T-0-0-0-0-2 16 {InitRnode } NewNode end end
 321 969 a Fr(c3)354 949 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0-0 /N@T-0-0-0-0-2 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 354 949 a 388 969 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.0279 4.01395 2.41109
} false /N@T-0-0-0-0-3 16 {InitRnode } NewNode end end
 388 969
a Fr(c3)421 949 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0-0 /N@T-0-0-0-0-3 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 421 949 a 454 969 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.0279 4.01395 2.41109
} false /N@T-0-0-0-0-4 16 {InitRnode } NewNode end end
 454 969 a Fr(c3)488
949 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0-0 /N@T-0-0-0-0-4 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 488 949 a 521 969 a
 tx@Dict begin tx@NodeDict begin {5.55556 0.0 8.97235 4.48618 2.41109
} false /N@T-0-0-0-0-5 16 {InitRnode } NewNode end end
 521 969 a Fr(b3)558 949 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0-0 /N@T-0-0-0-0-5 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 558
949 a 764 626 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.0279 4.01395 2.41109
} false /N@T-0-0-1 16 {InitRnode } NewNode end end
 764 626 a Fr(c2)797 606 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0 /N@T-0-0-1 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 797 606 a 779
798 a
 tx@Dict begin tx@NodeDict begin {3.6528 0.0 4.25006 2.12503 2.41109
} false /N@T-0-0-1-0 16 {InitRnode } NewNode end end
 779 798 a Fe(\017)797 778 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1 /N@T-0-0-1-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 797 778 a 595 969 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.0279 4.01395 2.41109
} false /N@T-0-0-1-0-0 16 {InitRnode } NewNode end end

595 969 a Fr(c3)629 949 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1-0 /N@T-0-0-1-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 629 949 a 662 969 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.0279 4.01395 2.41109
} false /N@T-0-0-1-0-1 16 {InitRnode } NewNode end end
 662 969
a Fr(c3)695 949 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1-0 /N@T-0-0-1-0-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 695 949 a 729 969 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.0279 4.01395 2.41109
} false /N@T-0-0-1-0-2 16 {InitRnode } NewNode end end
 729 969 a Fr(c3)762
949 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1-0 /N@T-0-0-1-0-2 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 762 949 a 795 969 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.0279 4.01395 2.41109
} false /N@T-0-0-1-0-3 16 {InitRnode } NewNode end end
 795 969 a Fr(c3)829 949 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1-0 /N@T-0-0-1-0-3 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 829
949 a 862 969 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.0279 4.01395 2.41109
} false /N@T-0-0-1-0-4 16 {InitRnode } NewNode end end
 862 969 a Fr(c3)895 949 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1-0 /N@T-0-0-1-0-4 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 895 949 a 929
969 a
 tx@Dict begin tx@NodeDict begin {5.55556 0.0 8.97235 4.48618 2.41109
} false /N@T-0-0-1-0-5 16 {InitRnode } NewNode end end
 929 969 a Fr(b3)966 949 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1-0 /N@T-0-0-1-0-5 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 966 949 a 1172 626 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.0279 4.01395 2.41109
} false /N@T-0-0-2 16 {InitRnode } NewNode end end

1172 626 a Fr(c2)1205 606 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0 /N@T-0-0-2 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1205 606 a 1187 798 a
 tx@Dict begin tx@NodeDict begin {3.6528 0.0 4.25006 2.12503 2.41109
} false /N@T-0-0-2-0 16 {InitRnode } NewNode end end
 1187
798 a Fe(\017)1205 778 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2 /N@T-0-0-2-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1205 778 a 1003 969 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.0279 4.01395 2.41109
} false /N@T-0-0-2-0-0 16 {InitRnode } NewNode end end
 1003 969
a Fr(c3)1037 949 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-0 /N@T-0-0-2-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1037 949 a 1070 969 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.0279 4.01395 2.41109
} false /N@T-0-0-2-0-1 16 {InitRnode } NewNode end end
 1070 969 a Fr(c3)1103
949 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-0 /N@T-0-0-2-0-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1103 949 a 1136 969 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.0279 4.01395 2.41109
} false /N@T-0-0-2-0-2 16 {InitRnode } NewNode end end
 1136 969 a Fr(c3)1170 949
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-0 /N@T-0-0-2-0-2 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1170 949 a 1203 969 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.0279 4.01395 2.41109
} false /N@T-0-0-2-0-3 16 {InitRnode } NewNode end end
 1203 969 a Fr(c3)1236 949 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-0 /N@T-0-0-2-0-3 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1236
949 a 1270 969 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.0279 4.01395 2.41109
} false /N@T-0-0-2-0-4 16 {InitRnode } NewNode end end
 1270 969 a Fr(c3)1303 949 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-0 /N@T-0-0-2-0-4 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1303 949
a 1336 969 a
 tx@Dict begin tx@NodeDict begin {5.55556 0.0 8.97235 4.48618 2.41109
} false /N@T-0-0-2-0-5 16 {InitRnode } NewNode end end
 1336 969 a Fr(b3)1374 949 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-0 /N@T-0-0-2-0-5 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1374 949 a 1580
626 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.0279 4.01395 2.41109
} false /N@T-0-0-3 16 {InitRnode } NewNode end end
 1580 626 a Fr(c2)1613 606 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0 /N@T-0-0-3 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1613 606 a 1595 798
a
 tx@Dict begin tx@NodeDict begin {3.6528 0.0 4.25006 2.12503 2.41109
} false /N@T-0-0-3-0 16 {InitRnode } NewNode end end
 1595 798 a Fe(\017)1613 778 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3 /N@T-0-0-3-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1613 778 a 1411 969 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.0279 4.01395 2.41109
} false /N@T-0-0-3-0-0 16 {InitRnode } NewNode end end

1411 969 a Fr(c3)1444 949 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3-0 /N@T-0-0-3-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1444 949 a 1478 969 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.0279 4.01395 2.41109
} false /N@T-0-0-3-0-1 16 {InitRnode } NewNode end end
 1478
969 a Fr(c3)1511 949 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3-0 /N@T-0-0-3-0-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1511 949 a 1544 969 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.0279 4.01395 2.41109
} false /N@T-0-0-3-0-2 16 {InitRnode } NewNode end end
 1544 969
a Fr(c3)1578 949 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3-0 /N@T-0-0-3-0-2 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1578 949 a 1611 969 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.0279 4.01395 2.41109
} false /N@T-0-0-3-0-3 16 {InitRnode } NewNode end end
 1611 969 a Fr(c3)1644
949 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3-0 /N@T-0-0-3-0-3 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1644 949 a 1678 969 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.0279 4.01395 2.41109
} false /N@T-0-0-3-0-4 16 {InitRnode } NewNode end end
 1678 969 a Fr(c3)1711 949
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3-0 /N@T-0-0-3-0-4 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1711 949 a 1744 969 a
 tx@Dict begin tx@NodeDict begin {5.55556 0.0 8.97235 4.48618 2.41109
} false /N@T-0-0-3-0-5 16 {InitRnode } NewNode end end
 1744 969 a Fr(b3)1781 949 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3-0 /N@T-0-0-3-0-5 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1781
949 a 1987 626 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.0279 4.01395 2.41109
} false /N@T-0-0-4 16 {InitRnode } NewNode end end
 1987 626 a Fr(c2)2021 606 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0 /N@T-0-0-4 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 2021 606
a 2003 798 a
 tx@Dict begin tx@NodeDict begin {3.6528 0.0 4.25006 2.12503 2.41109
} false /N@T-0-0-4-0 16 {InitRnode } NewNode end end
 2003 798 a Fe(\017)2021 778 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-4 /N@T-0-0-4-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2021 778 a
1819 969 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.0279 4.01395 2.41109
} false /N@T-0-0-4-0-0 16 {InitRnode } NewNode end end
 1819 969 a Fr(c3)1852 949 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-4-0 /N@T-0-0-4-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1852 949 a 1885
969 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.0279 4.01395 2.41109
} false /N@T-0-0-4-0-1 16 {InitRnode } NewNode end end
 1885 969 a Fr(c3)1919 949 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-4-0 /N@T-0-0-4-0-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1919 949 a 1952 969
a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.0279 4.01395 2.41109
} false /N@T-0-0-4-0-2 16 {InitRnode } NewNode end end
 1952 969 a Fr(c3)1985 949 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-4-0 /N@T-0-0-4-0-2 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1985 949 a 2019 969 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.0279 4.01395 2.41109
} false /N@T-0-0-4-0-3 16 {InitRnode } NewNode end end
 2019
969 a Fr(c3)2052 949 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-4-0 /N@T-0-0-4-0-3 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2052 949 a 2085 969 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.0279 4.01395 2.41109
} false /N@T-0-0-4-0-4 16 {InitRnode } NewNode end end
 2085 969
a Fr(c3)2119 949 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-4-0 /N@T-0-0-4-0-4 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2119 949 a 2152 969 a
 tx@Dict begin tx@NodeDict begin {5.55556 0.0 8.97235 4.48618 2.41109
} false /N@T-0-0-4-0-5 16 {InitRnode } NewNode end end
 2152 969 a Fr(b3)2189
949 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-4-0 /N@T-0-0-4-0-5 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2189 949 a 2413 626 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-0-5 16 {InitRnode } NewNode end end
 2413 626 a Fr(a3)2448 606
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0 /N@T-0-0-5 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 2448 606 a 2430 798 a
 tx@Dict begin tx@NodeDict begin {3.6528 0.0 4.25006 2.12503 2.41109
} false /N@T-0-0-5-0 16 {InitRnode } NewNode end end
 2430 798 a Fe(\017)2448 778 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-5 /N@T-0-0-5-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end

2448 778 a 2226 969 a
 tx@Dict begin tx@NodeDict begin {5.55556 0.0 8.97235 4.48618 2.41109
} false /N@T-0-0-5-0-0 16 {InitRnode } NewNode end end
 2226 969 a Fr(b2)2264 949 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-5-0 /N@T-0-0-5-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2264
949 a 2301 969 a
 tx@Dict begin tx@NodeDict begin {5.55556 0.0 8.97235 4.48618 2.41109
} false /N@T-0-0-5-0-1 16 {InitRnode } NewNode end end
 2301 969 a Fr(b2)2338 949 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-5-0 /N@T-0-0-5-0-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2338 949
a 2375 969 a
 tx@Dict begin tx@NodeDict begin {5.55556 0.0 8.97235 4.48618 2.41109
} false /N@T-0-0-5-0-2 16 {InitRnode } NewNode end end
 2375 969 a Fr(b2)2413 949 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-5-0 /N@T-0-0-5-0-2 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2413 949 a 2450
969 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-0-5-0-3 16 {InitRnode } NewNode end end
 2450 969 a Fr(a2)2485 949 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-5-0 /N@T-0-0-5-0-3 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2485 949 a 2467 1141
a
 tx@Dict begin tx@NodeDict begin {3.6528 0.0 4.25006 2.12503 2.41109
} false /N@T-0-0-5-0-3-0 16 {InitRnode } NewNode end end
 2467 1141 a Fe(\017)2485 1121 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-5-0-3 /N@T-0-0-5-0-3-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2485 1121 a 2341 1312
a
 tx@Dict begin tx@NodeDict begin {5.55556 0.0 8.97235 4.48618 2.41109
} false /N@T-0-0-5-0-3-0-0 16 {InitRnode } NewNode end end
 2341 1312 a Fr(b1)2378 1292 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-5-0-3-0 /N@T-0-0-5-0-3-0-0 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2378 1292 a 2416 1312
a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-0-5-0-3-0-1 16 {InitRnode } NewNode end end
 2416 1312 a Fr(a1)2451 1292 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-5-0-3-0 /N@T-0-0-5-0-3-0-1 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2451 1292 a 2486 1312
a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-0-5-0-3-0-2 16 {InitRnode } NewNode end end
 2486 1312 a Fr(a1)2521 1292 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-5-0-3-0 /N@T-0-0-5-0-3-0-2 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2521 1292 a 2557 1312
a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-0-5-0-3-0-3 16 {InitRnode } NewNode end end
 2557 1312 a Fr(a1)2592 1292 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-5-0-3-0 /N@T-0-0-5-0-3-0-3 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2592 1292 a 2520 969
a
 tx@Dict begin tx@NodeDict begin {5.55556 0.0 8.97235 4.48618 2.41109
} false /N@T-0-0-5-0-4 16 {InitRnode } NewNode end end
 2520 969 a Fr(b2)2558 949 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-5-0 /N@T-0-0-5-0-4 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2558 949 a 2595 969 a
 tx@Dict begin tx@NodeDict begin {5.55556 0.0 8.97235 4.48618 2.41109
} false /N@T-0-0-5-0-5 16 {InitRnode } NewNode end end
 2595
969 a Fr(b2)2632 949 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-5-0 /N@T-0-0-5-0-5 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2632 949 a 2846 626 a
 tx@Dict begin tx@NodeDict begin {5.55556 0.0 8.97235 4.48618 2.41109
} false /N@T-0-0-6 16 {InitRnode } NewNode end end
 2846 626
a Fr(b2)2883 606 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0 /N@T-0-0-6 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 2883 606 a 2865 798 a
 tx@Dict begin tx@NodeDict begin {3.6528 0.0 4.25006 2.12503 2.41109
} false /N@T-0-0-6-0 16 {InitRnode } NewNode end end
 2865 798 a Fe(\017)2883
778 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-6 /N@T-0-0-6-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2883 778 a 2669 969 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-0-6-0-0 16 {InitRnode } NewNode end end
 2669 969 a Fr(a3)2705 949
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-6-0 /N@T-0-0-6-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2705 949 a 2740 969 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-0-6-0-1 16 {InitRnode } NewNode end end
 2740 969 a Fr(a3)2775 949 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-6-0 /N@T-0-0-6-0-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2775
949 a 2811 969 a
 tx@Dict begin tx@NodeDict begin {5.55556 0.0 8.97235 4.48618 2.41109
} false /N@T-0-0-6-0-2 16 {InitRnode } NewNode end end
 2811 969 a Fr(b3)2848 949 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-6-0 /N@T-0-0-6-0-2 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2848 949
a 2885 969 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-0-6-0-3 16 {InitRnode } NewNode end end
 2885 969 a Fr(a3)2920 949 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-6-0 /N@T-0-0-6-0-3 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2920 949 a 2956
969 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-0-6-0-4 16 {InitRnode } NewNode end end
 2956 969 a Fr(a3)2991 949 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-6-0 /N@T-0-0-6-0-4 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2991 949 a 3026 969
a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-0-6-0-5 16 {InitRnode } NewNode end end
 3026 969 a Fr(a3)3061 949 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-6-0 /N@T-0-0-6-0-5 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3061 949 a 3273 626 a
 tx@Dict begin tx@NodeDict begin {5.55556 0.0 8.97235 4.48618 2.41109
} false /N@T-0-0-7 16 {InitRnode } NewNode end end
 3273
626 a Fr(b2)3310 606 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0 /N@T-0-0-7 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 3310 606 a 3292 798 a
 tx@Dict begin tx@NodeDict begin {3.6528 0.0 4.25006 2.12503 2.41109
} false /N@T-0-0-7-0 16 {InitRnode } NewNode end end
 3292 798
a Fe(\017)3310 778 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-7 /N@T-0-0-7-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3310 778 a 3097 969 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-0-7-0-0 16 {InitRnode } NewNode end end
 3097 969 a
Fr(a3)3132 949 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-7-0 /N@T-0-0-7-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3132 949 a 3167 969 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-0-7-0-1 16 {InitRnode } NewNode end end
 3167 969 a Fr(a3)3203
949 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-7-0 /N@T-0-0-7-0-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3203 949 a 3238 969 a
 tx@Dict begin tx@NodeDict begin {5.55556 0.0 8.97235 4.48618 2.41109
} false /N@T-0-0-7-0-2 16 {InitRnode } NewNode end end
 3238 969 a Fr(b3)3275 949
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-7-0 /N@T-0-0-7-0-2 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3275 949 a 3312 969 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-0-7-0-3 16 {InitRnode } NewNode end end
 3312 969 a Fr(a3)3348 949 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-7-0 /N@T-0-0-7-0-3 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3348
949 a 3383 969 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-0-7-0-4 16 {InitRnode } NewNode end end
 3383 969 a Fr(a3)3418 949 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-7-0 /N@T-0-0-7-0-4 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3418 949
a 3454 969 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-0-7-0-5 16 {InitRnode } NewNode end end
 3454 969 a Fr(a3)3489 949 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-7-0 /N@T-0-0-7-0-5 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3489 949 a 1774
1281 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.0279 4.01395 2.41109
} false /N@T-0 16 {InitRnode } NewNode end end
 1774 1281 a Fr(c1)1790 1453 y
 tx@Dict begin tx@NodeDict begin {3.6528 0.0 4.25006 2.12503 2.41109
} false /N@T-0-0 16 {InitRnode } NewNode end end
 1790 1453 a Fe(\017)1807
1433 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 1807 1433 a 1613 1624 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.0279 4.01395 2.41109
} false /N@T-0-0-0 16 {InitRnode } NewNode end end
 1613 1624 a Fr(c2)1646
1604 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0 /N@T-0-0-0 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1646 1604 a 1628 1796 a
 tx@Dict begin tx@NodeDict begin {3.6528 0.0 4.25006 2.12503 2.41109
} false /N@T-0-0-0-0 16 {InitRnode } NewNode end end
 1628 1796 a Fe(\017)1646
1776 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0 /N@T-0-0-0-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1646 1776 a 1573 1967 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.0279 4.01395 2.41109
} false /N@T-0-0-0-0-0 16 {InitRnode } NewNode end end
 1573 1967 a Fr(c3)1607
1947 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0-0 /N@T-0-0-0-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1607 1947 a 1648 1967 a
 tx@Dict begin tx@NodeDict begin {5.55556 0.0 8.97235 4.48618 2.41109
} false /N@T-0-0-0-0-1 16 {InitRnode } NewNode end end
 1648 1967 a Fr(b3)1686
1947 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0-0 /N@T-0-0-0-0-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1686 1947 a 1773 1624 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-0-1 16 {InitRnode } NewNode end end
 1773 1624 a Fr(a3)1808
1604 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0 /N@T-0-0-1 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1808 1604 a 1790 1796 a
 tx@Dict begin tx@NodeDict begin {3.6528 0.0 4.25006 2.12503 2.41109
} false /N@T-0-0-1-0 16 {InitRnode } NewNode end end
 1790 1796 a Fe(\017)1808
1776 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1 /N@T-0-0-1-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1808 1776 a 1731 1967 a
 tx@Dict begin tx@NodeDict begin {5.55556 0.0 8.97235 4.48618 2.41109
} false /N@T-0-0-1-0-0 16 {InitRnode } NewNode end end
 1731 1967 a Fr(b2)1768
1947 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1-0 /N@T-0-0-1-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1768 1947 a 1814 1967 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-0-1-0-1 16 {InitRnode } NewNode end end
 1814 1967 a Fr(a2)1849
1947 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1-0 /N@T-0-0-1-0-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1849 1947 a 1831 2139 a
 tx@Dict begin tx@NodeDict begin {3.6528 0.0 4.25006 2.12503 2.41109
} false /N@T-0-0-1-0-1-0 16 {InitRnode } NewNode end end
 1831 2139 a Fe(\017)1849
2119 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1-0-1 /N@T-0-0-1-0-1-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1849 2119 a 1772 2310 a
 tx@Dict begin tx@NodeDict begin {5.55556 0.0 8.97235 4.48618 2.41109
} false /N@T-0-0-1-0-1-0-0 16 {InitRnode } NewNode end end
 1772 2310 a Fr(b1)1809
2290 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1-0-1-0 /N@T-0-0-1-0-1-0-0 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1809 2290 a 1854 2310 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-0-1-0-1-0-1 16 {InitRnode } NewNode end end
 1854 2310 a Fr(a1)1890
2290 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1-0-1-0 /N@T-0-0-1-0-1-0-1 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1890 2290 a 1931 1624 a
 tx@Dict begin tx@NodeDict begin {5.55556 0.0 8.97235 4.48618 2.41109
} false /N@T-0-0-2 16 {InitRnode } NewNode end end
 1931 1624 a Fr(b2)1969
1604 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0 /N@T-0-0-2 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1969 1604 a 1951 1796 a
 tx@Dict begin tx@NodeDict begin {3.6528 0.0 4.25006 2.12503 2.41109
} false /N@T-0-0-2-0 16 {InitRnode } NewNode end end
 1951 1796 a Fe(\017)1969
1776 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2 /N@T-0-0-2-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1969 1776 a 1893 1967 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-0-2-0-0 16 {InitRnode } NewNode end end
 1893 1967 a Fr(a3)1929
1947 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-0 /N@T-0-0-2-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1929 1947 a 1972 1967 a
 tx@Dict begin tx@NodeDict begin {5.55556 0.0 8.97235 4.48618 2.41109
} false /N@T-0-0-2-0-1 16 {InitRnode } NewNode end end
 1972 1967 a Fr(b3)2009
1947 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-0 /N@T-0-0-2-0-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2009 1947 a 166 2448 a Fn(Fig.)34 b(3.)g(The)f(tree)h(obtained)f
(from)g(the)h(strategy)h(tree)f(in)e(Fig.)i(2)g(b)m(y)f(replacing)g
(eac)m(h)h(set)g(of)166 2561 y(opp)s(onen)m(t)h(resp)s(onse)g(no)s(des)
g(with)f(a)i(single)e(\\)p Fp(\017)p Fn(")j(meta-no)s(de)f(\(top\),)h
(and)e(the)h(excised)f(tree)166 2674 y(obtained)30 b(b)m(y)g(then)g
(rep)s(eatedly)g(merging)g(iden)m(tical)f(subtrees)h(\(b)s(ottom\).)166
2883 y Fk(depth)45 b(indicate)f(\014rst-pla)m(y)m(er)h(mo)m(v)m(es;)h
(the)f(no)s(des)g(at)f(o)s(dd)h(depth)g(indicate)f(second-)166
3004 y(pla)m(y)m(er)f(mo)m(v)m(es;)h(the)f(game)f(in)g(Fig.)g(1)g
(follo)m(ws)g(one)h(ro)s(ot-to-leaf)d(path)i(through)h(the)166
3124 y(tree.)e(Notice)g(that)f(the)i(\014rst-pla)m(y)m(er)f(strategy)g
(describ)s(ed)h(b)m(y)g(the)f(tree)g(is)f Fm(c)-5 b(omplete)p
Fk(:)166 3244 y(after)42 b(eac)m(h)i(second-pla)m(y)m(er)f(mo)m(v)m(e,)
g(there)g(is)f(a)g(unique)h(\014rst-pla)m(y)m(er)g(resp)s(onse;)h
(after)166 3365 y(eac)m(h)f(\014rst-pla)m(y)m(er)g(mo)m(v)m(e,)f(there)
h(is)f(ev)m(ery)i(p)s(ossible)d(second-pla)m(y)m(er)j(resp)s(onse.)f
(Also,)166 3485 y(eac)m(h)36 b(leaf)e(no)s(de)h(establishes)h(a)e
(\014rst-pla)m(y)m(er)i(win,)e(so)i(this)e(is)h(a)g(winning)f(strategy)
h(for)166 3606 y(the)e(\014rst)g(pla)m(y)m(er.)166 3776
y(Next,)27 b(consider)g(the)g(t)m(w)m(o)f(trees)i(sho)m(wn)f(in)f(Fig.)
f(3.)h(The)h(top)f(tree)h(is)f(obtained)f(from)g(the)166
3896 y(tree)h(in)f(Fig.)f(2)h(b)m(y)h(excising)g(no)s(des)g(corresp)s
(onding)f(to)g(second-pla)m(y)m(er)i(mo)m(v)m(es;)g(eac)m(h)f(set)166
4017 y(of)33 b(mo)m(v)m(es)h(is)f(replaced)g(with)g(a)g(single)g
(meta-no)s(de,)f(indicated)g(in)h(our)g(diagrams)f(b)m(y)i(a)166
4137 y(dot)c(\()p Fi(\017)p Fk(\).)g(The)h(b)s(ottom)e(tree)i(is)e
(obtained)h(from)f(the)i(top)f(tree)h(b)m(y)g(rep)s(eatedly)f(merging)
166 4257 y(iden)m(tical)38 b(subtrees)k(in)m(to)d(a)g(single)g(subtree)
i(un)m(til,)e(for)g(eac)m(h)i(no)s(de,)f(all)e(subtrees)k(are)166
4378 y(distinct.)32 b(W)-8 b(e)33 b(refer)g(to)f(the)h(b)s(ottom)e
(tree)i(as)g(an)g Fm(excise)-5 b(d)33 b(tr)-5 b(e)g(e)p
Fk(.)166 4548 y(While)24 b(some)g(information)e(is)i(lost)g(when)h(a)g
(strategy)g(tree)g(is)f(replaced)h(with)f(its)g(excised)166
4668 y(tree,)h(the)g(excision)f(pro)s(cess)i(can)e(b)s(e)h(rev)m(ersed)
i(in)d(the)g(follo)m(wing)e(sense:)k(for)e(an)m(y)h(excised)166
4789 y(tree)30 b Fj(E)35 b Fk(for)29 b(a)f(pla)m(y)m(er,)i(there)g(is)f
(a)g(unique)g(set)h Fi(S)37 b Fk(of)29 b(strategy)h(trees)g(suc)m(h)g
(that)f Fj(E)36 b Fk(is)28 b(the)166 4909 y(excised)37
b(tree)f(of)f(ev)m(ery)i(tree)f(in)f Fi(S)7 b Fk(.)36
b(F)-8 b(urthermore,)35 b(it)f(is)h(easy)i(to)e(construct)h(elemen)m
(ts)166 5029 y(of)c Fi(S)40 b Fk(from)32 b Fj(E)38 b
Fk(via)32 b(the)h(follo)m(wing)d(pro)s(cess,)k(whic)m(h)f(w)m(e)h(call)
d Fm(r)-5 b(estor)g(ation)p Fk(:)264 5209 y Fm(Pr)g(o)g(c)g(e)g(e)g(d)
36 b(thr)-5 b(ough)37 b Fj(E)44 b Fm(in)37 b(top-down)f(or)-5
b(der.)36 b(A)n(t)i(e)-5 b(ach)36 b(meta-no)-5 b(de)36
b Fj(m)p Fm(,)i(for)f(e)-5 b(ach)36 b(p)-5 b(os-)264
5329 y(sible)33 b(opp)-5 b(onent)33 b(move)g(to)h(a)f(c)-5
b(el)5 b(l)33 b Fj(c)p Fm(,)h(sele)-5 b(ct)34 b(for)f(the)h(player's)f
(r)-5 b(esp)g(onding)33 b(move)g(any)264 5450 y(c)-5
b(el)5 b(l)34 b Fj(r)j Fm(that)f(is)e(the)h(r)-5 b(o)g(ot)35
b(of)g(a)g(subtr)-5 b(e)g(e)35 b(of)f Fj(m)h Fm(in)g(which)f
Fj(c)h Fm(do)-5 b(es)34 b(not)h(app)-5 b(e)g(ar.)166
5620 y Fk(F)d(or)41 b(example,)g(consider)h(the)g(restoration)f(pro)s
(cess)h(for)g(the)g(excised)g(tree)h(sho)m(wn)f(in)1769
5952 y(3)p eop
%%Page: 4 4
4 3 bop 166 323 a Fk(Fig.)29 b(3.)h(W)-8 b(e)30 b(start)g(with)g(the)h
(top-most)e(meta-no)s(de)g Fj(m)2223 287 y Fe(\003)2263
323 y Fk(,)h(namely)f(the)i(c)m(hild)e(of)h Fj(c)p Fk(1.)f(F)-8
b(or)166 443 y(this)31 b(b)s(oard)g(p)s(osition,)f(the)i(cell)e(set)j
(of)e(p)s(ossible)f(opp)s(onen)m(t)j(mo)m(v)m(es)f(is)f
Fi(f)p Fj(a)p Fk(1,)g Fj(a)p Fk(2,)h Fj(a)p Fk(3,)f Fj(b)p
Fk(1,)166 564 y Fj(b)p Fk(2,)h Fj(b)p Fk(3,)f Fj(c)p
Fk(2,)g Fj(c)p Fk(3)p Fi(g)p Fk(.)g(Consider)h(the)f(\014rst)h(suc)m(h)
h(cell,)d Fj(a)p Fk(1.)h(The)h(cell)e(sets)j(of)d(the)i(subtrees)h(of)
166 684 y Fj(m)251 648 y Fe(\003)324 684 y Fk(are)h Fi(f)p
Fj(c)p Fk(2)p Fj(;)17 b(b)p Fk(3)p Fj(;)g(c)p Fk(3)p
Fi(g)p Fk(,)32 b Fi(f)p Fj(a)p Fk(3)p Fj(;)17 b(b)p Fk(2)p
Fj(;)g(a)p Fk(2)p Fj(;)g(b)p Fk(1)p Fj(;)g(a)p Fk(1)p
Fi(g)p Fk(,)32 b(and)i Fi(f)p Fj(b)p Fk(2)p Fj(;)17 b(a)p
Fk(3)p Fj(;)g(b)p Fk(3)p Fi(g)p Fk(.)33 b(Since)h Fj(a)p
Fk(1)f(is)g(not)h(in)e(the)166 805 y(\014rst)c(or)f(third)g(of)g(these)
i(three)f(cell)e(sets,)j(w)m(e)g(can)e(select)h(the)g(ro)s(ot)f(of)g
(either)g(the)h(\014rst)g(or)166 925 y(third)33 b(subtree)i(of)e
Fj(m)951 889 y Fe(\003)991 925 y Fk(.)h(Let)f(us)i(assume)f(in)e(this)i
(example)f(that)g(w)m(e)i(alw)m(a)m(ys)f(select)g(the)166
1045 y(ro)s(ot)j(of)h(the)g(\014rst)h(a)m(v)-5 b(ailable)35
b(subtree.)k(Th)m(us,)h(as)e(the)h(resp)s(onse)g(to)f
Fj(a)p Fk(1)g(w)m(e)h(select)f(the)166 1166 y(ro)s(ot)28
b(of)h(the)g(\014rst)h(subtree,)h(namely)d Fj(c)p Fk(2.)h(Con)m(tin)m
(uing)f(in)h(this)f(fashion,)h(w)m(e)h(select)g Fj(c)p
Fk(2)e(as)166 1286 y(the)33 b(resp)s(onse)h(for)e(opp)s(onen)m(t)h(mo)m
(v)m(es)g(to)g Fj(a)p Fk(2,)f Fj(a)p Fk(3,)h Fj(b)p Fk(1,)g
Fj(b)p Fk(2,)f(and)h Fj(a)p Fk(3)g(as)f(the)h(resp)s(onse)h(for)166
1406 y(opp)s(onen)m(t)28 b(mo)m(v)m(es)g(to)f Fj(b)p
Fk(3,)g Fj(c)p Fk(2,)g Fj(c)p Fk(3.)g(Ha)m(ving)g(selected)h(all)d
(resp)s(onses)k(to)e Fj(m)2864 1370 y Fe(\003)2904 1406
y Fk(,)g(w)m(e)h(con)m(tin)m(ue)166 1527 y(in)j(top-do)m(wn)g(order)h
(to)e(pro)s(cess)j(meta-no)s(des)e(un)m(til)f(all)f(suc)m(h)k(no)s(des)
f(ha)m(v)m(e)g(b)s(een)g(dealt)166 1647 y(with)h(and)h(the)g(excised)h
(tree)f(has)g(b)s(een)g(replaced)g(with)f(a)g(complete)g(strategy)i
(tree)f Fj(S)3431 1611 y Fe(0)166 1768 y Fk(of)e Fi(S)8
b Fk(.)166 1938 y(Notice)40 b(that)g Fj(S)765 1902 y
Fe(0)829 1938 y Fk(is)g(di\013eren)m(t)g(from)f(the)i(strategy)g(tree)g
Fj(S)46 b Fk(of)40 b(Fig.)f(2)i(from)e(whic)m(h)i Fj(E)166
2058 y Fk(w)m(as)h(deriv)m(ed,)f(as)g(in)f(the)h(restoration)f(pro)s
(cess)i(w)m(e)g(nev)m(er)g(selected)g(the)f(ro)s(ot)f(of)g(the)166
2179 y(third)26 b(subtree)i(of)e Fj(m)930 2142 y Fe(\003)996
2179 y Fk(as)h(a)g(resp)s(onse)h(to)e(an)g(opp)s(onen)m(t)i(mo)m(v)m
(e.)f(Ho)m(w)m(ev)m(er,)i(b)m(y)e(rep)s(eating)166 2299
y(the)32 b(restoration)f(once)h(for)f(eac)m(h)h(of)f(the)h(p)s(ossible)
f(p)s(erm)m(utations)g(of)g(c)m(hoices)h(for)f Fj(r)s
Fk(,)h(w)m(e)166 2419 y(w)m(ould)h(construct)g(all)e(p)s(ossible)h
(strategy)h(trees)g(asso)s(ciated)g(with)f Fj(E)6 b Fk(,)33
b(including)d Fj(S)6 b Fk(.)166 2590 y(The)35 b(restoration)e(pro)s
(cess)j(is)d(w)m(ell)g(de\014ned)j(in)d(that)h(it)f(is)h(alw)m(a)m(ys)g
(p)s(ossible)g(to)f(\014nd)i(at)166 2710 y(least)26 b(one)h(v)-5
b(alue)25 b(of)h Fj(r)j Fk(at)d(eac)m(h)i(meta-no)s(de.)d(This)i(follo)
m(ws)e(from)g(the)i(next)g(observ)-5 b(ation,)166 2830
y(whic)m(h)25 b(in)f(turn)g(follo)m(ws)f(from)g(the)i(fact)f(that)h(in)
e(Hex,)j(stones)f(nev)m(er)h(mo)m(v)m(e)f(once)g(pla)m(y)m(ed.)166
3000 y(A)35 b Fj(\031)t Fk(-mo)m(v)m(e)h(is)e(a)i(mo)m(v)m(e)f(made)g
(b)m(y)h(pla)m(y)m(er)g Fj(\031)t Fk(;)f(a)g Fj(\031)t
Fk(-no)s(de)g(is)g(a)g(no)s(de)h(asso)s(ciated)f(with)g(a)166
3121 y Fj(\031)t Fk(-mo)m(v)m(e.)e(The)g Fj(\031)t Fk(-descendan)m(ts)i
(of)d(a)g(subtree)i(are)f(all)d Fj(\031)t Fk(-no)s(des)j(in)f(the)h
(subtree.)166 3291 y Fl(Observ)-6 b(ation)37 b(1)49 b
Fm(In)39 b(a)h(Hex)f(str)-5 b(ate)g(gy)40 b(tr)-5 b(e)g(e)40
b(for)g(a)f(player)h Fj(\031)t Fm(,)f(let)h Fj(p)f Fm(b)-5
b(e)40 b(a)f Fj(\031)t Fm(-no)-5 b(de,)39 b(let)166 3411
y Fj(S)226 3426 y Fr(1)265 3411 y Fm(,.)15 b(.)g(.)g(,)p
Fj(S)520 3426 y Fd(t)587 3411 y Fm(b)-5 b(e)37 b(the)g(subtr)-5
b(e)g(es)38 b(of)f Fj(p)p Fm(,)g(and)g(for)g(e)-5 b(ach)37
b Fj(S)2106 3426 y Fd(j)2179 3411 y Fm(let)h Fj(P)2382
3426 y Fd(j)2456 3411 y Fm(b)-5 b(e)37 b(the)g Fj(\031)t
Fm(-desc)-5 b(endants)36 b(of)166 3532 y Fj(S)226 3547
y Fd(j)263 3532 y Fm(.)e(Then)g(the)h(c)-5 b(ombine)g(d)34
b(interse)-5 b(ction)34 b Fj(I)h Fk(=)28 b Fj(P)1941
3547 y Fr(1)2002 3532 y Fi(\\)23 b Fj(:)17 b(:)g(:)22
b Fi(\\)g Fj(P)2379 3547 y Fd(t)2444 3532 y Fm(is)34
b(empty.)166 3702 y(Pr)-5 b(o)g(of)p Fk(.)32 b(F)-8 b(or)32
b(eac)m(h)h Fj(S)906 3717 y Fd(j)975 3702 y Fk(let)f
Fj(c)1158 3717 y Fd(j)1227 3702 y Fk(b)s(e)g(the)h(cell)f(asso)s
(ciated)g(with)g(the)h(ro)s(ot)e(of)h Fj(S)2934 3717
y Fd(j)2971 3702 y Fk(.)g(Th)m(us)i Fj(c)3319 3717 y
Fd(j)3388 3702 y Fk(is)166 3822 y(a)i(cell)g(to)g(whic)m(h)h
Fj(\031)t Fk('s)g(opp)s(onen)m(t)g(mo)m(v)m(ed,)g(so)g
Fj(c)1931 3837 y Fd(j)2004 3822 y Fk(is)f(not)g(in)g
Fj(P)2464 3837 y Fd(j)2537 3822 y Fk(and)g(so)h(not)f(in)g
Fj(I)8 b Fk(.)36 b(This)166 3943 y(holds)28 b(for)g(all)e
Fj(c)735 3958 y Fd(j)800 3943 y Fk(in)i Fj(C)34 b Fk(=)28
b Fi(f)p Fj(c)1210 3958 y Fr(1)1249 3943 y Fj(;)17 b(:)g(:)g(:)f(;)h(c)
1510 3958 y Fd(t)1539 3943 y Fi(g)p Fk(,)29 b(where)g
Fj(C)35 b Fk(is)28 b(the)h(set)g(of)f(uno)s(ccupied)h(cells)f(after)166
4063 y(the)33 b Fj(\031)t Fk(-mo)m(v)m(e)f Fj(p)p Fk(.)h(Th)m(us)h
Fj(I)41 b Fk(is)32 b(empt)m(y)-8 b(.)1880 b Fc(2)166
4233 y Fk(The)34 b(follo)m(wing)29 b(is)k(an)f(immediate)e(corollary)h
(of)h(the)h(preceding.)166 4404 y Fl(Observ)-6 b(ation)37
b(2)49 b Fm(In)39 b(an)f(excise)-5 b(d)38 b(tr)-5 b(e)g(e)40
b(of)e(a)h(Hex)g(str)-5 b(ate)g(gy)40 b(tr)-5 b(e)g(e)39
b(for)g(a)g(player)g Fj(\031)t Fm(,)g(for)166 4524 y(every)49
b(meta-no)-5 b(de)48 b Fj(m)h Fm(that)h(is)f(not)g(a)g(le)-5
b(af,)48 b(the)h(c)-5 b(ombine)g(d)48 b(interse)-5 b(ction)48
b(of)h(the)g Fj(\031)t Fm(-)166 4644 y(desc)-5 b(endants)34
b(of)g(the)h(subtr)-5 b(e)g(es)35 b(of)f Fj(m)i Fm(is)e(empty.)1413
b Fc(2)166 4815 y Fk(W)-8 b(e)39 b(refer)g(to)g(the)g(class)f(of)h
(trees)g(that)g(w)m(e)h(use)f(in)f(our)h(v)m(eri\014cation)f(system)i
(as)e(\\au-)166 4935 y(totrees";)k(w)m(e)g(use)h(this)e(term)f(since)i
(suc)m(h)h(trees)f(mak)m(e)g(explicit)e(men)m(tion)g(only)h(of)g(a)166
5055 y(pla)m(y)m(er's)i Fm(own)e Fk(mo)m(v)m(es.)j(Autotrees)f(ha)m(v)m
(e)g(the)g(same)f(form)e(and)j(function)e(as)h(excised)166
5176 y(trees;)30 b(ho)m(w)m(ev)m(er,)i(they)d(ma)m(y)g(not)g(ha)m(v)m
(e)h(arisen)f(via)f(excision,)h(and)g(so)h(w)m(e)g(do)f(not)f(de\014ne)
166 5296 y(them)k(with)g(resp)s(ect)i(to)e(excision.)g(An)g
Fm(autotr)-5 b(e)g(e)33 b Fk(is)f(de\014ned)i(as)e(follo)m(ws:)f(eac)m
(h)j(no)s(de)e(at)166 5416 y(one)e(set)g(of)f(alternating)f(lev)m(els)i
(is)f(a)g(sp)s(ecial)g(no)s(de)g(called)g(a)g Fm(meta-no)-5
b(de)p Fk(;)29 b(eac)m(h)h(no)s(de)g(at)166 5537 y(the)j(other)g(set)g
(of)f(alternating)f(lev)m(els)h(has)h(a)g(cell)e(lab)s(el.)1769
5952 y(4)p eop
%%Page: 5 5
5 4 bop 1656 286 a
 tx@Dict begin tx@NodeDict begin {5.55556 0.0 8.97235 4.48618 2.41109
} false /N@T-0 16 {InitRnode } NewNode end end
 1656 286 a Fr(d1)1675 458 y
 tx@Dict begin tx@NodeDict begin {3.6528 0.0 4.25006 2.12503 2.41109
} false /N@T-0-0 16 {InitRnode } NewNode end end
 1675 458
a Fe(\017)1693 438 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 1693 438 a 1145 629 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.0279 4.01395 2.41109
} false /N@T-0-0-0 16 {InitRnode } NewNode end end
 1145 629 a
Fr(c3)1178 609 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0 /N@T-0-0-0 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1178 609 a 1083 801 a
 tx@Dict begin tx@NodeDict begin {3.6528 0.0 4.25006 2.12503 2.41109
} false /N@T-0-0-0-0 16 {InitRnode } NewNode end end
 1083 801 a Fe(\017)1101
781 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0 /N@T-0-0-0-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1101 781 a 1024 972 a
 tx@Dict begin tx@NodeDict begin {5.55556 0.0 8.97235 4.48618 2.41109
} false /N@T-0-0-0-0-0 16 {InitRnode } NewNode end end
 1024 972 a Fr(b4)1062 952
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0-0 /N@T-0-0-0-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1062 952 a 1107 972 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.0279 4.01395 2.41109
} false /N@T-0-0-0-0-1 16 {InitRnode } NewNode end end
 1107 972 a Fr(c4)1141 952 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0-0 /N@T-0-0-0-0-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1141
952 a 1237 801 a
 tx@Dict begin tx@NodeDict begin {3.6528 0.0 4.25006 2.12503 2.41109
} false /N@T-0-0-0-1 16 {InitRnode } NewNode end end
 1237 801 a Fe(\017)1255 781 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0 /N@T-0-0-0-1 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1255 781
a 1182 972 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.0279 4.01395 2.41109
} false /N@T-0-0-0-1-0 16 {InitRnode } NewNode end end
 1182 972 a Fr(c2)1216 952 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0-1 /N@T-0-0-0-1-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1216 952 a 1257
972 a
 tx@Dict begin tx@NodeDict begin {5.55556 0.0 8.97235 4.48618 2.41109
} false /N@T-0-0-0-1-1 16 {InitRnode } NewNode end end
 1257 972 a Fr(d2)1294 952 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0-1 /N@T-0-0-0-1-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1294 952 a 1458 629
a
 tx@Dict begin tx@NodeDict begin {5.55556 0.0 8.97235 4.48618 2.41109
} false /N@T-0-0-1 16 {InitRnode } NewNode end end
 1458 629 a Fr(b3)1495 609 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0 /N@T-0-0-1 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1495 609 a 1398 801 a
 tx@Dict begin tx@NodeDict begin {3.6528 0.0 4.25006 2.12503 2.41109
} false /N@T-0-0-1-0 16 {InitRnode } NewNode end end
 1398
801 a Fe(\017)1416 781 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1 /N@T-0-0-1-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1416 781 a 1340 972 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-0-1-0-0 16 {InitRnode } NewNode end end
 1340 972
a Fr(a4)1376 952 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1-0 /N@T-0-0-1-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1376 952 a 1419 972 a
 tx@Dict begin tx@NodeDict begin {5.55556 0.0 8.97235 4.48618 2.41109
} false /N@T-0-0-1-0-1 16 {InitRnode } NewNode end end
 1419 972 a Fr(b4)1456
952 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1-0 /N@T-0-0-1-0-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1456 952 a 1558 801 a
 tx@Dict begin tx@NodeDict begin {3.6528 0.0 4.25006 2.12503 2.41109
} false /N@T-0-0-1-1 16 {InitRnode } NewNode end end
 1558 801 a Fe(\017)1575 781
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1 /N@T-0-0-1-1 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1575 781 a 1502 972 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-0-1-1-0 16 {InitRnode } NewNode end end
 1502 972 a Fr(a2)1537 952 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1-1 /N@T-0-0-1-1-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1537
952 a 1438 1144 a
 tx@Dict begin tx@NodeDict begin {3.6528 0.0 4.25006 2.12503 2.41109
} false /N@T-0-0-1-1-0-0 16 {InitRnode } NewNode end end
 1438 1144 a Fe(\017)1456 1124 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1-1-0 /N@T-0-0-1-1-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1456
1124 a 1380 1316 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-0-1-1-0-0-0 16 {InitRnode } NewNode end end
 1380 1316 a Fr(a1)1416 1296 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1-1-0-0 /N@T-0-0-1-1-0-0-0 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1416
1296 a 1459 1316 a
 tx@Dict begin tx@NodeDict begin {5.55556 0.0 8.97235 4.48618 2.41109
} false /N@T-0-0-1-1-0-0-1 16 {InitRnode } NewNode end end
 1459 1316 a Fr(b1)1496 1296 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1-1-0-0 /N@T-0-0-1-1-0-0-1 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1496
1296 a 1600 1144 a
 tx@Dict begin tx@NodeDict begin {3.6528 0.0 4.25006 2.12503 2.41109
} false /N@T-0-0-1-1-0-1 16 {InitRnode } NewNode end end
 1600 1144 a Fe(\017)1618 1124 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1-1-0 /N@T-0-0-1-1-0-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1618
1124 a 1542 1316 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-0-1-1-0-1-0 16 {InitRnode } NewNode end end
 1542 1316 a Fr(a3)1578 1296 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1-1-0-1 /N@T-0-0-1-1-0-1-0 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1578
1296 a 1621 1316 a
 tx@Dict begin tx@NodeDict begin {5.55556 0.0 8.97235 4.48618 2.41109
} false /N@T-0-0-1-1-0-1-1 16 {InitRnode } NewNode end end
 1621 1316 a Fr(b2)1658 1296 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1-1-0-1 /N@T-0-0-1-1-0-1-1 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1658
1296 a 1580 972 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.0279 4.01395 2.41109
} false /N@T-0-0-1-1-1 16 {InitRnode } NewNode end end
 1580 972 a Fr(c2)1614 952 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1-1 /N@T-0-0-1-1-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1614 952
a 1794 629 a
 tx@Dict begin tx@NodeDict begin {5.55556 0.0 8.97235 4.48618 2.41109
} false /N@T-0-0-2 16 {InitRnode } NewNode end end
 1794 629 a Fr(b3)1831 609 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0 /N@T-0-0-2 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1831 609 a 1713
801 a
 tx@Dict begin tx@NodeDict begin {3.6528 0.0 4.25006 2.12503 2.41109
} false /N@T-0-0-2-0 16 {InitRnode } NewNode end end
 1713 801 a Fe(\017)1731 781 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2 /N@T-0-0-2-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1731 781 a 1655 972
a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-0-2-0-0 16 {InitRnode } NewNode end end
 1655 972 a Fr(a4)1691 952 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-0 /N@T-0-0-2-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1691 952 a 1734 972 a
 tx@Dict begin tx@NodeDict begin {5.55556 0.0 8.97235 4.48618 2.41109
} false /N@T-0-0-2-0-1 16 {InitRnode } NewNode end end
 1734
972 a Fr(b4)1772 952 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-0 /N@T-0-0-2-0-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1772 952 a 1914 801 a
 tx@Dict begin tx@NodeDict begin {3.6528 0.0 4.25006 2.12503 2.41109
} false /N@T-0-0-2-1 16 {InitRnode } NewNode end end
 1914 801
a Fe(\017)1931 781 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2 /N@T-0-0-2-1 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1931 781 a 1817 972 a
 tx@Dict begin tx@NodeDict begin {5.55556 0.0 8.97235 4.48618 2.41109
} false /N@T-0-0-2-1-0 16 {InitRnode } NewNode end end
 1817 972 a
Fr(b2)1854 952 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-1 /N@T-0-0-2-1-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1854 952 a 1836 1144 a
 tx@Dict begin tx@NodeDict begin {3.6528 0.0 4.25006 2.12503 2.41109
} false /N@T-0-0-2-1-0-0 16 {InitRnode } NewNode end end
 1836 1144 a Fe(\017)1854
1124 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-1-0 /N@T-0-0-2-1-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1854 1124 a 1778 1316 a
 tx@Dict begin tx@NodeDict begin {5.55556 0.0 8.97235 4.48618 2.41109
} false /N@T-0-0-2-1-0-0-0 16 {InitRnode } NewNode end end
 1778 1316 a Fr(b1)1815
1296 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-1-0-0 /N@T-0-0-2-1-0-0-0 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1815 1296 a 1860 1316 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.0279 4.01395 2.41109
} false /N@T-0-0-2-1-0-0-1 16 {InitRnode } NewNode end end
 1860 1316 a Fr(c1)1894
1296 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-1-0-0 /N@T-0-0-2-1-0-0-1 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1894 1296 a 1971 972 a
 tx@Dict begin tx@NodeDict begin {5.55556 0.0 8.97235 4.48618 2.41109
} false /N@T-0-0-2-1-1 16 {InitRnode } NewNode end end
 1971 972 a Fr(d2)2008 952
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-1 /N@T-0-0-2-1-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2008 952 a 1990 1144 a
 tx@Dict begin tx@NodeDict begin {3.6528 0.0 4.25006 2.12503 2.41109
} false /N@T-0-0-2-1-1-0 16 {InitRnode } NewNode end end
 1990 1144 a Fe(\017)2008 1124
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-1-1 /N@T-0-0-2-1-1-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2008 1124 a 1935 1316 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.0279 4.01395 2.41109
} false /N@T-0-0-2-1-1-0-0 16 {InitRnode } NewNode end end
 1935 1316 a Fr(c3)1969 1296
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-1-1-0 /N@T-0-0-2-1-1-0-0 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1969 1296 a 2010 1316 a
 tx@Dict begin tx@NodeDict begin {5.55556 0.0 8.97235 4.48618 2.41109
} false /N@T-0-0-2-1-1-0-1 16 {InitRnode } NewNode end end
 2010 1316 a Fr(d3)2048 1296
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-1-1-0 /N@T-0-0-2-1-1-0-1 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2048 1296 a 2030 1487 a
 tx@Dict begin tx@NodeDict begin {3.6528 0.0 4.25006 2.12503 2.41109
} false /N@T-0-0-2-1-1-0-1-0 16 {InitRnode } NewNode end end
 2030 1487 a Fe(\017)2048 1467
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-1-1-0-1 /N@T-0-0-2-1-1-0-1-0 InitNC { NCLine  }
if end gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore
end
 2048 1467 a 1975 1659 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.0279 4.01395 2.41109
} false /N@T-0-0-2-1-1-0-1-0-0 16 {InitRnode } NewNode end end
 1975 1659 a Fr(c4)2009 1639
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-1-1-0-1-0 /N@T-0-0-2-1-1-0-1-0-0 InitNC { NCLine
 } if end gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore
end
 2009 1639 a 2050 1659 a
 tx@Dict begin tx@NodeDict begin {5.55556 0.0 8.97235 4.48618 2.41109
} false /N@T-0-0-2-1-1-0-1-0-1 16 {InitRnode } NewNode end end
 2050 1659 a Fr(d4)2087 1639
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-1-1-0-1-0 /N@T-0-0-2-1-1-0-1-0-1 InitNC { NCLine
 } if end gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore
end
 2087 1639 a 2171 629 a
 tx@Dict begin tx@NodeDict begin {5.55556 0.0 8.97235 4.48618 2.41109
} false /N@T-0-0-3 16 {InitRnode } NewNode end end
 2171 629 a Fr(d3)2208 609 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0 /N@T-0-0-3 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end

2208 609 a 2109 801 a
 tx@Dict begin tx@NodeDict begin {3.6528 0.0 4.25006 2.12503 2.41109
} false /N@T-0-0-3-0 16 {InitRnode } NewNode end end
 2109 801 a Fe(\017)2126 781 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3 /N@T-0-0-3-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2126
781 a 2054 972 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.0279 4.01395 2.41109
} false /N@T-0-0-3-0-0 16 {InitRnode } NewNode end end
 2054 972 a Fr(c4)2087 952 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3-0 /N@T-0-0-3-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2087 952
a 2129 972 a
 tx@Dict begin tx@NodeDict begin {5.55556 0.0 8.97235 4.48618 2.41109
} false /N@T-0-0-3-0-1 16 {InitRnode } NewNode end end
 2129 972 a Fr(d4)2166 952 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3-0 /N@T-0-0-3-0-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2166 952 a 2272
801 a
 tx@Dict begin tx@NodeDict begin {3.6528 0.0 4.25006 2.12503 2.41109
} false /N@T-0-0-3-1 16 {InitRnode } NewNode end end
 2272 801 a Fe(\017)2290 781 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3 /N@T-0-0-3-1 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2290 781 a 2211 972
a
 tx@Dict begin tx@NodeDict begin {5.55556 0.0 8.97235 4.48618 2.41109
} false /N@T-0-0-3-1-0 16 {InitRnode } NewNode end end
 2211 972 a Fr(d2)2249 952 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3-1 /N@T-0-0-3-1-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2249 952 a 2294 972 a
 tx@Dict begin tx@NodeDict begin {5.55556 0.0 8.97235 4.48618 2.41109
} false /N@T-0-0-3-1-1 16 {InitRnode } NewNode end end
 2294
972 a Fr(b3)2331 952 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3-1 /N@T-0-0-3-1-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2331 952 a 2238 1144 a
 tx@Dict begin tx@NodeDict begin {3.6528 0.0 4.25006 2.12503 2.41109
} false /N@T-0-0-3-1-1-0 16 {InitRnode } NewNode end end
 2238 1144
a Fe(\017)2256 1124 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3-1-1 /N@T-0-0-3-1-1-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2256 1124 a 2182 1316 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-0-3-1-1-0-0 16 {InitRnode } NewNode end end
 2182 1316
a Fr(a4)2218 1296 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3-1-1-0 /N@T-0-0-3-1-1-0-0 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2218 1296 a 2261 1316 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.0279 4.01395 2.41109
} false /N@T-0-0-3-1-1-0-1 16 {InitRnode } NewNode end end
 2261 1316
a Fr(c3)2294 1296 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3-1-1-0 /N@T-0-0-3-1-1-0-1 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2294 1296 a 2390 1144 a
 tx@Dict begin tx@NodeDict begin {3.6528 0.0 4.25006 2.12503 2.41109
} false /N@T-0-0-3-1-1-1 16 {InitRnode } NewNode end end
 2390 1144
a Fe(\017)2407 1124 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3-1-1 /N@T-0-0-3-1-1-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2407 1124 a 2336 1316 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.0279 4.01395 2.41109
} false /N@T-0-0-3-1-1-1-0 16 {InitRnode } NewNode end end
 2336 1316
a Fr(c2)2369 1296 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3-1-1-1 /N@T-0-0-3-1-1-1-0 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2369 1296 a 2411 1316 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-0-3-1-1-1-1 16 {InitRnode } NewNode end end
 2411 1316
a Fr(a2)2446 1296 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3-1-1-1 /N@T-0-0-3-1-1-1-1 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2446 1296 a 2347 1487 a
 tx@Dict begin tx@NodeDict begin {3.6528 0.0 4.25006 2.12503 2.41109
} false /N@T-0-0-3-1-1-1-1-0 16 {InitRnode } NewNode end end
 2347 1487
a Fe(\017)2365 1467 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3-1-1-1-1 /N@T-0-0-3-1-1-1-1-0 InitNC { NCLine  }
if end gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore
end
 2365 1467 a 2289 1659 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-0-3-1-1-1-1-0-0 16 {InitRnode } NewNode end end
 2289 1659
a Fr(a1)2325 1639 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3-1-1-1-1-0 /N@T-0-0-3-1-1-1-1-0-0 InitNC { NCLine
 } if end gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore
end
 2325 1639 a 2368 1659 a
 tx@Dict begin tx@NodeDict begin {5.55556 0.0 8.97235 4.48618 2.41109
} false /N@T-0-0-3-1-1-1-1-0-1 16 {InitRnode } NewNode end end
 2368 1659
a Fr(b1)2405 1639 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3-1-1-1-1-0 /N@T-0-0-3-1-1-1-1-0-1 InitNC { NCLine
 } if end gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore
end
 2405 1639 a 2509 1487 a
 tx@Dict begin tx@NodeDict begin {3.6528 0.0 4.25006 2.12503 2.41109
} false /N@T-0-0-3-1-1-1-1-1 16 {InitRnode } NewNode end end
 2509 1487
a Fe(\017)2527 1467 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3-1-1-1-1 /N@T-0-0-3-1-1-1-1-1 InitNC { NCLine  }
if end gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore
end
 2527 1467 a 2451 1659 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-0-3-1-1-1-1-1-0 16 {InitRnode } NewNode end end
 2451 1659
a Fr(a3)2487 1639 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3-1-1-1-1-1 /N@T-0-0-3-1-1-1-1-1-0 InitNC { NCLine
 } if end gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore
end
 2487 1639 a 2530 1659 a
 tx@Dict begin tx@NodeDict begin {5.55556 0.0 8.97235 4.48618 2.41109
} false /N@T-0-0-3-1-1-1-1-1-1 16 {InitRnode } NewNode end end
 2530 1659
a Fr(b2)2567 1639 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3-1-1-1-1-1 /N@T-0-0-3-1-1-1-1-1-1 InitNC { NCLine
 } if end gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore
end
 2567 1639 a 166 1802 a Fn(Fig.)30
b(4.)h(An)f(and/or)g(autotree)h(for)f(a)h(winning)c(\014rst-pla)m(y)m
(er)i(4)p Fp(\002)p Fn(4)i(Hex)g(strategy)-8 b(.)32 b(Odd)c(depth)166
1915 y(no)s(des)39 b(\()p Fp(\017)p Fn(\))i(are)f(\\or"-no)s(des;)g(ev)
m(en)g(depth)f(no)s(des)g(\(cell)g(lab)s(els\))g(are)h(\\and"-no)s
(des.)f(Fig.)h(5)166 2027 y(sho)m(ws)30 b(one)h(line)e(of)h(this)f
(strategy)-8 b(.)166 2218 y Fk(W)g(e)24 b(call)f(an)g(autotree)h
Fm(elusive)g Fk(if)f(it)f(satis\014es)j(the)f(conditions)f(of)h(Observ)
-5 b(ation)23 b(2.)h(Notice)166 2338 y(that)35 b(the)g(restoration)f
(generates)j(a)d(strategy)i(tree)f(from)f(an)h(autotree)g(if)f(and)h
(only)g(if)166 2458 y(the)25 b(autotree)f(is)g(elusiv)m(e.)g(As)h(an)f
(initial)c(step)25 b(in)f(our)g(v)m(eri\014cation)f(algorithm,)e(w)m(e)
k(c)m(hec)m(k)166 2579 y(whether)34 b(the)f(input)f(autotree)h(is)f(v)
-5 b(alid,)31 b(namely)h(whether)h(it)f(is)g(elusiv)m(e.)166
2749 y(The)26 b(second)g(and)g(\014nal)e(step)i(in)e(our)h(v)m
(eri\014cation)f(algorithm)e(is)j(to)g(determine)f(whether)166
2869 y(the)49 b(strategies)g(asso)s(ciated)g(with)f(the)h(input)f
(autotree)h(are)g(winning.)f(W)-8 b(e)49 b(call)e(an)166
2990 y(autotree)42 b(of)g(a)f(pla)m(y)m(er)i Fm(satisfying)e
Fk(if,)g(for)g(ev)m(ery)j(leaf,)d(the)i(cells)e(of)g(the)i(ro)s
(ot-to-leaf)166 3110 y(path)31 b(satisfy)f(the)h(conditions)f(of)g(a)h
(win,)f(namely)g(join)f(the)j(pla)m(y)m(er's)f(t)m(w)m(o)g(sides)h(on)e
(the)166 3231 y(Hex)37 b(b)s(oard.)g(A)f(v)-5 b(alid)35
b(autotree)h(represen)m(ts)j(a)e(winning)e(strategy)i(if)e(and)i(only)f
(if)f(the)166 3351 y(autotree)30 b(is)f(satisfying.)g(This)h(follo)m
(ws)e(from)g(the)i(follo)m(wing)d(theorems,)j(whic)m(h)h(in)d(turn)166
3471 y(follo)m(w)37 b(b)m(y)i(straigh)m(tforw)m(ard)f(argumen)m(ts)g
(from)f(our)h(de\014nitions)g(and)h(the)f(discussion)166
3592 y(to)32 b(this)g(p)s(oin)m(t;)g(w)m(e)i(omit)d(the)i(details)e(of)
h(the)h(pro)s(ofs.)166 3762 y Fl(Theorem)k(3)49 b Fm(F)-7
b(or)44 b(any)h(Hex)g(str)-5 b(ate)g(gy)45 b(tr)-5 b(e)g(e)46
b(ther)-5 b(e)44 b(is)h(a)g(unique)g(asso)-5 b(ciate)g(d)44
b(excise)-5 b(d)166 3882 y(tr)g(e)g(e,)44 b(and)f(for)h(any)g(autotr)-5
b(e)g(e)44 b(ther)-5 b(e)44 b(is)g(a)f(unique)h(set)g(of)g(asso)-5
b(ciate)g(d)42 b(str)-5 b(ate)g(gy)45 b(tr)-5 b(e)g(es.)166
4003 y(F)e(urthermor)i(e,)34 b(a)i(str)-5 b(ate)g(gy)35
b(tr)-5 b(e)g(e)36 b Fj(S)41 b Fm(is)35 b(winning)f(if)i(and)e(only)i
(if)f(e)-5 b(ach)34 b(str)-5 b(ate)g(gy)36 b(tr)-5 b(e)g(es)36
b Fj(S)3431 3967 y Fe(0)166 4123 y Fm(cr)-5 b(e)g(ate)g(d)35
b(via)f(r)-5 b(estor)g(ation)35 b(fr)-5 b(om)34 b(the)h(excise)-5
b(d)34 b(tr)-5 b(e)g(e)35 b(derive)-5 b(d)34 b(fr)-5
b(om)34 b Fj(S)41 b Fm(is)34 b(winning.)166 4293 y Fl(Theorem)j(4)49
b Fm(A)n(n)36 b(autotr)-5 b(e)g(e)37 b(r)-5 b(epr)g(esents)36
b(a)g(winning)f(str)-5 b(ate)g(gy)38 b(if)e(and)g(only)g(if)g(the)h
(au-)166 4414 y(totr)-5 b(e)g(e)35 b(is)g(elusive)f(and)h(satisfying.)
166 4798 y Fl(3)112 b(And/or)38 b(autotrees)f(with)f(leaf)i(patterns)
166 5088 y Fk(T)-8 b(o)30 b(complete)f(the)i(description)f(of)f(our)h
(notation,)f(w)m(e)i(need)g(only)f(to)f(describ)s(e)i(ho)m(w)g(w)m(e)
166 5209 y(add)i(t)m(w)m(o)g(features)g(to)g(autotrees:)g
Fb(and)q Fk(-no)s(des)f(and)h(leaf)f(patterns.)166 5379
y(Notice)f(that)h(the)g(c)m(hildren)g(of)f(a)g(meta-no)s(de)g(in)g(an)h
(autotree)g(corresp)s(ond)g(to)g(an)f(\\or")166 5499
y(decision)36 b(in)f(a)h(strategy;)h(dep)s(ending)f(on)g(the)h(opp)s
(onen)m(t's)g(mo)m(v)m(e)g(at)f(the)h(meta-no)s(de,)166
5620 y(the)27 b(pla)m(y)m(er)h(will)c(pla)m(y)j(the)g(strategy)h
(corresp)s(onding)f(to)f(the)i(\014rst)f(subtree,)i Fm(or)d
Fk(the)i(next)1769 5952 y(5)p eop
%%Page: 6 6
6 5 bop 166 323 a Fk(subtree,)32 b Fm(or)d Fk(the)i(next)g(subtree,)g
(and)f(so)g(on;)g(see)i(the)e(excised)h(tree)g(in)e(Fig.)g(3.)g(By)i
(con-)166 443 y(trast,)h(in)e(Hex)j(as)e(in)g(man)m(y)h(other)f(games,)
g(a)g(particular)f(strategy)i(often)g(decomp)s(oses)166
564 y(in)m(to)g(t)m(w)m(o)h(or)f(more)g(indep)s(enden)m(t)i
(subtrategies)f(that)f(all)f(need)i(to)g(b)s(e)f(follo)m(w)m(ed.)166
734 y(Suc)m(h)38 b(\\and")e(op)s(erations)g(are)g(easily)g(incorp)s
(orated)g(in)m(to)g(our)g(notation)g(b)m(y)h(allo)m(wing)166
854 y(eac)m(h)c(ev)m(en)h(depth)g(no)s(de)e(of)g(a)g(mo)s(di\014ed)g
(autotree)g(to)g(ha)m(v)m(e)i(an)m(y)f(n)m(um)m(b)s(er)g(of)f(c)m
(hildren.)166 975 y(W)-8 b(e)32 b(refer)g(to)f(autotrees)h(that)f(are)g
(mo)s(di\014ed)g(in)f(this)h(w)m(a)m(y)i(as)e Fm(and/or)i(autotr)-5
b(e)g(es)32 b Fk(since,)166 1095 y(when)37 b(in)m(terpreting)d(them)h
(as)h(strategies,)f(the)h(o)s(dd)f(depth)h(no)s(des)g(\(the)g(meta-no)s
(des\))166 1216 y(are)d Fb(or)p Fk(-no)s(des)g(while)f(the)h(ev)m(en)h
(depth)f(no)s(des)g(\(with)g(cell)e(lab)s(els\))g(are)i
Fb(and)q Fk(-no)s(des.)166 1386 y(Consider)39 b(for)f(example)g(Fig.)f
(4,)h(whic)m(h)h(sho)m(ws)h(an)f(and/or)f(autotree)h(for)f(a)g(winning)
166 1506 y(4)p Fi(\002)p Fk(4)h(strategy;)g(Fig.)f(5)g(illustrates)f
(one)i(line)f(of)g(pla)m(y)h(of)f(this)g(strategy)-8
b(.)40 b(The)f(ro)s(ot)f(is)166 1626 y(an)30 b Fb(and)q
Fk(-no)s(de,)g(so)h(w)m(e)g(ha)m(v)m(e)h(to)e(pla)m(y)g(all)e
(substrategies)j(sim)m(ultaneously;)e(in)h(this)g(case,)166
1747 y(there)37 b(is)e(only)g(one)i(subtree)g(so)f(there)h(is)e(only)g
(one)h(substrategy)i(to)d(follo)m(w.)g(Supp)s(ose)166
1867 y(that)c(the)h(opp)s(onen)m(t's)h(resp)s(onse)f(to)f(the)h(pla)m
(y)m(er's)h(initial)27 b(mo)m(v)m(e)32 b Fj(d)p Fk(1)f(w)m(as)h
Fj(b)p Fk(3.)g(Then)g(the)166 1988 y(pla)m(y)m(er)f(can)g(select)g(an)m
(y)g(subtree)g(not)g(con)m(taining)e Fj(b)p Fk(3,)i(sa)m(y)g(the)g
(\014rst)g(subtree;)h(th)m(us)f(the)166 2108 y(pla)m(y)m(er)44
b(mo)m(v)m(es)h(to)e Fj(c)p Fk(3,)h(the)g(ro)s(ot)f(of)g(the)i(\014rst)
f(subtree.)h(This)f(ro)s(ot)f(is)g(an)h Fb(and)q Fk(-no)s(de)166
2228 y(with)f(t)m(w)m(o)i(subtrees,)h(so)e(no)m(w)g(the)g(pla)m(y)m(er)
h(has)f(to)f(follo)m(w)f(these)j(t)m(w)m(o)g(substrategies)166
2349 y(sim)m(ultaneously;)29 b(the)h(pla)m(y)m(er)g(m)m(ust)g(ensure)i
(that)d(she)i(reac)m(hes)h(a)d(leaf)g(no)s(de)h(in)f(eac)m(h)i(of)166
2469 y(the)37 b(subtrees)i(of)d(ev)m(ery)i Fb(and)q Fk(-no)s(de.)f(F)-8
b(or)36 b(example,)g(if)f(the)j(opp)s(onen)m(t's)f(next)h(mo)m(v)m(e)f
(is)166 2590 y(at)d(one)g(of)g Fi(f)p Fj(b)p Fk(4)p Fj(;)17
b(c)p Fk(4)p Fi(g)p Fk(,)33 b(the)i(pla)m(y)m(er)f(m)m(ust)g
(immediately)d(reply)j(with)g(the)h(other)f(of)f(these)166
2710 y(t)m(w)m(o)40 b(cells)f(or)g(risk)h(not)f(reac)m(hing)h(a)f(leaf)
f(of)i(the)f Fi(f)p Fj(b)p Fk(4)p Fj(;)17 b(c)p Fk(4)p
Fi(g)39 b Fk(subtree.)i(Similarly)-8 b(,)36 b(if)i(the)166
2830 y(opp)s(onen)m(t's)30 b(next)f(mo)m(v)m(e)g(is)g(at)f(one)h(of)f
Fi(f)p Fj(c)p Fk(2)p Fj(;)17 b(d)p Fk(2)p Fi(g)p Fk(,)27
b(the)i(pla)m(y)m(er)g(m)m(ust)g(immediately)d(reply)166
2951 y(with)h(the)g(other)h(of)e(these)j(t)m(w)m(o)e(cells.)g(If)g(the)
h(opp)s(onen)m(t's)g(next)g(mo)m(v)m(e)f(is)g(not)g(in)f
Fi(f)p Fj(b)p Fk(4)p Fj(;)17 b(c)p Fk(4)p Fi(g)166 3071
y Fk(or)32 b Fi(f)p Fj(c)p Fk(2)p Fj(;)17 b(d)p Fk(2)p
Fi(g)p Fk(,)31 b(the)i(pla)m(y)m(er)g(can)g(mo)m(v)m(e)g(an)m(ywhere.)
166 3241 y(Finally)-8 b(,)25 b(subtrees)k(of)e(and/or)f(autotrees)i
(that)f(corresp)s(ond)i(to)e(isomorphic)e(substrate-)166
3362 y(gies)32 b(can)i(b)s(e)f(replaced)g(with)f(a)g(sp)s(ecial)g(no)s
(de)h(corresp)s(onding)g(to)f(suc)m(h)j(substrategies.)166
3482 y(This)f(is)f(illustrated)f(in)h(Fig.)g(6,)g(where)i(t)m(w)m(o)g
(substrategies)g(macros)e(are)h(used)h(to)e(sim-)166
3602 y(plify)e(the)i(tree)g(of)f(Fig.)g(4.)166 3773 y(Mo)s(difying)26
b(our)i(v)m(eri\014cation)f(algorithms)e(to)i(handle)h
Fb(and)p Fk(-)f(and)h Fb(or)q Fk(-no)s(des)g(is)f(straigh)m(t-)166
3893 y(forw)m(ard.)39 b(F)-8 b(or)38 b Fb(or)q Fk(-no)s(des,)h(the)h
(test)f(for)g(the)g(elusiv)m(e)g(prop)s(ert)m(y)h(is)f(the)g(same)g(as)
g(with)166 4013 y(unmo)s(di\014ed)45 b(autotrees:)h(c)m(hec)m(k)i
(whether)f(the)e(com)m(bined)h(in)m(tersection)f(of)g(all)e(c)m(hild)
166 4134 y(no)s(des)29 b(is)f(the)h(empt)m(y)g(set.)g(F)-8
b(or)28 b Fb(and)q Fk(-no)s(des,)g(it)g(is)g(necessary)i(to)f(c)m(hec)m
(k)h(whether)g(the)f(in-)166 4254 y(tersection)j(of)f(eac)m(h)i(pair)e
(of)g(c)m(hild)g(no)s(des)h(is)g(empt)m(y)-8 b(.)32 b(Another)g
(algorithmic)c(approac)m(h)166 4374 y(one)42 b(could)f(tak)m(e)i(here)f
(w)m(ould)g(b)s(e)g(to)f(expand)i(the)f(mo)s(di\014ed)e(and/or)i
(autotree)f(in)m(to)166 4495 y(the)28 b(corresp)s(onding)f(expanded)i
(autotree;)f(ho)m(w)m(ev)m(er,)i(the)d(resulting)g(trees)h(can)g(b)s(e)
f(v)m(ery)166 4615 y(large,)416 4579 y Fr(3)504 4615
y Fk(so)32 b(this)h(approac)m(h)g(w)m(ould)f(b)s(e)h(signi\014can)m
(tly)e(slo)m(w)m(er)j(than)e(our)h(approac)m(h.)p 166
4767 299 4 v 166 4832 a Fr(3)257 4865 y Fn(F)-8 b(or)37
b(example,)g(an)g Fa(and)o Fn(-no)s(de)f(with)g Fh(k)k
Fn(subtrees)c(with)g(t)m(w)m(o)i(no)s(des)e(eac)m(h)i(corresp)s(onds)d
(in)768 5418 y @beginspecial 0 @llx 0 @lly 86 @urx 53
@ury 860 @rwi @setspecial
%%BeginDocument: B4.eps
%!PS-Adobe-3.0
%%Creator: Jack van Rijswijck, thanks to Cameron Browne
%%BoundingBox: 0 0 86 53
%%Pages: 0
%%EndComments

/OriginX -2 def
/OriginY 26 def
%---------------- Variables -------------------

/DimX 4 def
/DimY 4 def
/Scale 1.2 def


%---------------- Constants -------------------

/Root2 1.414213562 def
/Root3 1.732050808 def

/Chars {[(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)(n)]} def
/Digits {[(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)(12)(13)(14)]} def

/HexRadius 5 Scale mul def
/HexLineWidth 0.014 def
/CircleRadius 3.3 Scale mul def
/CircleLineWidth 0.346 def
/BoardOutlineWidth 0.5 def
%/TextHeight 4.5 def
/TextHeight 6 def
/TextWidth TextHeight 0.45 mul def
/BoardShade 0.8 def
/FadedBoardShade 0.9 def
/CoordinatesShade 0.5 def
/DeadPieceShade 0.6 def
/DeadCellShade 0.6 def
/EarLength 0.5 def
/GraphVertexSize 1.5 def
/GraphLineWidth 0.5 def
/MoveEvalSize 0.9 def
/FatLineWidth 1.0 def
/MarkerSize 1.2 def

%----------- Functions -------------

/HexCenterX { % X coordinate of center of cell: i j HexX
    /j exch def
    /i exch def
    OriginX i j add HexRadius mul 1.5 mul add
} def

/HexCenterY { % Y coordinate of center of cell: i j HexY
    /j exch def
    /i exch def
    OriginY i j sub HexRadius mul Root3 mul 2 div sub
} def

/HexCenterVertex {
    /j exch def
    /i exch def
    i j HexCenterX
    i j HexCenterY
} def

/HexTopLeftVertex {
    /j exch def
    /i exch def
    i j HexCenterX HexRadius 2 div sub
    i j HexCenterY HexRadius Root3 mul 2 div add
} def

/HexTopRightVertex {
    /j exch def
    /i exch def
    i j HexCenterX HexRadius 2 div add
    i j HexCenterY HexRadius Root3 mul 2 div add
} def

/HexRightVertex {
    /j exch def
    /i exch def
    i j HexCenterX HexRadius add
    i j HexCenterY 
} def

/HexBottomRightVertex {
    /j exch def
    /i exch def
    i j HexCenterX HexRadius 2 div add
    i j HexCenterY HexRadius Root3 mul 2 div sub
} def

/HexBottomLeftVertex {
    /j exch def
    /i exch def
    i j HexCenterX HexRadius 2 div sub
    i j HexCenterY HexRadius Root3 mul 2 div sub
} def

/HexLeftVertex {
    /j exch def
    /i exch def
    i j HexCenterX HexRadius sub
    i j HexCenterY 
} def

/HexUpRightEdge {
    /size exch def
    
    HexRadius 2 div size mul
    HexRadius Root3 mul 2 div size mul
} def

/HexRightEdge {
    /size exch def
    
    HexRadius size mul
    0
} def

/HexDownRightEdge {
    /size exch def

    HexRadius 2 div size mul
    HexRadius Root3 mul 2 div neg size mul
} def

/HexDownLeftEdge {
    /size exch def

    HexRadius 2 div neg size mul
    HexRadius Root3 mul 2 div neg size mul
} def

/HexLeftEdge {
    /size exch def

    HexRadius neg size mul
    0 size mul
} def

/HexUpLeftEdge {
    /size exch def

    HexRadius 2 div neg size mul
    HexRadius Root3 mul 2 div size mul
} def

/HexagonPath{
    /j exch def
    /i exch def

    newpath
    i j HexLeftVertex moveto

    1.0 HexUpRightEdge rlineto
    1.0 HexRightEdge rlineto
    1.0 HexDownRightEdge rlineto
    1.0 HexDownLeftEdge rlineto
    1.0 HexLeftEdge rlineto
    1.0 HexUpLeftEdge rlineto

    closepath
} def

/HexTopLeftEar {
    /j exch def
    /i exch def

    newpath
    i j HexTopLeftVertex moveto
    EarLength HexUpLeftEdge rlineto
    stroke
} def

/HexTopRightEar {
    /j exch def
    /i exch def

    newpath
    i j HexTopRightVertex moveto
    EarLength HexUpRightEdge rlineto
    stroke
} def

/HexRightEar {
    /j exch def
    /i exch def

    newpath
    i j HexRightVertex moveto
    EarLength HexRightEdge rlineto
    stroke
} def

/HexBottomRightEar {
    /j exch def
    /i exch def

    newpath
    i j HexBottomRightVertex moveto
    EarLength HexDownRightEdge rlineto
    stroke
} def

/HexBottomLeftEar {
    /j exch def
    /i exch def

    newpath
    i j HexBottomLeftVertex moveto
    EarLength HexDownLeftEdge rlineto
    stroke
} def

/HexLeftEar {
    /j exch def
    /i exch def

    newpath
    i j HexLeftVertex moveto
    EarLength HexLeftEdge rlineto
    stroke
} def

/HexagonEars {
    /j exch def
    /i exch def

    HexLineWidth setlinewidth
    
    i j HexTopLeftEar
    i j HexTopRightEar
    i j HexRightEar
    i j HexBottomRightEar
    i j HexBottomLeftEar
    i j HexLeftEar
} def

/HexDeadCell {
    /j exch def
    /i exch def

    i j DeadCellShade ShadedHexagon
} def

/HexDeadMarkedCell {
    /j exch def
    /i exch def

    i j DeadCellShade ShadedHexagon
    i j HexBlackMarker
} def
    
    
/ShadedHexagonWithEars {
    /shade exch def
    /j exch def
    /i exch def

    i j shade ShadedHexagon
    i j HexagonEars
} def
    
/BoundedShadedHexagonWithEars {
    /shade exch def
    /j exch def
    /i exch def

    i j shade BoundedShadedHexagon
    i j BoundedHexagonWithEars
} def

/BoundedHexagonWithEars {
    /j exch def
    /i exch def

    i j BoundedHexagon

    i 1 gt {
	j 1 gt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexLeftVertex moveto
	EarLength HexLeftEdge rlineto
	stroke

	j DimY lt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexTopLeftVertex moveto
	EarLength HexUpLeftEdge rlineto
	stroke
    }
    if

    i DimX lt {
	j DimY lt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexRightVertex moveto
	EarLength HexRightEdge rlineto
	stroke

	j 1 gt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexBottomRightVertex moveto
	EarLength HexDownRightEdge rlineto
	stroke
    }
    if

    j DimY lt {
	i 1 gt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexTopRightVertex moveto
	EarLength HexUpRightEdge rlineto
	stroke

	i DimX lt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexRightVertex moveto
	EarLength HexRightEdge rlineto
	stroke
    }
    if

    j 1 gt {
	i DimX lt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexBottomLeftVertex moveto
	EarLength HexDownLeftEdge rlineto
	stroke

	i 1 gt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexLeftVertex moveto
	EarLength HexLeftEdge rlineto
	stroke
    }
    if
} def

/BoundedShadedHexagon {
    /shade exch def
    /j exch def
    /i exch def

    i j shade FillHexagon
    i j BoundedHexagon
} def

/BoundedHexagon {
    /j exch def
    /i exch def

    0 setgray
    HexLineWidth setlinewidth
    i j HexagonPath
    stroke

    BoardOutlineWidth setlinewidth

    i 1 eq {
	newpath
	i j HexLeftVertex moveto
	1.0 HexUpRightEdge rlineto
	1.0 HexRightEdge rlineto
	stroke
    }
    if

    j DimY eq {
	newpath
	i j HexTopLeftVertex moveto
	1.0 HexRightEdge rlineto
	1.0 HexDownRightEdge rlineto
	stroke
    }
    if

    i DimX eq {
	newpath
	i j HexRightVertex moveto
	1.0 HexDownLeftEdge rlineto
	1.0 HexLeftEdge rlineto
	stroke
    }
    if

    j 1 eq {
	newpath
	i j HexBottomRightVertex moveto
	1.0 HexLeftEdge rlineto
	1.0 HexUpLeftEdge rlineto
	stroke
    }
    if
} def

/ShadedHexagon {
    /shade exch def
    /j exch def
    /i exch def

    i j shade FillHexagon
    i j Hexagon
} def

/Hexagon { % call: i j Hexagon
    /j exch def
    /i exch def

    i j HexagonPath
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

/FillHexagon {   % call: i j shade FillHexagon
    /shade exch def
    /j exch def
    /i exch def

    i j HexagonPath
    0 setlinewidth
    shade setgray
    fill
    i j Hexagon
} def

/HexBoardOutlinePath {
    newpath
    1 1 HexLeftVertex moveto

    1 1 DimY {
	1.0 HexUpRightEdge rlineto
	1.0 HexRightEdge rlineto
    } for

    1 1 DimX 1 sub {
	1.0 HexDownRightEdge rlineto
	1.0 HexRightEdge rlineto
    } for
    1.0 HexDownRightEdge rlineto

    1 1 DimY {
	1.0 HexDownLeftEdge rlineto
	1.0 HexLeftEdge rlineto
    } for

    1 1 DimX 1 sub {
	1.0 HexUpLeftEdge rlineto
	1.0 HexLeftEdge rlineto
    } for
    1.0 HexUpLeftEdge rlineto

    closepath
} def

/HexBoardOutline {
    HexBoardOutlinePath
    BoardOutlineWidth setlinewidth
    0 setgray
    stroke
} def

/HexBoardFillNoOutline {
    /shade exch def
    HexBoardOutlinePath
    0 setlinewidth
    shade setgray
    fill
} def

/HexBoardFill {
    /shade exch def
    shade HexBoardFillNoOutline
    HexBoardOutline
} def

/HexShannonGrid {
    1 1 DimY {
	/j exch def
	1 1 DimX {
	    /i exch def
	    i j HexVertex
	} for
    } for

    1 1 DimY {
	/j exch def
	1 j DimX j HexLine
    } for

    1 1 DimX {
	/i exch def
	i 1 i DimY HexLine
    } for

    2 1 DimX DimY add 2 sub {
	/i exch def
	i DimY lt {1 i} {i DimY sub 1 add DimY} ifelse
	i DimX lt {i 1} {DimX i DimX sub 1 add} ifelse
	HexLine
    } for
} def

/HexBoardGrid {
    1 1 DimY {
	/j exch def
	1 1 DimX {
	    /i exch def
	    i j Hexagon
	} for
    } for
} def

/DrawHexBoard {
    BoardShade HexBoardFill
    HexBoardGrid
} def

/DrawHexBoardNoOutline {
    1 1 DimY {
	/j exch def
	1 1 DimX {
	    /i exch def
	    i j BoardShade FillHexagon
	    i j Hexagon
	} for
    } for
} def

/YBoardOutlinePath {
    newpath
    0 0 HexLeftVertex moveto

    1 1 DimX {
	1.0 HexUpRightEdge rlineto
	1.0 HexRightEdge rlineto
    } for

    1 1 DimX {
	1.0 HexDownRightEdge rlineto
	1.0 HexDownLeftEdge rlineto
    } for

    1 1 DimX {
	1.0 HexLeftEdge rlineto
	1.0 HexUpLeftEdge rlineto
    } for

    closepath
} def

/YBoardOutline {
    YBoardOutlinePath
    BoardOutlineWidth setlinewidth
    0 setgray
    stroke
} def

/YBoardFill {
    /shade exch def
    YBoardOutlinePath
    0 setlinewidth
    shade setgray
    fill
    YBoardOutline
} def

/YBoardGrid {
    0 1 DimX 1 sub {
	/j exch def
	0 1 DimX 1 sub j sub {
	    /i exch def
	    i j Hexagon
	} for
    } for
} def

/DrawYBoard {
    BoardShade YBoardFill
    YBoardGrid
} def

/FontSelect { % bold italic FontSelect
    /italic exch def
    /bold exch def

    bold {
	italic {
	    /Times-BoldItalic findfont TextHeight scalefont setfont
	} {
	    /Times-Bold findfont TextHeight scalefont setfont
	}
	ifelse
    } {
	italic {
	    /Times-Italic findfont TextHeight scalefont setfont
	} {
	    /Times findfont TextHeight scalefont setfont
	}
	ifelse
    }
    ifelse
} def
	    
/LabelString {   % call: i j (str) strlen LabelString
    /strlen exch def
    /str exch def
    /j exch def
    /i exch def

    newpath
    i j HexCenterX TextWidth strlen mul 0.5 mul sub
    i j HexCenterY TextHeight 0.225 mul sub
    moveto
    str
    show
} def

/AbsLabelString {
    /strlen exch def
    /str exch def
    /y exch def
    /x exch def

    newpath
    x AbsCoordX TextWidth strlen mul 0.5 mul sub
    y AbsCoordY TextHeight 0.225 mul sub
    moveto
    str
    show
} def

/LabelStringVerb { % i j (str) strlen shade bold italic LabelStringVerb
    /italic exch def
    /bold exch def
    /shade exch def
    /strlen exch def
    /str exch def
    /j exch def
    /i exch def
    bold italic FontSelect
    shade setgray
    i j str strlen LabelString
} def

/HexBoardCoordinates {
    false true FontSelect
    CoordinatesShade setgray
    
    1 1 DimX {
	/i exch def
	i 0 Chars i 1 sub get 1 LabelString
	i DimY 1 add Chars i 1 sub get 1 LabelString
    } for

    1 1 DimY {
	/j exch def
	0 j Digits j 1 sub get
	DimY 9 gt {2} {1} ifelse
	LabelString
	DimX 1 add j Digits j 1 sub get
	DimY 9 gt {2} {1} ifelse
	LabelString
    } for
} def

/HexEdgePieceLocationBottomLeft {
    /dist exch def
    /midx DimX 1 add 2 div def
    /midy DimY 1 add 2 div def

    midx
    2 midx sub dist sub
} def

/HexEdgePieceLocationTopRight {
    /dist exch def
    /midx DimX 1 add 2 div def
    /midy DimY 1 add 2 div def

    midx
    DimX DimY add midx sub dist add
} def

/HexEdgePieceLocationTopLeft {
    /dist exch def
    /midx DimX 1 add 2 div def
    /midy DimY 1 add 2 div def
    
    2 midy sub dist sub
    midy
} def

/HexEdgePieceLocationBottomRight {
    /dist exch def
    /midx DimX 1 add 2 div def
    /midy DimY 1 add 2 div def
    
    DimX DimY add midy sub dist add
    midy
} def

/HexWhiteTerminal {
    (T) 1 HexWhiteLabelledPiece
} def

/HexBlackTerminal {
    (T) 1 HexBlackLabelledPiece
} def
    
/HexShannonTerminalBottomLeft {
    /dist exch def

    dist HexEdgePieceLocationBottomLeft
    HexWhiteTerminal
} def

/HexShannonTerminalTopRight {
    /dist exch def

    dist HexEdgePieceLocationTopRight
    HexWhiteTerminal
} def

/HexShannonTerminalConnectionsWhite {
    /dist exch def
    /midx DimX 1 add 2 div def
    /midy DimY 1 add 2 div def

    1 1 DimX {
	/i exch def
	dist HexEdgePieceLocationBottomLeft i 1 HexLine
	dist HexEdgePieceLocationTopRight i DimY HexLine
    } for

    dist HexShannonTerminalBottomLeft
    dist HexShannonTerminalTopRight
} def

/HexShannonTerminalTopLeft {
    /dist exch def

    dist HexEdgePieceLocationTopLeft
    HexBlackTerminal
} def

/HexShannonTerminalBottomRight {
    /dist exch def

    dist HexEdgePieceLocationBottomRight
    HexBlackTerminal
} def

/HexShannonTerminalConnectionsBlack {
    /dist exch def
    /midx DimX 1 add 2 div def
    /midy DimY 1 add 2 div def

    1 1 DimY {
	/j exch def
	dist HexEdgePieceLocationTopLeft 1 j HexLine
	dist HexEdgePieceLocationBottomRight DimX j HexLine
    } for

    dist HexShannonTerminalTopLeft
    dist HexShannonTerminalBottomRight
} def

/HexBoardEdgePieceTopLeft {
    /dist exch def
    dist HexEdgePieceLocationTopLeft HexBlackPiece
} def
/HexBoardEdgePieceBottomLeft {
    /dist exch def
    dist HexEdgePieceLocationBottomLeft HexWhitePiece
} def
/HexBoardEdgePieceTopRight {
    /dist exch def
    dist HexEdgePieceLocationTopRight HexWhitePiece
} def
/HexBoardEdgePieceBottomRight {
    /dist exch def
    dist HexEdgePieceLocationBottomRight HexBlackPiece
} def

/HexBoardEdgePieces { % extradist
    /dist exch def

    dist HexBoardEdgePieceTopLeft
    dist HexBoardEdgePieceBottomLeft
    dist HexBoardEdgePieceTopRight
    dist HexBoardEdgePieceBottomRight
} def

/HexDot { % i j size
    /size exch def
    /j exch def
    /i exch def

    0 setlinewidth
    0 setgray
    newpath
    i j HexCenterVertex size 0 360 arc
    fill
} def


/HexWhiteMarkedPiece {
    /j exch def
    /i exch def

    i j HexWhitePiece
    
    0 setgray
    0 setlinewidth
    newpath
    i j HexCenterVertex MarkerSize 0 360 arc
    fill
} def

/HexBlackMarkedPiece {
    /j exch def
    /i exch def

    i j HexBlackPiece
    
    1 setgray
    0 setlinewidth
    newpath
    i j HexCenterVertex MarkerSize 0 360 arc
    fill
} def


/HexDoubleMarker {
    /shaderight exch def
    /shadeleft exch def
    /j exch def
    /i exch def

    shadeleft setgray
    0 setlinewidth
    newpath
    i j HexCenterX MarkerSize sub i j HexCenterY MarkerSize 0 360 arc
    fill

    0 setgray
    CircleLineWidth setlinewidth
    newpath
    i j HexCenterX MarkerSize sub i j HexCenterY MarkerSize 0 360 arc
    stroke

    shaderight setgray
    0 setlinewidth
    newpath
    i j HexCenterX MarkerSize add i j HexCenterY MarkerSize 0 360 arc
    fill

    0 setgray
    CircleLineWidth setlinewidth
    newpath
    i j HexCenterX MarkerSize add i j HexCenterY MarkerSize 0 360 arc
    stroke
} def

/HexBlackWhiteMarker {
    /j exch def
    /i exch def
    i j 0.0 1.0 HexDoubleMarker
} def

/HexWhiteBlackMarker {
    /j exch def
    /i exch def
    i j 1.0 0.0 HexDoubleMarker
} def
        
/HexMarker {
    /j exch def
    /i exch def

    0 setlinewidth
    newpath
    i j HexCenterVertex MarkerSize 0 360 arc
    fill

    0 setgray
    CircleLineWidth setlinewidth
    newpath
    i j HexCenterVertex MarkerSize 0 360 arc
    stroke  
} def

/HexBlackMarker {
    /j exch def
    /i exch def

    0 setgray
    i j HexMarker
} def

/HexWhiteMarker {
    /j exch def
    /i exch def

    1 setgray
    i j HexMarker
} def
    
/HexVertex {
    /j exch def
    /i exch def

    i j GraphVertexSize HexDot
} def

/HexLine {
    /j2 exch def
    /i2 exch def
    /j1 exch def
    /i1 exch def

    GraphLineWidth setlinewidth
    0 setgray
    newpath
    i1 j1 HexCenterVertex moveto
    i2 j2 HexCenterVertex lineto
    stroke
} def

/HexPiece { % i j shade
    /shade exch def
    /j exch def
    /i exch def

    0 setlinewidth
    shade setgray
    newpath
    i j HexCenterVertex CircleRadius 0 360 arc
    fill

    0 setgray
    CircleLineWidth setlinewidth
    newpath
    i j HexCenterVertex CircleRadius 0 360 arc
    stroke
} def

/HexWhitePiece {
    /j exch def
    /i exch def

    i j 1.0 HexPiece
} def

/HexBlackPiece {
    /j exch def
    /i exch def

    i j 0.0 HexPiece
} def

/HexWhiteLabelledPiece { % i j (str) strlen
    /strlen exch def
    /str exch def
    /j exch def
    /i exch def

    i j HexWhitePiece
    i j str strlen 0.0 true true LabelStringVerb
} def

/HexBlackLabelledPiece { % i j (str) strlen
    /strlen exch def
    /str exch def
    /j exch def
    /i exch def

    i j HexBlackPiece
    i j str strlen 1.0 true true LabelStringVerb
} def

/DrawBox { % minx miny maxx maxy
    /maxy exch def
    /maxx exch def
    /miny exch def
    /minx exch def

    newpath
    minx miny moveto
    maxx minx sub 0 rlineto
    0 maxy miny sub rlineto
    minx maxx sub 0 rlineto
    0 miny maxy sub rlineto
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

/HexMoveEval {
    /eval exch def
    /j exch def
    /i exch def

%    i j 1.0 eval sub FadedBoardShade mul BoundedShadedHexagon
    newpath
    i j HexCenterVertex moveto
    MoveEvalSize HexLeftEdge rlineto
    MoveEvalSize HexUpRightEdge rlineto
    MoveEvalSize HexRightEdge rlineto
    MoveEvalSize HexDownRightEdge rlineto
    MoveEvalSize HexDownLeftEdge rlineto
    MoveEvalSize HexLeftEdge rlineto
    MoveEvalSize HexUpLeftEdge rlineto
%    eval MoveEvalSize mul HexLeftEdge rlineto
%    eval MoveEvalSize mul HexUpRightEdge rlineto
%    eval MoveEvalSize mul HexRightEdge rlineto
%    eval MoveEvalSize mul HexDownRightEdge rlineto
%    eval MoveEvalSize mul HexDownLeftEdge rlineto
%    eval MoveEvalSize mul HexLeftEdge rlineto
%    eval MoveEvalSize mul HexUpLeftEdge rlineto

    closepath

    0 setlinewidth
    1.0 eval sub BoardShade mul setgray
    fill
} def

/HexSymmetricalMoveEval {
    /eval exch def
    /j exch def
    /i exch def

    i j eval HexMoveEval
    DimX 1 add i sub DimY 1 add j sub eval HexMoveEval
} def

/AbsCoordX {
    /x exch def

    OriginX x Scale mul add
} def

/AbsCoordY {
    /y exch def

    OriginY y Scale mul add
} def

/AbsCoords {
    /y exch def
    /x exch def

    x AbsCoordX
    y AbsCoordY
} def

/AbsLine {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def

    newpath
    x1 y1 AbsCoords moveto
    x2 y2 AbsCoords lineto
    stroke
} def

/AbsDot {
    /size exch def
    /y exch def
    /x exch def

    0 setlinewidth
    0 setgray
    newpath
    x y AbsCoords size 0 360 arc
    fill
} def

/AbsVertex {
    /y exch def
    /x exch def

    x y GraphVertexSize AbsDot
} def

/HexUpArrow {
   /size exch def
   /j exch def
   /i exch def

   GraphLineWidth setlinewidth
   0 setgray
   newpath
   i j HexCenterVertex moveto
   0 CircleRadius size mul neg rmoveto
   0 CircleRadius size mul 2 mul rlineto
   CircleRadius size mul 4 div neg CircleRadius size mul 2 div neg rmoveto
   CircleRadius size mul 4 div CircleRadius size mul 2 div rlineto
   CircleRadius size mul 4 div CircleRadius size mul 2 div neg rlineto
   stroke
} def

/HexRightArrow {
   /size exch def
   /j exch def
   /i exch def

   GraphLineWidth setlinewidth
   0 setgray
   newpath
   i j HexCenterVertex moveto
   CircleRadius size mul neg 0 rmoveto
   CircleRadius size mul 2 mul 0 rlineto
   CircleRadius size mul 2 div neg CircleRadius size mul 4 div neg rmoveto
   CircleRadius size mul 2 div CircleRadius size mul 4 div rlineto
   CircleRadius size mul 2 div neg CircleRadius size mul 4 div rlineto
   stroke
} def

/HexLeftArrow {
   /size exch def
   /j exch def
   /i exch def

   GraphLineWidth setlinewidth
   0 setgray
   newpath
   i j HexCenterVertex moveto
   CircleRadius size mul 0 rmoveto
   CircleRadius size mul 2 mul neg 0 rlineto
   CircleRadius size mul 2 div CircleRadius size mul 4 div neg rmoveto
   CircleRadius size mul 2 div neg CircleRadius size mul 4 div rlineto
   CircleRadius size mul 2 div CircleRadius size mul 4 div rlineto
   stroke
} def

/HexBlackCapturedPiece {
    /j exch def
    /i exch def

    i j HexBlackMarkedPiece
} def

/HexWhiteCapturedPiece {
    /j exch def
    /i exch def

    i j HexWhiteMarkedPiece
} def

/HexDeadPiece {
    /j exch def
    /i exch def

    i j DeadPieceShade HexPiece
    
   GraphLineWidth setlinewidth
   0 setgray
   newpath
   i j HexCenterVertex moveto
   MarkerSize neg 0 rmoveto
   MarkerSize 2 mul 0 rlineto
   MarkerSize neg MarkerSize neg rmoveto
   0 MarkerSize 2 mul rlineto
   stroke
} def

/HexDominatedCell {
    /j exch def
    /i exch def

   GraphLineWidth setlinewidth
   0 setgray
   newpath
   i j HexCenterVertex moveto
   MarkerSize Root2 div neg MarkerSize Root2 div neg rmoveto
   MarkerSize Root2 mul MarkerSize Root2 mul rlineto
   MarkerSize Root2 mul neg 0 rmoveto
   MarkerSize Root2 mul MarkerSize Root2 mul neg rlineto
   stroke
} def


%%---------------- Program -------------------


DrawHexBoard
1 HexBoardEdgePieces
HexBoardCoordinates

4 1 (1) 1 HexWhiteLabelledPiece


%------------ Trailer --------------

showpage

%%EndDocument
 @endspecial 1343 w @beginspecial 0 @llx 0 @lly 86 @urx
53 @ury 860 @rwi @setspecial
%%BeginDocument: B4full.eps
%!PS-Adobe-3.0
%%Creator: Jack van Rijswijck, thanks to Cameron Browne
%%BoundingBox: 0 0 86 53
%%Pages: 0
%%EndComments

/OriginX -2 def
/OriginY 26 def
%---------------- Variables -------------------

/DimX 4 def
/DimY 4 def
/Scale 1.2 def


%---------------- Constants -------------------

/Root2 1.414213562 def
/Root3 1.732050808 def

/Chars {[(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)(n)]} def
/Digits {[(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)(12)(13)(14)]} def

/HexRadius 5 Scale mul def
/HexLineWidth 0.014 def
/CircleRadius 3.3 Scale mul def
/CircleLineWidth 0.346 def
/BoardOutlineWidth 0.5 def
%/TextHeight 4.5 def
/TextHeight 6 def
/TextWidth TextHeight 0.45 mul def
/BoardShade 0.8 def
/FadedBoardShade 0.9 def
/CoordinatesShade 0.5 def
/DeadPieceShade 0.6 def
/DeadCellShade 0.6 def
/EarLength 0.5 def
/GraphVertexSize 1.5 def
/GraphLineWidth 0.5 def
/MoveEvalSize 0.9 def
/FatLineWidth 1.0 def
/MarkerSize 1.2 def

%----------- Functions -------------

/HexCenterX { % X coordinate of center of cell: i j HexX
    /j exch def
    /i exch def
    OriginX i j add HexRadius mul 1.5 mul add
} def

/HexCenterY { % Y coordinate of center of cell: i j HexY
    /j exch def
    /i exch def
    OriginY i j sub HexRadius mul Root3 mul 2 div sub
} def

/HexCenterVertex {
    /j exch def
    /i exch def
    i j HexCenterX
    i j HexCenterY
} def

/HexTopLeftVertex {
    /j exch def
    /i exch def
    i j HexCenterX HexRadius 2 div sub
    i j HexCenterY HexRadius Root3 mul 2 div add
} def

/HexTopRightVertex {
    /j exch def
    /i exch def
    i j HexCenterX HexRadius 2 div add
    i j HexCenterY HexRadius Root3 mul 2 div add
} def

/HexRightVertex {
    /j exch def
    /i exch def
    i j HexCenterX HexRadius add
    i j HexCenterY 
} def

/HexBottomRightVertex {
    /j exch def
    /i exch def
    i j HexCenterX HexRadius 2 div add
    i j HexCenterY HexRadius Root3 mul 2 div sub
} def

/HexBottomLeftVertex {
    /j exch def
    /i exch def
    i j HexCenterX HexRadius 2 div sub
    i j HexCenterY HexRadius Root3 mul 2 div sub
} def

/HexLeftVertex {
    /j exch def
    /i exch def
    i j HexCenterX HexRadius sub
    i j HexCenterY 
} def

/HexUpRightEdge {
    /size exch def
    
    HexRadius 2 div size mul
    HexRadius Root3 mul 2 div size mul
} def

/HexRightEdge {
    /size exch def
    
    HexRadius size mul
    0
} def

/HexDownRightEdge {
    /size exch def

    HexRadius 2 div size mul
    HexRadius Root3 mul 2 div neg size mul
} def

/HexDownLeftEdge {
    /size exch def

    HexRadius 2 div neg size mul
    HexRadius Root3 mul 2 div neg size mul
} def

/HexLeftEdge {
    /size exch def

    HexRadius neg size mul
    0 size mul
} def

/HexUpLeftEdge {
    /size exch def

    HexRadius 2 div neg size mul
    HexRadius Root3 mul 2 div size mul
} def

/HexagonPath{
    /j exch def
    /i exch def

    newpath
    i j HexLeftVertex moveto

    1.0 HexUpRightEdge rlineto
    1.0 HexRightEdge rlineto
    1.0 HexDownRightEdge rlineto
    1.0 HexDownLeftEdge rlineto
    1.0 HexLeftEdge rlineto
    1.0 HexUpLeftEdge rlineto

    closepath
} def

/HexTopLeftEar {
    /j exch def
    /i exch def

    newpath
    i j HexTopLeftVertex moveto
    EarLength HexUpLeftEdge rlineto
    stroke
} def

/HexTopRightEar {
    /j exch def
    /i exch def

    newpath
    i j HexTopRightVertex moveto
    EarLength HexUpRightEdge rlineto
    stroke
} def

/HexRightEar {
    /j exch def
    /i exch def

    newpath
    i j HexRightVertex moveto
    EarLength HexRightEdge rlineto
    stroke
} def

/HexBottomRightEar {
    /j exch def
    /i exch def

    newpath
    i j HexBottomRightVertex moveto
    EarLength HexDownRightEdge rlineto
    stroke
} def

/HexBottomLeftEar {
    /j exch def
    /i exch def

    newpath
    i j HexBottomLeftVertex moveto
    EarLength HexDownLeftEdge rlineto
    stroke
} def

/HexLeftEar {
    /j exch def
    /i exch def

    newpath
    i j HexLeftVertex moveto
    EarLength HexLeftEdge rlineto
    stroke
} def

/HexagonEars {
    /j exch def
    /i exch def

    HexLineWidth setlinewidth
    
    i j HexTopLeftEar
    i j HexTopRightEar
    i j HexRightEar
    i j HexBottomRightEar
    i j HexBottomLeftEar
    i j HexLeftEar
} def

/HexDeadCell {
    /j exch def
    /i exch def

    i j DeadCellShade ShadedHexagon
} def

/HexDeadMarkedCell {
    /j exch def
    /i exch def

    i j DeadCellShade ShadedHexagon
    i j HexBlackMarker
} def
    
    
/ShadedHexagonWithEars {
    /shade exch def
    /j exch def
    /i exch def

    i j shade ShadedHexagon
    i j HexagonEars
} def
    
/BoundedShadedHexagonWithEars {
    /shade exch def
    /j exch def
    /i exch def

    i j shade BoundedShadedHexagon
    i j BoundedHexagonWithEars
} def

/BoundedHexagonWithEars {
    /j exch def
    /i exch def

    i j BoundedHexagon

    i 1 gt {
	j 1 gt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexLeftVertex moveto
	EarLength HexLeftEdge rlineto
	stroke

	j DimY lt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexTopLeftVertex moveto
	EarLength HexUpLeftEdge rlineto
	stroke
    }
    if

    i DimX lt {
	j DimY lt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexRightVertex moveto
	EarLength HexRightEdge rlineto
	stroke

	j 1 gt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexBottomRightVertex moveto
	EarLength HexDownRightEdge rlineto
	stroke
    }
    if

    j DimY lt {
	i 1 gt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexTopRightVertex moveto
	EarLength HexUpRightEdge rlineto
	stroke

	i DimX lt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexRightVertex moveto
	EarLength HexRightEdge rlineto
	stroke
    }
    if

    j 1 gt {
	i DimX lt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexBottomLeftVertex moveto
	EarLength HexDownLeftEdge rlineto
	stroke

	i 1 gt {HexLineWidth} {BoardOutlineWidth} ifelse setlinewidth
	newpath
	i j HexLeftVertex moveto
	EarLength HexLeftEdge rlineto
	stroke
    }
    if
} def

/BoundedShadedHexagon {
    /shade exch def
    /j exch def
    /i exch def

    i j shade FillHexagon
    i j BoundedHexagon
} def

/BoundedHexagon {
    /j exch def
    /i exch def

    0 setgray
    HexLineWidth setlinewidth
    i j HexagonPath
    stroke

    BoardOutlineWidth setlinewidth

    i 1 eq {
	newpath
	i j HexLeftVertex moveto
	1.0 HexUpRightEdge rlineto
	1.0 HexRightEdge rlineto
	stroke
    }
    if

    j DimY eq {
	newpath
	i j HexTopLeftVertex moveto
	1.0 HexRightEdge rlineto
	1.0 HexDownRightEdge rlineto
	stroke
    }
    if

    i DimX eq {
	newpath
	i j HexRightVertex moveto
	1.0 HexDownLeftEdge rlineto
	1.0 HexLeftEdge rlineto
	stroke
    }
    if

    j 1 eq {
	newpath
	i j HexBottomRightVertex moveto
	1.0 HexLeftEdge rlineto
	1.0 HexUpLeftEdge rlineto
	stroke
    }
    if
} def

/ShadedHexagon {
    /shade exch def
    /j exch def
    /i exch def

    i j shade FillHexagon
    i j Hexagon
} def

/Hexagon { % call: i j Hexagon
    /j exch def
    /i exch def

    i j HexagonPath
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

/FillHexagon {   % call: i j shade FillHexagon
    /shade exch def
    /j exch def
    /i exch def

    i j HexagonPath
    0 setlinewidth
    shade setgray
    fill
    i j Hexagon
} def

/HexBoardOutlinePath {
    newpath
    1 1 HexLeftVertex moveto

    1 1 DimY {
	1.0 HexUpRightEdge rlineto
	1.0 HexRightEdge rlineto
    } for

    1 1 DimX 1 sub {
	1.0 HexDownRightEdge rlineto
	1.0 HexRightEdge rlineto
    } for
    1.0 HexDownRightEdge rlineto

    1 1 DimY {
	1.0 HexDownLeftEdge rlineto
	1.0 HexLeftEdge rlineto
    } for

    1 1 DimX 1 sub {
	1.0 HexUpLeftEdge rlineto
	1.0 HexLeftEdge rlineto
    } for
    1.0 HexUpLeftEdge rlineto

    closepath
} def

/HexBoardOutline {
    HexBoardOutlinePath
    BoardOutlineWidth setlinewidth
    0 setgray
    stroke
} def

/HexBoardFillNoOutline {
    /shade exch def
    HexBoardOutlinePath
    0 setlinewidth
    shade setgray
    fill
} def

/HexBoardFill {
    /shade exch def
    shade HexBoardFillNoOutline
    HexBoardOutline
} def

/HexShannonGrid {
    1 1 DimY {
	/j exch def
	1 1 DimX {
	    /i exch def
	    i j HexVertex
	} for
    } for

    1 1 DimY {
	/j exch def
	1 j DimX j HexLine
    } for

    1 1 DimX {
	/i exch def
	i 1 i DimY HexLine
    } for

    2 1 DimX DimY add 2 sub {
	/i exch def
	i DimY lt {1 i} {i DimY sub 1 add DimY} ifelse
	i DimX lt {i 1} {DimX i DimX sub 1 add} ifelse
	HexLine
    } for
} def

/HexBoardGrid {
    1 1 DimY {
	/j exch def
	1 1 DimX {
	    /i exch def
	    i j Hexagon
	} for
    } for
} def

/DrawHexBoard {
    BoardShade HexBoardFill
    HexBoardGrid
} def

/DrawHexBoardNoOutline {
    1 1 DimY {
	/j exch def
	1 1 DimX {
	    /i exch def
	    i j BoardShade FillHexagon
	    i j Hexagon
	} for
    } for
} def

/YBoardOutlinePath {
    newpath
    0 0 HexLeftVertex moveto

    1 1 DimX {
	1.0 HexUpRightEdge rlineto
	1.0 HexRightEdge rlineto
    } for

    1 1 DimX {
	1.0 HexDownRightEdge rlineto
	1.0 HexDownLeftEdge rlineto
    } for

    1 1 DimX {
	1.0 HexLeftEdge rlineto
	1.0 HexUpLeftEdge rlineto
    } for

    closepath
} def

/YBoardOutline {
    YBoardOutlinePath
    BoardOutlineWidth setlinewidth
    0 setgray
    stroke
} def

/YBoardFill {
    /shade exch def
    YBoardOutlinePath
    0 setlinewidth
    shade setgray
    fill
    YBoardOutline
} def

/YBoardGrid {
    0 1 DimX 1 sub {
	/j exch def
	0 1 DimX 1 sub j sub {
	    /i exch def
	    i j Hexagon
	} for
    } for
} def

/DrawYBoard {
    BoardShade YBoardFill
    YBoardGrid
} def

/FontSelect { % bold italic FontSelect
    /italic exch def
    /bold exch def

    bold {
	italic {
	    /Times-BoldItalic findfont TextHeight scalefont setfont
	} {
	    /Times-Bold findfont TextHeight scalefont setfont
	}
	ifelse
    } {
	italic {
	    /Times-Italic findfont TextHeight scalefont setfont
	} {
	    /Times findfont TextHeight scalefont setfont
	}
	ifelse
    }
    ifelse
} def
	    
/LabelString {   % call: i j (str) strlen LabelString
    /strlen exch def
    /str exch def
    /j exch def
    /i exch def

    newpath
    i j HexCenterX TextWidth strlen mul 0.5 mul sub
    i j HexCenterY TextHeight 0.225 mul sub
    moveto
    str
    show
} def

/AbsLabelString {
    /strlen exch def
    /str exch def
    /y exch def
    /x exch def

    newpath
    x AbsCoordX TextWidth strlen mul 0.5 mul sub
    y AbsCoordY TextHeight 0.225 mul sub
    moveto
    str
    show
} def

/LabelStringVerb { % i j (str) strlen shade bold italic LabelStringVerb
    /italic exch def
    /bold exch def
    /shade exch def
    /strlen exch def
    /str exch def
    /j exch def
    /i exch def
    bold italic FontSelect
    shade setgray
    i j str strlen LabelString
} def

/HexBoardCoordinates {
    false true FontSelect
    CoordinatesShade setgray
    
    1 1 DimX {
	/i exch def
	i 0 Chars i 1 sub get 1 LabelString
	i DimY 1 add Chars i 1 sub get 1 LabelString
    } for

    1 1 DimY {
	/j exch def
	0 j Digits j 1 sub get
	DimY 9 gt {2} {1} ifelse
	LabelString
	DimX 1 add j Digits j 1 sub get
	DimY 9 gt {2} {1} ifelse
	LabelString
    } for
} def

/HexEdgePieceLocationBottomLeft {
    /dist exch def
    /midx DimX 1 add 2 div def
    /midy DimY 1 add 2 div def

    midx
    2 midx sub dist sub
} def

/HexEdgePieceLocationTopRight {
    /dist exch def
    /midx DimX 1 add 2 div def
    /midy DimY 1 add 2 div def

    midx
    DimX DimY add midx sub dist add
} def

/HexEdgePieceLocationTopLeft {
    /dist exch def
    /midx DimX 1 add 2 div def
    /midy DimY 1 add 2 div def
    
    2 midy sub dist sub
    midy
} def

/HexEdgePieceLocationBottomRight {
    /dist exch def
    /midx DimX 1 add 2 div def
    /midy DimY 1 add 2 div def
    
    DimX DimY add midy sub dist add
    midy
} def

/HexWhiteTerminal {
    (T) 1 HexWhiteLabelledPiece
} def

/HexBlackTerminal {
    (T) 1 HexBlackLabelledPiece
} def
    
/HexShannonTerminalBottomLeft {
    /dist exch def

    dist HexEdgePieceLocationBottomLeft
    HexWhiteTerminal
} def

/HexShannonTerminalTopRight {
    /dist exch def

    dist HexEdgePieceLocationTopRight
    HexWhiteTerminal
} def

/HexShannonTerminalConnectionsWhite {
    /dist exch def
    /midx DimX 1 add 2 div def
    /midy DimY 1 add 2 div def

    1 1 DimX {
	/i exch def
	dist HexEdgePieceLocationBottomLeft i 1 HexLine
	dist HexEdgePieceLocationTopRight i DimY HexLine
    } for

    dist HexShannonTerminalBottomLeft
    dist HexShannonTerminalTopRight
} def

/HexShannonTerminalTopLeft {
    /dist exch def

    dist HexEdgePieceLocationTopLeft
    HexBlackTerminal
} def

/HexShannonTerminalBottomRight {
    /dist exch def

    dist HexEdgePieceLocationBottomRight
    HexBlackTerminal
} def

/HexShannonTerminalConnectionsBlack {
    /dist exch def
    /midx DimX 1 add 2 div def
    /midy DimY 1 add 2 div def

    1 1 DimY {
	/j exch def
	dist HexEdgePieceLocationTopLeft 1 j HexLine
	dist HexEdgePieceLocationBottomRight DimX j HexLine
    } for

    dist HexShannonTerminalTopLeft
    dist HexShannonTerminalBottomRight
} def

/HexBoardEdgePieceTopLeft {
    /dist exch def
    dist HexEdgePieceLocationTopLeft HexBlackPiece
} def
/HexBoardEdgePieceBottomLeft {
    /dist exch def
    dist HexEdgePieceLocationBottomLeft HexWhitePiece
} def
/HexBoardEdgePieceTopRight {
    /dist exch def
    dist HexEdgePieceLocationTopRight HexWhitePiece
} def
/HexBoardEdgePieceBottomRight {
    /dist exch def
    dist HexEdgePieceLocationBottomRight HexBlackPiece
} def

/HexBoardEdgePieces { % extradist
    /dist exch def

    dist HexBoardEdgePieceTopLeft
    dist HexBoardEdgePieceBottomLeft
    dist HexBoardEdgePieceTopRight
    dist HexBoardEdgePieceBottomRight
} def

/HexDot { % i j size
    /size exch def
    /j exch def
    /i exch def

    0 setlinewidth
    0 setgray
    newpath
    i j HexCenterVertex size 0 360 arc
    fill
} def


/HexWhiteMarkedPiece {
    /j exch def
    /i exch def

    i j HexWhitePiece
    
    0 setgray
    0 setlinewidth
    newpath
    i j HexCenterVertex MarkerSize 0 360 arc
    fill
} def

/HexBlackMarkedPiece {
    /j exch def
    /i exch def

    i j HexBlackPiece
    
    1 setgray
    0 setlinewidth
    newpath
    i j HexCenterVertex MarkerSize 0 360 arc
    fill
} def


/HexDoubleMarker {
    /shaderight exch def
    /shadeleft exch def
    /j exch def
    /i exch def

    shadeleft setgray
    0 setlinewidth
    newpath
    i j HexCenterX MarkerSize sub i j HexCenterY MarkerSize 0 360 arc
    fill

    0 setgray
    CircleLineWidth setlinewidth
    newpath
    i j HexCenterX MarkerSize sub i j HexCenterY MarkerSize 0 360 arc
    stroke

    shaderight setgray
    0 setlinewidth
    newpath
    i j HexCenterX MarkerSize add i j HexCenterY MarkerSize 0 360 arc
    fill

    0 setgray
    CircleLineWidth setlinewidth
    newpath
    i j HexCenterX MarkerSize add i j HexCenterY MarkerSize 0 360 arc
    stroke
} def

/HexBlackWhiteMarker {
    /j exch def
    /i exch def
    i j 0.0 1.0 HexDoubleMarker
} def

/HexWhiteBlackMarker {
    /j exch def
    /i exch def
    i j 1.0 0.0 HexDoubleMarker
} def
        
/HexMarker {
    /j exch def
    /i exch def

    0 setlinewidth
    newpath
    i j HexCenterVertex MarkerSize 0 360 arc
    fill

    0 setgray
    CircleLineWidth setlinewidth
    newpath
    i j HexCenterVertex MarkerSize 0 360 arc
    stroke  
} def

/HexBlackMarker {
    /j exch def
    /i exch def

    0 setgray
    i j HexMarker
} def

/HexWhiteMarker {
    /j exch def
    /i exch def

    1 setgray
    i j HexMarker
} def
    
/HexVertex {
    /j exch def
    /i exch def

    i j GraphVertexSize HexDot
} def

/HexLine {
    /j2 exch def
    /i2 exch def
    /j1 exch def
    /i1 exch def

    GraphLineWidth setlinewidth
    0 setgray
    newpath
    i1 j1 HexCenterVertex moveto
    i2 j2 HexCenterVertex lineto
    stroke
} def

/HexPiece { % i j shade
    /shade exch def
    /j exch def
    /i exch def

    0 setlinewidth
    shade setgray
    newpath
    i j HexCenterVertex CircleRadius 0 360 arc
    fill

    0 setgray
    CircleLineWidth setlinewidth
    newpath
    i j HexCenterVertex CircleRadius 0 360 arc
    stroke
} def

/HexWhitePiece {
    /j exch def
    /i exch def

    i j 1.0 HexPiece
} def

/HexBlackPiece {
    /j exch def
    /i exch def

    i j 0.0 HexPiece
} def

/HexWhiteLabelledPiece { % i j (str) strlen
    /strlen exch def
    /str exch def
    /j exch def
    /i exch def

    i j HexWhitePiece
    i j str strlen 0.0 true true LabelStringVerb
} def

/HexBlackLabelledPiece { % i j (str) strlen
    /strlen exch def
    /str exch def
    /j exch def
    /i exch def

    i j HexBlackPiece
    i j str strlen 1.0 true true LabelStringVerb
} def

/DrawBox { % minx miny maxx maxy
    /maxy exch def
    /maxx exch def
    /miny exch def
    /minx exch def

    newpath
    minx miny moveto
    maxx minx sub 0 rlineto
    0 maxy miny sub rlineto
    minx maxx sub 0 rlineto
    0 miny maxy sub rlineto
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

/HexMoveEval {
    /eval exch def
    /j exch def
    /i exch def

%    i j 1.0 eval sub FadedBoardShade mul BoundedShadedHexagon
    newpath
    i j HexCenterVertex moveto
    MoveEvalSize HexLeftEdge rlineto
    MoveEvalSize HexUpRightEdge rlineto
    MoveEvalSize HexRightEdge rlineto
    MoveEvalSize HexDownRightEdge rlineto
    MoveEvalSize HexDownLeftEdge rlineto
    MoveEvalSize HexLeftEdge rlineto
    MoveEvalSize HexUpLeftEdge rlineto
%    eval MoveEvalSize mul HexLeftEdge rlineto
%    eval MoveEvalSize mul HexUpRightEdge rlineto
%    eval MoveEvalSize mul HexRightEdge rlineto
%    eval MoveEvalSize mul HexDownRightEdge rlineto
%    eval MoveEvalSize mul HexDownLeftEdge rlineto
%    eval MoveEvalSize mul HexLeftEdge rlineto
%    eval MoveEvalSize mul HexUpLeftEdge rlineto

    closepath

    0 setlinewidth
    1.0 eval sub BoardShade mul setgray
    fill
} def

/HexSymmetricalMoveEval {
    /eval exch def
    /j exch def
    /i exch def

    i j eval HexMoveEval
    DimX 1 add i sub DimY 1 add j sub eval HexMoveEval
} def

/AbsCoordX {
    /x exch def

    OriginX x Scale mul add
} def

/AbsCoordY {
    /y exch def

    OriginY y Scale mul add
} def

/AbsCoords {
    /y exch def
    /x exch def

    x AbsCoordX
    y AbsCoordY
} def

/AbsLine {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def

    newpath
    x1 y1 AbsCoords moveto
    x2 y2 AbsCoords lineto
    stroke
} def

/AbsDot {
    /size exch def
    /y exch def
    /x exch def

    0 setlinewidth
    0 setgray
    newpath
    x y AbsCoords size 0 360 arc
    fill
} def

/AbsVertex {
    /y exch def
    /x exch def

    x y GraphVertexSize AbsDot
} def

/HexUpArrow {
   /size exch def
   /j exch def
   /i exch def

   GraphLineWidth setlinewidth
   0 setgray
   newpath
   i j HexCenterVertex moveto
   0 CircleRadius size mul neg rmoveto
   0 CircleRadius size mul 2 mul rlineto
   CircleRadius size mul 4 div neg CircleRadius size mul 2 div neg rmoveto
   CircleRadius size mul 4 div CircleRadius size mul 2 div rlineto
   CircleRadius size mul 4 div CircleRadius size mul 2 div neg rlineto
   stroke
} def

/HexRightArrow {
   /size exch def
   /j exch def
   /i exch def

   GraphLineWidth setlinewidth
   0 setgray
   newpath
   i j HexCenterVertex moveto
   CircleRadius size mul neg 0 rmoveto
   CircleRadius size mul 2 mul 0 rlineto
   CircleRadius size mul 2 div neg CircleRadius size mul 4 div neg rmoveto
   CircleRadius size mul 2 div CircleRadius size mul 4 div rlineto
   CircleRadius size mul 2 div neg CircleRadius size mul 4 div rlineto
   stroke
} def

/HexLeftArrow {
   /size exch def
   /j exch def
   /i exch def

   GraphLineWidth setlinewidth
   0 setgray
   newpath
   i j HexCenterVertex moveto
   CircleRadius size mul 0 rmoveto
   CircleRadius size mul 2 mul neg 0 rlineto
   CircleRadius size mul 2 div CircleRadius size mul 4 div neg rmoveto
   CircleRadius size mul 2 div neg CircleRadius size mul 4 div rlineto
   CircleRadius size mul 2 div CircleRadius size mul 4 div rlineto
   stroke
} def

/HexBlackCapturedPiece {
    /j exch def
    /i exch def

    i j HexBlackMarkedPiece
} def

/HexWhiteCapturedPiece {
    /j exch def
    /i exch def

    i j HexWhiteMarkedPiece
} def

/HexDeadPiece {
    /j exch def
    /i exch def

    i j DeadPieceShade HexPiece
    
   GraphLineWidth setlinewidth
   0 setgray
   newpath
   i j HexCenterVertex moveto
   MarkerSize neg 0 rmoveto
   MarkerSize 2 mul 0 rlineto
   MarkerSize neg MarkerSize neg rmoveto
   0 MarkerSize 2 mul rlineto
   stroke
} def

/HexDominatedCell {
    /j exch def
    /i exch def

   GraphLineWidth setlinewidth
   0 setgray
   newpath
   i j HexCenterVertex moveto
   MarkerSize Root2 div neg MarkerSize Root2 div neg rmoveto
   MarkerSize Root2 mul MarkerSize Root2 mul rlineto
   MarkerSize Root2 mul neg 0 rmoveto
   MarkerSize Root2 mul MarkerSize Root2 mul neg rlineto
   stroke
} def


%%---------------- Program -------------------


DrawHexBoard
1 HexBoardEdgePieces
HexBoardCoordinates

4 1 (1) 1 HexWhiteLabelledPiece
2 4 (2) 1 HexBlackLabelledPiece
4 3 (3) 1 HexWhiteLabelledPiece
4 2 (4) 1 HexBlackLabelledPiece
2 3 (5) 1 HexWhiteLabelledPiece
3 4 (6) 1 HexBlackLabelledPiece
4 4 (7) 1 HexWhiteLabelledPiece
3 2 (8) 1 HexBlackLabelledPiece
1 2 (9) 1 HexWhiteLabelledPiece
3 3 (10) 2 HexBlackLabelledPiece
1 4 (11) 2 HexWhiteLabelledPiece
2 1 (12) 2 HexBlackLabelledPiece
1 1 (13) 2 HexWhiteLabelledPiece


%------------ Trailer --------------

showpage

%%EndDocument
 @endspecial 287 5597 a(Fig.)c(5.)g(The)f(start)h(\(left\))f(and)g
(\014nish)e(\(righ)m(t\))j(of)f(one)h(line)e(of)h(the)h(strategy)h(of)e
(Fig.)h(4.)1769 5952 y Fk(6)p eop
%%Page: 7 7
7 6 bop 1707 286 a
 tx@Dict begin tx@NodeDict begin {5.55556 0.0 8.97235 4.48618 2.41109
} false /N@T-0 16 {InitRnode } NewNode end end
 1707 286 a Fr(d1)1727 458 y
 tx@Dict begin tx@NodeDict begin {3.6528 0.0 4.25006 2.12503 2.41109
} false /N@T-0-0 16 {InitRnode } NewNode end end
 1727 458
a Fe(\017)1744 438 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 1744 438 a 1285 629 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.0279 4.01395 2.41109
} false /N@T-0-0-0 16 {InitRnode } NewNode end end
 1285 629 a
Fr(c3)1319 609 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0 /N@T-0-0-0 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1319 609 a 1224 801 a
 tx@Dict begin tx@NodeDict begin {5.46666 0.0 6.36676 3.18338 2.41109
} false /N@T-0-0-0-0 16 {InitRnode } NewNode end end
 1224 801 a Fr(A)1251
781 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0 /N@T-0-0-0-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1251 781 a 1360 801 a
 tx@Dict begin tx@NodeDict begin {5.46666 0.0 6.36676 3.18338 2.41109
} false /N@T-0-0-0-1 16 {InitRnode } NewNode end end
 1360 801 a Fr(A)1387 781
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0 /N@T-0-0-0-1 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1387 781 a 1552 629 a
 tx@Dict begin tx@NodeDict begin {5.55556 0.0 8.97235 4.48618 2.41109
} false /N@T-0-0-1 16 {InitRnode } NewNode end end
 1552 629 a Fr(b3)1590 609 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0 /N@T-0-0-1 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1590
609 a 1496 801 a
 tx@Dict begin tx@NodeDict begin {5.46666 0.0 6.36676 3.18338 2.41109
} false /N@T-0-0-1-0 16 {InitRnode } NewNode end end
 1496 801 a Fr(A)1523 781 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1 /N@T-0-0-1-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1523 781
a 1632 801 a
 tx@Dict begin tx@NodeDict begin {5.46666 0.0 6.01675 3.00838 2.41109
} false /N@T-0-0-1-1 16 {InitRnode } NewNode end end
 1632 801 a Fr(B)1657 781 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1 /N@T-0-0-1-1 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1657 781 a 1818
629 a
 tx@Dict begin tx@NodeDict begin {5.55556 0.0 8.97235 4.48618 2.41109
} false /N@T-0-0-2 16 {InitRnode } NewNode end end
 1818 629 a Fr(b3)1855 609 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0 /N@T-0-0-2 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1855 609 a 1765 801
a
 tx@Dict begin tx@NodeDict begin {5.46666 0.0 6.36676 3.18338 2.41109
} false /N@T-0-0-2-0 16 {InitRnode } NewNode end end
 1765 801 a Fr(A)1791 781 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2 /N@T-0-0-2-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1791 781 a 1901 801 a
 tx@Dict begin tx@NodeDict begin {3.6528 0.0 4.25006 2.12503 2.41109
} false /N@T-0-0-2-1 16 {InitRnode } NewNode end end
 1901
801 a Fe(\017)1918 781 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2 /N@T-0-0-2-1 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1918 781 a 1802 972 a
 tx@Dict begin tx@NodeDict begin {5.55556 0.0 8.97235 4.48618 2.41109
} false /N@T-0-0-2-1-0 16 {InitRnode } NewNode end end
 1802 972
a Fr(b2)1840 952 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-1 /N@T-0-0-2-1-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1840 952 a 1814 1144 a
 tx@Dict begin tx@NodeDict begin {5.46666 0.0 6.36676 3.18338 2.41109
} false /N@T-0-0-2-1-0-0 16 {InitRnode } NewNode end end
 1814 1144 a
Fr(A)1840 1124 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-1-0 /N@T-0-0-2-1-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1840 1124 a 1960 972 a
 tx@Dict begin tx@NodeDict begin {5.55556 0.0 8.97235 4.48618 2.41109
} false /N@T-0-0-2-1-1 16 {InitRnode } NewNode end end
 1960 972 a Fr(d2)1997
952 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-1 /N@T-0-0-2-1-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1997 952 a 1979 1144 a
 tx@Dict begin tx@NodeDict begin {3.6528 0.0 4.25006 2.12503 2.41109
} false /N@T-0-0-2-1-1-0 16 {InitRnode } NewNode end end
 1979 1144 a Fe(\017)1997
1124 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-1-1 /N@T-0-0-2-1-1-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1997 1124 a 1887 1316 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.0279 4.01395 2.41109
} false /N@T-0-0-2-1-1-0-0 16 {InitRnode } NewNode end end
 1887 1316 a Fr(c3)1920
1296 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-1-1-0 /N@T-0-0-2-1-1-0-0 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1920 1296 a 2037 1316 a
 tx@Dict begin tx@NodeDict begin {5.55556 0.0 8.97235 4.48618 2.41109
} false /N@T-0-0-2-1-1-0-1 16 {InitRnode } NewNode end end
 2037 1316 a Fr(d3)2074
1296 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-1-1-0 /N@T-0-0-2-1-1-0-1 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2074 1296 a 2048 1487 a
 tx@Dict begin tx@NodeDict begin {5.46666 0.0 6.36676 3.18338 2.41109
} false /N@T-0-0-2-1-1-0-1-0 16 {InitRnode } NewNode end end
 2048 1487 a Fr(A)2074
1467 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-2-1-1-0-1 /N@T-0-0-2-1-1-0-1-0 InitNC { NCLine  }
if end gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore
end
 2074 1467 a 2133 629 a
 tx@Dict begin tx@NodeDict begin {5.55556 0.0 8.97235 4.48618 2.41109
} false /N@T-0-0-3 16 {InitRnode } NewNode end end
 2133 629 a Fr(d3)2170 609
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0 /N@T-0-0-3 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 2170 609 a 2080 801 a
 tx@Dict begin tx@NodeDict begin {5.46666 0.0 6.36676 3.18338 2.41109
} false /N@T-0-0-3-0 16 {InitRnode } NewNode end end
 2080 801 a Fr(A)2106 781 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3 /N@T-0-0-3-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2106
781 a 2216 801 a
 tx@Dict begin tx@NodeDict begin {3.6528 0.0 4.25006 2.12503 2.41109
} false /N@T-0-0-3-1 16 {InitRnode } NewNode end end
 2216 801 a Fe(\017)2233 781 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3 /N@T-0-0-3-1 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2233 781
a 2117 972 a
 tx@Dict begin tx@NodeDict begin {5.55556 0.0 8.97235 4.48618 2.41109
} false /N@T-0-0-3-1-0 16 {InitRnode } NewNode end end
 2117 972 a Fr(d2)2155 952 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3-1 /N@T-0-0-3-1-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2155 952 a 2275
972 a
 tx@Dict begin tx@NodeDict begin {5.55556 0.0 8.97235 4.48618 2.41109
} false /N@T-0-0-3-1-1 16 {InitRnode } NewNode end end
 2275 972 a Fr(b3)2312 952 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3-1 /N@T-0-0-3-1-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2312 952 a 2219 1144
a
 tx@Dict begin tx@NodeDict begin {5.46666 0.0 6.36676 3.18338 2.41109
} false /N@T-0-0-3-1-1-0 16 {InitRnode } NewNode end end
 2219 1144 a Fr(A)2245 1124 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3-1-1 /N@T-0-0-3-1-1-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2245 1124 a 2354 1144
a
 tx@Dict begin tx@NodeDict begin {5.46666 0.0 6.01675 3.00838 2.41109
} false /N@T-0-0-3-1-1-1 16 {InitRnode } NewNode end end
 2354 1144 a Fr(B)2379 1124 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-3-1-1 /N@T-0-0-3-1-1-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2379 1124 a 166 1630 a
Fn(Fig.)35 b(6.)g(An)e(and/or)i(autotree)h(with)d(t)m(w)m(o)i(macro)g
(pattern)g(no)s(des.)e(This)g(tree)i(is)e(equiv)-5 b(alen)m(t)166
1743 y(to)31 b(the)g(tree)g(in)e(Fig.)h(4;)h(pattern)g(parameters)g(ha)
m(v)m(e)g(b)s(een)f(omitted.)166 1913 y Fk(T)-8 b(esting)41
b(the)g(satisfying)f(prop)s(ert)m(y)i(on)e(and/or)h(autotrees)g(in)m(v)
m(olv)m(es)h(c)m(hec)m(king)g(ev)m(ery)166 2033 y(ro)s(ot-to-leaf)37
b(path)j(in)f(the)i(asso)s(ciated)f(expanded)h(autotree.)g(Again,)e
(for)g(reasons)i(of)166 2154 y(e\016ciency)f(w)m(e)g(do)f(not)f(w)m(an)
m(t)i(to)e(generate)h(the)g(expanded)i(autotree;)e(w)m(e)h(th)m(us)f
(carry)166 2274 y(out)i(this)g(task)g(in)g(an)f(implicit)e(fashion.)i
(By)i(using)e(a)h(simple)f(indexing)g(sc)m(heme)i(for)166
2394 y(eac)m(h)32 b(ro)s(ot-to-leaf)c(path)j(in)f(the)h(and/or)g
(autotree,)g(w)m(e)h(can)f(reconstruct)h(the)g(cell)d(sets)166
2515 y(for)41 b(eac)m(h)i(p)s(ossible)e(ro)s(ot-to-leaf)e(path)j(in)f
(the)h(asso)s(ciated)g(autotree.)g(w)m(e)h(ha)m(v)m(e)g(eac)m(h)166
2635 y(no)s(de)27 b(store)h(ho)m(w)g(man)m(y)f(ro)s(ot)f(to)h(leaf)f
(paths)i(it)e(con)m(tains.)h(W)-8 b(e)28 b(consider)f(all)f(suc)m(h)i
(paths)166 2755 y(and)33 b(v)m(erify)g(that)f(eac)m(h)i(giv)m(es)f(a)f
(winning)f(condition.)166 2926 y(W)-8 b(e)24 b(implemen)m(t)e(the)j
(isomorphic)d(substrategy)j(feature)f(in)f(the)i(simplest)d(p)s
(ossible)h(w)m(a)m(y)-8 b(,)166 3046 y(namely)32 b(using)g(macro)g
(substitution)g(to)g(generate)h(the)g(equiv)-5 b(alen)m(t)32
b(and/or)h(autotree.)166 3401 y Fl(4)112 b(V)-9 b(erifying)36
b(Y)-9 b(ang's)37 b(pro)s(of)166 3691 y Fk(As)23 b(a)g(b)s(enc)m(hmark)
g(for)f(testing)g(our)h(system,)h(w)m(e)f(used)h(it)e(to)g(v)m(erify)h
(the)g(\014rst)g(kno)m(wn)h(win-)166 3812 y(ning)38 b(7)p
Fi(\002)p Fk(7)g(Hex)h(strategy)-8 b(,)40 b(namely)d(Y)-8
b(ang's)39 b(original)c(7)p Fi(\002)p Fk(7)j(cen)m(tre-op)s(ening)h
(strategy)166 3932 y([14,13].)24 b(Y)-8 b(ang)25 b(describ)s(ed)h(his)f
(strategy)g(in)f(an)h(easily)f(understo)s(o)s(d)i(notation)d(similar)f
(to)166 4052 y(that)27 b(used)h(in)e(the)i(C)f(programming)d(language;)
i(an)h(applet)g(that)g(follo)m(ws)e(this)i(strategy)166
4173 y(is)36 b(a)m(v)-5 b(ailable)34 b(on)i(his)g(homepage.)1434
4137 y Fr(4)1527 4173 y Fk(The)h(v)m(ersion)g(of)f(the)h(strategy)g
(that)f(w)m(e)i(tested)f(is)166 4293 y(from)29 b(a)h(preprin)m(t)h
(also)e(a)m(v)-5 b(ailable)28 b(from)h(his)h(w)m(eb)i(page)e([14].)h
(In)f(Y)-8 b(ang's)31 b(notation,)e(this)166 4414 y(uses)46
b(ab)s(out)d(40)h(patterns)h(\(not)f(coun)m(ting)f(pattern)i(v)-5
b(ariations\))42 b(comprising)g(ab)s(out)166 4534 y(six)f(pages)h(of)e
(text.)i(P)m(art)g(of)e(the)i(recursion)f(tree,)h(indicating)d(the)i
(hierarc)m(h)m(y)h(of)f(his)166 4654 y(patterns,)33 b(is)g(sho)m(wn)g
(in)f(Fig.)f(7.)166 4825 y(W)-8 b(e)37 b(translated)f(his)g(pro)s(of)g
(in)m(to)f(our)i(notation)e(b)m(y)i(hand,)g(follo)m(wing)d(Y)-8
b(ang's)36 b(pattern)166 4945 y(naming)e(con)m(v)m(en)m(tion.)j(As)g
(an)f(example)f(of)h(our)g(notation,)e(see)j(Fig.)e(8.)h(The)h(\014rst)
f(line)166 5065 y(giv)m(es)47 b(the)h(name)e(of)h(the)g(pattern.)g(The)
h(second)g(line)e(is)g(a)h(commen)m(t)f(noting)g(that)166
5186 y(the)e(only)g(pattern)g(calling)d(this)j(pattern)g(is)f(P)m
(attern)i(1.)e(The)i(third)e(line)g(giv)m(es)h(the)166
5306 y(connections)35 b(that)e(are)h(ac)m(hiev)m(ed)h(b)m(y)g(the)f
(pattern,)g(in)f(this)h(case)h(at)e(least)h(one)g(of)f(t)m(w)m(o)p
166 5409 299 4 v 166 5509 a Fn(the)e(expanded)e(autotree)j(to)f(a)g(no)
s(de)f(with)f(2)1747 5477 y Fd(k)1820 5509 y Fn(subtrees.)166
5586 y Fr(4)257 5619 y Fn(www.ee.umanitoba/)p Fp(\030)p
Fn(jingy)m(ang/)1769 5952 y Fk(7)p eop
%%Page: 8 8
8 7 bop 1783 283 a
 tx@Dict begin tx@NodeDict begin {5.15556 1.55556 31.64629 15.82314
2.41109 } false /N@T-0 16 {InitRnode } NewNode end end
 1783 283 a Fr(pattern1)219 569 y
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 4.25006 2.12503 2.41109
} false /N@T-0-0 16 {InitRnode } NewNode end end
 219
569 a Fr(3)237 549 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-0 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 237 549 a 184 855 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 4.25006 2.12503 2.41109
} false /N@T-0-0-0 16 {InitRnode } NewNode end end
 184 855 a Fr(9)202
835 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0 /N@T-0-0-0 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 202 835 a 167 1141 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-0-0-0 16 {InitRnode } NewNode end end
 167 1141 a Fr(18)202 1121
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-0 /N@T-0-0-0-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 202 1121 a 237 855 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-0-1 16 {InitRnode } NewNode end end
 237 855 a Fr(14)272 835 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0 /N@T-0-0-1 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 272
835 a 237 1141 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-0-1-0 16 {InitRnode } NewNode end end
 237 1141 a Fr(24)272 1121 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1 /N@T-0-0-1-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 272 1121
a 237 1427 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-0-1-0-0 16 {InitRnode } NewNode end end
 237 1427 a Fr(31)272 1407 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-0-1-0 /N@T-0-0-1-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 272 1407 a 254
569 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 4.25006 2.12503 2.41109
} false /N@T-0-1 16 {InitRnode } NewNode end end
 254 569 a Fr(3)272 549 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-1 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 272 549 a 393 569 a
 tx@Dict begin tx@NodeDict begin {4.83337 0.83337 6.6112 3.3056 2.41109
} false /N@T-0-2 16 {InitRnode } NewNode end end
 393
569 a Fr(+)420 549 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-2 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 420 549 a 362 855 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 4.25006 2.12503 2.41109
} false /N@T-0-2-0 16 {InitRnode } NewNode end end
 362 855 a Fr(4)379
835 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-2 /N@T-0-2-0 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 379 835 a 344 1141 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-2-0-0 16 {InitRnode } NewNode end end
 344 1141 a Fr(15)379 1121
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-2-0 /N@T-0-2-0-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 379 1121 a 307 1427 a
 tx@Dict begin tx@NodeDict begin {5.55556 0.0 17.47247 8.73624 2.41109
} false /N@T-0-2-0-0-0 16 {InitRnode } NewNode end end
 307 1427 a Fr(25ab)379 1407 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-2-0-0 /N@T-0-2-0-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end

379 1407 a 443 855 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 4.25006 2.12503 2.41109
} false /N@T-0-2-1 16 {InitRnode } NewNode end end
 443 855 a Fr(5)461 835 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-2 /N@T-0-2-1 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 461 835
a 417 1141 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 4.25006 2.12503 2.41109
} false /N@T-0-2-1-0 16 {InitRnode } NewNode end end
 417 1141 a Fr(9)435 1121 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-2-1 /N@T-0-2-1-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 435 1121 a 452
1141 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-2-1-1 16 {InitRnode } NewNode end end
 452 1141 a Fr(16)488 1121 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-2-1 /N@T-0-2-1-1 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 488 1121 a 453 1427
a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-2-1-1-0 16 {InitRnode } NewNode end end
 453 1427 a Fr(26)488 1407 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-2-1-1 /N@T-0-2-1-1-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 488 1407 a 487 569 a
 tx@Dict begin tx@NodeDict begin {4.83337 0.83337 6.6112 3.3056 2.41109
} false /N@T-0-3 16 {InitRnode } NewNode end end
 487
569 a Fr(+)514 549 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-3 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 514 549 a 479 855 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 4.25006 2.12503 2.41109
} false /N@T-0-3-0 16 {InitRnode } NewNode end end
 479 855 a Fr(6)496
835 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-3 /N@T-0-3-0 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 496 835 a 514 855 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 4.25006 2.12503 2.41109
} false /N@T-0-3-1 16 {InitRnode } NewNode end end
 514 855 a Fr(5)532 835 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-3 /N@T-0-3-1 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 532
835 a 557 569 a
 tx@Dict begin tx@NodeDict begin {4.83337 0.83337 6.6112 3.3056 2.41109
} false /N@T-0-4 16 {InitRnode } NewNode end end
 557 569 a Fr(+)585 549 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-4 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 585 549 a 550
855 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 4.25006 2.12503 2.41109
} false /N@T-0-4-0 16 {InitRnode } NewNode end end
 550 855 a Fr(7)567 835 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-4 /N@T-0-4-0 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 567 835 a 585 855 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 4.25006 2.12503 2.41109
} false /N@T-0-4-1 16 {InitRnode } NewNode end end
 585
855 a Fr(8)602 835 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-4 /N@T-0-4-1 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 602 835 a 558 1141 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 4.25006 2.12503 2.41109
} false /N@T-0-4-1-0 16 {InitRnode } NewNode end end
 558 1141 a
Fr(9)576 1121 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-4-1 /N@T-0-4-1-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 576 1121 a 593 1141 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-4-1-1 16 {InitRnode } NewNode end end
 593 1141 a Fr(17)629
1121 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-4-1 /N@T-0-4-1-1 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 629 1121 a 594 1427 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-4-1-1-0 16 {InitRnode } NewNode end end
 594 1427 a Fr(27)629 1407
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-4-1-1 /N@T-0-4-1-1-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 629 1407 a 594 1713 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-4-1-1-0-0 16 {InitRnode } NewNode end end
 594 1713 a Fr(33)629 1693 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-4-1-1-0 /N@T-0-4-1-1-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 629
1693 a 654 569 a
 tx@Dict begin tx@NodeDict begin {4.83337 0.83337 6.6112 3.3056 2.41109
} false /N@T-0-5 16 {InitRnode } NewNode end end
 654 569 a Fr(+)682 549 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-5 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 682 549 a 638
855 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 4.25006 2.12503 2.41109
} false /N@T-0-5-0 16 {InitRnode } NewNode end end
 638 855 a Fr(9)656 835 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5 /N@T-0-5-0 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 656 835 a 673 855 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-5-1 16 {InitRnode } NewNode end end
 673
855 a Fr(10)708 835 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5 /N@T-0-5-1 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 708 835 a 664 1141 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 4.25006 2.12503 2.41109
} false /N@T-0-5-1-0 16 {InitRnode } NewNode end end
 664 1141 a
Fr(9)682 1121 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5-1 /N@T-0-5-1-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 682 1121 a 699 1141 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-5-1-1 16 {InitRnode } NewNode end end
 699 1141 a Fr(19)735
1121 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5-1 /N@T-0-5-1-1 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 735 1121 a 700 1427 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-5-1-1-0 16 {InitRnode } NewNode end end
 700 1427 a Fr(28)735 1407
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5-1-1 /N@T-0-5-1-1-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 735 1407 a 700 1713 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-5-1-1-0-0 16 {InitRnode } NewNode end end
 700 1713 a Fr(34)735 1693 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-5-1-1-0 /N@T-0-5-1-1-0-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 735
1693 a 1660 569 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-6 16 {InitRnode } NewNode end end
 1660 569 a Fr(11)1695 549 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-6 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 1695 549
a 743 855 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 4.25006 2.12503 2.41109
} false /N@T-0-6-0 16 {InitRnode } NewNode end end
 743 855 a Fr(5)761 835 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6 /N@T-0-6-0 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 761 835 a 779 855
a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 4.25006 2.12503 2.41109
} false /N@T-0-6-1 16 {InitRnode } NewNode end end
 779 855 a Fr(5)796 835 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6 /N@T-0-6-1 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 796 835 a 814 855 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-6-2 16 {InitRnode } NewNode end end
 814 855
a Fr(14)849 835 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6 /N@T-0-6-2 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 849 835 a 884 855 a
 tx@Dict begin tx@NodeDict begin {4.83337 0.83337 6.6112 3.3056 2.41109
} false /N@T-0-6-3 16 {InitRnode } NewNode end end
 884 855 a Fr(+)912
835 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6 /N@T-0-6-3 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 912 835 a 868 1141 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 4.25006 2.12503 2.41109
} false /N@T-0-6-3-0 16 {InitRnode } NewNode end end
 868 1141 a Fr(4)886 1121 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-3 /N@T-0-6-3-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end

886 1121 a 903 1141 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-6-3-1 16 {InitRnode } NewNode end end
 903 1141 a Fr(16)938 1121 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-3 /N@T-0-6-3-1 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 938
1121 a 1008 855 a
 tx@Dict begin tx@NodeDict begin {4.83337 0.83337 6.6112 3.3056 2.41109
} false /N@T-0-6-4 16 {InitRnode } NewNode end end
 1008 855 a Fr(+)1035 835 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6 /N@T-0-6-4 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1035 835
a 973 1141 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-6-4-0 16 {InitRnode } NewNode end end
 973 1141 a Fr(17)1009 1121 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-4 /N@T-0-6-4-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1009 1121 a
1044 1141 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 4.25006 2.12503 2.41109
} false /N@T-0-6-4-1 16 {InitRnode } NewNode end end
 1044 1141 a Fr(7)1062 1121 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-4 /N@T-0-6-4-1 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1062 1121 a
1096 855 a
 tx@Dict begin tx@NodeDict begin {4.83337 0.83337 6.6112 3.3056 2.41109
} false /N@T-0-6-5 16 {InitRnode } NewNode end end
 1096 855 a Fr(+)1124 835 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6 /N@T-0-6-5 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1124 835 a 1080
1141 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 4.25006 2.12503 2.41109
} false /N@T-0-6-5-0 16 {InitRnode } NewNode end end
 1080 1141 a Fr(9)1098 1121 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-5 /N@T-0-6-5-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1098 1121 a 1115
1141 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-6-5-1 16 {InitRnode } NewNode end end
 1115 1141 a Fr(19)1150 1121 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-5 /N@T-0-6-5-1 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1150 1121 a 1202
855 a
 tx@Dict begin tx@NodeDict begin {4.83337 0.83337 6.6112 3.3056 2.41109
} false /N@T-0-6-6 16 {InitRnode } NewNode end end
 1202 855 a Fr(+)1229 835 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6 /N@T-0-6-6 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1229 835 a 1185 1141
a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 4.25006 2.12503 2.41109
} false /N@T-0-6-6-0 16 {InitRnode } NewNode end end
 1185 1141 a Fr(6)1203 1121 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-6 /N@T-0-6-6-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1203 1121 a 1221 1141
a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-6-6-1 16 {InitRnode } NewNode end end
 1221 1141 a Fr(16)1256 1121 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-6 /N@T-0-6-6-1 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1256 1121 a 1334 855
a
 tx@Dict begin tx@NodeDict begin {4.83337 0.83337 6.6112 3.3056 2.41109
} false /N@T-0-6-7 16 {InitRnode } NewNode end end
 1334 855 a Fr(+)1362 835 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6 /N@T-0-6-7 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1362 835 a 1291 1141 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-6-7-0 16 {InitRnode } NewNode end end
 1291
1141 a Fr(16)1327 1121 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-7 /N@T-0-6-7-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1327 1121 a 1362 1141 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-6-7-1 16 {InitRnode } NewNode end end
 1362
1141 a Fr(16)1397 1121 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-7 /N@T-0-6-7-1 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1397 1121 a 1699 855 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-6-8 16 {InitRnode } NewNode end end
 1699
855 a Fr(20)1734 835 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6 /N@T-0-6-8 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 1734 835 a 1432 1141 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-6-8-0 16 {InitRnode } NewNode end end
 1432 1141
a Fr(14)1468 1121 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8 /N@T-0-6-8-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1468 1121 a 1503 1141 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-6-8-1 16 {InitRnode } NewNode end end
 1503 1141
a Fr(22)1538 1121 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8 /N@T-0-6-8-1 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1538 1121 a 1412 1427 a
 tx@Dict begin tx@NodeDict begin {5.55556 0.0 17.47247 8.73624 2.41109
} false /N@T-0-6-8-1-0 16 {InitRnode } NewNode end end
 1412 1427
a Fr(25ab)1484 1407 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-1 /N@T-0-6-8-1-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1484 1407 a 1557 1427 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-6-8-1-1 16 {InitRnode } NewNode end end
 1557 1427
a Fr(21)1592 1407 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-1 /N@T-0-6-8-1-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1592 1407 a 1557 1713 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-6-8-1-1-0 16 {InitRnode } NewNode end end
 1557 1713
a Fr(30)1592 1693 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-1-1 /N@T-0-6-8-1-1-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1592 1693 a 1520 1999 a
 tx@Dict begin tx@NodeDict begin {5.55556 0.0 17.47247 8.73624 2.41109
} false /N@T-0-6-8-1-1-0-0 16 {InitRnode } NewNode end end
 1520 1999
a Fr(25ab)1592 1979 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-1-1-0 /N@T-0-6-8-1-1-0-0 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1592 1979 a 1671 1141 a
 tx@Dict begin tx@NodeDict begin {4.83337 0.83337 6.6112 3.3056 2.41109
} false /N@T-0-6-8-2 16 {InitRnode } NewNode end end
 1671 1141
a Fr(+)1698 1121 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8 /N@T-0-6-8-2 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1698 1121 a 1627 1427 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-6-8-2-0 16 {InitRnode } NewNode end end
 1627 1427
a Fr(23)1663 1407 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-2 /N@T-0-6-8-2-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1663 1407 a 1698 1427 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-6-8-2-1 16 {InitRnode } NewNode end end
 1698 1427
a Fr(14)1733 1407 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-2 /N@T-0-6-8-2-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1733 1407 a 1966 1141 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-6-8-3 16 {InitRnode } NewNode end end
 1966 1141
a Fr(29)2001 1121 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8 /N@T-0-6-8-3 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2001 1121 a 1769 1427 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-6-8-3-0 16 {InitRnode } NewNode end end
 1769 1427
a Fr(24)1804 1407 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-3 /N@T-0-6-8-3-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1804 1407 a 1839 1427 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-6-8-3-1 16 {InitRnode } NewNode end end
 1839 1427
a Fr(22)1874 1407 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-3 /N@T-0-6-8-3-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1874 1407 a 1910 1427 a
 tx@Dict begin tx@NodeDict begin {4.83337 0.83337 6.6112 3.3056 2.41109
} false /N@T-0-6-8-3-2 16 {InitRnode } NewNode end end
 1910 1427
a Fr(+)1937 1407 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-3 /N@T-0-6-8-3-2 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1937 1407 a 1867 1713 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-6-8-3-2-0 16 {InitRnode } NewNode end end
 1867 1713
a Fr(23)1902 1693 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-3-2 /N@T-0-6-8-3-2-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1902 1693 a 1937 1713 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-6-8-3-2-1 16 {InitRnode } NewNode end end
 1937 1713
a Fr(24)1972 1693 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-3-2 /N@T-0-6-8-3-2-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 1972 1693 a 2163 1427 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-6-8-3-3 16 {InitRnode } NewNode end end
 2163 1427
a Fr(36)2198 1407 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-3 /N@T-0-6-8-3-3 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2198 1407 a 2008 1713 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-6-8-3-3-0 16 {InitRnode } NewNode end end
 2008 1713
a Fr(31)2043 1693 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-3-3 /N@T-0-6-8-3-3-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2043 1693 a 2078 1713 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-6-8-3-3-1 16 {InitRnode } NewNode end end
 2078 1713
a Fr(22)2114 1693 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-3-3 /N@T-0-6-8-3-3-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2114 1693 a 2149 1713 a
 tx@Dict begin tx@NodeDict begin {4.83337 0.83337 6.6112 3.3056 2.41109
} false /N@T-0-6-8-3-3-2 16 {InitRnode } NewNode end end
 2149 1713
a Fr(+)2176 1693 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-3-3 /N@T-0-6-8-3-3-2 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2176 1693 a 2106 1999 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-6-8-3-3-2-0 16 {InitRnode } NewNode end end
 2106 1999
a Fr(23)2141 1979 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-3-3-2 /N@T-0-6-8-3-3-2-0 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2141 1979 a 2176 1999 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-6-8-3-3-2-1 16 {InitRnode } NewNode end end
 2176 1999
a Fr(31)2212 1979 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-3-3-2 /N@T-0-6-8-3-3-2-1 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2212 1979 a 2317 1713 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-6-8-3-3-3 16 {InitRnode } NewNode end end
 2317 1713
a Fr(37)2353 1693 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-3-3 /N@T-0-6-8-3-3-3 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2353 1693 a 2247 1999 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-6-8-3-3-3-0 16 {InitRnode } NewNode end end
 2247 1999
a Fr(22)2282 1979 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-3-3-3 /N@T-0-6-8-3-3-3-0 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2282 1979 a 2317 1999 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-6-8-3-3-3-1 16 {InitRnode } NewNode end end
 2317 1999
a Fr(23)2353 1979 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-3-3-3 /N@T-0-6-8-3-3-3-1 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2353 1979 a 2388 1999 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-6-8-3-3-3-2 16 {InitRnode } NewNode end end
 2388 1999
a Fr(38)2423 1979 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-3-3-3 /N@T-0-6-8-3-3-3-2 InitNC { NCLine  } if end
gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2423 1979 a 2388 2285 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-6-8-3-3-3-2-0 16 {InitRnode } NewNode end end
 2388 2285
a Fr(39)2423 2265 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-3-3-3-2 /N@T-0-6-8-3-3-3-2-0 InitNC { NCLine  }
if end gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore
end
 2423 2265 a 2388 2571 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-6-8-3-3-3-2-0-0 16 {InitRnode } NewNode end end
 2388 2571
a Fr(26)2423 2550 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-8-3-3-3-2-0 /N@T-0-6-8-3-3-3-2-0-0 InitNC { NCLine
 } if end gsave 0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore
end
 2423 2550 a 2593 855 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-6-9 16 {InitRnode } NewNode end end
 2593 855 a
Fr(35)2629 835 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6 /N@T-0-6-9 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 2629 835 a 2162 1141 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 4.25006 2.12503 2.41109
} false /N@T-0-6-9-0 16 {InitRnode } NewNode end end
 2162 1141 a Fr(5)2179
1121 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9 /N@T-0-6-9-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2179 1121 a 2197 1141 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-6-9-1 16 {InitRnode } NewNode end end
 2197 1141 a Fr(24)2232
1121 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9 /N@T-0-6-9-1 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2232 1121 a 2267 1141 a
 tx@Dict begin tx@NodeDict begin {4.83337 0.83337 6.6112 3.3056 2.41109
} false /N@T-0-6-9-2 16 {InitRnode } NewNode end end
 2267 1141 a Fr(+)2295
1121 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9 /N@T-0-6-9-2 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2295 1121 a 2233 1427 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-6-9-2-0 16 {InitRnode } NewNode end end
 2233 1427 a Fr(26)2269
1407 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-2 /N@T-0-6-9-2-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2269 1407 a 2304 1427 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 4.25006 2.12503 2.41109
} false /N@T-0-6-9-2-1 16 {InitRnode } NewNode end end
 2304 1427 a Fr(4)2321
1407 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-2 /N@T-0-6-9-2-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2321 1407 a 2356 1141 a
 tx@Dict begin tx@NodeDict begin {4.83337 0.83337 6.6112 3.3056 2.41109
} false /N@T-0-6-9-3 16 {InitRnode } NewNode end end
 2356 1141 a Fr(+)2383
1121 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9 /N@T-0-6-9-3 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2383 1121 a 2339 1427 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 4.25006 2.12503 2.41109
} false /N@T-0-6-9-3-0 16 {InitRnode } NewNode end end
 2339 1427 a Fr(7)2357
1407 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-3 /N@T-0-6-9-3-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2357 1407 a 2374 1427 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-6-9-3-1 16 {InitRnode } NewNode end end
 2374 1427 a Fr(27)2410
1407 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-3 /N@T-0-6-9-3-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2410 1407 a 2462 1141 a
 tx@Dict begin tx@NodeDict begin {4.83337 0.83337 6.6112 3.3056 2.41109
} false /N@T-0-6-9-4 16 {InitRnode } NewNode end end
 2462 1141 a Fr(+)2489
1121 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9 /N@T-0-6-9-4 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2489 1121 a 2445 1427 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 4.25006 2.12503 2.41109
} false /N@T-0-6-9-4-0 16 {InitRnode } NewNode end end
 2445 1427 a Fr(9)2463
1407 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-4 /N@T-0-6-9-4-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2463 1407 a 2480 1427 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-6-9-4-1 16 {InitRnode } NewNode end end
 2480 1427 a Fr(28)2515
1407 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-4 /N@T-0-6-9-4-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2515 1407 a 2585 1141 a
 tx@Dict begin tx@NodeDict begin {4.83337 0.83337 6.6112 3.3056 2.41109
} false /N@T-0-6-9-5 16 {InitRnode } NewNode end end
 2585 1141 a Fr(+)2612
1121 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9 /N@T-0-6-9-5 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2612 1121 a 2550 1427 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-6-9-5-0 16 {InitRnode } NewNode end end
 2550 1427 a Fr(26)2586
1407 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-5 /N@T-0-6-9-5-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2586 1407 a 2621 1427 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 4.25006 2.12503 2.41109
} false /N@T-0-6-9-5-1 16 {InitRnode } NewNode end end
 2621 1427 a Fr(6)2639
1407 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-5 /N@T-0-6-9-5-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2639 1407 a 2640 1141 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-6-9-6 16 {InitRnode } NewNode end end
 2640 1141 a Fr(29)2675
1121 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9 /N@T-0-6-9-6 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2675 1121 a 2710 1141 a
 tx@Dict begin tx@NodeDict begin {4.83337 0.83337 6.6112 3.3056 2.41109
} false /N@T-0-6-9-7 16 {InitRnode } NewNode end end
 2710 1141 a Fr(+)2738
1121 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9 /N@T-0-6-9-7 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2738 1121 a 2667 1427 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-6-9-7-0 16 {InitRnode } NewNode end end
 2667 1427 a Fr(26)2703
1407 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-7 /N@T-0-6-9-7-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2703 1407 a 2738 1427 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-6-9-7-1 16 {InitRnode } NewNode end end
 2738 1427 a Fr(16)2773
1407 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-7 /N@T-0-6-9-7-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2773 1407 a 3043 1141 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-6-9-8 16 {InitRnode } NewNode end end
 3043 1141 a Fr(40)3078
1121 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9 /N@T-0-6-9-8 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3078 1121 a 2808 1427 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 4.25006 2.12503 2.41109
} false /N@T-0-6-9-8-0 16 {InitRnode } NewNode end end
 2808 1427 a Fr(5)2826
1407 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8 /N@T-0-6-9-8-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2826 1407 a 2844 1427 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-6-9-8-1 16 {InitRnode } NewNode end end
 2844 1427 a Fr(31)2879
1407 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8 /N@T-0-6-9-8-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2879 1407 a 2914 1427 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 4.25006 2.12503 2.41109
} false /N@T-0-6-9-8-2 16 {InitRnode } NewNode end end
 2914 1427 a Fr(4)2932
1407 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8 /N@T-0-6-9-8-2 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2932 1407 a 2950 1427 a
 tx@Dict begin tx@NodeDict begin {4.83337 0.83337 6.6112 3.3056 2.41109
} false /N@T-0-6-9-8-3 16 {InitRnode } NewNode end end
 2950 1427 a Fr(+)2977
1407 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8 /N@T-0-6-9-8-3 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2977 1407 a 2933 1713 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 4.25006 2.12503 2.41109
} false /N@T-0-6-9-8-3-0 16 {InitRnode } NewNode end end
 2933 1713 a Fr(7)2951
1693 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8-3 /N@T-0-6-9-8-3-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2951 1693 a 2968 1713 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-6-9-8-3-1 16 {InitRnode } NewNode end end
 2968 1713 a Fr(33)3004
1693 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8-3 /N@T-0-6-9-8-3-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3004 1693 a 3055 1427 a
 tx@Dict begin tx@NodeDict begin {4.83337 0.83337 6.6112 3.3056 2.41109
} false /N@T-0-6-9-8-4 16 {InitRnode } NewNode end end
 3055 1427 a Fr(+)3083
1407 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8 /N@T-0-6-9-8-4 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3083 1407 a 3039 1713 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 4.25006 2.12503 2.41109
} false /N@T-0-6-9-8-4-0 16 {InitRnode } NewNode end end
 3039 1713 a Fr(9)3057
1693 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8-4 /N@T-0-6-9-8-4-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3057 1693 a 3074 1713 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-6-9-8-4-1 16 {InitRnode } NewNode end end
 3074 1713 a Fr(34)3109
1693 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8-4 /N@T-0-6-9-8-4-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3109 1693 a 3110 1427 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 4.25006 2.12503 2.41109
} false /N@T-0-6-9-8-5 16 {InitRnode } NewNode end end
 3110 1427 a Fr(6)3128
1407 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8 /N@T-0-6-9-8-5 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3128 1407 a 3146 1427 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-6-9-8-6 16 {InitRnode } NewNode end end
 3146 1427 a Fr(36)3181
1407 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8 /N@T-0-6-9-8-6 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3181 1407 a 3216 1427 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-6-9-8-7 16 {InitRnode } NewNode end end
 3216 1427 a Fr(16)3252
1407 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8 /N@T-0-6-9-8-7 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3252 1407 a 3295 1427 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-6-9-8-8 16 {InitRnode } NewNode end end
 3295 1427 a Fr(41)3330
1407 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8 /N@T-0-6-9-8-8 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3330 1407 a 3145 1713 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 4.25006 2.12503 2.41109
} false /N@T-0-6-9-8-8-0 16 {InitRnode } NewNode end end
 3145 1713 a Fr(5)3162
1693 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8-8 /N@T-0-6-9-8-8-0 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3162 1693 a 3180 1713 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 4.25006 2.12503 2.41109
} false /N@T-0-6-9-8-8-1 16 {InitRnode } NewNode end end
 3180 1713 a Fr(4)3198
1693 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8-8 /N@T-0-6-9-8-8-1 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3198 1693 a 3215 1713 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 4.25006 2.12503 2.41109
} false /N@T-0-6-9-8-8-2 16 {InitRnode } NewNode end end
 3215 1713 a Fr(7)3233
1693 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8-8 /N@T-0-6-9-8-8-2 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3233 1693 a 3251 1713 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 4.25006 2.12503 2.41109
} false /N@T-0-6-9-8-8-3 16 {InitRnode } NewNode end end
 3251 1713 a Fr(9)3268
1693 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8-8 /N@T-0-6-9-8-8-3 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3268 1693 a 3286 1713 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 4.25006 2.12503 2.41109
} false /N@T-0-6-9-8-8-4 16 {InitRnode } NewNode end end
 3286 1713 a Fr(6)3303
1693 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8-8 /N@T-0-6-9-8-8-4 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3303 1693 a 3321 1713 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-6-9-8-8-5 16 {InitRnode } NewNode end end
 3321 1713 a Fr(37)3356
1693 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8-8 /N@T-0-6-9-8-8-5 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3356 1693 a 3392 1713 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-6-9-8-8-6 16 {InitRnode } NewNode end end
 3392 1713 a Fr(16)3427
1693 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8-8 /N@T-0-6-9-8-8-6 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3427 1693 a 3462 1713 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-6-9-8-8-7 16 {InitRnode } NewNode end end
 3462 1713 a Fr(38)3498
1693 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-6-9-8-8 /N@T-0-6-9-8-8-7 InitNC { NCLine  } if end gsave
0.0 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3498 1693 a 3029 569 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-7 16 {InitRnode } NewNode end end
 3029 569 a Fr(12)3064 549
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-7 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 3064 549 a 2936 855 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 4.25006 2.12503 2.41109
} false /N@T-0-7-0 16 {InitRnode } NewNode end end
 2936 855 a Fr(3)2954 835 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-7 /N@T-0-7-0 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 2954
835 a 2971 855 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 4.25006 2.12503 2.41109
} false /N@T-0-7-1 16 {InitRnode } NewNode end end
 2971 855 a Fr(9)2989 835 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-7 /N@T-0-7-1 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 2989 835
a 3006 855 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-7-2 16 {InitRnode } NewNode end end
 3006 855 a Fr(20)3042 835 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-7 /N@T-0-7-2 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 3042 835 a 3077
855 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-7-3 16 {InitRnode } NewNode end end
 3077 855 a Fr(22)3112 835 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-7 /N@T-0-7-3 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 3112 835 a 3148 855
a
 tx@Dict begin tx@NodeDict begin {4.83337 0.83337 6.6112 3.3056 2.41109
} false /N@T-0-7-4 16 {InitRnode } NewNode end end
 3148 855 a Fr(+)3175 835 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-7 /N@T-0-7-4 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 3175 835 a 3113 1141 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-7-4-0 16 {InitRnode } NewNode end end
 3113
1141 a Fr(23)3149 1121 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-7-4 /N@T-0-7-4-0 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3149 1121 a 3184 1141 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 4.25006 2.12503 2.41109
} false /N@T-0-7-4-1 16 {InitRnode } NewNode end end
 3184
1141 a Fr(3)3202 1121 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-7-4 /N@T-0-7-4-1 InitNC { NCLine  } if end gsave 0.0
SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 3202 1121 a 3100 569 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 4.25006 2.12503 2.41109
} false /N@T-0-8 16 {InitRnode } NewNode end end
 3100 569
a Fr(3)3117 549 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-8 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 3117 549 a 3135 569 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 4.25006 2.12503 2.41109
} false /N@T-0-9 16 {InitRnode } NewNode end end
 3135 569 a Fr(3)3153
549 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-9 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 3153 549 a 3210 569 a
 tx@Dict begin tx@NodeDict begin {4.83337 0.83337 6.6112 3.3056 2.41109
} false /N@T-0-10 16 {InitRnode } NewNode end end
 3210 569 a Fr(+)3238 549
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-10 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 3238 549 a 3203 855 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 4.25006 2.12503 2.41109
} false /N@T-0-10-0 16 {InitRnode } NewNode end end
 3203 855 a Fr(4)3220 835 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-10 /N@T-0-10-0 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 3220
835 a 3238 855 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 4.25006 2.12503 2.41109
} false /N@T-0-10-1 16 {InitRnode } NewNode end end
 3238 855 a Fr(5)3255 835 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-10 /N@T-0-10-1 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 3255 835
a 3281 569 a
 tx@Dict begin tx@NodeDict begin {4.83337 0.83337 6.6112 3.3056 2.41109
} false /N@T-0-11 16 {InitRnode } NewNode end end
 3281 569 a Fr(+)3308 549 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-11 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 3308 549 a 3273
855 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 4.25006 2.12503 2.41109
} false /N@T-0-11-0 16 {InitRnode } NewNode end end
 3273 855 a Fr(6)3290 835 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-11 /N@T-0-11-0 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 3290 835 a 3308 855
a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 4.25006 2.12503 2.41109
} false /N@T-0-11-1 16 {InitRnode } NewNode end end
 3308 855 a Fr(5)3326 835 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-11 /N@T-0-11-1 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 3326 835 a 3351 569 a
 tx@Dict begin tx@NodeDict begin {4.83337 0.83337 6.6112 3.3056 2.41109
} false /N@T-0-12 16 {InitRnode } NewNode end end
 3351
569 a Fr(+)3379 549 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-12 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 3379 549 a 3344 855 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 4.25006 2.12503 2.41109
} false /N@T-0-12-0 16 {InitRnode } NewNode end end
 3344 855
a Fr(7)3361 835 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-12 /N@T-0-12-0 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 3361 835 a 3379 855 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 4.25006 2.12503 2.41109
} false /N@T-0-12-1 16 {InitRnode } NewNode end end
 3379 855 a Fr(8)3397
835 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-12 /N@T-0-12-1 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 3397 835 a 3431 569 a
 tx@Dict begin tx@NodeDict begin {4.83337 0.83337 6.6112 3.3056 2.41109
} false /N@T-0-13 16 {InitRnode } NewNode end end
 3431 569 a Fr(+)3458 549
y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-13 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 3458 549 a 3414 855 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 4.25006 2.12503 2.41109
} false /N@T-0-13-0 16 {InitRnode } NewNode end end
 3414 855 a Fr(9)3432 835 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-13 /N@T-0-13-0 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 3432
835 a 3449 855 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-13-1 16 {InitRnode } NewNode end end
 3449 855 a Fr(10)3485 835 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0-13 /N@T-0-13-1 InitNC { NCLine  } if end gsave 0.0 SLW
0. setgray 0 setlinecap stroke  grestore  grestore end
 3485 835
a 3486 569 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-14 16 {InitRnode } NewNode end end
 3486 569 a Fr(11)3521 549 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-14 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 3521 549 a 3556
569 a
 tx@Dict begin tx@NodeDict begin {5.15556 0.0 8.50012 4.25006 2.41109
} false /N@T-0-15 16 {InitRnode } NewNode end end
 3556 569 a Fr(12)3592 549 y
 tx@Dict begin gsave STV newpath 0.0 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 1.0
1.0 0 0 /N@T-0 /N@T-0-15 InitNC { NCLine  } if end gsave 0.0 SLW 0.
setgray 0 setlinecap stroke  grestore  grestore end
 3592 549 a 166 2758
a Fn(Fig.)26 b(7.)g(P)m(art)g(of)g(the)g(recursion)e(tree)i(for)f(Y)-8
b(ang's)27 b(pro)s(of;)e(references)h(to)g(frequen)m(tly)f(o)s
(ccurring)166 2871 y(small)i(patterns)i(ha)m(v)m(e)g(b)s(een)f
(omitted.)h(Lab)s(els)e(indicate)h(pattern)h(n)m(um)m(b)s(ers;)e(+)h
(indicates)g(an)166 2984 y Fa(and)o Fn(-no)s(de.)166
3145 y Fk(connections)41 b(is)e(ac)m(hiev)m(ed,)i(either)f(b)s(et)m(w)m
(een)i Fj(c)p Fk(6)d(and)h(the)h(b)s(ottom)d(righ)m(t)h(side)h(of)f
(the)166 3265 y(b)s(oard,)27 b(or)g(b)s(et)m(w)m(een)i
Fj(d)p Fk(4)e(and)g(the)h(b)s(ottom)e(righ)m(t)g(side.)i(The)g(fourth)f
(lines)f(lists)h(the)g(cells)166 3386 y(that)40 b(m)m(ust)h(b)s(e)f
(uno)s(ccupied)h(at)f(this)g(p)s(oin)m(t;)g(the)h(\014fth)f(line)f
(lists)h(the)g(cells)g(that)g(the)166 3506 y(pla)m(y)m(er)31
b(m)m(ust)g(already)f(o)s(ccup)m(y)-8 b(.)32 b(The)f(follo)m(wing)d
(lines)i(describ)s(e)h(the)g(and/or)f(autotree,)166 3722
y Fa(\()47 b(pattern8)261 3835 y(//)h(called)e(by:)h(1)261
3948 y(\(\(c6)g(BR\))g(\(d4)g(BR\)\))261 4060 y(\(d6)g(e3)h(e4)f(e5)g
(e6)g(f2)g(f3)g(f4)h(f5)f(f6)g(g1)g(g2)g(g3)h(g4)f(g5)g(g6\))261
4173 y(\(c6)g(d4)h(BR\))261 4399 y([\(f3)f([\(pattern2ab)e(\(e3)h(e4\))
h(\(d4)g(f3\)\)])500 4512 y([\(pattern2ab)e(\(g2)h(g3\))h(\(f3)g
(BR\)\)]\))309 4625 y(\(e5)g([\(d6\))f(\(e4\)])500 4738
y([\(pattern13)f(\(e6)i(f4)g(f5)g(f6)g(g3)g(g4)h(g5)f(g6\))g(\(e5)g
(BR\)\)]\))309 4851 y(\(f2)g([\(pattern2ab)e(\(g1)h(g2\))h(\(f2)g
(BR\)\)])500 4964 y([\(pattern9)e(\(g5)i(g4)g(f5)g(f4)h(f3)f(e5)g(e4)g
(e3\))g(\(BR)g(f2)g(d4\)\)]\))309 5077 y(\(e3)g([\(pattern17)e(\(d6)i
(e5)g(e6)g(f2)g(f3)g(f4)h(f5)f(g1)g(g2)g(g3)g(g4)h(g5\))e(\(c6)h(d4)h
(e3)f(BR\)\)]\))261 5190 y(])166 5302 y(\))1003 5602
y Fn(Fig.)30 b(8.)h(Y)-8 b(ang's)32 b(P)m(attern)f(8)g(in)e(our)h
(notation.)1769 5952 y Fk(8)p eop
%%Page: 9 9
9 8 bop 166 353 a Fa(pattern1)166 466 y(connect:)46 b(\(TL)g(BR\))261
579 y(empty:)h(\(a1)f(a2)i(a3)f(a4)g(a5)g(a6)g(a7)h(b1)f(b2)g(b3)g(b4)g
(b5)g(b6)h(b7)f(c1)g(c2)g(c3)g(c4)h(c5)f(c6)g(c7)643
692 y(d1)g(d2)h(d3)f(d5)g(d6)g(d7)g(e1)h(e2)f(e3)g(e4)g(e5)g(e6)g(e7)h
(f1)f(f2)g(f3)g(f4)g(f5)h(f6)f(f7)g(g1)643 805 y(g2)g(g3)h(g4)f(g5)g
(g6)g(g7\))214 917 y(played:)f(\(TL)g(d4)i(BR\))261 1030
y(stats:)f(AND)f(=)i(1480,)e(OR)h(=)h(2339,)e(Leafs)h(=)g(3514)261
1143 y(paths:)g(25574/25574)166 1256 y(VALID)f(pattern.)682
1556 y Fn(Fig.)31 b(9.)g(Diagnostics)f(returned)g(after)h(v)m(erifying)
e(Y)-8 b(ang's)31 b(pro)s(of.)166 1719 y Fk(where)40
b(paren)m(theses)g(surround)f(the)g(subtrees)h(of)e(an)g
Fb(or)q Fk(-no)s(de)g(and)g(square)i(brac)m(k)m(ets)166
1839 y(surround)33 b(the)g(subtrees)i(of)d(an)g Fb(and)q
Fk(-no)s(de.)166 2009 y(In)g(the)h(pro)s(cess)g(of)f(v)m(erifying)f
(the)i(description)e(of)h(Y)-8 b(ang's)32 b(pro)s(of,)g(w)m(e)h(found)f
(only)f(one)166 2130 y(t)m(yp)s(ographical)e(error:)i(in)f(the)i
(description)e(of)h(P)m(attern)g(11)g(there)g(is)g(a)f(call)f(to)i(P)m
(attern)166 2250 y(17)h(that)g(should)h(instead)f(b)s(e)h(a)g(call)d
(to)j(P)m(attern)g(19.)166 2420 y(Our)41 b(notation)e(represen)m(ts)k
(Y)-8 b(ang's)41 b(strategy)g(in)e(ab)s(out)i(700)e(lines)h(of)g(text.)
h(The)h(di-)166 2541 y(agnostic)36 b(message)i(returned)g(b)m(y)f(our)g
(program)f(after)g(recursiv)m(ely)i(v)m(erifying)e(Y)-8
b(ang's)166 2661 y(pro)s(of)37 b(b)m(y)h(v)m(erifying)g(P)m(attern)g(1)
g(is)f(sho)m(wn)i(in)e(Fig.)f(/reffp1.diag;)g(the)i(resulting)f(tree)
166 2781 y(had)k(1480)f Fb(and)p Fk(-no)s(des,)h(2339)f
Fb(or)q Fk(-no)s(des,)h(3514)f(lea)m(v)m(es,)h(25574)f(implicit)d(ro)s
(ot-to-leaf)166 2902 y(paths.)30 b(The)g(v)m(eri\014cation)f(to)s(ok)g
(less)h(than)f(one)g(second)i(to)e(execute)i(on)e(our)h(computer,)166
3022 y(a)i(single-pro)s(cessor)g(A)m(thlon64)g(3200+)g(with)g(1)g
(gigab)m(yte)g(of)g(memory)-8 b(.)166 3370 y Fl(Ac)m(kno)m(wledgemen)m
(ts)166 3660 y Fk(The)36 b(authors)g(gratefully)e(ac)m(kno)m(wledge)j
(the)f(supp)s(ort)g(of)f(the)g(Natural)g(Sciences)i(and)166
3781 y(Engineering)21 b(Researc)m(h)i(Council)e(of)g(Canada)h(and)g
(the)g(Univ)m(ersit)m(y)h(of)e(Alb)s(erta)g(GAMES)166
3901 y(Researc)m(h)34 b(Group.)166 4229 y Fl(References)166
4512 y Fn([1])71 b(Martin)35 b(Gardner.)53 b(Mathematical)35
b(Games.)55 b Fq(Scienti\014c)36 b(Americ)-5 b(an)p Fn(,)36
b(197,)g(1957.)55 b(July)332 4625 y(pp.)30 b(145{150;)k(August)c(pp.)f
(120{127;)34 b(Octob)s(er)c(pp.)g(130{138.)166 4806 y([2])71
b(Martin)36 b(Gardner.)56 b Fq(The)38 b(Scienti\014c)g(Americ)-5
b(an)38 b(Bo)-5 b(ok)39 b(of)f(Mathematic)-5 b(al)40
b(Puzzles)e(and)332 4919 y(Diversions)p Fn(,)33 b(c)m(hapter)g(The)e
(game)i(of)g(Hex,)f(pages)h(73{83.)48 b(Simon)31 b(and)g(Sc)m(h)m
(uster,)h(New)332 5032 y(Y)-8 b(ork,)32 b(1959.)166 5213
y([3])71 b(Ry)m(an)24 b(Ha)m(yw)m(ard)g(and)f(Jac)m(k)h(v)-5
b(an)23 b(Rijswijc)m(k.)28 b(Hex)c(and)f(Com)m(binatorics)f(\(formerly)
g(Notes)332 5326 y(on)31 b(Hex\).)41 b(to)31 b(app)s(ear)f(in)f
(Discrete)i(Mathematics,)h(2005.)166 5507 y([4])71 b(Ry)m(an)33
b(B.)h(Ha)m(yw)m(ard,)f(Yngvi)f(Bj\177)-45 b(ornsson,)32
b(Mic)m(hael)h(Johanson,)f(Morgan)i(Kan,)e(Nathan)332
5620 y(P)m(o,)50 b(and)d(Jac)m(k)i(v)-5 b(an)48 b(Rijswijc)m(k.)92
b(Solving)47 b(7)33 b Fp(\002)e Fn(7)49 b(Hex:)g(Virtual)e(Connections)
g(and)1769 5952 y Fk(9)p eop
%%Page: 10 10
10 9 bop 332 323 a Fn(Game-state)64 b(Reduction.)130
b(In)60 b(H.)i(Jaap)f(v)-5 b(an)60 b(den)g(Herik,)h(Hiro)m(yuki)e
(Iida,)h(and)332 436 y(Ernst)40 b(A.)h(Heinz,)g(editors,)f
Fq(A)-5 b(dvanc)g(es)43 b(in)f(Computer)h(Games)p Fn(,)f(v)m(olume)f
(263)h(of)f Fq(IFIP)332 549 y(International)49 b(F)-7
b(e)i(der)g(ation)49 b(for)d(Information)j(Pr)-5 b(o)g(c)g(essing)p
Fn(,)46 b(pages)g(261{278.)j(Klu)m(w)m(er)332 662 y(Academic)31
b(Publishers,)c(Boston,)32 b(2003.)166 848 y([5])71 b(Ry)m(an)33
b(B.)h(Ha)m(yw)m(ard,)f(Yngvi)f(Bj\177)-45 b(ornsson,)32
b(Mic)m(hael)h(Johanson,)f(Morgan)i(Kan,)e(Nathan)332
961 y(P)m(o,)40 b(and)e(Jac)m(k)i(v)-5 b(an)38 b(Rijswijc)m(k.)64
b(Solving)37 b(7)27 b Fp(\002)e Fn(7)39 b(Hex)g(with)f(domination,)f
(\014ll-in,)f(and)332 1074 y(virtual)29 b(connections.)41
b Fq(The)-5 b(or)g(etic)g(al)35 b(Computer)f(Scienc)-5
b(e)p Fn(,)30 b(2005)i(\(to)g(app)s(ear\).)166 1260 y([6])71
b(Thomas)29 b(Maarup.)37 b(Hex)29 b({)h(ev)m(erything)e(y)m(ou)h(alw)m
(a)m(ys)g(w)m(an)m(ted)h(to)f(kno)m(w)g(ab)s(out)f(Hex)h(but)332
1373 y(w)m(ere)f(afraid)f(to)h(ask.)36 b(Master's)29
b(thesis,)e(Departmen)m(t)h(of)g(Mathematics)h(and)d(Computer)332
1486 y(Science,)31 b(Univ)m(ersit)m(y)e(of)i(Southern)e(Denmark,)i
(Odense,)f(Denmark,)g(2005.)166 1673 y([7])71 b(Thomas)30
b(Maarup.)41 b(Hex)31 b(w)m(ebpage.)332 1785 y Fa
(http://maarup.net/thomas/h)o(ex/)o Fn(,)25 b(2005.)166
1972 y([8])71 b(Sylvia)29 b(Nasar.)41 b Fq(A)32 b(Be)-5
b(autiful)33 b(Mind)p Fn(.)41 b(T)-8 b(ouc)m(hstone,)31
b(New)g(Y)-8 b(ork,)31 b(1998.)166 2158 y([9])71 b(John)35
b(Nash.)55 b(Some)35 b(Games)h(and)e(Mac)m(hines)i(for)f(Pla)m(ying)f
(Them.)54 b(T)-8 b(ec)m(hnical)35 b(Rep)s(ort)332 2271
y(D-1164,)e(Rand)d(Corp.,)g(1952.)166 2458 y([10])c(Kohei)k(Noshita.)42
b(Union-Connections)29 b(and)h(Straigh)m(tforw)m(ard)g(Winning)f
(Strategies)i(in)332 2570 y(Hex.)60 b Fq(International)40
b(Computer)g(Games)f(Asso)-5 b(ciation)39 b(Journal)p
Fn(,)f(28\(1\):3{12,)j(Marc)m(h)332 2683 y(2005.)166
2870 y([11])26 b(Stefan)43 b(Reisc)m(h.)75 b(Hex)43 b(ist)f(PSP)-8
b(A)m(CE-v)m(ollst\177)-45 b(andig.)74 b Fq(A)-5 b(cta)44
b(Informatic)-5 b(a)p Fn(,)45 b(15:167{191,)332 2983
y(1981.)166 3169 y([12])26 b(Jing)k(Y)-8 b(ang.)41 b(Jing)29
b(y)m(ang's)j(w)m(eb)e(site.)332 3282 y Fa(www.ee.umanitoba.ca/~jingy)o
(ang)o Fn(,)25 b(2003.)166 3468 y([13])h(Jing)d(Y)-8
b(ang,)26 b(Simon)c(Liao,)i(and)g(Mirek)g(P)m(a)m(wlak.)31
b(A)24 b(decomp)s(osition)f(metho)s(d)g(for)h(\014nding)332
3581 y(solution)42 b(in)g(game)i(Hex)g(7x7.)79 b(In)43
b Fq(International)j(Confer)-5 b(enc)g(e)46 b(on)e(Applic)-5
b(ation)47 b(and)332 3694 y(Development)28 b(of)f(Computer)h(Games)g
(in)f(the)h(21st)g(Century)p Fn(,)d(pages)f(96{111,)j(No)m(v)m(em)m(b)s
(er)332 3807 y(2001.)166 3993 y([14])f(Jing)37 b(Y)-8
b(ang,)40 b(Simon)c(Liao,)j(and)e(Mirek)h(P)m(a)m(wlak.)65
b(On)37 b(a)h(decomp)s(osition)f(metho)s(d)h(for)332
4106 y(\014nding)348 b(winning)f(strategy)k(in)e(Hex)h(game.)332
4219 y Fa(www.ee.umanitoba.ca/~jingy)o(ang)o(/hex)o(sol.)o(pdf)o
Fn(.,)25 b(2001.)166 4406 y([15])h(Jing)43 b(Y)-8 b(ang,)45
b(Simon)e(Liao,)h(and)f(Mirek)h(P)m(a)m(wlak.)82 b(Another)44
b(solution)e(for)i(Hex)h(7x7.)332 4519 y(T)-8 b(ec)m(hnical)30
b(rep)s(ort,)g(Univ)m(ersit)m(y)g(of)h(Manitoba,)f(Winnip)s(eg,)f
(Canada,)h(2002.)332 4631 y Fa(www.ee.umanitoba.ca/~jingy)o(ang)o(/TR.)
o(pdf)p Fn(.)166 4818 y([16])c(Jing)h(Y)-8 b(ang,)28
b(Simon)e(Liao,)i(and)f(Mirek)g(P)m(a)m(wlak.)37 b(New)27
b(Winning)f(and)h(Losing)f(P)m(ositions)332 4931 y(for)47
b(7x7)i(Hex.)91 b(In)47 b Fq(Computers)j(and)f(Games)p
Fn(,)g(v)m(olume)e(2883)i(of)e Fq(L)-5 b(e)g(ctur)g(e)49
b(Notes)g(in)332 5044 y(Computer)34 b(Scienc)-5 b(e)p
Fn(,)31 b(pages)g(230{248.)i(Springer,)c(2002.)1745 5952
y Fk(10)p eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
